unit WSOLib_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 1/10/2019 3:01:27 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: wso.dll (1)
// LIBID: {40CC9252-A25A-4D28-A906-9BD3F752934A}
// LCID: 0
// Helpfile: 
// HelpString: WSO 1.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWow64\stdole2.tlb)
// SYS_KIND: SYS_WIN64
// Errors:
//   Hint: TypeInfo 'Property' changed to 'Property_'
//   Hint: Parameter 'Object' of IFormEvents.OnHint changed to 'Object_'
//   Hint: Parameter 'Object' of FormEvents.OnHint changed to 'Object_'
//   Hint: Parameter 'Object' of IWindowSystemObject.CreateStdDispatch changed to 'Object_'
//   Hint: Member 'String' of 'IVersion' changed to 'String_'
//   Hint: Member 'Type' of 'IObject' changed to 'Type_'
//   Hint: Parameter 'Label' of IFrame.CreateHyperLink changed to 'Label_'
//   Hint: Member 'Type' of 'IListItem' changed to 'Type_'
//   Hint: Member 'Property' of 'IPropertyGrid' changed to 'Property_'
//   Hint: Member 'Type' of 'IPropertyInformation' changed to 'Type_'
//   Error creating palette bitmap of (TWindowSystemObject) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TVersion) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFrame) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TForm) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCollection) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStringCollection) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TImageList) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPen) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TBrush) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFont) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TAction) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListControlItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListBox) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TComboBox) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TEdit) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TButton) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCheckBox) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRadioButton) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStatusItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStatusBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TProgressBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TScrollBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTab) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTabControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPageControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TToolBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TMenuBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TReBarBand) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TReBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THyperLink) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPager) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCOMConnectionPoint) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCOMEvents) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TActiveXControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THeaderItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THeader) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListSubItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListViewColumns) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWorkArea) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWorkAreas) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListViewGroup) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListViewGroups) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListView) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTreeItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTreeView) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TParagraph) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRichEdit) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TUpDown) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTrackBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THotKey) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TAnimate) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TIPAddress) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDateTime) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDateTimePicker) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCalendar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TSplitter) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TSplitPanel) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPolygonGraphic) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TImageGraphic) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TLineGraphic) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPrintDialogBase) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPrintDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPageSetupDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFindReplaceDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFontDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TColorDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFileOpenSaveDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TSelectFolderDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTimer) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TResult) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTrayIcon) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRegions) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRegion) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TScreen) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THint) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TEventHandler) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWindowSystemObjectExtensions) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPrintInfo) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStdDispatch) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TBalloonTip) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWindow) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TClipboard) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTaskBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TResourceUsageGraph) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TProperty_) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPropertyGrid) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TConsole) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDocking) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TGraphicElement) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TBeginDockContext) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDockControlCreateContext) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TUndockContext) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TColor) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TLayering) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TMessageDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTaskDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TIcon) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRect) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TIconBuilder) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDesignReference) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDesign) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TExecutor) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TControlExtendedProperties) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TError) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPropertyInformation) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFileManager) : Server C:\Program Files\WSO\wso.dll contains no icons
//   WARN: Could not find file 'C:\temp\Delphi\tlibimp.sym, C:\temp\Delphi\tlibimp.sym, C:\temp\Delphi\..\bin\tlibimp.sym'
// Cmdline:
//   tlibimp  -P wso.dll
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleCtrls, Vcl.OleServer, Winapi.ActiveX;
  


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  WSOLibMajorVersion = 1;
  WSOLibMinorVersion = 0;

  LIBID_WSOLib: TGUID = '{40CC9252-A25A-4D28-A906-9BD3F752934A}';

  DIID_IControlEvents: TGUID = '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
  IID_ControlEvents: TGUID = '{CCF521F3-D5AA-4CE2-BD3D-1B4D05A8BE1A}';
  DIID_IFormEvents: TGUID = '{E83611E0-B0CD-4087-887B-4A0454176AA9}';
  IID_FormEvents: TGUID = '{1198D8CE-DCE6-4C9E-8CFF-CF0E3AB7DE87}';
  DIID_IActionEvents: TGUID = '{EFCC7766-9D3D-48CE-94B0-F0EAC186B763}';
  IID_ActionEvents: TGUID = '{F2C5B01B-E77C-411A-A958-7E77A8DA912F}';
  DIID_ITimerEvents: TGUID = '{E00E8E3D-8933-4679-B250-257A46743389}';
  IID_TimerEvents: TGUID = '{076A1D13-7601-477A-98BB-45E6328360DE}';
  DIID_IHeaderItemEvents: TGUID = '{A71BDEAC-05C9-4594-854D-671071B3C110}';
  IID_HeaderItemEvents: TGUID = '{AF9F723A-C078-431B-8723-AAB704905048}';
  DIID_IHeaderEvents: TGUID = '{09D9EF1F-9DA1-4E05-9557-B3F692E5775B}';
  IID_HeaderEvents: TGUID = '{0CEF5413-315F-4FA8-B961-F7F04F8393A8}';
  DIID_IListViewEvents: TGUID = '{A55B1FD3-30D4-479B-8F33-3978EB403A0B}';
  IID_ListViewEvents: TGUID = '{F8233D5A-7BE6-48C7-8B44-E61345BBDF5A}';
  IID_IResult: TGUID = '{50B60E8E-E889-46DB-88D8-09A416726824}';
  DIID_ITreeViewEvents: TGUID = '{FFC21772-F6D8-4AFC-A2F4-362C11DF0019}';
  IID_TreeViewEvents: TGUID = '{555949AA-0922-4BF3-926A-9DAA912861A2}';
  DIID_IRichEditEvents: TGUID = '{B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}';
  IID_RichEditEvents: TGUID = '{5B691737-293F-421D-87DA-E810555C8459}';
  DIID_IComboBoxEvents: TGUID = '{B8A6F3A3-EE81-4472-938E-F1B42513B7D2}';
  IID_ListControlEvents: TGUID = '{C3B3B3A5-DD01-4E17-900A-724AE1028B20}';
  IID_ComboBoxEvents: TGUID = '{BDC47F49-9597-4CD8-BFBE-A5A317B940F8}';
  DIID_IFindReplaceDialogEvents: TGUID = '{5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}';
  IID_FindReplaceDialogEvents: TGUID = '{0FBA8E33-6938-4E38-97ED-DD9DF0248306}';
  DIID_IFileOpenSaveDialogEvents: TGUID = '{BAE2B02E-9BD5-4D6D-824E-197CC72CF040}';
  IID_FileOpenSaveDialogEvents: TGUID = '{ED303EB3-B7F9-493B-BE0E-265D20F80E38}';
  DIID_ISelectFolderDialogEvents: TGUID = '{C5A781AE-2868-4470-972D-39BEAE4721FC}';
  IID_SelectFolderDialogEvents: TGUID = '{1B47003E-14C2-4459-8280-40BCE5C8CA90}';
  DIID_ITrayIconEvents: TGUID = '{0EE395DB-AF4D-4493-861E-B0E1966FD5DB}';
  IID_TrayIconEvents: TGUID = '{C191A5DF-072B-4331-9A83-3E985716730A}';
  DIID_IEventHandlerEvents: TGUID = '{A3BE55F5-A954-45E5-8419-CB249B836ABA}';
  IID_EventHandlerEvents: TGUID = '{7E144038-C33F-4F65-8CE2-B833F4773101}';
  DIID_IFontDialogEvents: TGUID = '{57ACC027-05B0-48A5-ACC3-AB2E31C34D28}';
  IID_FontDialogEvents: TGUID = '{9C2C742B-33B5-4BCF-AEB9-640DF4D94374}';
  DIID_IColorDialogEvents: TGUID = '{F3B57D51-7823-4E4F-907D-70E73A2C9E72}';
  IID_ColorDialogEvents: TGUID = '{B7B784F7-A097-4D24-BE47-E9842A532192}';
  DIID_IListControlEvents: TGUID = '{DDB41E4E-78C4-4E80-9065-0D20B278E837}';
  IID_IWindowSystemObject: TGUID = '{06983696-F0BE-40C1-992E-76172C1CA324}';
  CLASS_WindowSystemObject: TGUID = '{4CE85115-9B90-419F-9193-1C10C75E1383}';
  IID_IVersion: TGUID = '{AC444C04-F889-47E1-B56E-9F648D8AB009}';
  CLASS_Version: TGUID = '{60704220-E07F-4BA2-94A9-A8541D58DF1C}';
  IID_IObject: TGUID = '{AADDFAA1-E50D-4C66-8955-DFE8CF54FABB}';
  IID_IControl: TGUID = '{4397A1F9-F35F-4234-AF6A-F6327B0F784E}';
  CLASS_Control: TGUID = '{0CD57D2F-14E0-4940-B657-6AEE349C0522}';
  IID_IFrame: TGUID = '{92337C2C-1C7D-4848-8AD2-B9D33E4EB242}';
  CLASS_Frame: TGUID = '{0026E5CA-9BA2-4AC6-9BA5-A8775866DE4F}';
  IID_IForm: TGUID = '{044B381D-C581-4B9E-9C95-08B66B38468F}';
  CLASS_Form: TGUID = '{0360E66F-A21B-4BAE-9FB1-C9F251C3B733}';
  IID_ICollection: TGUID = '{92BEFD16-E781-484B-BC2D-F3B5E5DA2CC5}';
  CLASS_Collection: TGUID = '{F595597D-9EE0-45E5-9360-2AF03DA197DB}';
  IID_IStringCollection: TGUID = '{A68CF60C-30F0-4A23-B592-3CB23708733A}';
  CLASS_StringCollection: TGUID = '{749BABA2-8F65-4682-8577-AF7656779100}';
  IID_IImageList: TGUID = '{68343C86-0240-44FD-A24F-5CD611E0A33F}';
  CLASS_ImageList: TGUID = '{F36EC7DC-6EDC-44CA-B7B8-53D513BBE717}';
  IID_IGraphicObject: TGUID = '{09866D76-9782-4FD2-BA16-C469A06499C1}';
  IID_IPen: TGUID = '{A6BFFF0E-7526-495A-AEA9-7BE6005184D7}';
  CLASS_Pen: TGUID = '{74C1B713-ED60-4D29-AF2A-FD6879F28C8D}';
  IID_IBrush: TGUID = '{68FA42FE-34AC-40E9-857D-F94846E91B0A}';
  CLASS_Brush: TGUID = '{E1F77E03-CD0B-4C1B-A3B0-386BD27D4509}';
  IID_IFontEx: TGUID = '{FAE1D3D9-57B5-42D7-AF14-AC9ED6B31EA8}';
  CLASS_Font: TGUID = '{D03E82B0-C778-4B91-AE34-A98AA109CBE7}';
  IID_IAction: TGUID = '{752D00E4-9EBE-4A1A-82D8-5D62F66CB4ED}';
  CLASS_Action: TGUID = '{EDE6D37C-07A3-4A1D-B6C2-05CC89364BEF}';
  IID_IListControlItem: TGUID = '{D5F460EE-3010-4A7A-AAD2-FA3F768BAC57}';
  CLASS_ListControlItem: TGUID = '{C33DDC65-E6C2-45AC-B232-2E77B3831F9B}';
  IID_IStringsControl: TGUID = '{A1E967E4-0CEB-436B-91C0-F6A42F8D8733}';
  IID_IListControl: TGUID = '{B61BDF00-553F-401B-948C-2F7A5FDCBBBB}';
  IID_IListBox: TGUID = '{A33F2256-EF4D-409B-B1FD-0BE23F8F8C2D}';
  CLASS_ListBox: TGUID = '{F1599B69-0FFD-417A-8B4B-FD886006D8CB}';
  IID_IComboBox: TGUID = '{AA09373F-278A-49DF-9F40-74C5B92ABB6F}';
  CLASS_ComboBox: TGUID = '{CBAA954E-199E-46F6-ABA7-4521B1671E51}';
  IID_IEdit: TGUID = '{1D2D9535-7884-49AB-90C2-49955A388137}';
  CLASS_Edit: TGUID = '{DFC75B27-89ED-4652-AFDA-0223C2AA7820}';
  IID_IButtonControl: TGUID = '{CE6D21C9-132F-4990-ACB2-4C68A1D46BA2}';
  IID_IButton: TGUID = '{31DC6745-8E8E-4F4A-9F17-36651B160FE9}';
  CLASS_Button: TGUID = '{0DE86A81-8827-4281-8C0C-965C34F25147}';
  IID_ICheckBox: TGUID = '{A924A1F1-1896-462D-98E9-873E721811CE}';
  CLASS_CheckBox: TGUID = '{DECB994A-CE1B-4294-85A0-0F8C88CA671E}';
  IID_IRadioButton: TGUID = '{E4D0E174-9AB6-4BDF-9186-8905F5B54AAA}';
  CLASS_RadioButton: TGUID = '{C9D07782-E3A6-4791-B2F4-052EDA60F660}';
  IID_IStatusItem: TGUID = '{80508CDF-06EA-43C5-B41E-F2F97D516151}';
  CLASS_StatusItem: TGUID = '{629B72FD-0C82-4E52-B367-35F1DBEACF94}';
  IID_IStatusBar: TGUID = '{F61D55A1-ECC9-484B-A635-F0C5E71A8C29}';
  CLASS_StatusBar: TGUID = '{B89272AC-3FB4-41D5-8AFA-2934A7782DF3}';
  IID_IStatusControl: TGUID = '{7ADA76A6-13E2-455D-8DF1-E2C980D21BF9}';
  IID_IProgressBar: TGUID = '{16271F21-45E5-4632-BC36-E3E429B49AD8}';
  CLASS_ProgressBar: TGUID = '{97ABFEB5-CB07-4546-876F-52E9A8A300B6}';
  IID_IScrollBar: TGUID = '{FC140361-F789-48AD-AE2B-A4B5A2643FB0}';
  CLASS_ScrollBar: TGUID = '{BDC6FE54-F45E-4DC6-BD98-E0CDF2EE5EC0}';
  IID_ITab: TGUID = '{F8019994-24F1-475D-8AC4-5A1BCFF213D0}';
  CLASS_Tab: TGUID = '{E5CD43B6-862B-4D7D-8C8E-DD7EA77A8FED}';
  IID_ITabControl: TGUID = '{80249C22-E39E-4BF1-A167-8599130D19BA}';
  CLASS_TabControl: TGUID = '{ABCAF236-FA28-4A8A-B913-13E1BF8C8F54}';
  IID_IPageControl: TGUID = '{A58B708B-DDC5-40BF-AD62-D2B94731BBF3}';
  CLASS_PageControl: TGUID = '{CD5D4E56-8FEE-46B4-B06A-504087A3353F}';
  IID_IToolBar: TGUID = '{EE439DC1-D255-41A8-94E4-0E2F5518562D}';
  CLASS_ToolBar: TGUID = '{FEC224BA-A59C-4FFA-A9B0-D082D574213E}';
  IID_IMenuBar: TGUID = '{CD1140FE-95CD-4690-8DB9-48DF5989E8FA}';
  CLASS_MenuBar: TGUID = '{EAF88191-E418-40A2-A620-E974C8C9FEBC}';
  IID_IReBarBand: TGUID = '{5FFD779C-DF3C-4B7C-BA33-53ED4BE00360}';
  CLASS_ReBarBand: TGUID = '{0E865642-DC75-4050-AAAB-C22334DA5D8E}';
  IID_IReBar: TGUID = '{DBD8984A-5CB5-4B3B-94DE-62AF0C20F75F}';
  CLASS_ReBar: TGUID = '{CB4121D1-C3A2-4B6F-B1C8-A7DD6D56768C}';
  IID_IHyperLink: TGUID = '{ED777BB6-9999-4385-8647-8C72156DC3A1}';
  CLASS_HyperLink: TGUID = '{B12C9697-579C-4387-8118-E133CC95011E}';
  IID_IPager: TGUID = '{AD4463D6-4144-4D08-9A41-A296E6264F32}';
  CLASS_Pager: TGUID = '{EC7D3614-5613-483C-940C-13587EEA9DC7}';
  IID_ICOMConnectionPoint: TGUID = '{701F8D53-90B9-4D99-96A2-37C8BB960289}';
  CLASS_COMConnectionPoint: TGUID = '{A51A9DF7-18C6-4542-90E4-792234E59F66}';
  IID_ICOMEvents: TGUID = '{DC2EF81F-A8DF-488D-89C9-DCC67D7B0EE8}';
  CLASS_COMEvents: TGUID = '{A038A32E-84D9-4487-A22F-2E214D726B8D}';
  IID_IActiveXControl: TGUID = '{FF57FCA7-3701-47A2-B309-3C0F5A581CB1}';
  CLASS_ActiveXControl: TGUID = '{E797C88E-10F7-4533-8BCE-B21461E4C44E}';
  IID_IHeaderItem: TGUID = '{76B856CD-223D-4728-BA49-DCB111DAAA9D}';
  CLASS_HeaderItem: TGUID = '{ADADBEBD-A77F-4F1C-BB8C-3E135A4E7B24}';
  IID_IHeader: TGUID = '{F1901A02-8CA0-4446-AC10-D8E9B6A9E573}';
  CLASS_Header: TGUID = '{778F9702-8567-4F66-A4D8-0982A27DEEA4}';
  IID_IListSubItem: TGUID = '{8BEFFC8D-A9E8-4699-8E02-64DB4DC78DA2}';
  CLASS_ListSubItem: TGUID = '{AA4EF02B-E6A0-4B03-A5E1-845DC086F0F8}';
  IID_IListItem: TGUID = '{1FEE927E-CC8A-4DC0-9B40-E4113CDE5DA9}';
  CLASS_ListItem: TGUID = '{9D8A2B06-9809-4245-BA16-98E838E9851E}';
  IID_IListViewColumns: TGUID = '{1A015BF1-FDE4-49FF-85AE-A142E1239B16}';
  CLASS_ListViewColumns: TGUID = '{796C31A4-0609-4366-BBB8-9D9180CD2F71}';
  IID_IWorkArea: TGUID = '{91CFAE79-1DAB-4194-82FE-314EAF0106B7}';
  CLASS_WorkArea: TGUID = '{77927C0A-C35E-4C63-9B04-F911413C3DB5}';
  IID_IWorkAreas: TGUID = '{9A68D6D1-40E8-49A1-8497-E1A93F03A34E}';
  CLASS_WorkAreas: TGUID = '{5391E972-32C0-4F1C-9F76-7B616530C81C}';
  IID_IListViewGroup: TGUID = '{9C37D97F-D003-4235-9284-091565709535}';
  CLASS_ListViewGroup: TGUID = '{B01D41F3-A975-46AC-AC5E-492471995A72}';
  IID_IListViewGroups: TGUID = '{C1B38DA4-7DE0-4CEC-AFB5-A25980DB88CF}';
  CLASS_ListViewGroups: TGUID = '{EA3FDF5E-72FB-458D-AB7D-BFC54F4E9E9E}';
  IID_IListView: TGUID = '{98763204-A34A-4206-9151-8DDF2445F52B}';
  CLASS_ListView: TGUID = '{F10B642B-0248-47AB-98BE-064679369341}';
  IID_ITreeItem: TGUID = '{FFFF9989-481D-4921-949C-B283BD06CB44}';
  CLASS_TreeItem: TGUID = '{7E418404-66BE-4BAD-BF58-5FF5C2EC6461}';
  IID_ITreeView: TGUID = '{A6034589-820F-4165-9EEE-AE1E97BFB9B1}';
  CLASS_TreeView: TGUID = '{EC4E51B8-FD99-4567-B7AF-35923BA873D3}';
  IID_IParagraph: TGUID = '{C15C0ABE-967F-4A17-9EA9-BC68A2855C0D}';
  CLASS_Paragraph: TGUID = '{011C3F5F-B0DE-43C1-AB98-E39A866581F8}';
  IID_IRichEdit: TGUID = '{C775712D-FA95-49EE-971D-6DD3BE4FE703}';
  CLASS_RichEdit: TGUID = '{A7E24C6A-70FD-49EC-88C1-9CB154A5694A}';
  IID_IUpDown: TGUID = '{F09EE7EC-728F-4D8B-AE8E-0F5A113FD36E}';
  CLASS_UpDown: TGUID = '{CF0349E6-1D95-407F-AB16-A7E7655A4E29}';
  IID_ITrackBar: TGUID = '{D47DC012-3D4E-4412-8A06-E747160435E0}';
  CLASS_TrackBar: TGUID = '{A8C81557-CFD6-44B0-9052-7796F14C8BC8}';
  IID_IHotKey: TGUID = '{E9013635-B5D5-48D7-81A4-41D3AFF5A717}';
  CLASS_HotKey: TGUID = '{A1D64491-07E0-495A-9D75-A70E9CB74660}';
  IID_IAnimate: TGUID = '{CD27766E-91BF-4D27-BA1E-CBFE3CB55BD1}';
  CLASS_Animate: TGUID = '{AA404E97-A554-477B-A43B-89E52A39A857}';
  IID_IIPAddress: TGUID = '{CCC32DB0-A7E0-4947-A757-9534AB58027F}';
  CLASS_IPAddress: TGUID = '{0BFAA6C7-85DB-4604-B347-D22BBF1ED539}';
  IID_IDateTime: TGUID = '{E5197962-B022-4902-B92C-B46F2CCC8875}';
  CLASS_DateTime: TGUID = '{C7D11662-B228-4F86-B3CE-BF46105C11DE}';
  IID_IDateTimeControl: TGUID = '{0E53C57C-CAC1-4290-8C57-559AD095F9F3}';
  IID_IDateTimePicker: TGUID = '{7FCABADD-F460-4049-ABBC-79821C613284}';
  CLASS_DateTimePicker: TGUID = '{BF5ABFD2-861D-46C5-8D8B-71CEEF71C304}';
  IID_ICalendar: TGUID = '{EE27A882-AD8E-4723-AAA9-E10CFD472F75}';
  CLASS_Calendar: TGUID = '{AF05FB0E-2821-42AA-A82E-700CDE44DED9}';
  IID_ISplitter: TGUID = '{76A49C6D-284D-45F0-856E-6E9714281AC5}';
  CLASS_Splitter: TGUID = '{7D0A06A9-4E80-4EE9-BAB2-E0DD01977C83}';
  IID_ISplitPanel: TGUID = '{7BB7C6EB-B2E7-4472-94C0-B22CC0457E80}';
  CLASS_SplitPanel: TGUID = '{DB86A3A1-87F4-4A14-9365-6C34389A4399}';
  IID_IPolygon: TGUID = '{01F209D7-27B9-41CD-8DAE-0DAF2875A8FA}';
  CLASS_PolygonGraphic: TGUID = '{AC10C8A0-0594-4037-B2C9-B1BFEDE24095}';
  IID_IImage: TGUID = '{DAF6D7B8-1AB3-4DAC-8BDA-4E5234AD8731}';
  CLASS_ImageGraphic: TGUID = '{01D29721-73ED-4ADB-8962-C01A1AF8B3E2}';
  IID_ILine: TGUID = '{D6D9AAA2-739F-4807-814E-0E7692E18E62}';
  CLASS_LineGraphic: TGUID = '{CB36D4EE-1658-4B65-8007-2FB541CF28A5}';
  IID_IPrintDialogBase: TGUID = '{0E609193-AF42-4ECC-9897-4F279B659D1F}';
  CLASS_PrintDialogBase: TGUID = '{754676B2-A48B-4544-A305-E478C118F452}';
  IID_IPrintDialog: TGUID = '{A48A739A-BAAF-4693-B8AE-B594065B8D17}';
  CLASS_PrintDialog: TGUID = '{71AA2D61-1A6B-4E41-B5DC-5F915505D06D}';
  IID_IPageSetupDialog: TGUID = '{740AE358-3778-4F25-89E8-CAE218F9F14C}';
  CLASS_PageSetupDialog: TGUID = '{EFABB2AB-2E73-4258-8867-0A3F6B83FA9D}';
  IID_IFindReplaceDialog: TGUID = '{A156794D-9CF8-4AC9-84B8-D657F8ECCAF1}';
  CLASS_FindReplaceDialog: TGUID = '{07FCB37E-7674-4C5B-B629-0594E7C0C86B}';
  IID_IFontDialog: TGUID = '{7C57CB6F-E98B-4E58-9813-DD46E590B79B}';
  CLASS_FontDialog: TGUID = '{0B39FC7B-C4DB-4274-985D-85B3E9C3807B}';
  IID_IColorDialog: TGUID = '{5A8CE32D-69D3-45F1-BE74-531AEBA638DB}';
  CLASS_ColorDialog: TGUID = '{F8E020E6-C2D9-4A32-A2D6-EA546FC10142}';
  IID_IFileOpenSaveDialog: TGUID = '{B7ED6BDC-9791-4B8F-979E-990CD76A394A}';
  CLASS_FileOpenSaveDialog: TGUID = '{EA4D8731-DBB6-44E1-8DA1-AF2C5C7B0FA7}';
  IID_ISelectFolderDialog: TGUID = '{6F63CD78-C21E-4A64-90EC-90FCE7789897}';
  CLASS_SelectFolderDialog: TGUID = '{A7A1BE6F-CBCC-42FB-9B22-42C9FA301CA6}';
  IID_ITimer: TGUID = '{A70DBA20-F39F-4B55-BC04-7E5FE2C495B7}';
  CLASS_Timer: TGUID = '{0AC27C50-69E5-42BE-B898-71643BDC1452}';
  CLASS_WindowSystemControl: TGUID = '{8E57EFA4-E91E-44FC-B69E-7A3BC1F5AB8D}';
  CLASS_Result: TGUID = '{AC548905-86D6-4CCE-BEE2-971293959F64}';
  IID_ITrayIcon: TGUID = '{4AAC7C83-5BF6-44A6-AD8A-FD431D23DD79}';
  CLASS_TrayIcon: TGUID = '{068282F2-0924-43C2-AA31-DA63DC197716}';
  IID_IRegions: TGUID = '{179741BD-E3DA-4A18-B9C1-039785089B03}';
  CLASS_Regions: TGUID = '{EE8A5452-8F4D-4174-8E30-45C82F702852}';
  IID_IRegion: TGUID = '{BB9FCB6F-2C14-4568-BADF-E7C0B022A654}';
  CLASS_Region: TGUID = '{2DCB8485-3B43-4669-BB37-06FD8264641A}';
  IID_IScreen: TGUID = '{D0D86627-9E34-438F-92E2-8EC9C1ABE8C5}';
  CLASS_Screen: TGUID = '{8749AC27-4B1C-4CDE-9207-D178BB261191}';
  IID_IHint: TGUID = '{00017030-B197-4EBC-804F-748CF210108E}';
  CLASS_Hint: TGUID = '{EBE2E3B5-3999-4939-BABC-6C365D510982}';
  IID_IEventHandler: TGUID = '{5273BA8F-609D-4959-9A72-92AD3EADA060}';
  CLASS_EventHandler: TGUID = '{41D6E4B0-5B25-4CFD-8CCF-C6E48510B853}';
  IID_IWindowSystemObjectExtensions: TGUID = '{1DD6DE1E-DB95-45FE-B2A8-655177B8E8DB}';
  CLASS_WindowSystemObjectExtensions: TGUID = '{5D2DE0FD-53BC-4E93-8EB3-9EDC90E17DB6}';
  IID_IPrintInfo: TGUID = '{5C615F2E-9B71-4394-9C88-95EE52F97849}';
  CLASS_PrintInfo: TGUID = '{98C54138-A5B8-41AC-BDA6-D404983C28C6}';
  IID_IStdDispatch: TGUID = '{C0615DB9-9C1D-42B0-8EB5-8CC8AF95B110}';
  CLASS_StdDispatch: TGUID = '{CBEEA14C-EA62-4D5B-9EAD-68D66DDEE5FB}';
  IID_IBalloonTip: TGUID = '{A16801B1-8BA4-4F0D-A589-86443B09037C}';
  CLASS_BalloonTip: TGUID = '{8FC25BBF-06C3-44E5-8CE7-1ACB880AA2FD}';
  IID_IWindow: TGUID = '{BEF454E2-AC05-40F6-BCFD-300B70CAD3FC}';
  CLASS_Window: TGUID = '{8C57DD2E-6E39-4FC2-9553-A615CF101306}';
  DIID_IClipboardEvents: TGUID = '{FBAA7B25-99FF-4B15-832D-5A85EF97F814}';
  IID_ClipboardEvents: TGUID = '{1CD8E952-7F59-4429-81FB-CADDDD77AE72}';
  IID_IClipboard: TGUID = '{3CA40ACA-6385-4080-BFC9-82437A0FF90D}';
  CLASS_Clipboard: TGUID = '{28BF1809-98E1-48B7-9F7C-017D04E2D3D5}';
  IID_ITaskBar: TGUID = '{805EF906-67A7-4A9D-B026-1F5AA4E9303C}';
  CLASS_TaskBar: TGUID = '{928AB172-9BE8-4B27-B0F2-397EEC34A01B}';
  IID_IResourceUsageGraph: TGUID = '{F61F2DE3-D729-4ADB-B1E2-6F4B496000F9}';
  CLASS_ResourceUsageGraph: TGUID = '{E0D914D3-A622-4649-A3CC-13FB8E6E8622}';
  IID_IProperty: TGUID = '{0C78AFD5-6C85-4D18-971A-B3BDC0FD0FFE}';
  CLASS_Property_: TGUID = '{2ADF1BFC-FCC0-4745-8E39-3C77CAB64AA5}';
  IID_IPropertyGrid: TGUID = '{A10865D8-EEF9-412E-AD54-36B52F1F5D3F}';
  CLASS_PropertyGrid: TGUID = '{ADBC97EA-F49D-4202-BB1E-A74171F96D70}';
  IID_IConsole: TGUID = '{501853C5-0B67-4372-866C-9D082B219BFE}';
  CLASS_Console: TGUID = '{226BEEBC-76FC-4F75-A8A8-49A616F53E72}';
  IID_IDocking: TGUID = '{7C323E2F-57F2-46DB-BAD5-CBCFD7CCE9C8}';
  CLASS_Docking: TGUID = '{D5714DD5-762C-47AD-9307-BAD6E4943740}';
  IID_IGraphicElement: TGUID = '{73A618A4-D771-4BE2-BFE6-4ADB0B0C3703}';
  CLASS_GraphicElement: TGUID = '{F9AB6C8E-63BB-4387-996A-5863E57448C8}';
  IID_IBeginDockContext: TGUID = '{A93F1DA9-1F87-41F2-93F7-56F33DE002D5}';
  CLASS_BeginDockContext: TGUID = '{FEDE1EF2-35E4-43FA-8CDF-70237464A5F7}';
  IID_IDockControlCreateContext: TGUID = '{AE0D893C-7F42-466A-8F50-3D2216828B4C}';
  CLASS_DockControlCreateContext: TGUID = '{51E740C2-1E0C-4210-9166-B415D576ECCD}';
  IID_IUndockContext: TGUID = '{92FAA2DB-8F11-4A1F-8B05-CCD1A97098E3}';
  CLASS_UndockContext: TGUID = '{8B1E5C0F-AD5A-4190-AA06-46F80739EE0E}';
  IID_IColor: TGUID = '{C5EE68E8-EB57-491A-B7A9-50AC5EA07B79}';
  CLASS_Color: TGUID = '{586E9139-E5FC-42F2-A8E7-FB1A08D48722}';
  IID_ILayering: TGUID = '{B23A2C07-3A36-4ADC-B695-94B8814AAF80}';
  CLASS_Layering: TGUID = '{0452D4D7-59A2-47F1-B1E4-88D990218CD9}';
  IID_IMessageDialog: TGUID = '{FA9F97C8-A273-412E-A708-285BEB3CABC5}';
  CLASS_MessageDialog: TGUID = '{E5667C71-281A-4BEB-8AA8-D5A6E37B3887}';
  IID_ITaskDialog: TGUID = '{AE2631CE-2F75-4936-92D2-F2FD0097954C}';
  CLASS_TaskDialog: TGUID = '{B07BBF12-ADD3-450B-9275-57E3C3FED8E6}';
  DIID_ITaskDialogEvents: TGUID = '{58A2A29A-ABEB-4AAB-ABD4-03CC83B59915}';
  IID_TaskDialogEvents: TGUID = '{FEA1F5D3-2AF5-41A3-B732-59BB92E999AA}';
  IID_IIcon: TGUID = '{8EF324A3-C801-49E1-B07C-D32A0589746F}';
  CLASS_Icon: TGUID = '{0FE54E05-7C4F-41B1-B3D0-B3A47DF39664}';
  IID_IRect: TGUID = '{85BCA1CF-0215-432E-B290-13947A00DA8F}';
  CLASS_Rect: TGUID = '{CDCA72CB-FCFC-4665-8E80-6D11DC40001C}';
  IID_IIconBuilder: TGUID = '{362DA7FC-F126-4E3B-BB58-14C126CEB063}';
  CLASS_IconBuilder: TGUID = '{7D63C657-FE7F-407F-816F-B69DD9F9C7B3}';
  IID_IDesignReference: TGUID = '{7C5DD379-4C1A-4F52-B04B-6D0972964779}';
  CLASS_DesignReference: TGUID = '{6A0CCB51-748A-4BB4-8C8D-B53AA4E6331A}';
  IID_IDesign: TGUID = '{FBE98002-0D8F-4AC8-808C-22DEDE52BF1F}';
  CLASS_Design: TGUID = '{8E2F23C0-FD7F-4F83-B1C1-D5DF18883172}';
  DIID_IDesignEvents: TGUID = '{8C46AC3B-00A3-42F5-B82F-E292FD49F53D}';
  IID_DesignEvents: TGUID = '{FAE90BDF-6BDD-4C3C-8433-5C0DFEC216DC}';
  IID_IExecutor: TGUID = '{F17D5798-9B71-46B9-B6D3-3FA3AA87C423}';
  CLASS_Executor: TGUID = '{8ED75ACC-F9E8-417C-9329-38165D0109E9}';
  DIID_IExecutorEvents: TGUID = '{885A7D58-B7A1-4CA6-BC6F-7C58C09C7812}';
  IID_ExecutorEvents: TGUID = '{9D263BBD-9C2D-4825-B6AF-12110F16D8BB}';
  IID_IControlExtendedProperties: TGUID = '{EEB664B4-E288-4CC3-B9C2-ACAB3EFA0ECA}';
  CLASS_ControlExtendedProperties: TGUID = '{ACDFD97B-7FEB-4EB4-B4E0-4878D7FC4845}';
  IID_IError: TGUID = '{7190AE34-CBEA-432A-8044-D9B496B7778E}';
  CLASS_Error: TGUID = '{FDD4908E-F653-4775-B747-8CDCCA595566}';
  IID_IPropertyInformation: TGUID = '{EC6D466C-E844-4FD0-8521-6AE08E452DCA}';
  CLASS_PropertyInformation: TGUID = '{C2FE69B5-FFD4-4777-A648-EE33D19E1253}';
  IID_IFileManager: TGUID = '{FEA423F8-BE89-4285-9279-194AC034221A}';
  CLASS_FileManager: TGUID = '{68FCDD27-B049-428F-8C63-D8CF8717E539}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IControlEvents = dispinterface;
  ControlEvents = interface;
  IFormEvents = dispinterface;
  FormEvents = interface;
  IActionEvents = dispinterface;
  ActionEvents = interface;
  ITimerEvents = dispinterface;
  TimerEvents = interface;
  IHeaderItemEvents = dispinterface;
  HeaderItemEvents = interface;
  IHeaderEvents = dispinterface;
  HeaderEvents = interface;
  IListViewEvents = dispinterface;
  ListViewEvents = interface;
  IResult = interface;
  ITreeViewEvents = dispinterface;
  TreeViewEvents = interface;
  IRichEditEvents = dispinterface;
  RichEditEvents = interface;
  IComboBoxEvents = dispinterface;
  ListControlEvents = interface;
  ComboBoxEvents = interface;
  IFindReplaceDialogEvents = dispinterface;
  FindReplaceDialogEvents = interface;
  IFileOpenSaveDialogEvents = dispinterface;
  FileOpenSaveDialogEvents = interface;
  ISelectFolderDialogEvents = dispinterface;
  SelectFolderDialogEvents = interface;
  ITrayIconEvents = dispinterface;
  TrayIconEvents = interface;
  IEventHandlerEvents = dispinterface;
  EventHandlerEvents = interface;
  IFontDialogEvents = dispinterface;
  FontDialogEvents = interface;
  IColorDialogEvents = dispinterface;
  ColorDialogEvents = interface;
  IListControlEvents = dispinterface;
  IWindowSystemObject = interface;
  IVersion = interface;
  IObject = interface;
  IControl = interface;
  IFrame = interface;
  IForm = interface;
  ICollection = interface;
  IStringCollection = interface;
  IImageList = interface;
  IGraphicObject = interface;
  IPen = interface;
  IBrush = interface;
  IFontEx = interface;
  IAction = interface;
  IListControlItem = interface;
  IStringsControl = interface;
  IListControl = interface;
  IListBox = interface;
  IComboBox = interface;
  IEdit = interface;
  IButtonControl = interface;
  IButton = interface;
  ICheckBox = interface;
  IRadioButton = interface;
  IStatusItem = interface;
  IStatusBar = interface;
  IStatusControl = interface;
  IProgressBar = interface;
  IScrollBar = interface;
  ITab = interface;
  ITabControl = interface;
  IPageControl = interface;
  IToolBar = interface;
  IMenuBar = interface;
  IReBarBand = interface;
  IReBar = interface;
  IHyperLink = interface;
  IPager = interface;
  ICOMConnectionPoint = interface;
  ICOMEvents = interface;
  IActiveXControl = interface;
  IHeaderItem = interface;
  IHeader = interface;
  IListSubItem = interface;
  IListItem = interface;
  IListViewColumns = interface;
  IWorkArea = interface;
  IWorkAreas = interface;
  IListViewGroup = interface;
  IListViewGroups = interface;
  IListView = interface;
  ITreeItem = interface;
  ITreeView = interface;
  IParagraph = interface;
  IRichEdit = interface;
  IUpDown = interface;
  ITrackBar = interface;
  IHotKey = interface;
  IAnimate = interface;
  IIPAddress = interface;
  IDateTime = interface;
  IDateTimeControl = interface;
  IDateTimePicker = interface;
  ICalendar = interface;
  ISplitter = interface;
  ISplitPanel = interface;
  IPolygon = interface;
  IImage = interface;
  ILine = interface;
  IPrintDialogBase = interface;
  IPrintDialog = interface;
  IPageSetupDialog = interface;
  IFindReplaceDialog = interface;
  IFontDialog = interface;
  IColorDialog = interface;
  IFileOpenSaveDialog = interface;
  ISelectFolderDialog = interface;
  ITimer = interface;
  ITrayIcon = interface;
  IRegions = interface;
  IRegion = interface;
  IRegionDisp = dispinterface;
  IScreen = interface;
  IHint = interface;
  IEventHandler = interface;
  IWindowSystemObjectExtensions = interface;
  IPrintInfo = interface;
  IStdDispatch = interface;
  IBalloonTip = interface;
  IWindow = interface;
  IClipboardEvents = dispinterface;
  ClipboardEvents = interface;
  IClipboard = interface;
  ITaskBar = interface;
  IResourceUsageGraph = interface;
  IProperty = interface;
  IPropertyGrid = interface;
  IConsole = interface;
  IDocking = interface;
  IGraphicElement = interface;
  IBeginDockContext = interface;
  IDockControlCreateContext = interface;
  IUndockContext = interface;
  IColor = interface;
  ILayering = interface;
  IMessageDialog = interface;
  ITaskDialog = interface;
  ITaskDialogEvents = dispinterface;
  TaskDialogEvents = interface;
  IIcon = interface;
  IRect = interface;
  IIconBuilder = interface;
  IDesignReference = interface;
  IDesign = interface;
  IDesignEvents = dispinterface;
  DesignEvents = interface;
  IExecutor = interface;
  IExecutorEvents = dispinterface;
  ExecutorEvents = interface;
  IControlExtendedProperties = interface;
  IError = interface;
  IPropertyInformation = interface;
  IFileManager = interface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  WindowSystemObject = IWindowSystemObject;
  Version = IVersion;
  Control = IControl;
  Frame = IFrame;
  Form = IForm;
  Collection = ICollection;
  StringCollection = IStringCollection;
  ImageList = IImageList;
  Pen = IPen;
  Brush = IBrush;
  Font = IFontEx;
  Action = IAction;
  ListControlItem = IListControlItem;
  ListBox = IListBox;
  ComboBox = IComboBox;
  Edit = IEdit;
  Button = IButton;
  CheckBox = ICheckBox;
  RadioButton = IRadioButton;
  StatusItem = IStatusItem;
  StatusBar = IStatusBar;
  ProgressBar = IProgressBar;
  ScrollBar = IScrollBar;
  Tab = ITab;
  TabControl = ITabControl;
  PageControl = IPageControl;
  ToolBar = IToolBar;
  MenuBar = IMenuBar;
  ReBarBand = IReBarBand;
  ReBar = IReBar;
  HyperLink = IHyperLink;
  Pager = IPager;
  COMConnectionPoint = ICOMConnectionPoint;
  COMEvents = ICOMEvents;
  ActiveXControl = IActiveXControl;
  HeaderItem = IHeaderItem;
  Header = IHeader;
  ListSubItem = IListSubItem;
  ListItem = IListItem;
  ListViewColumns = IListViewColumns;
  WorkArea = IWorkArea;
  WorkAreas = IWorkAreas;
  ListViewGroup = IListViewGroup;
  ListViewGroups = IListViewGroups;
  ListView = IListView;
  TreeItem = ITreeItem;
  TreeView = ITreeView;
  Paragraph = IParagraph;
  RichEdit = IRichEdit;
  UpDown = IUpDown;
  TrackBar = ITrackBar;
  HotKey = IHotKey;
  Animate = IAnimate;
  IPAddress = IIPAddress;
  DateTime = IDateTime;
  DateTimePicker = IDateTimePicker;
  Calendar = ICalendar;
  Splitter = ISplitter;
  SplitPanel = ISplitPanel;
  PolygonGraphic = IPolygon;
  ImageGraphic = IImage;
  LineGraphic = ILine;
  PrintDialogBase = IPrintDialogBase;
  PrintDialog = IPrintDialog;
  PageSetupDialog = IPageSetupDialog;
  FindReplaceDialog = IFindReplaceDialog;
  FontDialog = IFontDialog;
  ColorDialog = IColorDialog;
  FileOpenSaveDialog = IFileOpenSaveDialog;
  SelectFolderDialog = ISelectFolderDialog;
  Timer = ITimer;
  WindowSystemControl = IForm;
  Result = IResult;
  TrayIcon = ITrayIcon;
  Regions = IRegions;
  Region = IRegion;
  Screen = IScreen;
  Hint = IHint;
  EventHandler = IEventHandler;
  WindowSystemObjectExtensions = IWindowSystemObjectExtensions;
  PrintInfo = IPrintInfo;
  StdDispatch = IStdDispatch;
  BalloonTip = IBalloonTip;
  Window = IWindow;
  Clipboard = IClipboard;
  TaskBar = ITaskBar;
  ResourceUsageGraph = IResourceUsageGraph;
  Property_ = IProperty;
  PropertyGrid = IPropertyGrid;
  Console = IConsole;
  Docking = IDocking;
  GraphicElement = IGraphicElement;
  BeginDockContext = IBeginDockContext;
  DockControlCreateContext = IDockControlCreateContext;
  UndockContext = IUndockContext;
  Color = IColor;
  Layering = ILayering;
  MessageDialog = IMessageDialog;
  TaskDialog = ITaskDialog;
  Icon = IIcon;
  Rect = IRect;
  IconBuilder = IIconBuilder;
  DesignReference = IDesignReference;
  Design = IDesign;
  Executor = IExecutor;
  ControlExtendedProperties = IControlExtendedProperties;
  Error = IError;
  PropertyInformation = IPropertyInformation;
  FileManager = IFileManager;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  PUserType1 = ^TGUID; {*}
  PShortint1 = ^Shortint; {*}
  PPShortint1 = ^PShortint1; {*}
  PUserType2 = ^DISPPARAMS; {*}


// *********************************************************************//
// DispIntf:  IControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {EE85ACDD-7499-4719-A173-FCC56CE6FA1D}
// *********************************************************************//
  IControlEvents = dispinterface
    ['{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
  end;

// *********************************************************************//
// Interface: ControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {CCF521F3-D5AA-4CE2-BD3D-1B4D05A8BE1A}
// *********************************************************************//
  ControlEvents = interface(IDispatch)
    ['{CCF521F3-D5AA-4CE2-BD3D-1B4D05A8BE1A}']
    function OnClick(const Sender: IDispatch): HResult; stdcall;
    function OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer): HResult; stdcall;
    function OnChange(const Sender: IDispatch): HResult; stdcall;
    function OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer): HResult; stdcall;
    function OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer): HResult; stdcall;
    function OnMouseEnter(const Sender: IDispatch): HResult; stdcall;
    function OnMouseLeave(const Sender: IDispatch): HResult; stdcall;
    function OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer): HResult; stdcall;
    function OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer): HResult; stdcall;
    function OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                       Flags: Integer): HResult; stdcall;
    function OnResize(const Sender: IDispatch): HResult; stdcall;
    function OnMove(const Sender: IDispatch): HResult; stdcall;
    function OnDestroy(const Sender: IDispatch): HResult; stdcall;
    function OnShow(const Sender: IDispatch): HResult; stdcall;
    function OnHide(const Sender: IDispatch): HResult; stdcall;
    function OnEnabledChange(const Sender: IDispatch): HResult; stdcall;
    function OnSetFocus(const Sender: IDispatch): HResult; stdcall;
    function OnKillFocus(const Sender: IDispatch): HResult; stdcall;
    function OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                          y: Integer): HResult; stdcall;
    function OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                         const BeginDockContext: IDispatch): HResult; stdcall;
    function OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                 const DockTarget: IDispatch; 
                                 const DockControlCreateContext: IDispatch): HResult; stdcall;
    function OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch): HResult; stdcall;
    function OnUndock(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IFormEvents
// Flags:     (4096) Dispatchable
// GUID:      {E83611E0-B0CD-4087-887B-4A0454176AA9}
// *********************************************************************//
  IFormEvents = dispinterface
    ['{E83611E0-B0CD-4087-887B-4A0454176AA9}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
    procedure OnCloseQuery(const Sender: IDispatch; const ResultPtr: IDispatch); dispid 19;
    procedure OnClose(const Sender: IDispatch); dispid 20;
    procedure OnActiveControlChange(const Sender: IDispatch); dispid 21;
    procedure OnHitTest(const Sender: IDispatch; x: Integer; y: Integer; const ResultPtr: IDispatch); dispid 22;
    procedure OnHint(const Sender: IDispatch; const Object_: IDispatch); dispid 23;
    procedure OnMinimize(const Sender: IDispatch; const ResultPtr: IDispatch); dispid 24;
    procedure OnMaximize(const Sender: IDispatch; const ResultPtr: IDispatch); dispid 25;
    procedure OnRestore(const Sender: IDispatch; const ResultPtr: IDispatch); dispid 26;
    procedure OnCopyData(const Sender: IDispatch; const Data: WideString); dispid 27;
    procedure OnActivate(const Sender: IDispatch; Flags: Integer); dispid 28;
    procedure OnEnterSizeMove(const Sender: IDispatch; Flags: Integer); dispid 29;
    procedure OnExitSizeMove(const Sender: IDispatch; Flags: Integer); dispid 30;
  end;

// *********************************************************************//
// Interface: FormEvents
// Flags:     (4096) Dispatchable
// GUID:      {1198D8CE-DCE6-4C9E-8CFF-CF0E3AB7DE87}
// *********************************************************************//
  FormEvents = interface(ControlEvents)
    ['{1198D8CE-DCE6-4C9E-8CFF-CF0E3AB7DE87}']
    function OnCloseQuery(const Sender: IDispatch; const ResultPtr: IDispatch): HResult; stdcall;
    function OnClose(const Sender: IDispatch): HResult; stdcall;
    function OnActiveControlChange(const Sender: IDispatch): HResult; stdcall;
    function OnHitTest(const Sender: IDispatch; x: Integer; y: Integer; const ResultPtr: IDispatch): HResult; stdcall;
    function OnHint(const Sender: IDispatch; const Object_: IDispatch): HResult; stdcall;
    function OnMinimize(const Sender: IDispatch; const ResultPtr: IDispatch): HResult; stdcall;
    function OnMaximize(const Sender: IDispatch; const ResultPtr: IDispatch): HResult; stdcall;
    function OnRestore(const Sender: IDispatch; const ResultPtr: IDispatch): HResult; stdcall;
    function OnCopyData(const Sender: IDispatch; const Data: WideString): HResult; stdcall;
    function OnActivate(const Sender: IDispatch; Flags: Integer): HResult; stdcall;
    function OnEnterSizeMove(const Sender: IDispatch; Flags: Integer): HResult; stdcall;
    function OnExitSizeMove(const Sender: IDispatch; Flags: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IActionEvents
// Flags:     (4096) Dispatchable
// GUID:      {EFCC7766-9D3D-48CE-94B0-F0EAC186B763}
// *********************************************************************//
  IActionEvents = dispinterface
    ['{EFCC7766-9D3D-48CE-94B0-F0EAC186B763}']
    procedure OnExecute(const Sender: IDispatch); dispid 1;
    procedure OnUpdate(const Sender: IDispatch); dispid 2;
  end;

// *********************************************************************//
// Interface: ActionEvents
// Flags:     (4096) Dispatchable
// GUID:      {F2C5B01B-E77C-411A-A958-7E77A8DA912F}
// *********************************************************************//
  ActionEvents = interface(IDispatch)
    ['{F2C5B01B-E77C-411A-A958-7E77A8DA912F}']
    function OnExecute(const Sender: IDispatch): HResult; stdcall;
    function OnUpdate(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  ITimerEvents
// Flags:     (4096) Dispatchable
// GUID:      {E00E8E3D-8933-4679-B250-257A46743389}
// *********************************************************************//
  ITimerEvents = dispinterface
    ['{E00E8E3D-8933-4679-B250-257A46743389}']
    procedure OnExecute(const Sender: IDispatch); dispid 1;
  end;

// *********************************************************************//
// Interface: TimerEvents
// Flags:     (4096) Dispatchable
// GUID:      {076A1D13-7601-477A-98BB-45E6328360DE}
// *********************************************************************//
  TimerEvents = interface(IDispatch)
    ['{076A1D13-7601-477A-98BB-45E6328360DE}']
    function OnExecute(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IHeaderItemEvents
// Flags:     (4096) Dispatchable
// GUID:      {A71BDEAC-05C9-4594-854D-671071B3C110}
// *********************************************************************//
  IHeaderItemEvents = dispinterface
    ['{A71BDEAC-05C9-4594-854D-671071B3C110}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnResize(const Sender: IDispatch); dispid 2;
    procedure OnBeginTrack(const Sender: IDispatch; Button: Integer; const ResultPtr: IDispatch); dispid 3;
    procedure OnTrack(const Sender: IDispatch; Width: Integer; Button: Integer; 
                      const ResultPtr: IDispatch); dispid 4;
    procedure OnDividerDblClick(const Sender: IDispatch; const ResultPtr: IDispatch); dispid 5;
    procedure OnBeginDrag(const Sender: IDispatch; Button: Integer; const ResultPtr: IDispatch); dispid 6;
    procedure OnEndDrag(const Sender: IDispatch; Button: Integer; const ResultPtr: IDispatch); dispid 7;
  end;

// *********************************************************************//
// Interface: HeaderItemEvents
// Flags:     (4096) Dispatchable
// GUID:      {AF9F723A-C078-431B-8723-AAB704905048}
// *********************************************************************//
  HeaderItemEvents = interface(IDispatch)
    ['{AF9F723A-C078-431B-8723-AAB704905048}']
    function OnClick(const Sender: IDispatch): HResult; stdcall;
    function OnResize(const Sender: IDispatch): HResult; stdcall;
    function OnBeginTrack(const Sender: IDispatch; Button: Integer; const ResultPtr: IDispatch): HResult; stdcall;
    function OnTrack(const Sender: IDispatch; Width: Integer; Button: Integer; 
                     const ResultPtr: IDispatch): HResult; stdcall;
    function OnDividerDblClick(const Sender: IDispatch; const ResultPtr: IDispatch): HResult; stdcall;
    function OnBeginDrag(const Sender: IDispatch; Button: Integer; const ResultPtr: IDispatch): HResult; stdcall;
    function OnEndDrag(const Sender: IDispatch; Button: Integer; const ResultPtr: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IHeaderEvents
// Flags:     (4096) Dispatchable
// GUID:      {09D9EF1F-9DA1-4E05-9557-B3F692E5775B}
// *********************************************************************//
  IHeaderEvents = dispinterface
    ['{09D9EF1F-9DA1-4E05-9557-B3F692E5775B}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
    procedure OnColumnClick(const Sender: IDispatch; const Item: IDispatch); dispid 19;
    procedure OnColumnResize(const Sender: IDispatch; const Item: IDispatch); dispid 20;
  end;

// *********************************************************************//
// Interface: HeaderEvents
// Flags:     (4096) Dispatchable
// GUID:      {0CEF5413-315F-4FA8-B961-F7F04F8393A8}
// *********************************************************************//
  HeaderEvents = interface(ControlEvents)
    ['{0CEF5413-315F-4FA8-B961-F7F04F8393A8}']
    function OnColumnClick(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnColumnResize(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IListViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {A55B1FD3-30D4-479B-8F33-3978EB403A0B}
// *********************************************************************//
  IListViewEvents = dispinterface
    ['{A55B1FD3-30D4-479B-8F33-3978EB403A0B}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
    procedure OnColumnClick(const Sender: IDispatch; const Item: IDispatch); dispid 19;
    procedure OnColumnResize(const Sender: IDispatch; const Item: IDispatch); dispid 20;
    procedure OnData(const Sender: IDispatch; const Item: IDispatch); dispid 21;
    procedure OnItemCheck(const Sender: IDispatch; const Item: IDispatch); dispid 22;
    procedure OnEdited(const Sender: IDispatch; const Item: IDispatch; const NewText: IResult); dispid 23;
    procedure OnBeginEdit(const Sender: IDispatch; const Item: IDispatch; const ResultPtr: IResult); dispid 24;
    procedure OnGroupLinkClick(const Sender: IDispatch; const Group: IDispatch); dispid 25;
    procedure OnDrawItem(const Sender: IDispatch; const Item: IDispatch); dispid 26;
    procedure OnSubItemEdited(const Sender: IDispatch; const Item: IDispatch; SubItem: Integer; 
                              const NewText: IResult); dispid 27;
    procedure OnBeginSubItemEdit(const Sender: IDispatch; const Item: IDispatch; SubItem: Integer; 
                                 const ResultPtr: IResult); dispid 28;
  end;

// *********************************************************************//
// Interface: ListViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {F8233D5A-7BE6-48C7-8B44-E61345BBDF5A}
// *********************************************************************//
  ListViewEvents = interface(HeaderEvents)
    ['{F8233D5A-7BE6-48C7-8B44-E61345BBDF5A}']
    function OnData(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnItemCheck(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnEdited(const Sender: IDispatch; const Item: IDispatch; const NewText: IResult): HResult; stdcall;
    function OnBeginEdit(const Sender: IDispatch; const Item: IDispatch; const ResultPtr: IResult): HResult; stdcall;
    function OnGroupLinkClick(const Sender: IDispatch; const Group: IDispatch): HResult; stdcall;
    function OnDrawItem(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnSubItemEdited(const Sender: IDispatch; const Item: IDispatch; SubItem: Integer; 
                             const NewText: IResult): HResult; stdcall;
    function OnBeginSubItemEdit(const Sender: IDispatch; const Item: IDispatch; SubItem: Integer; 
                                const ResultPtr: IResult): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IResult
// Flags:     (4096) Dispatchable
// GUID:      {50B60E8E-E889-46DB-88D8-09A416726824}
// *********************************************************************//
  IResult = interface(IDispatch)
    ['{50B60E8E-E889-46DB-88D8-09A416726824}']
    function Put(newVal: OleVariant): HResult; stdcall;
    function Get_Value(out pVal: OleVariant): HResult; stdcall;
    function Set_Value(pVal: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  ITreeViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {FFC21772-F6D8-4AFC-A2F4-362C11DF0019}
// *********************************************************************//
  ITreeViewEvents = dispinterface
    ['{FFC21772-F6D8-4AFC-A2F4-362C11DF0019}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
    procedure OnEdited(const Sender: IDispatch; const Item: IDispatch; const NewText: IResult); dispid 19;
    procedure OnExpanding(const Sender: IDispatch; const Item: IDispatch); dispid 20;
    procedure OnExpanded(const Sender: IDispatch; const Item: IDispatch); dispid 21;
    procedure OnCollapsing(const Sender: IDispatch; const Item: IDispatch); dispid 22;
    procedure OnCollapsed(const Sender: IDispatch; const Item: IDispatch); dispid 23;
    procedure OnItemCheck(const Sender: IDispatch; const Item: IDispatch); dispid 24;
    procedure OnBeginEdit(const Sender: IDispatch; const Item: IDispatch; const ResultPtr: IResult); dispid 25;
    procedure OnDrawItem(const Sender: IDispatch; const Item: IDispatch); dispid 26;
  end;

// *********************************************************************//
// Interface: TreeViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {555949AA-0922-4BF3-926A-9DAA912861A2}
// *********************************************************************//
  TreeViewEvents = interface(ControlEvents)
    ['{555949AA-0922-4BF3-926A-9DAA912861A2}']
    function OnEdited(const Sender: IDispatch; const Item: IDispatch; const NewText: IResult): HResult; stdcall;
    function OnExpanding(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnExpanded(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnCollapsing(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnCollapsed(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnItemCheck(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
    function OnBeginEdit(const Sender: IDispatch; const Item: IDispatch; const ResultPtr: IResult): HResult; stdcall;
    function OnDrawItem(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IRichEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}
// *********************************************************************//
  IRichEditEvents = dispinterface
    ['{B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
    procedure OnSelChange(const Sender: IDispatch); dispid 19;
  end;

// *********************************************************************//
// Interface: RichEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {5B691737-293F-421D-87DA-E810555C8459}
// *********************************************************************//
  RichEditEvents = interface(ControlEvents)
    ['{5B691737-293F-421D-87DA-E810555C8459}']
    function OnSelChange(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IComboBoxEvents
// Flags:     (4096) Dispatchable
// GUID:      {B8A6F3A3-EE81-4472-938E-F1B42513B7D2}
// *********************************************************************//
  IComboBoxEvents = dispinterface
    ['{B8A6F3A3-EE81-4472-938E-F1B42513B7D2}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
    procedure OnDrawItem(const Sender: IDispatch; const Item: IDispatch); dispid 19;
    procedure OnDropDown(const Sender: IDispatch); dispid 20;
  end;

// *********************************************************************//
// Interface: ListControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {C3B3B3A5-DD01-4E17-900A-724AE1028B20}
// *********************************************************************//
  ListControlEvents = interface(ControlEvents)
    ['{C3B3B3A5-DD01-4E17-900A-724AE1028B20}']
    function OnDrawItem(const Sender: IDispatch; const Item: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ComboBoxEvents
// Flags:     (4096) Dispatchable
// GUID:      {BDC47F49-9597-4CD8-BFBE-A5A317B940F8}
// *********************************************************************//
  ComboBoxEvents = interface(ListControlEvents)
    ['{BDC47F49-9597-4CD8-BFBE-A5A317B940F8}']
    function OnDropDown(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IFindReplaceDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}
// *********************************************************************//
  IFindReplaceDialogEvents = dispinterface
    ['{5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}']
    procedure OnFind(const Sender: IDispatch); dispid 1;
    procedure OnReplace(const Sender: IDispatch); dispid 2;
    procedure OnReplaceAll(const Sender: IDispatch); dispid 3;
    procedure OnClose(const Sender: IDispatch); dispid 4;
    procedure OnHelp(const Sender: IDispatch); dispid 5;
  end;

// *********************************************************************//
// Interface: FindReplaceDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {0FBA8E33-6938-4E38-97ED-DD9DF0248306}
// *********************************************************************//
  FindReplaceDialogEvents = interface(IDispatch)
    ['{0FBA8E33-6938-4E38-97ED-DD9DF0248306}']
    function OnFind(const Sender: IDispatch): HResult; stdcall;
    function OnReplace(const Sender: IDispatch): HResult; stdcall;
    function OnReplaceAll(const Sender: IDispatch): HResult; stdcall;
    function OnClose(const Sender: IDispatch): HResult; stdcall;
    function OnHelp(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IFileOpenSaveDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {BAE2B02E-9BD5-4D6D-824E-197CC72CF040}
// *********************************************************************//
  IFileOpenSaveDialogEvents = dispinterface
    ['{BAE2B02E-9BD5-4D6D-824E-197CC72CF040}']
    procedure OnCloseQuery(const Sender: IDispatch; const ResultPtr: IDispatch); dispid 1;
    procedure OnChange(const Sender: IDispatch); dispid 2;
    procedure OnFolderChange(const Sender: IDispatch); dispid 3;
    procedure OnTypeChange(const Sender: IDispatch); dispid 4;
    procedure OnHelp(const Sender: IDispatch); dispid 5;
  end;

// *********************************************************************//
// Interface: FileOpenSaveDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {ED303EB3-B7F9-493B-BE0E-265D20F80E38}
// *********************************************************************//
  FileOpenSaveDialogEvents = interface(IDispatch)
    ['{ED303EB3-B7F9-493B-BE0E-265D20F80E38}']
    function OnCloseQuery(const Sender: IDispatch; const ResultPtr: IDispatch): HResult; stdcall;
    function OnChange(const Sender: IDispatch): HResult; stdcall;
    function OnFolderChange(const Sender: IDispatch): HResult; stdcall;
    function OnTypeChange(const Sender: IDispatch): HResult; stdcall;
    function OnHelp(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  ISelectFolderDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {C5A781AE-2868-4470-972D-39BEAE4721FC}
// *********************************************************************//
  ISelectFolderDialogEvents = dispinterface
    ['{C5A781AE-2868-4470-972D-39BEAE4721FC}']
    procedure OnChange(const Sender: IDispatch); dispid 1;
  end;

// *********************************************************************//
// Interface: SelectFolderDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {1B47003E-14C2-4459-8280-40BCE5C8CA90}
// *********************************************************************//
  SelectFolderDialogEvents = interface(IDispatch)
    ['{1B47003E-14C2-4459-8280-40BCE5C8CA90}']
    function OnChange(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  ITrayIconEvents
// Flags:     (4096) Dispatchable
// GUID:      {0EE395DB-AF4D-4493-861E-B0E1966FD5DB}
// *********************************************************************//
  ITrayIconEvents = dispinterface
    ['{0EE395DB-AF4D-4493-861E-B0E1966FD5DB}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 3;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 5;
  end;

// *********************************************************************//
// Interface: TrayIconEvents
// Flags:     (4096) Dispatchable
// GUID:      {C191A5DF-072B-4331-9A83-3E985716730A}
// *********************************************************************//
  TrayIconEvents = interface(IDispatch)
    ['{C191A5DF-072B-4331-9A83-3E985716730A}']
    function OnClick(const Sender: IDispatch): HResult; stdcall;
    function OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer): HResult; stdcall;
    function OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer): HResult; stdcall;
    function OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                       Flags: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IEventHandlerEvents
// Flags:     (4096) Dispatchable
// GUID:      {A3BE55F5-A954-45E5-8419-CB249B836ABA}
// *********************************************************************//
  IEventHandlerEvents = dispinterface
    ['{A3BE55F5-A954-45E5-8419-CB249B836ABA}']
    procedure OnExecute(const Sender: IDispatch); dispid 1;
  end;

// *********************************************************************//
// Interface: EventHandlerEvents
// Flags:     (4096) Dispatchable
// GUID:      {7E144038-C33F-4F65-8CE2-B833F4773101}
// *********************************************************************//
  EventHandlerEvents = interface(IDispatch)
    ['{7E144038-C33F-4F65-8CE2-B833F4773101}']
    function OnExecute(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IFontDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {57ACC027-05B0-48A5-ACC3-AB2E31C34D28}
// *********************************************************************//
  IFontDialogEvents = dispinterface
    ['{57ACC027-05B0-48A5-ACC3-AB2E31C34D28}']
    procedure OnHelp(const Sender: IDispatch); dispid 1;
    procedure OnApply(const Sender: IDispatch); dispid 2;
  end;

// *********************************************************************//
// Interface: FontDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {9C2C742B-33B5-4BCF-AEB9-640DF4D94374}
// *********************************************************************//
  FontDialogEvents = interface(IDispatch)
    ['{9C2C742B-33B5-4BCF-AEB9-640DF4D94374}']
    function OnHelp(const Sender: IDispatch): HResult; stdcall;
    function OnApply(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IColorDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {F3B57D51-7823-4E4F-907D-70E73A2C9E72}
// *********************************************************************//
  IColorDialogEvents = dispinterface
    ['{F3B57D51-7823-4E4F-907D-70E73A2C9E72}']
    procedure OnHelp(const Sender: IDispatch); dispid 1;
  end;

// *********************************************************************//
// Interface: ColorDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {B7B784F7-A097-4D24-BE47-E9842A532192}
// *********************************************************************//
  ColorDialogEvents = interface(IDispatch)
    ['{B7B784F7-A097-4D24-BE47-E9842A532192}']
    function OnHelp(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IListControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {DDB41E4E-78C4-4E80-9065-0D20B278E837}
// *********************************************************************//
  IListControlEvents = dispinterface
    ['{DDB41E4E-78C4-4E80-9065-0D20B278E837}']
    procedure OnClick(const Sender: IDispatch); dispid 1;
    procedure OnDblClick(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                         Flags: Integer); dispid 2;
    procedure OnChange(const Sender: IDispatch); dispid 3;
    procedure OnKeyDown(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 4;
    procedure OnKeyUp(const Sender: IDispatch; Key: Integer; Flags: Integer); dispid 5;
    procedure OnMouseEnter(const Sender: IDispatch); dispid 6;
    procedure OnMouseLeave(const Sender: IDispatch); dispid 7;
    procedure OnMouseDown(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                          Flags: Integer); dispid 8;
    procedure OnMouseMove(const Sender: IDispatch; x: Integer; y: Integer; Flags: Integer); dispid 9;
    procedure OnMouseUp(const Sender: IDispatch; x: Integer; y: Integer; Button: Integer; 
                        Flags: Integer); dispid 10;
    procedure OnResize(const Sender: IDispatch); dispid 11;
    procedure OnMove(const Sender: IDispatch); dispid 12;
    procedure OnDestroy(const Sender: IDispatch); dispid 13;
    procedure OnShow(const Sender: IDispatch); dispid 14;
    procedure OnHide(const Sender: IDispatch); dispid 15;
    procedure OnEnabledChange(const Sender: IDispatch); dispid 16;
    procedure OnSetFocus(const Sender: IDispatch); dispid 17;
    procedure OnKillFocus(const Sender: IDispatch); dispid 18;
    procedure OnMouseWheel(const Sender: IDispatch; Keys: Integer; Delta: Integer; x: Integer; 
                           y: Integer); dispid 100;
    procedure OnBeginDock(const Sender: IDispatch; const DockTarget: IDispatch; 
                          const BeginDockContext: IDispatch); dispid 101;
    procedure OnDockControlCreate(const Sender: IDispatch; const Control: IDispatch; 
                                  const DockTarget: IDispatch; 
                                  const DockControlCreateContext: IDispatch); dispid 102;
    procedure OnUndockQuery(const Sender: IDispatch; const UndockContext: IDispatch); dispid 103;
    procedure OnUndock(const Sender: IDispatch); dispid 104;
    procedure OnDrawItem(const Sender: IDispatch; const Item: IDispatch); dispid 19;
  end;

// *********************************************************************//
// Interface: IWindowSystemObject
// Flags:     (4096) Dispatchable
// GUID:      {06983696-F0BE-40C1-992E-76172C1CA324}
// *********************************************************************//
  IWindowSystemObject = interface(IDispatch)
    ['{06983696-F0BE-40C1-992E-76172C1CA324}']
    function CreateForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateImageList(out pControl: IDispatch): HResult; stdcall;
    function CreateTimer(out pControl: IDispatch): HResult; stdcall;
    function CreateCOMEvents(const COMObject: IDispatch; out pControl: IDispatch): HResult; stdcall;
    function CreateFindDialog(const FindText: WideString; Flags: LongWord; out pResult: IDispatch): HResult; stdcall;
    function CreateReplaceDialog(const FindText: WideString; const ReplaceText: WideString; 
                                 Flags: LongWord; out pResult: IDispatch): HResult; stdcall;
    function CreateTrayIcon(out pControl: IDispatch): HResult; stdcall;
    function Run: HResult; stdcall;
    function Stop: HResult; stdcall;
    function Get_Controls(out pVal: IDispatch): HResult; stdcall;
    function Translate(const Text: WideString; out pResult: OleVariant): HResult; stdcall;
    function LoadImage(const Path: WideString; out pResult: IDispatch): HResult; stdcall;
    function Get_Version(out pVal: IDispatch): HResult; stdcall;
    function Get_Debug(out pVal: WordBool): HResult; stdcall;
    function Set_Debug(pVal: WordBool): HResult; stdcall;
    function About: HResult; stdcall;
    function Get_Regions(out pVal: IDispatch): HResult; stdcall;
    function Get_PixelsPerInch(out pVal: Integer): HResult; stdcall;
    function Set_PixelsPerInch(pVal: Integer): HResult; stdcall;
    function Get_Screen(out pVal: IDispatch): HResult; stdcall;
    function CreateEventHandler(out pControl: IDispatch): HResult; stdcall;
    function Get_EnableVisualStyles(out pVal: WordBool): HResult; stdcall;
    function Set_EnableVisualStyles(pVal: WordBool): HResult; stdcall;
    function CreatePrintInfo(out pControl: IDispatch): HResult; stdcall;
    function CreateStdDispatch(const TypeLibrary: WideString; Major: Integer; Minor: Integer; 
                               const Guid: WideString; const Object_: IUnknown; 
                               out pControl: IDispatch): HResult; stdcall;
    function Get_Console(out pControl: IDispatch): HResult; stdcall;
    function Get_ActiveForm(out pVal: IDispatch): HResult; stdcall;
    function Get_ForegroundForm(out pVal: IDispatch): HResult; stdcall;
    function VirtualKeyCodeToString(VirtualKey: LongWord; UseKeyboardState: WordBool; 
                                    out pVal: WideString): HResult; stdcall;
    function SaveLayout(out Layout: WideString): HResult; stdcall;
    function LoadLayout(const Layout: WideString): HResult; stdcall;
    function Get_Color(out Color: IDispatch): HResult; stdcall;
    function Get_EnableVistaFileDialog(out pVal: WordBool): HResult; stdcall;
    function Set_EnableVistaFileDialog(pVal: WordBool): HResult; stdcall;
    function LoadIcon(const FileName: WideString; out Result: IDispatch): HResult; stdcall;
    function LoadSysIcon(ID: Integer; out Result: IDispatch): HResult; stdcall;
    function GetIconCount(const FileName: WideString; out Result: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IVersion
// Flags:     (4096) Dispatchable
// GUID:      {AC444C04-F889-47E1-B56E-9F648D8AB009}
// *********************************************************************//
  IVersion = interface(IDispatch)
    ['{AC444C04-F889-47E1-B56E-9F648D8AB009}']
    function Get_Major(out pVal: Integer): HResult; stdcall;
    function Get_Minor(out pVal: Integer): HResult; stdcall;
    function Get_BuildNumber(out pVal: Integer): HResult; stdcall;
    function Get_String_(out pVal: WideString): HResult; stdcall;
    function Get_Trial(out pVal: WordBool): HResult; stdcall;
    function Get_Url(out pVal: WideString): HResult; stdcall;
    function Get_Copyright(out pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IObject
// Flags:     (4096) Dispatchable
// GUID:      {AADDFAA1-E50D-4C66-8955-DFE8CF54FABB}
// *********************************************************************//
  IObject = interface(IDispatch)
    ['{AADDFAA1-E50D-4C66-8955-DFE8CF54FABB}']
    function Get_Type_(out pVal: WideString): HResult; stdcall;
    function Get_UserData(out pVal: OleVariant): HResult; stdcall;
    function Set_UserData(pVal: OleVariant): HResult; stdcall;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult; stdcall;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IControl
// Flags:     (4096) Dispatchable
// GUID:      {4397A1F9-F35F-4234-AF6A-F6327B0F784E}
// *********************************************************************//
  IControl = interface(IObject)
    ['{4397A1F9-F35F-4234-AF6A-F6327B0F784E}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Show: HResult; stdcall;
    function Hide: HResult; stdcall;
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function Get_Enabled(out pVal: WordBool): HResult; stdcall;
    function Set_Enabled(pVal: WordBool): HResult; stdcall;
    function Destroy: HResult; stdcall;
    function Get_Parent(out pVal: IDispatch): HResult; stdcall;
    function Get_Root(out pVal: IDispatch): HResult; stdcall;
    function Get_Form(out pVal: IDispatch): HResult; stdcall;
    function Get_Left(out pVal: Integer): HResult; stdcall;
    function Set_Left(pVal: Integer): HResult; stdcall;
    function Get_Top(out pVal: Integer): HResult; stdcall;
    function Set_Top(pVal: Integer): HResult; stdcall;
    function Get_Width(out pVal: Integer): HResult; stdcall;
    function Set_Width(pVal: Integer): HResult; stdcall;
    function Get_Height(out pVal: Integer): HResult; stdcall;
    function Set_Height(pVal: Integer): HResult; stdcall;
    function Get_Right(out pVal: Integer): HResult; stdcall;
    function Set_Right(pVal: Integer): HResult; stdcall;
    function Get_Bottom(out pVal: Integer): HResult; stdcall;
    function Set_Bottom(pVal: Integer): HResult; stdcall;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult; stdcall;
    function CenterControl: HResult; stdcall;
    function Get_MinWidth(out pVal: Word): HResult; stdcall;
    function Set_MinWidth(pVal: Word): HResult; stdcall;
    function Get_MinHeight(out pVal: Word): HResult; stdcall;
    function Set_MinHeight(pVal: Word): HResult; stdcall;
    function Get_MaxWidth(out pVal: Word): HResult; stdcall;
    function Set_MaxWidth(pVal: Word): HResult; stdcall;
    function Get_MaxHeight(out pVal: Word): HResult; stdcall;
    function Set_MaxHeight(pVal: Word): HResult; stdcall;
    function Get_Align(out pVal: Word): HResult; stdcall;
    function Set_Align(pVal: Word): HResult; stdcall;
    function Get_Color(out pVal: LongWord): HResult; stdcall;
    function Set_Color(pVal: LongWord): HResult; stdcall;
    function Get_ParentColor(out pVal: WordBool): HResult; stdcall;
    function Set_ParentColor(pVal: WordBool): HResult; stdcall;
    function Get_Font(out pVal: IDispatch): HResult; stdcall;
    function Set_Font(const pVal: IDispatch): HResult; stdcall;
    function _Set_Font(const pVal: IDispatch): HResult; stdcall;
    function Get_ParentFont(out pVal: WordBool): HResult; stdcall;
    function Set_ParentFont(pVal: WordBool): HResult; stdcall;
    function Get_Pen(out pVal: IDispatch): HResult; stdcall;
    function Set_Pen(const pVal: IDispatch): HResult; stdcall;
    function _Set_Pen(const pVal: IDispatch): HResult; stdcall;
    function Get_Brush(out pVal: IDispatch): HResult; stdcall;
    function Set_Brush(const pVal: IDispatch): HResult; stdcall;
    function _Set_Brush(const pVal: IDispatch): HResult; stdcall;
    function Get_PopupMenu(out pVal: IDispatch): HResult; stdcall;
    function Set_PopupMenu(const pVal: IDispatch): HResult; stdcall;
    function _Set_PopupMenu(const pVal: IDispatch): HResult; stdcall;
    function Get_Border(out pVal: WordBool): HResult; stdcall;
    function Set_Border(pVal: WordBool): HResult; stdcall;
    function SetFocus: HResult; stdcall;
    function Get_Focused(out pVal: WordBool): HResult; stdcall;
    function Get_TabOrder(out pVal: Integer): HResult; stdcall;
    function Set_TabOrder(pVal: Integer): HResult; stdcall;
    function Get_TabStop(out pVal: WordBool): HResult; stdcall;
    function Set_TabStop(pVal: WordBool): HResult; stdcall;
    function Get_Name(out pVal: WideString): HResult; stdcall;
    function Set_Name(const pVal: WideString): HResult; stdcall;
    function Get_ID(out pVal: WideString): HResult; stdcall;
    function Set_ID(const pVal: WideString): HResult; stdcall;
    function Get_ClientWidth(out pVal: Integer): HResult; stdcall;
    function Set_ClientWidth(pVal: Integer): HResult; stdcall;
    function Get_ClientHeight(out pVal: Integer): HResult; stdcall;
    function Set_ClientHeight(pVal: Integer): HResult; stdcall;
    function Get_Cursor(out pVal: OleVariant): HResult; stdcall;
    function Set_Cursor(pVal: OleVariant): HResult; stdcall;
    function Get_Hint(out pVal: OleVariant): HResult; stdcall;
    function Set_Hint(pVal: OleVariant): HResult; stdcall;
    function Get_ThemeApplicationName(out pVal: WideString): HResult; stdcall;
    function Set_ThemeApplicationName(const pVal: WideString): HResult; stdcall;
    function Get_Docking(out pVal: IDispatch): HResult; stdcall;
    function Get_Layering(out pVal: IDispatch): HResult; stdcall;
    function Set_OnClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnDblClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnChange(Param1: OleVariant): HResult; stdcall;
    function Set_OnKeyDown(Param1: OleVariant): HResult; stdcall;
    function Set_OnKeyUp(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseEnter(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseLeave(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseUp(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseMove(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseDown(Param1: OleVariant): HResult; stdcall;
    function Set_OnResize(Param1: OleVariant): HResult; stdcall;
    function Set_OnMove(Param1: OleVariant): HResult; stdcall;
    function Set_OnDestroy(Param1: OleVariant): HResult; stdcall;
    function Set_OnShow(Param1: OleVariant): HResult; stdcall;
    function Set_OnHide(Param1: OleVariant): HResult; stdcall;
    function Set_OnEnabledChange(Param1: OleVariant): HResult; stdcall;
    function Set_OnSetFocus(Param1: OleVariant): HResult; stdcall;
    function Set_OnKillFocus(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseWheel(Param1: OleVariant): HResult; stdcall;
    function Set_OnBeginDock(Param1: OleVariant): HResult; stdcall;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult; stdcall;
    function Set_OnUndockQuery(Param1: OleVariant): HResult; stdcall;
    function Set_OnUndock(Param1: OleVariant): HResult; stdcall;
    function Repaint: HResult; stdcall;
    function Get_Debug(out pVal: LongWord): HResult; stdcall;
    function Set_Debug(pVal: LongWord): HResult; stdcall;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult; stdcall;
    function Set_ParentMouseWheel(pVal: WordBool): HResult; stdcall;
    function Get_StopMouseWheel(out pVal: WordBool): HResult; stdcall;
    function Set_StopMouseWheel(pVal: WordBool): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult; stdcall;
    function Get_MaskEvents(out pVal: WordBool): HResult; stdcall;
    function Set_MaskEvents(pVal: WordBool): HResult; stdcall;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFrame
// Flags:     (4096) Dispatchable
// GUID:      {92337C2C-1C7D-4848-8AD2-B9D33E4EB242}
// *********************************************************************//
  IFrame = interface(IControl)
    ['{92337C2C-1C7D-4848-8AD2-B9D33E4EB242}']
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult; stdcall;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult; stdcall;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult; stdcall;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult; stdcall;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult; stdcall;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult; stdcall;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult; stdcall;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateStatusBar(out pControl: IDispatch): HResult; stdcall;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult; stdcall;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult; stdcall;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult; stdcall;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult; stdcall;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult; stdcall;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult; stdcall;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult; stdcall;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult; stdcall;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult; stdcall;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult; stdcall;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult; stdcall;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult; stdcall;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult; stdcall;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult; stdcall;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult; stdcall;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult; stdcall;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult; stdcall;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult; stdcall;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult; stdcall;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult; stdcall;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult; stdcall;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult; stdcall;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult; stdcall;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult; stdcall;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult; stdcall;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult; stdcall;
    function Get_Controls(out pVal: IDispatch): HResult; stdcall;
    function Get_BorderWidth(out pVal: LongWord): HResult; stdcall;
    function Set_BorderWidth(pVal: LongWord): HResult; stdcall;
    function Get_BevelWidth(out pVal: LongWord): HResult; stdcall;
    function Set_BevelWidth(pVal: LongWord): HResult; stdcall;
    function Get_BevelOuter(out pVal: Integer): HResult; stdcall;
    function Set_BevelOuter(pVal: Integer): HResult; stdcall;
    function Get_BevelInner(out pVal: Integer): HResult; stdcall;
    function Set_BevelInner(pVal: Integer): HResult; stdcall;
    function Get_GraphFont(out pVal: IDispatch): HResult; stdcall;
    function Set_GraphFont(const pVal: IDispatch): HResult; stdcall;
    function _Set_GraphFont(const pVal: IDispatch): HResult; stdcall;
    function Get_AutoScroll(out pVal: WordBool): HResult; stdcall;
    function Set_AutoScroll(pVal: WordBool): HResult; stdcall;
    function Get_Tracking(out pVal: WordBool): HResult; stdcall;
    function Set_Tracking(pVal: WordBool): HResult; stdcall;
    function Get_CaptureMouse(out pVal: Word): HResult; stdcall;
    function Set_CaptureMouse(pVal: Word): HResult; stdcall;
    function Get_ParentBackground(out pVal: WordBool): HResult; stdcall;
    function Set_ParentBackground(pVal: WordBool): HResult; stdcall;
    function BeginUpdate: HResult; stdcall;
    function EndUpdate: HResult; stdcall;
    function Get_BorderParentBackground(out pVal: WordBool): HResult; stdcall;
    function Set_BorderParentBackground(pVal: WordBool): HResult; stdcall;
    function Get_AutoSplit(out pVal: WordBool): HResult; stdcall;
    function Set_AutoSplit(pVal: WordBool): HResult; stdcall;
    function Get_GroupBox(out pVal: WordBool): HResult; stdcall;
    function Set_GroupBox(pVal: WordBool): HResult; stdcall;
    function Get_Margin(out pVal: LongWord): HResult; stdcall;
    function Set_Margin(pVal: LongWord): HResult; stdcall;
    function Get_MarginLeft(out pVal: LongWord): HResult; stdcall;
    function Set_MarginLeft(pVal: LongWord): HResult; stdcall;
    function Get_MarginTop(out pVal: LongWord): HResult; stdcall;
    function Set_MarginTop(pVal: LongWord): HResult; stdcall;
    function Get_MarginRight(out pVal: LongWord): HResult; stdcall;
    function Set_MarginRight(pVal: LongWord): HResult; stdcall;
    function Get_MarginBottom(out pVal: LongWord): HResult; stdcall;
    function Set_MarginBottom(pVal: LongWord): HResult; stdcall;
    function Get(const Name: WideString; out Control: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IForm
// Flags:     (4096) Dispatchable
// GUID:      {044B381D-C581-4B9E-9C95-08B66B38468F}
// *********************************************************************//
  IForm = interface(IFrame)
    ['{044B381D-C581-4B9E-9C95-08B66B38468F}']
    function Set_Icon(Param1: OleVariant): HResult; stdcall;
    function Minimize: HResult; stdcall;
    function Restore: HResult; stdcall;
    function Maximize: HResult; stdcall;
    function Close: HResult; stdcall;
    function ShowModal: HResult; stdcall;
    function MessageBox(const Text: WideString; const Caption: WideString; Flags: Integer; 
                        out pResult: Integer): HResult; stdcall;
    function ColorDialog(StartColor: LongWord; Flags: LongWord; out pColor: LongWord): HResult; stdcall;
    function FontDialog(const StartValue: IDispatch; Flags: LongWord; out pResult: IDispatch): HResult; stdcall;
    function OpenDialog(const DefaultExt: WideString; const Filter: WideString; 
                        const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult; stdcall;
    function SaveDialog(const DefaultExt: WideString; const Filter: WideString; 
                        const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult; stdcall;
    function SelectFolderDialog(const Title: WideString; Flags: LongWord; out pFolder: WideString): HResult; stdcall;
    function PrintDialog(Flags: LongWord; MinPage: Word; MaxPage: Word; out pResult: IDispatch): HResult; stdcall;
    function PrinterSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult; stdcall;
    function PageSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult; stdcall;
    function CreateFindDialog(const FindText: WideString; Flags: LongWord; out pResult: IDispatch): HResult; stdcall;
    function CreateReplaceDialog(const FindText: WideString; const ReplaceText: WideString; 
                                 Flags: LongWord; out pResult: IDispatch): HResult; stdcall;
    function CreateFontDialog(out pResult: IDispatch): HResult; stdcall;
    function CreateColorDialog(out pResult: IDispatch): HResult; stdcall;
    function CreateOpenDialog(out pResult: IDispatch): HResult; stdcall;
    function CreateSaveDialog(out pResult: IDispatch): HResult; stdcall;
    function CreateSelectFolderDialog(out pResult: IDispatch): HResult; stdcall;
    function CreateForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult; stdcall;
    function CreateMessageDialog(const Text: WideString; const Caption: WideString; 
                                 out pResult: IDispatch): HResult; stdcall;
    function CreateTaskDialog(const Text: WideString; const Caption: WideString; 
                              out pResult: IDispatch): HResult; stdcall;
    function Get_Menu(out pVal: IDispatch): HResult; stdcall;
    function Set_Menu(const pVal: IDispatch): HResult; stdcall;
    function _Set_Menu(const pVal: IDispatch): HResult; stdcall;
    function Get_KeyPreview(out pVal: WordBool): HResult; stdcall;
    function Set_KeyPreview(pVal: WordBool): HResult; stdcall;
    function Get_MaximizeBox(out pVal: WordBool): HResult; stdcall;
    function Set_MaximizeBox(pVal: WordBool): HResult; stdcall;
    function Get_MinimizeBox(out pVal: WordBool): HResult; stdcall;
    function Set_MinimizeBox(pVal: WordBool): HResult; stdcall;
    function Get_ControlBox(out pVal: WordBool): HResult; stdcall;
    function Set_ControlBox(pVal: WordBool): HResult; stdcall;
    function Get_SizeGrip(out pVal: WordBool): HResult; stdcall;
    function Set_SizeGrip(pVal: WordBool): HResult; stdcall;
    function Get_TopMost(out pVal: WordBool): HResult; stdcall;
    function Set_TopMost(pVal: WordBool): HResult; stdcall;
    function Get_ToolWindow(out pVal: WordBool): HResult; stdcall;
    function Set_ToolWindow(pVal: WordBool): HResult; stdcall;
    function Get_Caption(out pVal: WordBool): HResult; stdcall;
    function Set_Caption(pVal: WordBool): HResult; stdcall;
    function Get_AcceptButton(out pVal: IDispatch): HResult; stdcall;
    function Set_AcceptButton(const pVal: IDispatch): HResult; stdcall;
    function _Set_AcceptButton(const pVal: IDispatch): HResult; stdcall;
    function Get_CancelButton(out pVal: IDispatch): HResult; stdcall;
    function Set_CancelButton(const pVal: IDispatch): HResult; stdcall;
    function _Set_CancelButton(const pVal: IDispatch): HResult; stdcall;
    function Get_HelpButton(out pVal: IDispatch): HResult; stdcall;
    function Set_HelpButton(const pVal: IDispatch): HResult; stdcall;
    function _Set_HelpButton(const pVal: IDispatch): HResult; stdcall;
    function Get_ActiveControl(out pVal: IDispatch): HResult; stdcall;
    function Set_ActiveControl(const pVal: IDispatch): HResult; stdcall;
    function _Set_ActiveControl(const pVal: IDispatch): HResult; stdcall;
    function Get_CanClose(out pVal: WordBool): HResult; stdcall;
    function Set_CanClose(pVal: WordBool): HResult; stdcall;
    function Set_Region(Param1: LongWord): HResult; stdcall;
    function Get_TaskBar(out pVal: IDispatch): HResult; stdcall;
    function Get_Active(out pVal: WordBool): HResult; stdcall;
    function Set_Active(pVal: WordBool): HResult; stdcall;
    function Get_Foreground(out pVal: WordBool): HResult; stdcall;
    function Set_Foreground(pVal: WordBool): HResult; stdcall;
    function Set_OnCloseQuery(Param1: OleVariant): HResult; stdcall;
    function Set_OnClose(Param1: OleVariant): HResult; stdcall;
    function Set_OnActiveControlChange(Param1: OleVariant): HResult; stdcall;
    function Set_OnHitTest(Param1: OleVariant): HResult; stdcall;
    function Set_OnHint(Param1: OleVariant): HResult; stdcall;
    function Set_OnMinimize(Param1: OleVariant): HResult; stdcall;
    function Set_OnMaximize(Param1: OleVariant): HResult; stdcall;
    function Set_OnRestore(Param1: OleVariant): HResult; stdcall;
    function Set_OnCopyData(Param1: OleVariant): HResult; stdcall;
    function Set_OnActivate(Param1: OleVariant): HResult; stdcall;
    function Set_OnEnterSizeMove(Param1: OleVariant): HResult; stdcall;
    function Set_OnExitSizeMove(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICollection
// Flags:     (4096) Dispatchable
// GUID:      {92BEFD16-E781-484B-BC2D-F3B5E5DA2CC5}
// *********************************************************************//
  ICollection = interface(IDispatch)
    ['{92BEFD16-E781-484B-BC2D-F3B5E5DA2CC5}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function ExChange(A: OleVariant; B: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStringCollection
// Flags:     (4096) Dispatchable
// GUID:      {A68CF60C-30F0-4A23-B592-3CB23708733A}
// *********************************************************************//
  IStringCollection = interface(ICollection)
    ['{A68CF60C-30F0-4A23-B592-3CB23708733A}']
    function Add(const Value: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IImageList
// Flags:     (4096) Dispatchable
// GUID:      {68343C86-0240-44FD-A24F-5CD611E0A33F}
// *********************************************************************//
  IImageList = interface(IDispatch)
    ['{68343C86-0240-44FD-A24F-5CD611E0A33F}']
    function Load(Image: OleVariant): HResult; stdcall;
    function Add(Image: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Remove(Index: Integer): HResult; stdcall;
    function Get_Width(out pVal: LongWord): HResult; stdcall;
    function Set_Width(pVal: LongWord): HResult; stdcall;
    function Get_Height(out pVal: LongWord): HResult; stdcall;
    function Set_Height(pVal: LongWord): HResult; stdcall;
    function Get_Count(out pVal: Integer): HResult; stdcall;
    function Get_BitsPerPixel(out pVal: Integer): HResult; stdcall;
    function Set_BitsPerPixel(pVal: Integer): HResult; stdcall;
    function Get_References(out pVal: IDispatch): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IGraphicObject
// Flags:     (4096) Dispatchable
// GUID:      {09866D76-9782-4FD2-BA16-C469A06499C1}
// *********************************************************************//
  IGraphicObject = interface(IDispatch)
    ['{09866D76-9782-4FD2-BA16-C469A06499C1}']
    function Get_Color(out pVal: LongWord): HResult; stdcall;
    function Set_Color(pVal: LongWord): HResult; stdcall;
    function Default: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPen
// Flags:     (4096) Dispatchable
// GUID:      {A6BFFF0E-7526-495A-AEA9-7BE6005184D7}
// *********************************************************************//
  IPen = interface(IGraphicObject)
    ['{A6BFFF0E-7526-495A-AEA9-7BE6005184D7}']
    function Get_Width(out pVal: Integer): HResult; stdcall;
    function Set_Width(pVal: Integer): HResult; stdcall;
    function Get_Style(out pVal: Integer): HResult; stdcall;
    function Set_Style(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IBrush
// Flags:     (4096) Dispatchable
// GUID:      {68FA42FE-34AC-40E9-857D-F94846E91B0A}
// *********************************************************************//
  IBrush = interface(IGraphicObject)
    ['{68FA42FE-34AC-40E9-857D-F94846E91B0A}']
    function Get_Style(out pVal: Integer): HResult; stdcall;
    function Set_Style(pVal: Integer): HResult; stdcall;
    function Set_Image(Param1: OleVariant): HResult; stdcall;
    function Get_GradientColor(out pVal: LongWord): HResult; stdcall;
    function Set_GradientColor(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFontEx
// Flags:     (4096) Dispatchable
// GUID:      {FAE1D3D9-57B5-42D7-AF14-AC9ED6B31EA8}
// *********************************************************************//
  IFontEx = interface(IGraphicObject)
    ['{FAE1D3D9-57B5-42D7-AF14-AC9ED6B31EA8}']
    function Get_Italic(out pVal: WordBool): HResult; stdcall;
    function Set_Italic(pVal: WordBool): HResult; stdcall;
    function Get_Underline(out pVal: WordBool): HResult; stdcall;
    function Set_Underline(pVal: WordBool): HResult; stdcall;
    function Get_Strikethrough(out pVal: WordBool): HResult; stdcall;
    function Set_Strikethrough(pVal: WordBool): HResult; stdcall;
    function Get_Bold(out pVal: WordBool): HResult; stdcall;
    function Set_Bold(pVal: WordBool): HResult; stdcall;
    function Get_Weight(out pVal: Smallint): HResult; stdcall;
    function Set_Weight(pVal: Smallint): HResult; stdcall;
    function Get_Name(out pVal: WideString): HResult; stdcall;
    function Set_Name(const pVal: WideString): HResult; stdcall;
    function Get_Size(out pVal: Currency): HResult; stdcall;
    function Set_Size(pVal: Currency): HResult; stdcall;
    function Get_CharSet(out pVal: Smallint): HResult; stdcall;
    function Set_CharSet(pVal: Smallint): HResult; stdcall;
    function Get_Angle(out pVal: Integer): HResult; stdcall;
    function Set_Angle(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAction
// Flags:     (4096) Dispatchable
// GUID:      {752D00E4-9EBE-4A1A-82D8-5D62F66CB4ED}
// *********************************************************************//
  IAction = interface(IObject)
    ['{752D00E4-9EBE-4A1A-82D8-5D62F66CB4ED}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Set_Item(Index: Integer; pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function ExChange(A: OleVariant; B: OleVariant): HResult; stdcall;
    function Add(Item: OleVariant; Key: OleVariant; out pControl: IDispatch): HResult; stdcall;
    function Insert(Index: Integer; Item: OleVariant; Key: OleVariant; out pControl: IDispatch): HResult; stdcall;
    function NewLine(out pControl: IDispatch): HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_Enabled(out pVal: WordBool): HResult; stdcall;
    function Set_Enabled(pVal: WordBool): HResult; stdcall;
    function Get_Checked(out pVal: WordBool): HResult; stdcall;
    function Set_Checked(pVal: WordBool): HResult; stdcall;
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function Get_CheckBox(out pVal: WordBool): HResult; stdcall;
    function Set_CheckBox(pVal: WordBool): HResult; stdcall;
    function Get_RadioCheck(out pVal: WordBool): HResult; stdcall;
    function Set_RadioCheck(pVal: WordBool): HResult; stdcall;
    function Get_AllowAllUp(out pVal: WordBool): HResult; stdcall;
    function Set_AllowAllUp(pVal: WordBool): HResult; stdcall;
    function Get_Default(out pVal: WordBool): HResult; stdcall;
    function Set_Default(pVal: WordBool): HResult; stdcall;
    function Get_Control(out pVal: IDispatch): HResult; stdcall;
    function Get_Form(out pVal: IDispatch): HResult; stdcall;
    function Get_Items(out pVal: IDispatch): HResult; stdcall;
    function Get_Hint(out pVal: OleVariant): HResult; stdcall;
    function Set_Hint(pVal: OleVariant): HResult; stdcall;
    function Get_Break(out pVal: WordBool): HResult; stdcall;
    function Set_Break(pVal: WordBool): HResult; stdcall;
    function Get_Key(out pVal: OleVariant): HResult; stdcall;
    function Set_Key(pVal: OleVariant): HResult; stdcall;
    function Get_DismissonClick(out pVal: WordBool): HResult; stdcall;
    function Set_DismissonClick(pVal: WordBool): HResult; stdcall;
    function Get_Noninteractive(out pVal: WordBool): HResult; stdcall;
    function Set_Noninteractive(pVal: WordBool): HResult; stdcall;
    function Get_Nobackground(out pVal: WordBool): HResult; stdcall;
    function Set_Nobackground(pVal: WordBool): HResult; stdcall;
    function Get_WholeDropDown(out pVal: WordBool): HResult; stdcall;
    function Set_WholeDropDown(pVal: WordBool): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult; stdcall;
    function Set_OnExecute(Param1: OleVariant): HResult; stdcall;
    function Set_OnUpdate(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListControlItem
// Flags:     (4096) Dispatchable
// GUID:      {D5F460EE-3010-4A7A-AAD2-FA3F768BAC57}
// *********************************************************************//
  IListControlItem = interface(IDispatch)
    ['{D5F460EE-3010-4A7A-AAD2-FA3F768BAC57}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Get_Selected(out pVal: WordBool): HResult; stdcall;
    function Get_Focused(out pVal: WordBool): HResult; stdcall;
    function Get_Index(out pVal: Integer): HResult; stdcall;
    function Get_Font(out pVal: IDispatch): HResult; stdcall;
    function Set_Font(const pVal: IDispatch): HResult; stdcall;
    function _Set_Font(const pVal: IDispatch): HResult; stdcall;
    function Get_TextBkColor(out pVal: LongWord): HResult; stdcall;
    function Set_TextBkColor(pVal: LongWord): HResult; stdcall;
    function Get_ItemData(out pVal: OleVariant): HResult; stdcall;
    function Get_Brush(out pVal: IDispatch): HResult; stdcall;
    function Set_Brush(const pVal: IDispatch): HResult; stdcall;
    function _Set_Brush(const pVal: IDispatch): HResult; stdcall;
    function Get_Indent(out pVal: LongWord): HResult; stdcall;
    function Set_Indent(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStringsControl
// Flags:     (4096) Dispatchable
// GUID:      {A1E967E4-0CEB-436B-91C0-F6A42F8D8733}
// *********************************************************************//
  IStringsControl = interface(IControl)
    ['{A1E967E4-0CEB-436B-91C0-F6A42F8D8733}']
    function Get_TopIndex(out pVal: Integer): HResult; stdcall;
    function Set_TopIndex(pVal: Integer): HResult; stdcall;
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: WideString): HResult; stdcall;
    function Set_Item(Index: Integer; const pvar: WideString): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Add(const Item: WideString; out pItemIndex: Integer): HResult; stdcall;
    function Remove(Index: Integer): HResult; stdcall;
    function Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult; stdcall;
    function Clear: HResult; stdcall;
    function BeginUpdate: HResult; stdcall;
    function EndUpdate: HResult; stdcall;
    function ExChange(A: Integer; B: Integer): HResult; stdcall;
    function Sort(DataType: Integer; Reverse: WordBool): HResult; stdcall;
    function Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                  out pItemIndex: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListControl
// Flags:     (4096) Dispatchable
// GUID:      {B61BDF00-553F-401B-948C-2F7A5FDCBBBB}
// *********************************************************************//
  IListControl = interface(IStringsControl)
    ['{B61BDF00-553F-401B-948C-2F7A5FDCBBBB}']
    function Get_ItemIndex(out pVal: Integer): HResult; stdcall;
    function Set_ItemIndex(pVal: Integer): HResult; stdcall;
    function Get_ItemHeight(out pVal: Integer): HResult; stdcall;
    function Set_ItemHeight(pVal: Integer): HResult; stdcall;
    function Get_ItemData(Index: Integer; out pVal: OleVariant): HResult; stdcall;
    function Set_ItemData(Index: Integer; pVal: OleVariant): HResult; stdcall;
    function Get_Sorted(out pVal: WordBool): HResult; stdcall;
    function Set_Sorted(pVal: WordBool): HResult; stdcall;
    function Get_IntegralHeight(out pVal: WordBool): HResult; stdcall;
    function Set_IntegralHeight(pVal: WordBool): HResult; stdcall;
    function Get_HorizontalExtent(out pVal: Integer): HResult; stdcall;
    function Set_HorizontalExtent(pVal: Integer): HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
    function Get_ImageIndex(Index: Integer; out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(Index: Integer; pVal: Integer): HResult; stdcall;
    function Get_CustomDraw(out pVal: WordBool): HResult; stdcall;
    function Set_CustomDraw(pVal: WordBool): HResult; stdcall;
    function Set_OnDrawItem(Param1: OleVariant): HResult; stdcall;
    function Set_BackgroundImage(Param1: OleVariant): HResult; stdcall;
    function Get_CustomDrawSelection(out pVal: WordBool): HResult; stdcall;
    function Set_CustomDrawSelection(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListBox
// Flags:     (4096) Dispatchable
// GUID:      {A33F2256-EF4D-409B-B1FD-0BE23F8F8C2D}
// *********************************************************************//
  IListBox = interface(IListControl)
    ['{A33F2256-EF4D-409B-B1FD-0BE23F8F8C2D}']
    function Get_Selected(Index: Integer; out pVal: WordBool): HResult; stdcall;
    function Set_Selected(Index: Integer; pVal: WordBool): HResult; stdcall;
    function Get_SelCount(out pVal: Integer): HResult; stdcall;
    function Get_MultiSelect(out pVal: WordBool): HResult; stdcall;
    function Set_MultiSelect(pVal: WordBool): HResult; stdcall;
    function Get_ExtendedSelect(out pVal: WordBool): HResult; stdcall;
    function Set_ExtendedSelect(pVal: WordBool): HResult; stdcall;
    function Get_ColumnCount(out pVal: Word): HResult; stdcall;
    function Set_ColumnCount(pVal: Word): HResult; stdcall;
    function Get_ColumnWidth(out pVal: Word): HResult; stdcall;
    function Set_ColumnWidth(pVal: Word): HResult; stdcall;
    function Get_ScrollBars(out pVal: LongWord): HResult; stdcall;
    function Set_ScrollBars(pVal: LongWord): HResult; stdcall;
    function ItemFromPoint(x: Word; y: Word; out pIndex: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IComboBox
// Flags:     (4096) Dispatchable
// GUID:      {AA09373F-278A-49DF-9F40-74C5B92ABB6F}
// *********************************************************************//
  IComboBox = interface(IListControl)
    ['{AA09373F-278A-49DF-9F40-74C5B92ABB6F}']
    function Get_DropDownCount(out pVal: LongWord): HResult; stdcall;
    function Set_DropDownCount(pVal: LongWord): HResult; stdcall;
    function Get_Style(out pVal: Integer): HResult; stdcall;
    function Set_Style(pVal: Integer): HResult; stdcall;
    function Get_CharCase(out pVal: Integer): HResult; stdcall;
    function Set_CharCase(pVal: Integer): HResult; stdcall;
    function Get_ReadOnly(out pVal: WordBool): HResult; stdcall;
    function Set_ReadOnly(pVal: WordBool): HResult; stdcall;
    function Get_DroppedDown(out pVal: WordBool): HResult; stdcall;
    function Set_DroppedDown(pVal: WordBool): HResult; stdcall;
    function Get_CueBanner(out pVal: WideString): HResult; stdcall;
    function Set_CueBanner(const pVal: WideString): HResult; stdcall;
    function Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult; stdcall;
    function Set_CueBannerAlwaysVisible(pVal: WordBool): HResult; stdcall;
    function Get_BalloonTip(out pVal: IDispatch): HResult; stdcall;
    function Set_OnDropDown(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEdit
// Flags:     (4096) Dispatchable
// GUID:      {1D2D9535-7884-49AB-90C2-49955A388137}
// *********************************************************************//
  IEdit = interface(IStringsControl)
    ['{1D2D9535-7884-49AB-90C2-49955A388137}']
    function Get_ReadOnly(out pVal: WordBool): HResult; stdcall;
    function Set_ReadOnly(pVal: WordBool): HResult; stdcall;
    function Get_MaxLength(out pVal: Integer): HResult; stdcall;
    function Set_MaxLength(pVal: Integer): HResult; stdcall;
    function Get_CharCase(out pVal: Integer): HResult; stdcall;
    function Set_CharCase(pVal: Integer): HResult; stdcall;
    function Get_PasswordChar(out pVal: WideString): HResult; stdcall;
    function Set_PasswordChar(const pVal: WideString): HResult; stdcall;
    function Get_HideSelection(out pVal: WordBool): HResult; stdcall;
    function Set_HideSelection(pVal: WordBool): HResult; stdcall;
    function Get_MultiLine(out pVal: WordBool): HResult; stdcall;
    function Set_MultiLine(pVal: WordBool): HResult; stdcall;
    function Get_ScrollBars(out pVal: LongWord): HResult; stdcall;
    function Set_ScrollBars(pVal: LongWord): HResult; stdcall;
    function Get_AutoSize(out pVal: WordBool): HResult; stdcall;
    function Set_AutoSize(pVal: WordBool): HResult; stdcall;
    function Get_Modified(out pVal: WordBool): HResult; stdcall;
    function Set_Modified(pVal: WordBool): HResult; stdcall;
    function Get_SelStart(out pVal: Integer): HResult; stdcall;
    function Set_SelStart(pVal: Integer): HResult; stdcall;
    function Get_SelEnd(out pVal: Integer): HResult; stdcall;
    function Set_SelEnd(pVal: Integer): HResult; stdcall;
    function Get_SelLength(out pVal: Integer): HResult; stdcall;
    function Set_SelLength(pVal: Integer): HResult; stdcall;
    function Get_LeftMargin(out pVal: Word): HResult; stdcall;
    function Set_LeftMargin(pVal: Word): HResult; stdcall;
    function Get_RightMargin(out pVal: Word): HResult; stdcall;
    function Set_RightMargin(pVal: Word): HResult; stdcall;
    function Get_WordWrap(out pVal: WordBool): HResult; stdcall;
    function Set_WordWrap(pVal: WordBool): HResult; stdcall;
    function Get_TextAlign(out pVal: Word): HResult; stdcall;
    function Set_TextAlign(pVal: Word): HResult; stdcall;
    function SelectAll: HResult; stdcall;
    function ClearSelection: HResult; stdcall;
    function ReplaceSelection(const NewText: WideString; CanUndo: WordBool): HResult; stdcall;
    function Get_CanUndo(out pVal: WordBool): HResult; stdcall;
    function Set_CanUndo(pVal: WordBool): HResult; stdcall;
    function Get_CanPaste(out pVal: WordBool): HResult; stdcall;
    function Undo: HResult; stdcall;
    function Cut: HResult; stdcall;
    function Copy: HResult; stdcall;
    function Paste: HResult; stdcall;
    function Get_DataType(out pVal: Integer): HResult; stdcall;
    function Set_DataType(pVal: Integer): HResult; stdcall;
    function Get_Min(out pVal: OleVariant): HResult; stdcall;
    function Set_Min(pVal: OleVariant): HResult; stdcall;
    function Get_Max(out pVal: OleVariant): HResult; stdcall;
    function Set_Max(pVal: OleVariant): HResult; stdcall;
    function Get_LineFromChar(Index: Integer; out pVal: Integer): HResult; stdcall;
    function Get_AcceptsReturn(out pVal: WordBool): HResult; stdcall;
    function Set_AcceptsReturn(pVal: WordBool): HResult; stdcall;
    function Get_AcceptsTab(out pVal: WordBool): HResult; stdcall;
    function Set_AcceptsTab(pVal: WordBool): HResult; stdcall;
    function Get_AutoHeight(out pVal: WordBool): HResult; stdcall;
    function Set_AutoHeight(pVal: WordBool): HResult; stdcall;
    function Get_CueBanner(out pVal: WideString): HResult; stdcall;
    function Set_CueBanner(const pVal: WideString): HResult; stdcall;
    function Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult; stdcall;
    function Set_CueBannerAlwaysVisible(pVal: WordBool): HResult; stdcall;
    function Get_BalloonTip(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IButtonControl
// Flags:     (4096) Dispatchable
// GUID:      {CE6D21C9-132F-4990-ACB2-4C68A1D46BA2}
// *********************************************************************//
  IButtonControl = interface(IControl)
    ['{CE6D21C9-132F-4990-ACB2-4C68A1D46BA2}']
    function Get_Flat(out pVal: WordBool): HResult; stdcall;
    function Set_Flat(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IButton
// Flags:     (4096) Dispatchable
// GUID:      {31DC6745-8E8E-4F4A-9F17-36651B160FE9}
// *********************************************************************//
  IButton = interface(IButtonControl)
    ['{31DC6745-8E8E-4F4A-9F17-36651B160FE9}']
    function Get_Default(out pVal: WordBool): HResult; stdcall;
    function Set_Default(pVal: WordBool): HResult; stdcall;
    function Get_Cancel(out pVal: WordBool): HResult; stdcall;
    function Set_Cancel(pVal: WordBool): HResult; stdcall;
    function Get_CommandLinkButton(out pVal: WordBool): HResult; stdcall;
    function Set_CommandLinkButton(pVal: WordBool): HResult; stdcall;
    function Get_Note(out pVal: WideString): HResult; stdcall;
    function Set_Note(const pVal: WideString): HResult; stdcall;
    function Get_Shield(out pVal: WordBool): HResult; stdcall;
    function Set_Shield(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICheckBox
// Flags:     (4096) Dispatchable
// GUID:      {A924A1F1-1896-462D-98E9-873E721811CE}
// *********************************************************************//
  ICheckBox = interface(IButtonControl)
    ['{A924A1F1-1896-462D-98E9-873E721811CE}']
    function Get_State(out pVal: Integer): HResult; stdcall;
    function Set_State(pVal: Integer): HResult; stdcall;
    function Get_AllowGrayed(out pVal: WordBool): HResult; stdcall;
    function Set_AllowGrayed(pVal: WordBool): HResult; stdcall;
    function Get_Checked(out pVal: WordBool): HResult; stdcall;
    function Set_Checked(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IRadioButton
// Flags:     (4096) Dispatchable
// GUID:      {E4D0E174-9AB6-4BDF-9186-8905F5B54AAA}
// *********************************************************************//
  IRadioButton = interface(IButtonControl)
    ['{E4D0E174-9AB6-4BDF-9186-8905F5B54AAA}']
    function Get_Checked(out pVal: WordBool): HResult; stdcall;
    function Set_Checked(pVal: WordBool): HResult; stdcall;
    function Get_Group(out pVal: Integer): HResult; stdcall;
    function Set_Group(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStatusItem
// Flags:     (4096) Dispatchable
// GUID:      {80508CDF-06EA-43C5-B41E-F2F97D516151}
// *********************************************************************//
  IStatusItem = interface(IDispatch)
    ['{80508CDF-06EA-43C5-B41E-F2F97D516151}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_Width(out pVal: Integer): HResult; stdcall;
    function Set_Width(pVal: Integer): HResult; stdcall;
    function Get_Border(out pVal: Integer): HResult; stdcall;
    function Set_Border(pVal: Integer): HResult; stdcall;
    function Get_AutoSize(out pVal: WordBool): HResult; stdcall;
    function Set_AutoSize(pVal: WordBool): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStatusBar
// Flags:     (4096) Dispatchable
// GUID:      {F61D55A1-ECC9-484B-A635-F0C5E71A8C29}
// *********************************************************************//
  IStatusBar = interface(IControl)
    ['{F61D55A1-ECC9-484B-A635-F0C5E71A8C29}']
    function Get_Simple(out pVal: WordBool): HResult; stdcall;
    function Set_Simple(pVal: WordBool): HResult; stdcall;
    function Get_SizeGrip(out pVal: WordBool): HResult; stdcall;
    function Set_SizeGrip(pVal: WordBool): HResult; stdcall;
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function ExChange(A: OleVariant; B: OleVariant): HResult; stdcall;
    function Add(Width: Integer; Border: Integer; out pItem: IDispatch): HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStatusControl
// Flags:     (4096) Dispatchable
// GUID:      {7ADA76A6-13E2-455D-8DF1-E2C980D21BF9}
// *********************************************************************//
  IStatusControl = interface(IControl)
    ['{7ADA76A6-13E2-455D-8DF1-E2C980D21BF9}']
    function Get_Min(out pVal: Integer): HResult; stdcall;
    function Set_Min(pVal: Integer): HResult; stdcall;
    function Get_Max(out pVal: Integer): HResult; stdcall;
    function Set_Max(pVal: Integer): HResult; stdcall;
    function Get_Position(out pVal: Integer): HResult; stdcall;
    function Set_Position(pVal: Integer): HResult; stdcall;
    function Get_Step(out pVal: Integer): HResult; stdcall;
    function Set_Step(pVal: Integer): HResult; stdcall;
    function StepIt: HResult; stdcall;
    function StepBy(Delta: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IProgressBar
// Flags:     (4096) Dispatchable
// GUID:      {16271F21-45E5-4632-BC36-E3E429B49AD8}
// *********************************************************************//
  IProgressBar = interface(IStatusControl)
    ['{16271F21-45E5-4632-BC36-E3E429B49AD8}']
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
    function Get_Smooth(out pVal: WordBool): HResult; stdcall;
    function Set_Smooth(pVal: WordBool): HResult; stdcall;
    function Get_State(out pVal: Integer): HResult; stdcall;
    function Set_State(pVal: Integer): HResult; stdcall;
    function Get_Marquee(out pVal: WordBool): HResult; stdcall;
    function Set_Marquee(pVal: WordBool): HResult; stdcall;
    function Get_MarqueeActive(out pVal: WordBool): HResult; stdcall;
    function Set_MarqueeActive(pVal: WordBool): HResult; stdcall;
    function Get_MarqueeInterval(out pVal: LongWord): HResult; stdcall;
    function Set_MarqueeInterval(pVal: LongWord): HResult; stdcall;
    function Get_SmoothReverse(out pVal: WordBool): HResult; stdcall;
    function Set_SmoothReverse(pVal: WordBool): HResult; stdcall;
    function Get_BarColor(out pVal: LongWord): HResult; stdcall;
    function Set_BarColor(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IScrollBar
// Flags:     (4096) Dispatchable
// GUID:      {FC140361-F789-48AD-AE2B-A4B5A2643FB0}
// *********************************************************************//
  IScrollBar = interface(IStatusControl)
    ['{FC140361-F789-48AD-AE2B-A4B5A2643FB0}']
    function Get_Page(out pVal: LongWord): HResult; stdcall;
    function Set_Page(pVal: LongWord): HResult; stdcall;
    function Get_SmallChange(out pVal: LongWord): HResult; stdcall;
    function Set_SmallChange(pVal: LongWord): HResult; stdcall;
    function Get_LargeChange(out pVal: LongWord): HResult; stdcall;
    function Set_LargeChange(pVal: LongWord): HResult; stdcall;
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
    function Get_Tracking(out pVal: WordBool): HResult; stdcall;
    function Set_Tracking(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITab
// Flags:     (4096) Dispatchable
// GUID:      {F8019994-24F1-475D-8AC4-5A1BCFF213D0}
// *********************************************************************//
  ITab = interface(IFrame)
    ['{F8019994-24F1-475D-8AC4-5A1BCFF213D0}']
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITabControl
// Flags:     (4096) Dispatchable
// GUID:      {80249C22-E39E-4BF1-A167-8599130D19BA}
// *********************************************************************//
  ITabControl = interface(IControl)
    ['{80249C22-E39E-4BF1-A167-8599130D19BA}']
    function CreateTab(const Text: WideString; out pControl: IDispatch): HResult; stdcall;
    function Get_Controls(out pVal: IDispatch): HResult; stdcall;
    function Get_ActiveControl(out pVal: IDispatch): HResult; stdcall;
    function Set_ActiveControl(const pVal: IDispatch): HResult; stdcall;
    function _Set_ActiveControl(const pVal: IDispatch): HResult; stdcall;
    function Get_Buttons(out pVal: WordBool): HResult; stdcall;
    function Set_Buttons(pVal: WordBool): HResult; stdcall;
    function Get_MultiLine(out pVal: WordBool): HResult; stdcall;
    function Set_MultiLine(pVal: WordBool): HResult; stdcall;
    function Get_HotTrack(out pVal: WordBool): HResult; stdcall;
    function Set_HotTrack(pVal: WordBool): HResult; stdcall;
    function Get_FlatButtons(out pVal: WordBool): HResult; stdcall;
    function Set_FlatButtons(pVal: WordBool): HResult; stdcall;
    function Get_RaggedRight(out pVal: WordBool): HResult; stdcall;
    function Set_RaggedRight(pVal: WordBool): HResult; stdcall;
    function Get_TabWidth(out pVal: Integer): HResult; stdcall;
    function Set_TabWidth(pVal: Integer): HResult; stdcall;
    function Get_TabHeight(out pVal: Integer): HResult; stdcall;
    function Set_TabHeight(pVal: Integer): HResult; stdcall;
    function Get_ItemIndex(out pVal: Integer): HResult; stdcall;
    function Set_ItemIndex(pVal: Integer): HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
    function Get_TabsVisible(out pVal: WordBool): HResult; stdcall;
    function Set_TabsVisible(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPageControl
// Flags:     (4096) Dispatchable
// GUID:      {A58B708B-DDC5-40BF-AD62-D2B94731BBF3}
// *********************************************************************//
  IPageControl = interface(ITabControl)
    ['{A58B708B-DDC5-40BF-AD62-D2B94731BBF3}']
    function Get_TabsAlign(out pVal: Integer): HResult; stdcall;
    function Set_TabsAlign(pVal: Integer): HResult; stdcall;
    function Get_HeaderVisible(out pVal: WordBool): HResult; stdcall;
    function Set_HeaderVisible(pVal: WordBool): HResult; stdcall;
    function Get_TabCloseButton(out pVal: WordBool): HResult; stdcall;
    function Set_TabCloseButton(pVal: WordBool): HResult; stdcall;
    function Get_ShowSingleTab(out pVal: WordBool): HResult; stdcall;
    function Set_ShowSingleTab(pVal: WordBool): HResult; stdcall;
    function Get_HideClippedTabs(out pVal: WordBool): HResult; stdcall;
    function Set_HideClippedTabs(pVal: WordBool): HResult; stdcall;
    function Get_TabsDragDrop(out pVal: WordBool): HResult; stdcall;
    function Set_TabsDragDrop(pVal: WordBool): HResult; stdcall;
    function Get_HeaderColors(out pVal: IDispatch): HResult; stdcall;
    function Get_TabColors(out pVal: IDispatch): HResult; stdcall;
    function Get_CloseButtonColors(out pVal: IDispatch): HResult; stdcall;
    function Get_ChevronColors(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IToolBar
// Flags:     (4096) Dispatchable
// GUID:      {EE439DC1-D255-41A8-94E4-0E2F5518562D}
// *********************************************************************//
  IToolBar = interface(IControl)
    ['{EE439DC1-D255-41A8-94E4-0E2F5518562D}']
    function Get_Buttons(out pVal: IDispatch): HResult; stdcall;
    function Set_Buttons(const pVal: IDispatch): HResult; stdcall;
    function _Set_Buttons(const pVal: IDispatch): HResult; stdcall;
    function Get_Flat(out pVal: WordBool): HResult; stdcall;
    function Set_Flat(pVal: WordBool): HResult; stdcall;
    function Get_ShowText(out pVal: WordBool): HResult; stdcall;
    function Set_ShowText(pVal: WordBool): HResult; stdcall;
    function Get_ButtonWidth(out pVal: LongWord): HResult; stdcall;
    function Set_ButtonWidth(pVal: LongWord): HResult; stdcall;
    function Get_ButtonHeight(out pVal: LongWord): HResult; stdcall;
    function Set_ButtonHeight(pVal: LongWord): HResult; stdcall;
    function Get_AutoSizeButtons(out pVal: WordBool): HResult; stdcall;
    function Set_AutoSizeButtons(pVal: WordBool): HResult; stdcall;
    function Get_List(out pVal: WordBool): HResult; stdcall;
    function Set_List(pVal: WordBool): HResult; stdcall;
    function Get_Wrapable(out pVal: WordBool): HResult; stdcall;
    function Set_Wrapable(pVal: WordBool): HResult; stdcall;
    function Get_AutoSize(out pVal: WordBool): HResult; stdcall;
    function Set_AutoSize(pVal: WordBool): HResult; stdcall;
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
    function Get_MinButtonWidth(out pVal: LongWord): HResult; stdcall;
    function Set_MinButtonWidth(pVal: LongWord): HResult; stdcall;
    function Get_MaxButtonWidth(out pVal: LongWord): HResult; stdcall;
    function Set_MaxButtonWidth(pVal: LongWord): HResult; stdcall;
    function Get_MaxTextRows(out pVal: LongWord): HResult; stdcall;
    function Set_MaxTextRows(pVal: LongWord): HResult; stdcall;
    function Get_PaddingX(out pVal: LongWord): HResult; stdcall;
    function Set_PaddingX(pVal: LongWord): HResult; stdcall;
    function Get_PaddingY(out pVal: LongWord): HResult; stdcall;
    function Set_PaddingY(pVal: LongWord): HResult; stdcall;
    function Get_ButtonSpacingX(out pVal: LongWord): HResult; stdcall;
    function Set_ButtonSpacingX(pVal: LongWord): HResult; stdcall;
    function Get_ButtonSpacingY(out pVal: LongWord): HResult; stdcall;
    function Set_ButtonSpacingY(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMenuBar
// Flags:     (4096) Dispatchable
// GUID:      {CD1140FE-95CD-4690-8DB9-48DF5989E8FA}
// *********************************************************************//
  IMenuBar = interface(IControl)
    ['{CD1140FE-95CD-4690-8DB9-48DF5989E8FA}']
    function Get_Menu(out pVal: IDispatch): HResult; stdcall;
    function Set_Menu(const pVal: IDispatch): HResult; stdcall;
    function _Set_Menu(const pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IReBarBand
// Flags:     (4096) Dispatchable
// GUID:      {5FFD779C-DF3C-4B7C-BA33-53ED4BE00360}
// *********************************************************************//
  IReBarBand = interface(IDispatch)
    ['{5FFD779C-DF3C-4B7C-BA33-53ED4BE00360}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_Color(out pVal: Integer): HResult; stdcall;
    function Set_Color(pVal: Integer): HResult; stdcall;
    function Get_ParentColor(out pVal: WordBool): HResult; stdcall;
    function Set_ParentColor(pVal: WordBool): HResult; stdcall;
    function Set_Image(Param1: OleVariant): HResult; stdcall;
    function Get_ParentImage(out pVal: WordBool): HResult; stdcall;
    function Set_ParentImage(pVal: WordBool): HResult; stdcall;
    function Get_FixedImage(out pVal: WordBool): HResult; stdcall;
    function Set_FixedImage(pVal: WordBool): HResult; stdcall;
    function Get_FixedSize(out pVal: WordBool): HResult; stdcall;
    function Set_FixedSize(pVal: WordBool): HResult; stdcall;
    function Get_Break(out pVal: WordBool): HResult; stdcall;
    function Set_Break(pVal: WordBool): HResult; stdcall;
    function Get_GripperAlways(out pVal: WordBool): HResult; stdcall;
    function Set_GripperAlways(pVal: WordBool): HResult; stdcall;
    function Get_Locked(out pVal: WordBool): HResult; stdcall;
    function Set_Locked(pVal: WordBool): HResult; stdcall;
    function Get_Chevron(out pVal: WordBool): HResult; stdcall;
    function Set_Chevron(pVal: WordBool): HResult; stdcall;
    function Maximize: HResult; stdcall;
    function Minimize: HResult; stdcall;
    function Get_MinWidth(out pVal: LongWord): HResult; stdcall;
    function Set_MinWidth(pVal: LongWord): HResult; stdcall;
    function Get_IdealWidth(out pVal: LongWord): HResult; stdcall;
    function Set_IdealWidth(pVal: LongWord): HResult; stdcall;
    function Get_Width(out pVal: LongWord): HResult; stdcall;
    function Set_Width(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IReBar
// Flags:     (4096) Dispatchable
// GUID:      {DBD8984A-5CB5-4B3B-94DE-62AF0C20F75F}
// *********************************************************************//
  IReBar = interface(IFrame)
    ['{DBD8984A-5CB5-4B3B-94DE-62AF0C20F75F}']
    function Get_Locked(out pVal: WordBool): HResult; stdcall;
    function Set_Locked(pVal: WordBool): HResult; stdcall;
    function Get_InsertNewRow(out pVal: WordBool): HResult; stdcall;
    function Set_InsertNewRow(pVal: WordBool): HResult; stdcall;
    function Get_Band(const Control: IDispatch; out pVal: IDispatch): HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
    function Set_Image(Param1: OleVariant): HResult; stdcall;
    function Get_FixedOrder(out pVal: WordBool): HResult; stdcall;
    function Set_FixedOrder(pVal: WordBool): HResult; stdcall;
    function Get_VarHeight(out pVal: WordBool): HResult; stdcall;
    function Set_VarHeight(pVal: WordBool): HResult; stdcall;
    function Get_BandBorders(out pVal: WordBool): HResult; stdcall;
    function Set_BandBorders(pVal: WordBool): HResult; stdcall;
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
    function Get_DblClkToggle(out pVal: WordBool): HResult; stdcall;
    function Set_DblClkToggle(pVal: WordBool): HResult; stdcall;
    function Get_VerticalGripper(out pVal: WordBool): HResult; stdcall;
    function Set_VerticalGripper(pVal: WordBool): HResult; stdcall;
    function Get_AutoLayout(out pVal: WordBool): HResult; stdcall;
    function Set_AutoLayout(pVal: WordBool): HResult; stdcall;
    function Get_RowCount(out pVal: Integer): HResult; stdcall;
    function Get_RowHeight(Index: Integer; out pVal: Integer): HResult; stdcall;
    function Get_BandCount(out pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHyperLink
// Flags:     (4096) Dispatchable
// GUID:      {ED777BB6-9999-4385-8647-8C72156DC3A1}
// *********************************************************************//
  IHyperLink = interface(IControl)
    ['{ED777BB6-9999-4385-8647-8C72156DC3A1}']
    function Get_Url(out pVal: WideString): HResult; stdcall;
    function Set_Url(const pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPager
// Flags:     (4096) Dispatchable
// GUID:      {AD4463D6-4144-4D08-9A41-A296E6264F32}
// *********************************************************************//
  IPager = interface(IFrame)
    ['{AD4463D6-4144-4D08-9A41-A296E6264F32}']
    function Get_Control(out pVal: IDispatch): HResult; stdcall;
    function Set_Control(const pVal: IDispatch): HResult; stdcall;
    function _Set_Control(const pVal: IDispatch): HResult; stdcall;
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
    function Get_ButtonSize(out pVal: LongWord): HResult; stdcall;
    function Set_ButtonSize(pVal: LongWord): HResult; stdcall;
    function Get_Position(out pVal: Integer): HResult; stdcall;
    function Set_Position(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICOMConnectionPoint
// Flags:     (4096) Dispatchable
// GUID:      {701F8D53-90B9-4D99-96A2-37C8BB960289}
// *********************************************************************//
  ICOMConnectionPoint = interface(IObject)
    ['{701F8D53-90B9-4D99-96A2-37C8BB960289}']
    function Get_ID(out pVal: WideString): HResult; stdcall;
    function Get_Name(out pVal: WideString): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICOMEvents
// Flags:     (4096) Dispatchable
// GUID:      {DC2EF81F-A8DF-488D-89C9-DCC67D7B0EE8}
// *********************************************************************//
  ICOMEvents = interface(IObject)
    ['{DC2EF81F-A8DF-488D-89C9-DCC67D7B0EE8}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: OleVariant; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IActiveXControl
// Flags:     (4096) Dispatchable
// GUID:      {FF57FCA7-3701-47A2-B309-3C0F5A581CB1}
// *********************************************************************//
  IActiveXControl = interface(IControl)
    ['{FF57FCA7-3701-47A2-B309-3C0F5A581CB1}']
    function Get_Control(out pVal: IDispatch): HResult; stdcall;
    function Get_Events(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHeaderItem
// Flags:     (4096) Dispatchable
// GUID:      {76B856CD-223D-4728-BA49-DCB111DAAA9D}
// *********************************************************************//
  IHeaderItem = interface(IObject)
    ['{76B856CD-223D-4728-BA49-DCB111DAAA9D}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_Width(out pVal: Integer): HResult; stdcall;
    function Set_Width(pVal: Integer): HResult; stdcall;
    function Get_TextAlign(out pVal: Integer): HResult; stdcall;
    function Set_TextAlign(pVal: Integer): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_DataType(out pVal: Integer): HResult; stdcall;
    function Set_DataType(pVal: Integer): HResult; stdcall;
    function Get_SortType(out pVal: Integer): HResult; stdcall;
    function Set_SortType(pVal: Integer): HResult; stdcall;
    function Get_Index(out pVal: Integer): HResult; stdcall;
    function Get_Owner(out pVal: IDispatch): HResult; stdcall;
    function Get_Order(out pVal: Integer): HResult; stdcall;
    function Set_Order(pVal: Integer): HResult; stdcall;
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
    function Set_OnClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnResize(Param1: OleVariant): HResult; stdcall;
    function Set_OnBeginTrack(Param1: OleVariant): HResult; stdcall;
    function Set_OnTrack(Param1: OleVariant): HResult; stdcall;
    function Set_OnDividerDblClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnBeginDrag(Param1: OleVariant): HResult; stdcall;
    function Set_OnEndDrag(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHeader
// Flags:     (4096) Dispatchable
// GUID:      {F1901A02-8CA0-4446-AC10-D8E9B6A9E573}
// *********************************************************************//
  IHeader = interface(IControl)
    ['{F1901A02-8CA0-4446-AC10-D8E9B6A9E573}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Add(const Text: WideString; Width: Integer; TextAlign: Integer; out pItem: IDispatch): HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
    function Get_HotTrack(out pVal: WordBool): HResult; stdcall;
    function Set_HotTrack(pVal: WordBool): HResult; stdcall;
    function Get_Flat(out pVal: WordBool): HResult; stdcall;
    function Set_Flat(pVal: WordBool): HResult; stdcall;
    function Get_DragDrop(out pVal: WordBool): HResult; stdcall;
    function Set_DragDrop(pVal: WordBool): HResult; stdcall;
    function Set_OnColumnClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnColumnResize(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListSubItem
// Flags:     (4096) Dispatchable
// GUID:      {8BEFFC8D-A9E8-4699-8E02-64DB4DC78DA2}
// *********************************************************************//
  IListSubItem = interface(IDispatch)
    ['{8BEFFC8D-A9E8-4699-8E02-64DB4DC78DA2}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_Font(out pVal: IDispatch): HResult; stdcall;
    function Set_Font(const pVal: IDispatch): HResult; stdcall;
    function _Set_Font(const pVal: IDispatch): HResult; stdcall;
    function Get_Parent(out pVal: IDispatch): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListItem
// Flags:     (4096) Dispatchable
// GUID:      {1FEE927E-CC8A-4DC0-9B40-E4113CDE5DA9}
// *********************************************************************//
  IListItem = interface(IDispatch)
    ['{1FEE927E-CC8A-4DC0-9B40-E4113CDE5DA9}']
    function Get_Type_(out pVal: WideString): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_Selected(out pVal: WordBool): HResult; stdcall;
    function Set_Selected(pVal: WordBool): HResult; stdcall;
    function Get_Checked(out pVal: WordBool): HResult; stdcall;
    function Set_Checked(pVal: WordBool): HResult; stdcall;
    function Get_SubItems(Index: Integer; out pVal: WideString): HResult; stdcall;
    function Set_SubItems(Index: Integer; const pVal: WideString): HResult; stdcall;
    function Get_SubItemImage(Index: Integer; out pVal: Integer): HResult; stdcall;
    function Set_SubItemImage(Index: Integer; pVal: Integer): HResult; stdcall;
    function Get_Index(out pVal: Integer): HResult; stdcall;
    function Get_UserData(out pVal: OleVariant): HResult; stdcall;
    function Set_UserData(pVal: OleVariant): HResult; stdcall;
    function Get_Hint(out pVal: WideString): HResult; stdcall;
    function Set_Hint(const pVal: WideString): HResult; stdcall;
    function Get_Group(out pVal: LongWord): HResult; stdcall;
    function Set_Group(pVal: LongWord): HResult; stdcall;
    function SetPosition(Left: LongWord; Top: LongWord): HResult; stdcall;
    function Get_Left(out pVal: Integer): HResult; stdcall;
    function Set_Left(pVal: Integer): HResult; stdcall;
    function Get_Top(out pVal: Integer): HResult; stdcall;
    function Set_Top(pVal: Integer): HResult; stdcall;
    function Get_Font(out pVal: IDispatch): HResult; stdcall;
    function Set_Font(const pVal: IDispatch): HResult; stdcall;
    function _Set_Font(const pVal: IDispatch): HResult; stdcall;
    function Get_TextBkColor(out pVal: LongWord): HResult; stdcall;
    function Set_TextBkColor(pVal: LongWord): HResult; stdcall;
    function Get_SubItemsEx(Index: Integer; out pVal: IDispatch): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListViewColumns
// Flags:     (4096) Dispatchable
// GUID:      {1A015BF1-FDE4-49FF-85AE-A142E1239B16}
// *********************************************************************//
  IListViewColumns = interface(IDispatch)
    ['{1A015BF1-FDE4-49FF-85AE-A142E1239B16}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Add(const Text: WideString; Width: Integer; TextAlign: Integer; out pItem: IDispatch): HResult; stdcall;
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function Get_Flat(out pVal: WordBool): HResult; stdcall;
    function Set_Flat(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IWorkArea
// Flags:     (4096) Dispatchable
// GUID:      {91CFAE79-1DAB-4194-82FE-314EAF0106B7}
// *********************************************************************//
  IWorkArea = interface(IDispatch)
    ['{91CFAE79-1DAB-4194-82FE-314EAF0106B7}']
    function Get_Left(out pVal: Integer): HResult; stdcall;
    function Set_Left(pVal: Integer): HResult; stdcall;
    function Get_Top(out pVal: Integer): HResult; stdcall;
    function Set_Top(pVal: Integer): HResult; stdcall;
    function Get_Width(out pVal: Integer): HResult; stdcall;
    function Set_Width(pVal: Integer): HResult; stdcall;
    function Get_Height(out pVal: Integer): HResult; stdcall;
    function Set_Height(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IWorkAreas
// Flags:     (4096) Dispatchable
// GUID:      {9A68D6D1-40E8-49A1-8497-E1A93F03A34E}
// *********************************************************************//
  IWorkAreas = interface(IDispatch)
    ['{9A68D6D1-40E8-49A1-8497-E1A93F03A34E}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Add(Left: Integer; Top: Integer; Width: Integer; Height: Integer; out Item: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListViewGroup
// Flags:     (4096) Dispatchable
// GUID:      {9C37D97F-D003-4235-9284-091565709535}
// *********************************************************************//
  IListViewGroup = interface(IDispatch)
    ['{9C37D97F-D003-4235-9284-091565709535}']
    function Get_Header(out pVal: WideString): HResult; stdcall;
    function Set_Header(const pVal: WideString): HResult; stdcall;
    function Get_SubTitle(out pVal: WideString): HResult; stdcall;
    function Set_SubTitle(const pVal: WideString): HResult; stdcall;
    function Get_Task(out pVal: WideString): HResult; stdcall;
    function Set_Task(const pVal: WideString): HResult; stdcall;
    function Get_DescriptionTop(out pVal: WideString): HResult; stdcall;
    function Set_DescriptionTop(const pVal: WideString): HResult; stdcall;
    function Get_DescriptionBottom(out pVal: WideString): HResult; stdcall;
    function Set_DescriptionBottom(const pVal: WideString): HResult; stdcall;
    function Get_SubsetTitle(out pVal: WideString): HResult; stdcall;
    function Set_SubsetTitle(const pVal: WideString): HResult; stdcall;
    function Get_Subseted(out pVal: WordBool): HResult; stdcall;
    function Set_Subseted(pVal: WordBool): HResult; stdcall;
    function Get_NoHeader(out pVal: WordBool): HResult; stdcall;
    function Set_NoHeader(pVal: WordBool): HResult; stdcall;
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function Get_Expanded(out pVal: WordBool): HResult; stdcall;
    function Set_Expanded(pVal: WordBool): HResult; stdcall;
    function Get_Collapsible(out pVal: WordBool): HResult; stdcall;
    function Set_Collapsible(pVal: WordBool): HResult; stdcall;
    function Get_HeaderAlign(out pVal: Integer): HResult; stdcall;
    function Set_HeaderAlign(pVal: Integer): HResult; stdcall;
    function Get_TitleImage(out pVal: Integer): HResult; stdcall;
    function Set_TitleImage(pVal: Integer): HResult; stdcall;
    function Get_ExtendedImage(out pVal: Integer): HResult; stdcall;
    function Set_ExtendedImage(pVal: Integer): HResult; stdcall;
    function Get_Footer(out pVal: WideString): HResult; stdcall;
    function Set_Footer(const pVal: WideString): HResult; stdcall;
    function Get_FooterAlign(out pVal: Integer): HResult; stdcall;
    function Set_FooterAlign(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListViewGroups
// Flags:     (4096) Dispatchable
// GUID:      {C1B38DA4-7DE0-4CEC-AFB5-A25980DB88CF}
// *********************************************************************//
  IListViewGroups = interface(IDispatch)
    ['{C1B38DA4-7DE0-4CEC-AFB5-A25980DB88CF}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Add(const Name: WideString; out Item: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListView
// Flags:     (4096) Dispatchable
// GUID:      {98763204-A34A-4206-9151-8DDF2445F52B}
// *********************************************************************//
  IListView = interface(IControl)
    ['{98763204-A34A-4206-9151-8DDF2445F52B}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Set_Count(pcount: Integer): HResult; stdcall;
    function Add(const Text: WideString; out pItem: IDispatch): HResult; stdcall;
    function Insert(Index: Integer; const Text: WideString; out pItem: IDispatch): HResult; stdcall;
    function Remove(Index: Integer): HResult; stdcall;
    function Clear: HResult; stdcall;
    function BeginUpdate: HResult; stdcall;
    function EndUpdate: HResult; stdcall;
    function SelectAll: HResult; stdcall;
    function ClearSelection: HResult; stdcall;
    function EditItem(Index: Integer): HResult; stdcall;
    function Sort(DataType: Integer; Reverse: WordBool; Column: LongWord): HResult; stdcall;
    function Get_LargeImages(out pVal: IDispatch): HResult; stdcall;
    function Set_LargeImages(const pVal: IDispatch): HResult; stdcall;
    function _Set_LargeImages(const pVal: IDispatch): HResult; stdcall;
    function Get_SmallImages(out pVal: IDispatch): HResult; stdcall;
    function Set_SmallImages(const pVal: IDispatch): HResult; stdcall;
    function _Set_SmallImages(const pVal: IDispatch): HResult; stdcall;
    function Get_StateImages(out pVal: IDispatch): HResult; stdcall;
    function Set_StateImages(const pVal: IDispatch): HResult; stdcall;
    function _Set_StateImages(const pVal: IDispatch): HResult; stdcall;
    function Get_Style(out pVal: Integer): HResult; stdcall;
    function Set_Style(pVal: Integer): HResult; stdcall;
    function Get_TextBkColor(out pVal: LongWord): HResult; stdcall;
    function Set_TextBkColor(pVal: LongWord): HResult; stdcall;
    function Get_MultiSelect(out pVal: WordBool): HResult; stdcall;
    function Set_MultiSelect(pVal: WordBool): HResult; stdcall;
    function Get_HideSelection(out pVal: WordBool): HResult; stdcall;
    function Set_HideSelection(pVal: WordBool): HResult; stdcall;
    function Get_SelCount(out pVal: Integer): HResult; stdcall;
    function Get_ItemIndex(out pVal: Integer): HResult; stdcall;
    function Set_ItemIndex(pVal: Integer): HResult; stdcall;
    function Get_Columns(out pVal: IDispatch): HResult; stdcall;
    function Get_CheckBoxes(out pVal: WordBool): HResult; stdcall;
    function Set_CheckBoxes(pVal: WordBool): HResult; stdcall;
    function Get_GridLines(out pVal: WordBool): HResult; stdcall;
    function Set_GridLines(pVal: WordBool): HResult; stdcall;
    function Get_HotTrack(out pVal: WordBool): HResult; stdcall;
    function Set_HotTrack(pVal: WordBool): HResult; stdcall;
    function Get_RowSelect(out pVal: WordBool): HResult; stdcall;
    function Set_RowSelect(pVal: WordBool): HResult; stdcall;
    function Get_BorderSelect(out pVal: WordBool): HResult; stdcall;
    function Set_BorderSelect(pVal: WordBool): HResult; stdcall;
    function Get_FlatScrollBars(out pVal: WordBool): HResult; stdcall;
    function Set_FlatScrollBars(pVal: WordBool): HResult; stdcall;
    function Get_OwnerData(out pVal: WordBool): HResult; stdcall;
    function Set_OwnerData(pVal: WordBool): HResult; stdcall;
    function Get_ReadOnly(out pVal: WordBool): HResult; stdcall;
    function Set_ReadOnly(pVal: WordBool): HResult; stdcall;
    function Get_WrapText(out pVal: WordBool): HResult; stdcall;
    function Set_WrapText(pVal: WordBool): HResult; stdcall;
    function Get_Arrangement(out pVal: Integer): HResult; stdcall;
    function Set_Arrangement(pVal: Integer): HResult; stdcall;
    function Get_HeaderDragDrop(out pVal: WordBool): HResult; stdcall;
    function Set_HeaderDragDrop(pVal: WordBool): HResult; stdcall;
    function Get_InfoTip(out pVal: WordBool): HResult; stdcall;
    function Set_InfoTip(pVal: WordBool): HResult; stdcall;
    function Set_BackgroundImage(Param1: OleVariant): HResult; stdcall;
    function Get_WorkAreas(out pVal: IDispatch): HResult; stdcall;
    function Get_Groups(out pVal: IDispatch): HResult; stdcall;
    function Get_TileLines(out pVal: LongWord): HResult; stdcall;
    function Set_TileLines(pVal: LongWord): HResult; stdcall;
    function Get_TileWidth(out pVal: LongWord): HResult; stdcall;
    function Set_TileWidth(pVal: LongWord): HResult; stdcall;
    function Get_TileHeight(out pVal: LongWord): HResult; stdcall;
    function Set_TileHeight(pVal: LongWord): HResult; stdcall;
    function Get_DoubleBuffering(out pVal: WordBool): HResult; stdcall;
    function Set_DoubleBuffering(pVal: WordBool): HResult; stdcall;
    function Get_TransparentBackground(out pVal: WordBool): HResult; stdcall;
    function Set_TransparentBackground(pVal: WordBool): HResult; stdcall;
    function Get_GroupHeaderImages(out pVal: IDispatch): HResult; stdcall;
    function Set_GroupHeaderImages(const pVal: IDispatch): HResult; stdcall;
    function _Set_GroupHeaderImages(const pVal: IDispatch): HResult; stdcall;
    function Get_IconSpacingWidth(out pVal: Integer): HResult; stdcall;
    function Set_IconSpacingWidth(pVal: Integer): HResult; stdcall;
    function Get_IconSpacingHeight(out pVal: Integer): HResult; stdcall;
    function Set_IconSpacingHeight(pVal: Integer): HResult; stdcall;
    function Get_CustomDraw(out pVal: WordBool): HResult; stdcall;
    function Set_CustomDraw(pVal: WordBool): HResult; stdcall;
    function Arrange: HResult; stdcall;
    function Get_ReadOnlySubItems(out pVal: WordBool): HResult; stdcall;
    function Set_ReadOnlySubItems(pVal: WordBool): HResult; stdcall;
    function Get_QuickEdit(out pVal: WordBool): HResult; stdcall;
    function Set_QuickEdit(pVal: WordBool): HResult; stdcall;
    function Get_CheckByMouse(out pVal: WordBool): HResult; stdcall;
    function Set_CheckByMouse(pVal: WordBool): HResult; stdcall;
    function Set_OnColumnClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnColumnResize(Param1: OleVariant): HResult; stdcall;
    function Set_OnData(Param1: OleVariant): HResult; stdcall;
    function Set_OnItemCheck(Param1: OleVariant): HResult; stdcall;
    function Set_OnEdited(Param1: OleVariant): HResult; stdcall;
    function Set_OnBeginEdit(Param1: OleVariant): HResult; stdcall;
    function Set_OnGroupLinkClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnDrawItem(Param1: OleVariant): HResult; stdcall;
    function Set_OnSubItemEdited(Param1: OleVariant): HResult; stdcall;
    function Set_OnBeginSubItemEdit(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITreeItem
// Flags:     (4096) Dispatchable
// GUID:      {FFFF9989-481D-4921-949C-B283BD06CB44}
// *********************************************************************//
  ITreeItem = interface(IDispatch)
    ['{FFFF9989-481D-4921-949C-B283BD06CB44}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_SelectedImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_SelectedImageIndex(pVal: Integer): HResult; stdcall;
    function Get_Selected(out pVal: WordBool): HResult; stdcall;
    function Set_Selected(pVal: WordBool): HResult; stdcall;
    function Get_Expanded(out pVal: WordBool): HResult; stdcall;
    function Set_Expanded(pVal: WordBool): HResult; stdcall;
    function Get_Bold(out pVal: WordBool): HResult; stdcall;
    function Set_Bold(pVal: WordBool): HResult; stdcall;
    function Get_Checked(out pVal: WordBool): HResult; stdcall;
    function Set_Checked(pVal: WordBool): HResult; stdcall;
    function Get_HasChildren(out pVal: WordBool): HResult; stdcall;
    function Add(const Text: WideString; ImageIndex: Integer; SelectedImageIndex: Integer; 
                 out pItem: IDispatch): HResult; stdcall;
    function Insert(Index: Integer; const Text: WideString; ImageIndex: Integer; 
                    SelectedImageIndex: Integer; out pItem: IDispatch): HResult; stdcall;
    function Remove(Index: Integer): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Expand(Recurse: WordBool): HResult; stdcall;
    function Collapse: HResult; stdcall;
    function EditLabel: HResult; stdcall;
    function Sort(Recurse: WordBool): HResult; stdcall;
    function MakeVisible: HResult; stdcall;
    function Get_Parent(out pVal: IDispatch): HResult; stdcall;
    function Get_NextSibling(out pVal: IDispatch): HResult; stdcall;
    function Get_PrevSibling(out pVal: IDispatch): HResult; stdcall;
    function Get_FirstChild(out pVal: IDispatch): HResult; stdcall;
    function Get_LastChild(out pVal: IDispatch): HResult; stdcall;
    function Get_UserData(out pVal: OleVariant): HResult; stdcall;
    function Set_UserData(pVal: OleVariant): HResult; stdcall;
    function Get_Hint(out pVal: WideString): HResult; stdcall;
    function Set_Hint(const pVal: WideString): HResult; stdcall;
    function Get_Font(out pVal: IDispatch): HResult; stdcall;
    function Set_Font(const pVal: IDispatch): HResult; stdcall;
    function _Set_Font(const pVal: IDispatch): HResult; stdcall;
    function Get_TextBkColor(out pVal: LongWord): HResult; stdcall;
    function Set_TextBkColor(pVal: LongWord): HResult; stdcall;
    function ShowHint: HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITreeView
// Flags:     (4096) Dispatchable
// GUID:      {A6034589-820F-4165-9EEE-AE1E97BFB9B1}
// *********************************************************************//
  ITreeView = interface(IControl)
    ['{A6034589-820F-4165-9EEE-AE1E97BFB9B1}']
    function Get_Items(out pVal: IDispatch): HResult; stdcall;
    function Get_SelectedItem(out pVal: IDispatch): HResult; stdcall;
    function Get_TopItem(out pVal: IDispatch): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function BeginUpdate: HResult; stdcall;
    function EndUpdate: HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
    function Get_StateImages(out pVal: IDispatch): HResult; stdcall;
    function Set_StateImages(const pVal: IDispatch): HResult; stdcall;
    function _Set_StateImages(const pVal: IDispatch): HResult; stdcall;
    function Get_HasButtons(out pVal: WordBool): HResult; stdcall;
    function Set_HasButtons(pVal: WordBool): HResult; stdcall;
    function Get_HasLines(out pVal: WordBool): HResult; stdcall;
    function Set_HasLines(pVal: WordBool): HResult; stdcall;
    function Get_LinesAtRoot(out pVal: WordBool): HResult; stdcall;
    function Set_LinesAtRoot(pVal: WordBool): HResult; stdcall;
    function Get_ReadOnly(out pVal: WordBool): HResult; stdcall;
    function Set_ReadOnly(pVal: WordBool): HResult; stdcall;
    function Get_CheckBoxes(out pVal: WordBool): HResult; stdcall;
    function Set_CheckBoxes(pVal: WordBool): HResult; stdcall;
    function Get_HotTrack(out pVal: WordBool): HResult; stdcall;
    function Set_HotTrack(pVal: WordBool): HResult; stdcall;
    function Get_RowSelect(out pVal: WordBool): HResult; stdcall;
    function Set_RowSelect(pVal: WordBool): HResult; stdcall;
    function Get_HideSelection(out pVal: WordBool): HResult; stdcall;
    function Set_HideSelection(pVal: WordBool): HResult; stdcall;
    function Get_AutoExpand(out pVal: WordBool): HResult; stdcall;
    function Set_AutoExpand(pVal: WordBool): HResult; stdcall;
    function Get_InfoTip(out pVal: WordBool): HResult; stdcall;
    function Set_InfoTip(pVal: WordBool): HResult; stdcall;
    function Get_CustomDraw(out pVal: WordBool): HResult; stdcall;
    function Set_CustomDraw(pVal: WordBool): HResult; stdcall;
    function Get_DoubleBuffering(out pVal: WordBool): HResult; stdcall;
    function Set_DoubleBuffering(pVal: WordBool): HResult; stdcall;
    function Get_NoIndentState(out pVal: WordBool): HResult; stdcall;
    function Set_NoIndentState(pVal: WordBool): HResult; stdcall;
    function Get_AutoHScroll(out pVal: WordBool): HResult; stdcall;
    function Set_AutoHScroll(pVal: WordBool): HResult; stdcall;
    function Set_OnEdited(Param1: OleVariant): HResult; stdcall;
    function Set_OnExpanding(Param1: OleVariant): HResult; stdcall;
    function Set_OnExpanded(Param1: OleVariant): HResult; stdcall;
    function Set_OnCollapsing(Param1: OleVariant): HResult; stdcall;
    function Set_OnCollapsed(Param1: OleVariant): HResult; stdcall;
    function Set_OnItemCheck(Param1: OleVariant): HResult; stdcall;
    function Set_OnBeginEdit(Param1: OleVariant): HResult; stdcall;
    function Set_OnDrawItem(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IParagraph
// Flags:     (4096) Dispatchable
// GUID:      {C15C0ABE-967F-4A17-9EA9-BC68A2855C0D}
// *********************************************************************//
  IParagraph = interface(IDispatch)
    ['{C15C0ABE-967F-4A17-9EA9-BC68A2855C0D}']
    function Get_Align(out pVal: Word): HResult; stdcall;
    function Set_Align(pVal: Word): HResult; stdcall;
    function Get_Numbering(out pVal: WordBool): HResult; stdcall;
    function Set_Numbering(pVal: WordBool): HResult; stdcall;
    function Get_StartIndent(out pVal: Integer): HResult; stdcall;
    function Set_StartIndent(pVal: Integer): HResult; stdcall;
    function Get_LeftIndent(out pVal: Integer): HResult; stdcall;
    function Set_LeftIndent(pVal: Integer): HResult; stdcall;
    function Get_RightIndent(out pVal: Integer): HResult; stdcall;
    function Set_RightIndent(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IRichEdit
// Flags:     (4096) Dispatchable
// GUID:      {C775712D-FA95-49EE-971D-6DD3BE4FE703}
// *********************************************************************//
  IRichEdit = interface(IEdit)
    ['{C775712D-FA95-49EE-971D-6DD3BE4FE703}']
    function Get_SelFont(out pVal: IDispatch): HResult; stdcall;
    function Set_SelFont(const pVal: IDispatch): HResult; stdcall;
    function _Set_SelFont(const pVal: IDispatch): HResult; stdcall;
    function Get_Paragraph(out pVal: IDispatch): HResult; stdcall;
    function FindText(const Text: WideString; Flags: LongWord; MinPos: Integer; MaxPos: Integer; 
                      out pResult: Integer): HResult; stdcall;
    function Load(Stream: OleVariant; Flags: LongWord; out pResult: WordBool): HResult; stdcall;
    function Save(Stream: OleVariant; Flags: LongWord; out pResult: WordBool): HResult; stdcall;
    function Get_AutoURLDetect(out pVal: WordBool): HResult; stdcall;
    function Set_AutoURLDetect(pVal: WordBool): HResult; stdcall;
    function Get_CanRedo(out pVal: WordBool): HResult; stdcall;
    function Redo: HResult; stdcall;
    function Get_UndoLimit(out pVal: LongWord): HResult; stdcall;
    function Set_UndoLimit(pVal: LongWord): HResult; stdcall;
    function Set_OnSelChange(Param1: OleVariant): HResult; stdcall;
    function Print(const Driver: WideString; const Device: WideString; const PrintInfo: IDispatch; 
                   Selection: WordBool): HResult; stdcall;
    function Get_PageRotate(out pVal: LongWord): HResult; stdcall;
    function Set_PageRotate(pVal: LongWord): HResult; stdcall;
    function Get_UndoName(out pVal: LongWord): HResult; stdcall;
    function Get_UndoNameString(out pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUpDown
// Flags:     (4096) Dispatchable
// GUID:      {F09EE7EC-728F-4D8B-AE8E-0F5A113FD36E}
// *********************************************************************//
  IUpDown = interface(IStatusControl)
    ['{F09EE7EC-728F-4D8B-AE8E-0F5A113FD36E}']
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
    function Get_HotTrack(out pVal: WordBool): HResult; stdcall;
    function Set_HotTrack(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITrackBar
// Flags:     (4096) Dispatchable
// GUID:      {D47DC012-3D4E-4412-8A06-E747160435E0}
// *********************************************************************//
  ITrackBar = interface(IStatusControl)
    ['{D47DC012-3D4E-4412-8A06-E747160435E0}']
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
    function Get_TickMarks(out pVal: Integer): HResult; stdcall;
    function Set_TickMarks(pVal: Integer): HResult; stdcall;
    function Get_SmallChange(out pVal: LongWord): HResult; stdcall;
    function Set_SmallChange(pVal: LongWord): HResult; stdcall;
    function Get_LargeChange(out pVal: LongWord): HResult; stdcall;
    function Set_LargeChange(pVal: LongWord): HResult; stdcall;
    function Get_ThumbLength(out pVal: LongWord): HResult; stdcall;
    function Set_ThumbLength(pVal: LongWord): HResult; stdcall;
    function Get_TickFrequency(out pVal: LongWord): HResult; stdcall;
    function Set_TickFrequency(pVal: LongWord): HResult; stdcall;
    function Get_EnableSelRange(out pVal: WordBool): HResult; stdcall;
    function Set_EnableSelRange(pVal: WordBool): HResult; stdcall;
    function Get_SelStart(out pVal: Integer): HResult; stdcall;
    function Set_SelStart(pVal: Integer): HResult; stdcall;
    function Get_SelEnd(out pVal: Integer): HResult; stdcall;
    function Set_SelEnd(pVal: Integer): HResult; stdcall;
    function SelectAll: HResult; stdcall;
    function ClearSelection: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHotKey
// Flags:     (4096) Dispatchable
// GUID:      {E9013635-B5D5-48D7-81A4-41D3AFF5A717}
// *********************************************************************//
  IHotKey = interface(IControl)
    ['{E9013635-B5D5-48D7-81A4-41D3AFF5A717}']
    function Get_Key(out pVal: OleVariant): HResult; stdcall;
    function Set_Key(pVal: OleVariant): HResult; stdcall;
    function Get_InvalidKeys(out pVal: Integer): HResult; stdcall;
    function Set_InvalidKeys(pVal: Integer): HResult; stdcall;
    function Get_DefaultKey(out pVal: OleVariant): HResult; stdcall;
    function Set_DefaultKey(pVal: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAnimate
// Flags:     (4096) Dispatchable
// GUID:      {CD27766E-91BF-4D27-BA1E-CBFE3CB55BD1}
// *********************************************************************//
  IAnimate = interface(IControl)
    ['{CD27766E-91BF-4D27-BA1E-CBFE3CB55BD1}']
    function Open(newVal: OleVariant; StartPlay: WordBool; out pResult: WordBool): HResult; stdcall;
    function Play: HResult; stdcall;
    function Stop: HResult; stdcall;
    function Close: HResult; stdcall;
    function Seek(Position: Integer): HResult; stdcall;
    function Get_AutoRepeat(out pVal: WordBool): HResult; stdcall;
    function Set_AutoRepeat(pVal: WordBool): HResult; stdcall;
    function Get_Transparent(out pVal: WordBool): HResult; stdcall;
    function Set_Transparent(pVal: WordBool): HResult; stdcall;
    function Get_Center(out pVal: WordBool): HResult; stdcall;
    function Set_Center(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIPAddress
// Flags:     (4096) Dispatchable
// GUID:      {CCC32DB0-A7E0-4947-A757-9534AB58027F}
// *********************************************************************//
  IIPAddress = interface(IControl)
    ['{CCC32DB0-A7E0-4947-A757-9534AB58027F}']
    function Get_Value(out pVal: LongWord): HResult; stdcall;
    function Set_Value(pVal: LongWord): HResult; stdcall;
    function SetRange(Index: Integer; Min: Byte; Max: Byte): HResult; stdcall;
    function Get_IsBlank(out pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDateTime
// Flags:     (4096) Dispatchable
// GUID:      {E5197962-B022-4902-B92C-B46F2CCC8875}
// *********************************************************************//
  IDateTime = interface(IDispatch)
    ['{E5197962-B022-4902-B92C-B46F2CCC8875}']
    function Get_Value(out pVal: TDateTime): HResult; stdcall;
    function Set_Value(pVal: TDateTime): HResult; stdcall;
    function Get_Year(out pVal: Word): HResult; stdcall;
    function Set_Year(pVal: Word): HResult; stdcall;
    function Get_Month(out pVal: Word): HResult; stdcall;
    function Set_Month(pVal: Word): HResult; stdcall;
    function Get_Day(out pVal: Word): HResult; stdcall;
    function Set_Day(pVal: Word): HResult; stdcall;
    function Get_Hour(out pVal: Word): HResult; stdcall;
    function Set_Hour(pVal: Word): HResult; stdcall;
    function Get_Minute(out pVal: Word): HResult; stdcall;
    function Set_Minute(pVal: Word): HResult; stdcall;
    function Get_Second(out pVal: Word): HResult; stdcall;
    function Set_Second(pVal: Word): HResult; stdcall;
    function Get_Milliseconds(out pVal: Word): HResult; stdcall;
    function Set_Milliseconds(pVal: Word): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDateTimeControl
// Flags:     (4096) Dispatchable
// GUID:      {0E53C57C-CAC1-4290-8C57-559AD095F9F3}
// *********************************************************************//
  IDateTimeControl = interface(IControl)
    ['{0E53C57C-CAC1-4290-8C57-559AD095F9F3}']
    function Get_Value(out pVal: IDispatch): HResult; stdcall;
    function Get_Min(out pVal: IDispatch): HResult; stdcall;
    function Get_Max(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDateTimePicker
// Flags:     (4096) Dispatchable
// GUID:      {7FCABADD-F460-4049-ABBC-79821C613284}
// *********************************************************************//
  IDateTimePicker = interface(IDateTimeControl)
    ['{7FCABADD-F460-4049-ABBC-79821C613284}']
    function Get_Style(out pVal: LongWord): HResult; stdcall;
    function Set_Style(pVal: LongWord): HResult; stdcall;
    function Get_ShowCheckBox(out pVal: WordBool): HResult; stdcall;
    function Set_ShowCheckBox(pVal: WordBool): HResult; stdcall;
    function Get_ShowUpDown(out pVal: WordBool): HResult; stdcall;
    function Set_ShowUpDown(pVal: WordBool): HResult; stdcall;
    function Get_DropDownRightAlign(out pVal: WordBool): HResult; stdcall;
    function Set_DropDownRightAlign(pVal: WordBool): HResult; stdcall;
    function Get_CustomFormat(out pVal: WideString): HResult; stdcall;
    function Set_CustomFormat(const pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICalendar
// Flags:     (4096) Dispatchable
// GUID:      {EE27A882-AD8E-4723-AAA9-E10CFD472F75}
// *********************************************************************//
  ICalendar = interface(IDateTimeControl)
    ['{EE27A882-AD8E-4723-AAA9-E10CFD472F75}']
    function Get_MultiSelect(out pVal: WordBool): HResult; stdcall;
    function Set_MultiSelect(pVal: WordBool): HResult; stdcall;
    function Get_SelEnd(out pVal: IDispatch): HResult; stdcall;
    function Get_SelStart(out pVal: IDispatch): HResult; stdcall;
    function Get_Today(out pVal: IDispatch): HResult; stdcall;
    function Get_MonthDelta(out pVal: LongWord): HResult; stdcall;
    function Set_MonthDelta(pVal: LongWord): HResult; stdcall;
    function Get_MaxSelCount(out pVal: LongWord): HResult; stdcall;
    function Set_MaxSelCount(pVal: LongWord): HResult; stdcall;
    function Get_TodayText(out pVal: WordBool): HResult; stdcall;
    function Set_TodayText(pVal: WordBool): HResult; stdcall;
    function Get_TodayCircle(out pVal: WordBool): HResult; stdcall;
    function Set_TodayCircle(pVal: WordBool): HResult; stdcall;
    function Get_WeekNumbers(out pVal: WordBool): HResult; stdcall;
    function Set_WeekNumbers(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISplitter
// Flags:     (4096) Dispatchable
// GUID:      {76A49C6D-284D-45F0-856E-6E9714281AC5}
// *********************************************************************//
  ISplitter = interface(IControl)
    ['{76A49C6D-284D-45F0-856E-6E9714281AC5}']
  end;

// *********************************************************************//
// Interface: ISplitPanel
// Flags:     (4096) Dispatchable
// GUID:      {7BB7C6EB-B2E7-4472-94C0-B22CC0457E80}
// *********************************************************************//
  ISplitPanel = interface(IFrame)
    ['{7BB7C6EB-B2E7-4472-94C0-B22CC0457E80}']
    function Get_DefaultSplit(out pVal: Double): HResult; stdcall;
    function Set_DefaultSplit(pVal: Double): HResult; stdcall;
    function Get_Live(out pVal: WordBool): HResult; stdcall;
    function Set_Live(pVal: WordBool): HResult; stdcall;
    function Get_Vertical(out pVal: WordBool): HResult; stdcall;
    function Set_Vertical(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPolygon
// Flags:     (4096) Dispatchable
// GUID:      {01F209D7-27B9-41CD-8DAE-0DAF2875A8FA}
// *********************************************************************//
  IPolygon = interface(IControl)
    ['{01F209D7-27B9-41CD-8DAE-0DAF2875A8FA}']
    function Get_FillAll(out pVal: WordBool): HResult; stdcall;
    function Set_FillAll(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IImage
// Flags:     (4096) Dispatchable
// GUID:      {DAF6D7B8-1AB3-4DAC-8BDA-4E5234AD8731}
// *********************************************************************//
  IImage = interface(IControl)
    ['{DAF6D7B8-1AB3-4DAC-8BDA-4E5234AD8731}']
    function Get_DrawType(out pVal: LongWord): HResult; stdcall;
    function Set_DrawType(pVal: LongWord): HResult; stdcall;
    function Get_CopyMode(out pVal: LongWord): HResult; stdcall;
    function Set_CopyMode(pVal: LongWord): HResult; stdcall;
    function Get_ImageWidth(out pVal: LongWord): HResult; stdcall;
    function Get_ImageHeight(out pVal: LongWord): HResult; stdcall;
    function Get_AlphaBlend(out pVal: LongWord): HResult; stdcall;
    function Set_AlphaBlend(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILine
// Flags:     (4096) Dispatchable
// GUID:      {D6D9AAA2-739F-4807-814E-0E7692E18E62}
// *********************************************************************//
  ILine = interface(IControl)
    ['{D6D9AAA2-739F-4807-814E-0E7692E18E62}']
    function Get_x(Index: Integer; out pVal: Integer): HResult; stdcall;
    function Set_x(Index: Integer; pVal: Integer): HResult; stdcall;
    function Get_y(Index: Integer; out pVal: Integer): HResult; stdcall;
    function Set_y(Index: Integer; pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPrintDialogBase
// Flags:     (4096) Dispatchable
// GUID:      {0E609193-AF42-4ECC-9897-4F279B659D1F}
// *********************************************************************//
  IPrintDialogBase = interface(IDispatch)
    ['{0E609193-AF42-4ECC-9897-4F279B659D1F}']
    function Get_Driver(out pVal: WideString): HResult; stdcall;
    function Get_Device(out pVal: WideString): HResult; stdcall;
    function Get_Port(out pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPrintDialog
// Flags:     (4096) Dispatchable
// GUID:      {A48A739A-BAAF-4693-B8AE-B594065B8D17}
// *********************************************************************//
  IPrintDialog = interface(IPrintDialogBase)
    ['{A48A739A-BAAF-4693-B8AE-B594065B8D17}']
    function Get_Copies(out pVal: Integer): HResult; stdcall;
    function Get_Collate(out pVal: WordBool): HResult; stdcall;
    function Get_Selection(out pVal: WordBool): HResult; stdcall;
    function Get_All(out pVal: WordBool): HResult; stdcall;
    function Get_Range(out pVal: WordBool): HResult; stdcall;
    function Get_ToFile(out pVal: WordBool): HResult; stdcall;
    function Get_FromPage(out pVal: Integer): HResult; stdcall;
    function Get_ToPage(out pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPageSetupDialog
// Flags:     (4096) Dispatchable
// GUID:      {740AE358-3778-4F25-89E8-CAE218F9F14C}
// *********************************************************************//
  IPageSetupDialog = interface(IPrintDialogBase)
    ['{740AE358-3778-4F25-89E8-CAE218F9F14C}']
    function Get_PaperWidth(out pVal: Integer): HResult; stdcall;
    function Get_PaperHeight(out pVal: Integer): HResult; stdcall;
    function Get_LeftMargin(out pVal: Integer): HResult; stdcall;
    function Get_RightMargin(out pVal: Integer): HResult; stdcall;
    function Get_TopMargin(out pVal: Integer): HResult; stdcall;
    function Get_BottomMargin(out pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFindReplaceDialog
// Flags:     (4096) Dispatchable
// GUID:      {A156794D-9CF8-4AC9-84B8-D657F8ECCAF1}
// *********************************************************************//
  IFindReplaceDialog = interface(IObject)
    ['{A156794D-9CF8-4AC9-84B8-D657F8ECCAF1}']
    function Get_FindText(out pVal: WideString): HResult; stdcall;
    function Get_ReplaceText(out pVal: WideString): HResult; stdcall;
    function Get_SearchDown(out pVal: WordBool): HResult; stdcall;
    function Get_MatchCase(out pVal: WordBool): HResult; stdcall;
    function Get_WholeWord(out pVal: WordBool): HResult; stdcall;
    function Close: HResult; stdcall;
    function Set_OnFind(Param1: OleVariant): HResult; stdcall;
    function Set_OnReplace(Param1: OleVariant): HResult; stdcall;
    function Set_OnReplaceAll(Param1: OleVariant): HResult; stdcall;
    function Set_OnClose(Param1: OleVariant): HResult; stdcall;
    function Set_OnHelp(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFontDialog
// Flags:     (4096) Dispatchable
// GUID:      {7C57CB6F-E98B-4E58-9813-DD46E590B79B}
// *********************************************************************//
  IFontDialog = interface(IObject)
    ['{7C57CB6F-E98B-4E58-9813-DD46E590B79B}']
    function Get_Flags(out pVal: LongWord): HResult; stdcall;
    function Set_Flags(pVal: LongWord): HResult; stdcall;
    function Get_Font(out pVal: IDispatch): HResult; stdcall;
    function Set_Font(const pVal: IDispatch): HResult; stdcall;
    function _Set_Font(const pVal: IDispatch): HResult; stdcall;
    function Execute(out pResult: WordBool): HResult; stdcall;
    function Set_OnHelp(Param1: OleVariant): HResult; stdcall;
    function Set_OnApply(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IColorDialog
// Flags:     (4096) Dispatchable
// GUID:      {5A8CE32D-69D3-45F1-BE74-531AEBA638DB}
// *********************************************************************//
  IColorDialog = interface(IObject)
    ['{5A8CE32D-69D3-45F1-BE74-531AEBA638DB}']
    function Get_Flags(out pVal: LongWord): HResult; stdcall;
    function Set_Flags(pVal: LongWord): HResult; stdcall;
    function Get_Color(out pVal: LongWord): HResult; stdcall;
    function Set_Color(pVal: LongWord): HResult; stdcall;
    function Execute(out pResult: WordBool): HResult; stdcall;
    function Set_OnHelp(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFileOpenSaveDialog
// Flags:     (4096) Dispatchable
// GUID:      {B7ED6BDC-9791-4B8F-979E-990CD76A394A}
// *********************************************************************//
  IFileOpenSaveDialog = interface(IObject)
    ['{B7ED6BDC-9791-4B8F-979E-990CD76A394A}']
    function Get_DefaultExt(out pVal: WideString): HResult; stdcall;
    function Set_DefaultExt(const pVal: WideString): HResult; stdcall;
    function Get_Filter(out pVal: WideString): HResult; stdcall;
    function Set_Filter(const pVal: WideString): HResult; stdcall;
    function Get_FileName(out pVal: WideString): HResult; stdcall;
    function Set_FileName(const pVal: WideString): HResult; stdcall;
    function Get_Flags(out pVal: LongWord): HResult; stdcall;
    function Set_Flags(pVal: LongWord): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_FilterIndex(out pVal: LongWord): HResult; stdcall;
    function Set_FilterIndex(pVal: LongWord): HResult; stdcall;
    function Get_Directory(out pVal: WideString): HResult; stdcall;
    function Set_Directory(const pVal: WideString): HResult; stdcall;
    function Execute(out pResult: WordBool): HResult; stdcall;
    function Get_OverwritePrompt(out pVal: WordBool): HResult; stdcall;
    function Set_OverwritePrompt(pVal: WordBool): HResult; stdcall;
    function Get_AllowMultiselect(out pVal: WordBool): HResult; stdcall;
    function Set_AllowMultiselect(pVal: WordBool): HResult; stdcall;
    function Get_PathMustExist(out pVal: WordBool): HResult; stdcall;
    function Set_PathMustExist(pVal: WordBool): HResult; stdcall;
    function Get_FileMustExist(out pVal: WordBool): HResult; stdcall;
    function Set_FileMustExist(pVal: WordBool): HResult; stdcall;
    function Get_CreatePrompt(out pVal: WordBool): HResult; stdcall;
    function Set_CreatePrompt(pVal: WordBool): HResult; stdcall;
    function Get_NoReadOnlyReturn(out pVal: WordBool): HResult; stdcall;
    function Set_NoReadOnlyReturn(pVal: WordBool): HResult; stdcall;
    function Get_NoTestFileCreate(out pVal: WordBool): HResult; stdcall;
    function Set_NoTestFileCreate(pVal: WordBool): HResult; stdcall;
    function Get_NoDereferenceLinks(out pVal: WordBool): HResult; stdcall;
    function Set_NoDereferenceLinks(pVal: WordBool): HResult; stdcall;
    function Get_DontAddToRecent(out pVal: WordBool): HResult; stdcall;
    function Set_DontAddToRecent(pVal: WordBool): HResult; stdcall;
    function Get_ForceShowHidden(out pVal: WordBool): HResult; stdcall;
    function Set_ForceShowHidden(pVal: WordBool): HResult; stdcall;
    function Get_NoPlacesBar(out pVal: WordBool): HResult; stdcall;
    function Set_NoPlacesBar(pVal: WordBool): HResult; stdcall;
    function Get_ForceFileSystem(out pVal: WordBool): HResult; stdcall;
    function Set_ForceFileSystem(pVal: WordBool): HResult; stdcall;
    function Get_AllNonStorageItems(out pVal: WordBool): HResult; stdcall;
    function Set_AllNonStorageItems(pVal: WordBool): HResult; stdcall;
    function Get_HideMRUPlaces(out pVal: WordBool): HResult; stdcall;
    function Set_HideMRUPlaces(pVal: WordBool): HResult; stdcall;
    function Get_HidePinnedPlaces(out pVal: WordBool): HResult; stdcall;
    function Set_HidePinnedPlaces(pVal: WordBool): HResult; stdcall;
    function Get_DefaultNoMiniMode(out pVal: WordBool): HResult; stdcall;
    function Set_DefaultNoMiniMode(pVal: WordBool): HResult; stdcall;
    function Get_ForcePreviewPaneOn(out pVal: WordBool): HResult; stdcall;
    function Set_ForcePreviewPaneOn(pVal: WordBool): HResult; stdcall;
    function Get_FileNames(out pVal: IDispatch): HResult; stdcall;
    function AddPlace(const Value: WideString; const Name: WideString; Placement: Integer): HResult; stdcall;
    function Get_ClientGuid(out pVal: WideString): HResult; stdcall;
    function Set_ClientGuid(const pVal: WideString): HResult; stdcall;
    function Set_OnCloseQuery(Param1: OleVariant): HResult; stdcall;
    function Set_OnChange(Param1: OleVariant): HResult; stdcall;
    function Set_OnFolderChange(Param1: OleVariant): HResult; stdcall;
    function Set_OnTypeChange(Param1: OleVariant): HResult; stdcall;
    function Set_OnHelp(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISelectFolderDialog
// Flags:     (4096) Dispatchable
// GUID:      {6F63CD78-C21E-4A64-90EC-90FCE7789897}
// *********************************************************************//
  ISelectFolderDialog = interface(IObject)
    ['{6F63CD78-C21E-4A64-90EC-90FCE7789897}']
    function Get_Flags(out pVal: LongWord): HResult; stdcall;
    function Set_Flags(pVal: LongWord): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_Value(out pVal: WideString): HResult; stdcall;
    function Set_Value(const pVal: WideString): HResult; stdcall;
    function Get_Root(out pVal: WideString): HResult; stdcall;
    function Set_Root(const pVal: WideString): HResult; stdcall;
    function Get_StatusText(out pVal: WideString): HResult; stdcall;
    function Set_StatusText(const pVal: WideString): HResult; stdcall;
    function Get_Title(out pVal: WideString): HResult; stdcall;
    function Set_Title(const pVal: WideString): HResult; stdcall;
    function Get_EnableOK(out pVal: WordBool): HResult; stdcall;
    function Set_EnableOK(pVal: WordBool): HResult; stdcall;
    function Execute(out pResult: WordBool): HResult; stdcall;
    function Close: HResult; stdcall;
    function Set_OnChange(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITimer
// Flags:     (4096) Dispatchable
// GUID:      {A70DBA20-F39F-4B55-BC04-7E5FE2C495B7}
// *********************************************************************//
  ITimer = interface(IObject)
    ['{A70DBA20-F39F-4B55-BC04-7E5FE2C495B7}']
    function Get_Active(out pVal: WordBool): HResult; stdcall;
    function Set_Active(pVal: WordBool): HResult; stdcall;
    function Get_Interval(out pVal: LongWord): HResult; stdcall;
    function Set_Interval(pVal: LongWord): HResult; stdcall;
    function Set_OnExecute(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITrayIcon
// Flags:     (4096) Dispatchable
// GUID:      {4AAC7C83-5BF6-44A6-AD8A-FD431D23DD79}
// *********************************************************************//
  ITrayIcon = interface(IObject)
    ['{4AAC7C83-5BF6-44A6-AD8A-FD431D23DD79}']
    function Get_Active(out pVal: WordBool): HResult; stdcall;
    function Set_Active(pVal: WordBool): HResult; stdcall;
    function Get_Images(out pVal: IDispatch): HResult; stdcall;
    function Set_Images(const pVal: IDispatch): HResult; stdcall;
    function _Set_Images(const pVal: IDispatch): HResult; stdcall;
    function Get_ImageIndex(out pVal: Integer): HResult; stdcall;
    function Set_ImageIndex(pVal: Integer): HResult; stdcall;
    function Get_Hint(out pVal: WideString): HResult; stdcall;
    function Set_Hint(const pVal: WideString): HResult; stdcall;
    function Get_PopupMenu(out pVal: IDispatch): HResult; stdcall;
    function Set_PopupMenu(const pVal: IDispatch): HResult; stdcall;
    function _Set_PopupMenu(const pVal: IDispatch): HResult; stdcall;
    function Get_BalloonTip(out pVal: IDispatch): HResult; stdcall;
    function Set_OnClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnDblClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseDown(Param1: OleVariant): HResult; stdcall;
    function Set_OnMouseUp(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IRegions
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {179741BD-E3DA-4A18-B9C1-039785089B03}
// *********************************************************************//
  IRegions = interface(IDispatch)
    ['{179741BD-E3DA-4A18-B9C1-039785089B03}']
    function CombineRgn(hrgnSrc1: LongWord; hrgnSrc2: LongWord; fnCombineMode: Integer; 
                        out pRegion: IDispatch): HResult; stdcall;
    function CreateEllipticRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pRegion: IDispatch): HResult; stdcall;
    function CreatePolygonRgn(Data: PSafeArray; out pRegion: IDispatch): HResult; stdcall;
    function CreateRectRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pRegion: IDispatch): HResult; stdcall;
    function CreateRoundRectRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                nWidthEllipse: Integer; nHeightEllipse: Integer; 
                                out pRegion: IDispatch): HResult; stdcall;
    function TransformRgn(ARegion: LongWord; eM11: Single; eM12: Single; eM21: Single; 
                          eM22: Single; eDx: Single; eDy: Single; out pRegion: IDispatch): HResult; stdcall;
    function EqualRgn(hSrcRgn1: LongWord; hSrcRgn2: LongWord; out pResult: WordBool): HResult; stdcall;
    function CreateRgnFromImage(Image: OleVariant; MaskColor: LongWord; out Region: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IRegion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB9FCB6F-2C14-4568-BADF-E7C0B022A654}
// *********************************************************************//
  IRegion = interface(IDispatch)
    ['{BB9FCB6F-2C14-4568-BADF-E7C0B022A654}']
    function Get_Value: LongWord; safecall;
    property Value: LongWord read Get_Value;
  end;

// *********************************************************************//
// DispIntf:  IRegionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB9FCB6F-2C14-4568-BADF-E7C0B022A654}
// *********************************************************************//
  IRegionDisp = dispinterface
    ['{BB9FCB6F-2C14-4568-BADF-E7C0B022A654}']
    property Value: LongWord readonly dispid 0;
  end;

// *********************************************************************//
// Interface: IScreen
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {D0D86627-9E34-438F-92E2-8EC9C1ABE8C5}
// *********************************************************************//
  IScreen = interface(IDispatch)
    ['{D0D86627-9E34-438F-92E2-8EC9C1ABE8C5}']
    function Get_Width(out pVal: Integer): HResult; stdcall;
    function Get_Height(out pVal: Integer): HResult; stdcall;
    function Get_PixelsPerInchX(out pVal: Integer): HResult; stdcall;
    function Get_PixelsPerInchY(out pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHint
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {00017030-B197-4EBC-804F-748CF210108E}
// *********************************************************************//
  IHint = interface(IDispatch)
    ['{00017030-B197-4EBC-804F-748CF210108E}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_Title(out pVal: WideString): HResult; stdcall;
    function Set_Title(const pVal: WideString): HResult; stdcall;
    function Get_Image(out pVal: Integer): HResult; stdcall;
    function Set_Image(pVal: Integer): HResult; stdcall;
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function Get_Balloon(out pVal: WordBool): HResult; stdcall;
    function Set_Balloon(pVal: WordBool): HResult; stdcall;
    function Get_AlwaysTip(out pVal: WordBool): HResult; stdcall;
    function Set_AlwaysTip(pVal: WordBool): HResult; stdcall;
    function Get_NoPrefix(out pVal: WordBool): HResult; stdcall;
    function Set_NoPrefix(pVal: WordBool): HResult; stdcall;
    function Get_MaxWidth(out pVal: Integer): HResult; stdcall;
    function Set_MaxWidth(pVal: Integer): HResult; stdcall;
    function Get_ParentData(out pVal: WordBool): HResult; stdcall;
    function Set_ParentData(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEventHandler
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {5273BA8F-609D-4959-9A72-92AD3EADA060}
// *********************************************************************//
  IEventHandler = interface(IObject)
    ['{5273BA8F-609D-4959-9A72-92AD3EADA060}']
    function Execute: HResult; stdcall;
    function Set_OnExecute(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IWindowSystemObjectExtensions
// Flags:     (4096) Dispatchable
// GUID:      {1DD6DE1E-DB95-45FE-B2A8-655177B8E8DB}
// *********************************************************************//
  IWindowSystemObjectExtensions = interface(IDispatch)
    ['{1DD6DE1E-DB95-45FE-B2A8-655177B8E8DB}']
    function SendMessage(Control: OleVariant; Message: Integer; wParam: Integer; 
                         lParam: OleVariant; out pVal: OleVariant): HResult; stdcall;
    function PostMessage(Control: OleVariant; Message: Integer; wParam: Integer; 
                         lParam: OleVariant; out pVal: OleVariant): HResult; stdcall;
    function AddMessageHandler(const Control: IDispatch; Message: Integer; 
                               MessageHandler: OleVariant): HResult; stdcall;
    function RegisterWindowMessage(const Message: WideString; out MessageId: LongWord): HResult; stdcall;
    function EnumWindows(out Result: IDispatch): HResult; stdcall;
    function SendCopyData(Control: OleVariant; const Data: WideString; out pVal: OleVariant): HResult; stdcall;
    function PostCopyData(Control: OleVariant; const Data: WideString; out pVal: OleVariant): HResult; stdcall;
    function CreateClipboard(ClipboardViewer: WordBool; out Clipboard: IDispatch): HResult; stdcall;
    function Get_SystemImageListSmall(out pVal: IDispatch): HResult; stdcall;
    function Get_SystemImageListLarge(out pVal: IDispatch): HResult; stdcall;
    function GetFileSysIconIndexSmall(const pVal: WideString; FileAttributes: LongWord; 
                                      out Result: LongWord): HResult; stdcall;
    function GetFileSysIconIndexLarge(const pVal: WideString; FileAttributes: LongWord; 
                                      out Result: LongWord): HResult; stdcall;
    function Get_IsWindowsXP(out pVal: WordBool): HResult; stdcall;
    function Get_IsWindowsVista(out pVal: WordBool): HResult; stdcall;
    function Get_IsWindows7(out pVal: WordBool): HResult; stdcall;
    function Get_IsWindows8(out pVal: WordBool): HResult; stdcall;
    function Get_IsThemeActive(out pVal: WordBool): HResult; stdcall;
    function UuidCreate(out Result: WideString): HResult; stdcall;
    function CreateIconBuilder(out Result: IDispatch): HResult; stdcall;
    function CreateExecutor(out Result: IDispatch): HResult; stdcall;
    function CreateFileManager(out Result: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPrintInfo
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {5C615F2E-9B71-4394-9C88-95EE52F97849}
// *********************************************************************//
  IPrintInfo = interface(IObject)
    ['{5C615F2E-9B71-4394-9C88-95EE52F97849}']
    function Get_DocumentName(out pVal: WideString): HResult; stdcall;
    function Set_DocumentName(const pVal: WideString): HResult; stdcall;
    function Get_LeftMargin(out pVal: Integer): HResult; stdcall;
    function Set_LeftMargin(pVal: Integer): HResult; stdcall;
    function Get_RightMargin(out pVal: Integer): HResult; stdcall;
    function Set_RightMargin(pVal: Integer): HResult; stdcall;
    function Get_TopMargin(out pVal: Integer): HResult; stdcall;
    function Set_TopMargin(pVal: Integer): HResult; stdcall;
    function Get_BottomMargin(out pVal: Integer): HResult; stdcall;
    function Set_BottomMargin(pVal: Integer): HResult; stdcall;
    function Get_MarginMeasurement(out pVal: Integer): HResult; stdcall;
    function Set_MarginMeasurement(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStdDispatch
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {C0615DB9-9C1D-42B0-8EB5-8CC8AF95B110}
// *********************************************************************//
  IStdDispatch = interface(IDispatch)
    ['{C0615DB9-9C1D-42B0-8EB5-8CC8AF95B110}']
  end;

// *********************************************************************//
// Interface: IBalloonTip
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {A16801B1-8BA4-4F0D-A589-86443B09037C}
// *********************************************************************//
  IBalloonTip = interface(IDispatch)
    ['{A16801B1-8BA4-4F0D-A589-86443B09037C}']
    function Get_Title(out pVal: WideString): HResult; stdcall;
    function Set_Title(const pVal: WideString): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_Icon(out pVal: Integer): HResult; stdcall;
    function Set_Icon(pVal: Integer): HResult; stdcall;
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function Get_Timeout(out pVal: LongWord): HResult; stdcall;
    function Set_Timeout(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IWindow
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {BEF454E2-AC05-40F6-BCFD-300B70CAD3FC}
// *********************************************************************//
  IWindow = interface(IDispatch)
    ['{BEF454E2-AC05-40F6-BCFD-300B70CAD3FC}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ClassName(out pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IClipboardEvents
// Flags:     (4096) Dispatchable
// GUID:      {FBAA7B25-99FF-4B15-832D-5A85EF97F814}
// *********************************************************************//
  IClipboardEvents = dispinterface
    ['{FBAA7B25-99FF-4B15-832D-5A85EF97F814}']
    procedure OnChange(const Sender: IDispatch); dispid 1;
  end;

// *********************************************************************//
// Interface: ClipboardEvents
// Flags:     (4096) Dispatchable
// GUID:      {1CD8E952-7F59-4429-81FB-CADDDD77AE72}
// *********************************************************************//
  ClipboardEvents = interface(IDispatch)
    ['{1CD8E952-7F59-4429-81FB-CADDDD77AE72}']
    function OnChange(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IClipboard
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {3CA40ACA-6385-4080-BFC9-82437A0FF90D}
// *********************************************************************//
  IClipboard = interface(IObject)
    ['{3CA40ACA-6385-4080-BFC9-82437A0FF90D}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ClipboardViewer(out pVal: WordBool): HResult; stdcall;
    function Set_ClipboardViewer(pVal: WordBool): HResult; stdcall;
    function Empty: HResult; stdcall;
    function Set_OnChange(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITaskBar
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {805EF906-67A7-4A9D-B026-1F5AA4E9303C}
// *********************************************************************//
  ITaskBar = interface(IDispatch)
    ['{805EF906-67A7-4A9D-B026-1F5AA4E9303C}']
    function AddImages(const newVal: IDispatch): HResult; stdcall;
    function Get_Buttons(out pVal: IDispatch): HResult; stdcall;
    function Set_Buttons(const pVal: IDispatch): HResult; stdcall;
    function _Set_Buttons(const pVal: IDispatch): HResult; stdcall;
    function SetThumbnailClip(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult; stdcall;
    function Get_State(out pVal: Integer): HResult; stdcall;
    function Set_State(pVal: Integer): HResult; stdcall;
    function Get_Max(out pVal: LongWord): HResult; stdcall;
    function Set_Max(pVal: LongWord): HResult; stdcall;
    function Get_Position(out pVal: LongWord): HResult; stdcall;
    function Set_Position(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IResourceUsageGraph
// Flags:     (4096) Dispatchable
// GUID:      {F61F2DE3-D729-4ADB-B1E2-6F4B496000F9}
// *********************************************************************//
  IResourceUsageGraph = interface(IDateTimeControl)
    ['{F61F2DE3-D729-4ADB-B1E2-6F4B496000F9}']
    function Get_Page(out pVal: LongWord): HResult; stdcall;
    function Set_Page(pVal: LongWord): HResult; stdcall;
    function Add(Offset: LongWord; Value: Double): HResult; stdcall;
    function AddEx(Offset: LongWord; Value: Double; const Text: WideString): HResult; stdcall;
    function Get_MinYValue(out pVal: Double): HResult; stdcall;
    function Set_MinYValue(pVal: Double): HResult; stdcall;
    function Get_MaxYValue(out pVal: Double): HResult; stdcall;
    function Set_MaxYValue(pVal: Double): HResult; stdcall;
    function Get_BackgroundBrush(out pVal: IDispatch): HResult; stdcall;
    function Set_BackgroundBrush(const pVal: IDispatch): HResult; stdcall;
    function _Set_BackgroundBrush(const pVal: IDispatch): HResult; stdcall;
    function Get_PageControlWidth(out pVal: LongWord): HResult; stdcall;
    function Set_PageControlWidth(pVal: LongWord): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Get_SelectedValue(out pVal: LongWord): HResult; stdcall;
    function Set_SelectedValue(pVal: LongWord): HResult; stdcall;
    function Get_SelectedYValue(out pVal: Double): HResult; stdcall;
    function Get_SelectedIndex(out pVal: Integer): HResult; stdcall;
    function Set_SelectedIndex(pVal: Integer): HResult; stdcall;
    function BeginUpdate: HResult; stdcall;
    function EndUpdate: HResult; stdcall;
    function Get_Approximation(out pVal: WordBool): HResult; stdcall;
    function Set_Approximation(pVal: WordBool): HResult; stdcall;
    function Get_AlwaysFillWindow(out pVal: WordBool): HResult; stdcall;
    function Set_AlwaysFillWindow(pVal: WordBool): HResult; stdcall;
    function Get_AutoRemove(out pVal: WordBool): HResult; stdcall;
    function Set_AutoRemove(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IProperty
// Flags:     (4096) Dispatchable
// GUID:      {0C78AFD5-6C85-4D18-971A-B3BDC0FD0FFE}
// *********************************************************************//
  IProperty = interface(IObject)
    ['{0C78AFD5-6C85-4D18-971A-B3BDC0FD0FFE}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Add(const Text: WideString; out pItem: IDispatch): HResult; stdcall;
    function Remove(Index: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_Expanded(out pVal: WordBool): HResult; stdcall;
    function Set_Expanded(pVal: WordBool): HResult; stdcall;
    function Get_Value(out pVal: WideString): HResult; stdcall;
    function Set_Value(const pVal: WideString): HResult; stdcall;
    function Get_Control(out pVal: IDispatch): HResult; stdcall;
    function Get_Height(out pVal: LongWord): HResult; stdcall;
    function Set_Height(pVal: LongWord): HResult; stdcall;
    function Get_Selected(out pVal: WordBool): HResult; stdcall;
    function Set_Selected(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPropertyGrid
// Flags:     (4096) Dispatchable
// GUID:      {A10865D8-EEF9-412E-AD54-36B52F1F5D3F}
// *********************************************************************//
  IPropertyGrid = interface(IFrame)
    ['{A10865D8-EEF9-412E-AD54-36B52F1F5D3F}']
    function Get_Items(out pVal: IDispatch): HResult; stdcall;
    function Get_ValueColor(out pVal: LongWord): HResult; stdcall;
    function Set_ValueColor(pVal: LongWord): HResult; stdcall;
    function Get_Property_(out pVal: IDispatch): HResult; stdcall;
    function Set_Property_(const pVal: IDispatch): HResult; stdcall;
    function Get_SelectedItem(out pVal: IDispatch): HResult; stdcall;
    function Set_SelectedItem(const pVal: IDispatch): HResult; stdcall;
    function Lookup(Value: OleVariant; out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IConsole
// Flags:     (4096) Dispatchable
// GUID:      {501853C5-0B67-4372-866C-9D082B219BFE}
// *********************************************************************//
  IConsole = interface(IObject)
    ['{501853C5-0B67-4372-866C-9D082B219BFE}']
    function Get_Visible(out pVal: WordBool): HResult; stdcall;
    function Set_Visible(pVal: WordBool): HResult; stdcall;
    function WriteLine(const Text: WideString): HResult; stdcall;
    function Write(const Text: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDocking
// Flags:     (4096) Dispatchable
// GUID:      {7C323E2F-57F2-46DB-BAD5-CBCFD7CCE9C8}
// *********************************************************************//
  IDocking = interface(IDispatch)
    ['{7C323E2F-57F2-46DB-BAD5-CBCFD7CCE9C8}']
    function Get_UniqueId(out pVal: WideString): HResult; stdcall;
    function Set_UniqueId(const pVal: WideString): HResult; stdcall;
    function DockAsChild(const Control: IDispatch; ControlAlign: Word): HResult; stdcall;
    function DockAsNeighbour(const Control: IDispatch; ControlAlign: Word): HResult; stdcall;
    function UnDock(ControlVisible: WordBool): HResult; stdcall;
    function Get_AllowDockAsChild(out pVal: WordBool): HResult; stdcall;
    function Set_AllowDockAsChild(pVal: WordBool): HResult; stdcall;
    function Get_AllowDockAsNeighbour(out pVal: WordBool): HResult; stdcall;
    function Set_AllowDockAsNeighbour(pVal: WordBool): HResult; stdcall;
    function Get_DropTarget(out pVal: WordBool): HResult; stdcall;
    function Set_DropTarget(pVal: WordBool): HResult; stdcall;
    function Get_AlwaysDockTab(out pVal: WordBool): HResult; stdcall;
    function Set_AlwaysDockTab(pVal: WordBool): HResult; stdcall;
    function Get_AlwaysDockPage(out pVal: WordBool): HResult; stdcall;
    function Set_AlwaysDockPage(pVal: WordBool): HResult; stdcall;
    function Get_DockToolWindow(out pVal: WordBool): HResult; stdcall;
    function Set_DockToolWindow(pVal: WordBool): HResult; stdcall;
    function Get_AutoCreated(out pVal: WordBool): HResult; stdcall;
    function Set_AutoCreated(pVal: WordBool): HResult; stdcall;
    function Get_PageControlTag(out pVal: Integer): HResult; stdcall;
    function Set_PageControlTag(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IGraphicElement
// Flags:     (4096) Dispatchable
// GUID:      {73A618A4-D771-4BE2-BFE6-4ADB0B0C3703}
// *********************************************************************//
  IGraphicElement = interface(IDispatch)
    ['{73A618A4-D771-4BE2-BFE6-4ADB0B0C3703}']
    function Get_Color(out pVal: LongWord): HResult; stdcall;
    function Set_Color(pVal: LongWord): HResult; stdcall;
    function Get_FontColor(out pVal: LongWord): HResult; stdcall;
    function Set_FontColor(pVal: LongWord): HResult; stdcall;
    function Get_Normal(out pVal: IDispatch): HResult; stdcall;
    function Get_Selected(out pVal: IDispatch): HResult; stdcall;
    function Get_Hot(out pVal: IDispatch): HResult; stdcall;
    function Get_ControlFocused(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IBeginDockContext
// Flags:     (4096) Dispatchable
// GUID:      {A93F1DA9-1F87-41F2-93F7-56F33DE002D5}
// *********************************************************************//
  IBeginDockContext = interface(IDispatch)
    ['{A93F1DA9-1F87-41F2-93F7-56F33DE002D5}']
    function Get_AllowDropTargetPageControlType(out pVal: WordBool): HResult; stdcall;
    function Set_AllowDropTargetPageControlType(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDockControlCreateContext
// Flags:     (4096) Dispatchable
// GUID:      {AE0D893C-7F42-466A-8F50-3D2216828B4C}
// *********************************************************************//
  IDockControlCreateContext = interface(IDispatch)
    ['{AE0D893C-7F42-466A-8F50-3D2216828B4C}']
    function Get_UseDropTargetPageControlType(out pVal: WordBool): HResult; stdcall;
    function Set_UseDropTargetPageControlType(pVal: WordBool): HResult; stdcall;
    function Get_Target(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUndockContext
// Flags:     (4096) Dispatchable
// GUID:      {92FAA2DB-8F11-4A1F-8B05-CCD1A97098E3}
// *********************************************************************//
  IUndockContext = interface(IResult)
    ['{92FAA2DB-8F11-4A1F-8B05-CCD1A97098E3}']
    function Get_ControlVisible(out pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IColor
// Flags:     (4096) Dispatchable
// GUID:      {C5EE68E8-EB57-491A-B7A9-50AC5EA07B79}
// *********************************************************************//
  IColor = interface(IDispatch)
    ['{C5EE68E8-EB57-491A-B7A9-50AC5EA07B79}']
    function Light(Color: LongWord; Shift: Double; out Result: LongWord): HResult; stdcall;
    function Dark(Color: LongWord; Shift: Double; out Result: LongWord): HResult; stdcall;
    function Invert(Color: LongWord; out Result: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILayering
// Flags:     (4096) Dispatchable
// GUID:      {B23A2C07-3A36-4ADC-B695-94B8814AAF80}
// *********************************************************************//
  ILayering = interface(IDispatch)
    ['{B23A2C07-3A36-4ADC-B695-94B8814AAF80}']
    function Get_Layered(out pVal: WordBool): HResult; stdcall;
    function Set_Layered(pVal: WordBool): HResult; stdcall;
    function Get_Alpha(out pVal: Byte): HResult; stdcall;
    function Set_Alpha(pVal: Byte): HResult; stdcall;
    function Get_TransparentColor(out pVal: LongWord): HResult; stdcall;
    function Set_TransparentColor(pVal: LongWord): HResult; stdcall;
    function Get_Flags(out pVal: LongWord): HResult; stdcall;
    function Set_Flags(pVal: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMessageDialog
// Flags:     (4096) Dispatchable
// GUID:      {FA9F97C8-A273-412E-A708-285BEB3CABC5}
// *********************************************************************//
  IMessageDialog = interface(IObject)
    ['{FA9F97C8-A273-412E-A708-285BEB3CABC5}']
    function AddButton(ID: Integer; const Text: WideString): HResult; stdcall;
    function AddIcon(ID: LongWord): HResult; stdcall;
    function Execute(out Result: Integer): HResult; stdcall;
    function Get_DefaultButton(out pVal: Integer): HResult; stdcall;
    function Set_DefaultButton(pVal: Integer): HResult; stdcall;
    function Get_CancelButton(out pVal: Integer): HResult; stdcall;
    function Set_CancelButton(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITaskDialog
// Flags:     (4096) Dispatchable
// GUID:      {AE2631CE-2F75-4936-92D2-F2FD0097954C}
// *********************************************************************//
  ITaskDialog = interface(IObject)
    ['{AE2631CE-2F75-4936-92D2-F2FD0097954C}']
    function AddButton(ID: Integer; const Text: WideString): HResult; stdcall;
    function AddCommandLinkButton(ID: Integer; const Text: WideString): HResult; stdcall;
    function AddRadioButton(ID: Integer; const Text: WideString): HResult; stdcall;
    function Execute(out Result: Integer): HResult; stdcall;
    function Get_Icon(out pVal: LongWord): HResult; stdcall;
    function Set_Icon(pVal: LongWord): HResult; stdcall;
    function Get_MainInstruction(out pVal: WideString): HResult; stdcall;
    function Set_MainInstruction(const pVal: WideString): HResult; stdcall;
    function Get_ExpandedInformation(out pVal: WideString): HResult; stdcall;
    function Set_ExpandedInformation(const pVal: WideString): HResult; stdcall;
    function Get_Footer(out pVal: WideString): HResult; stdcall;
    function Set_Footer(const pVal: WideString): HResult; stdcall;
    function Get_ExpandedControlText(out pVal: WideString): HResult; stdcall;
    function Set_ExpandedControlText(const pVal: WideString): HResult; stdcall;
    function Get_CollapsedControlText(out pVal: WideString): HResult; stdcall;
    function Set_CollapsedControlText(const pVal: WideString): HResult; stdcall;
    function Get_VerificationText(out pVal: WideString): HResult; stdcall;
    function Set_VerificationText(const pVal: WideString): HResult; stdcall;
    function Get_FooterIcon(out pVal: LongWord): HResult; stdcall;
    function Set_FooterIcon(pVal: LongWord): HResult; stdcall;
    function Get_RadioButton(out pVal: Integer): HResult; stdcall;
    function Set_RadioButton(pVal: Integer): HResult; stdcall;
    function Get_AllowDialogCancellation(out pVal: WordBool): HResult; stdcall;
    function Set_AllowDialogCancellation(pVal: WordBool): HResult; stdcall;
    function Get_UseCommandLinks(out pVal: WordBool): HResult; stdcall;
    function Set_UseCommandLinks(pVal: WordBool): HResult; stdcall;
    function Get_UseCommandLinksNoIcon(out pVal: WordBool): HResult; stdcall;
    function Set_UseCommandLinksNoIcon(pVal: WordBool): HResult; stdcall;
    function Get_ExpandFooterArea(out pVal: WordBool): HResult; stdcall;
    function Set_ExpandFooterArea(pVal: WordBool): HResult; stdcall;
    function Get_ExpandedByDefault(out pVal: WordBool): HResult; stdcall;
    function Set_ExpandedByDefault(pVal: WordBool): HResult; stdcall;
    function Get_VerificationFlagChecked(out pVal: WordBool): HResult; stdcall;
    function Set_VerificationFlagChecked(pVal: WordBool): HResult; stdcall;
    function Get_ShowProgressBar(out pVal: WordBool): HResult; stdcall;
    function Set_ShowProgressBar(pVal: WordBool): HResult; stdcall;
    function Get_ShowMarqueeProgressBar(out pVal: WordBool): HResult; stdcall;
    function Set_ShowMarqueeProgressBar(pVal: WordBool): HResult; stdcall;
    function Get_CallbackTimer(out pVal: WordBool): HResult; stdcall;
    function Set_CallbackTimer(pVal: WordBool): HResult; stdcall;
    function Get_PositionRelativeToWindow(out pVal: WordBool): HResult; stdcall;
    function Set_PositionRelativeToWindow(pVal: WordBool): HResult; stdcall;
    function Get_NoDefaultRadioButton(out pVal: WordBool): HResult; stdcall;
    function Set_NoDefaultRadioButton(pVal: WordBool): HResult; stdcall;
    function Get_CanBeMinimized(out pVal: WordBool): HResult; stdcall;
    function Set_CanBeMinimized(pVal: WordBool): HResult; stdcall;
    function Get_DefaultButton(out pVal: Integer): HResult; stdcall;
    function Set_DefaultButton(pVal: Integer): HResult; stdcall;
    function Get_Position(out pVal: Integer): HResult; stdcall;
    function Set_Position(pVal: Integer): HResult; stdcall;
    function Set_OnTimer(Param1: OleVariant): HResult; stdcall;
    function Set_OnButtonClick(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  ITaskDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {58A2A29A-ABEB-4AAB-ABD4-03CC83B59915}
// *********************************************************************//
  ITaskDialogEvents = dispinterface
    ['{58A2A29A-ABEB-4AAB-ABD4-03CC83B59915}']
    procedure OnTimer(const Sender: IDispatch; Elapsed: LongWord); dispid 1;
    procedure OnButtonClick(const Sender: IDispatch; ID: Integer; const ResultPtr: IDispatch); dispid 2;
  end;

// *********************************************************************//
// Interface: TaskDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {FEA1F5D3-2AF5-41A3-B732-59BB92E999AA}
// *********************************************************************//
  TaskDialogEvents = interface(IDispatch)
    ['{FEA1F5D3-2AF5-41A3-B732-59BB92E999AA}']
    function OnTimer(const Sender: IDispatch; Elapsed: LongWord): HResult; stdcall;
    function OnButtonClick(const Sender: IDispatch; ID: Integer; const ResultPtr: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIcon
// Flags:     (4096) Dispatchable
// GUID:      {8EF324A3-C801-49E1-B07C-D32A0589746F}
// *********************************************************************//
  IIcon = interface(IDispatch)
    ['{8EF324A3-C801-49E1-B07C-D32A0589746F}']
  end;

// *********************************************************************//
// Interface: IRect
// Flags:     (4096) Dispatchable
// GUID:      {85BCA1CF-0215-432E-B290-13947A00DA8F}
// *********************************************************************//
  IRect = interface(IDispatch)
    ['{85BCA1CF-0215-432E-B290-13947A00DA8F}']
    function Get_Left(out pVal: Integer): HResult; stdcall;
    function Set_Left(pVal: Integer): HResult; stdcall;
    function Get_Top(out pVal: Integer): HResult; stdcall;
    function Set_Top(pVal: Integer): HResult; stdcall;
    function Get_Width(out pVal: Integer): HResult; stdcall;
    function Set_Width(pVal: Integer): HResult; stdcall;
    function Get_Height(out pVal: Integer): HResult; stdcall;
    function Set_Height(pVal: Integer): HResult; stdcall;
    function Get_Right(out pVal: Integer): HResult; stdcall;
    function Set_Right(pVal: Integer): HResult; stdcall;
    function Get_Bottom(out pVal: Integer): HResult; stdcall;
    function Set_Bottom(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIconBuilder
// Flags:     (4096) Dispatchable
// GUID:      {362DA7FC-F126-4E3B-BB58-14C126CEB063}
// *********************************************************************//
  IIconBuilder = interface(IDispatch)
    ['{362DA7FC-F126-4E3B-BB58-14C126CEB063}']
    function Add(Image: OleVariant; Transparent: WordBool; x: LongWord; y: LongWord): HResult; stdcall;
    function Save(const FileName: WideString): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Get_Cursor(out pVal: WordBool): HResult; stdcall;
    function Set_Cursor(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDesignReference
// Flags:     (4096) Dispatchable
// GUID:      {7C5DD379-4C1A-4F52-B04B-6D0972964779}
// *********************************************************************//
  IDesignReference = interface(ICollection)
    ['{7C5DD379-4C1A-4F52-B04B-6D0972964779}']
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Set_Text(const pVal: WideString): HResult; stdcall;
    function Get_ReferenceType(out pVal: LongWord): HResult; stdcall;
    function Set_ReferenceType(pVal: LongWord): HResult; stdcall;
    function Add(const Text: WideString; const CurrentAbsoluteFileName: WideString; 
                 out Result: IDispatch): HResult; stdcall;
    function Find(const Text: WideString; out Result: IDispatch): HResult; stdcall;
    function Get_Main(out pVal: WordBool): HResult; stdcall;
    function Set_Main(pVal: WordBool): HResult; stdcall;
    function Get_Design(out pVal: IDispatch): HResult; stdcall;
    function Get_Parent(out pVal: IDispatch): HResult; stdcall;
    function Get_ID(out pVal: WideString): HResult; stdcall;
    function Set_ID(const pVal: WideString): HResult; stdcall;
    function Lookup(const Value: WideString; out pVal: IDispatch): HResult; stdcall;
    function Get_FileName(out pVal: WideString): HResult; stdcall;
    function Set_FileName(const pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDesign
// Flags:     (4096) Dispatchable
// GUID:      {FBE98002-0D8F-4AC8-808C-22DEDE52BF1F}
// *********************************************************************//
  IDesign = interface(IObject)
    ['{FBE98002-0D8F-4AC8-808C-22DEDE52BF1F}']
    function Get_Enabled(out pVal: WordBool): HResult; stdcall;
    function Set_Enabled(pVal: WordBool): HResult; stdcall;
    function Get_NewControlType(out pVal: WideString): HResult; stdcall;
    function Set_NewControlType(const pVal: WideString): HResult; stdcall;
    function Get_NewControlCreationFlags(out pVal: LongWord): HResult; stdcall;
    function Set_NewControlCreationFlags(pVal: LongWord): HResult; stdcall;
    function Get_Properties(out pVal: IDispatch): HResult; stdcall;
    function Get_ShowDetailsButton(out pVal: WordBool): HResult; stdcall;
    function Set_ShowDetailsButton(pVal: WordBool): HResult; stdcall;
    function Save(out Layout: WideString): HResult; stdcall;
    function Load(const Layout: WideString; Flags: LongWord; Resources: OleVariant): HResult; stdcall;
    function Open(const FileName: WideString; Flags: LongWord): HResult; stdcall;
    function Get_References(out pVal: IDispatch): HResult; stdcall;
    function Set_OnActiveControlChange(Param1: OleVariant): HResult; stdcall;
    function Set_OnControlCreate(Param1: OleVariant): HResult; stdcall;
    function Set_OnDetailsButtonClick(Param1: OleVariant): HResult; stdcall;
    function Set_OnDesignerAdd(Param1: OleVariant): HResult; stdcall;
    function Set_OnDesignerRemove(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IDesignEvents
// Flags:     (4096) Dispatchable
// GUID:      {8C46AC3B-00A3-42F5-B82F-E292FD49F53D}
// *********************************************************************//
  IDesignEvents = dispinterface
    ['{8C46AC3B-00A3-42F5-B82F-E292FD49F53D}']
    procedure OnActiveControlChange(const Sender: IDispatch; const Control: IDispatch); dispid 1;
    procedure OnControlCreate(const Sender: IDispatch; const Control: IDispatch); dispid 2;
    procedure OnDetailsButtonClick(const Sender: IDispatch); dispid 3;
    procedure OnDesignerAdd(const Sender: IDispatch; const Control: IDispatch); dispid 4;
    procedure OnDesignerRemove(const Sender: IDispatch; const Control: IDispatch); dispid 5;
  end;

// *********************************************************************//
// Interface: DesignEvents
// Flags:     (4096) Dispatchable
// GUID:      {FAE90BDF-6BDD-4C3C-8433-5C0DFEC216DC}
// *********************************************************************//
  DesignEvents = interface(IDispatch)
    ['{FAE90BDF-6BDD-4C3C-8433-5C0DFEC216DC}']
    function OnActiveControlChange(const Sender: IDispatch; const Control: IDispatch): HResult; stdcall;
    function OnControlCreate(const Sender: IDispatch; const Control: IDispatch): HResult; stdcall;
    function OnDetailsButtonClick(const Sender: IDispatch): HResult; stdcall;
    function OnDesignerAdd(const Sender: IDispatch; const Control: IDispatch): HResult; stdcall;
    function OnDesignerRemove(const Sender: IDispatch; const Control: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IExecutor
// Flags:     (4096) Dispatchable
// GUID:      {F17D5798-9B71-46B9-B6D3-3FA3AA87C423}
// *********************************************************************//
  IExecutor = interface(IObject)
    ['{F17D5798-9B71-46B9-B6D3-3FA3AA87C423}']
    function Get_ApplicationName(out pVal: WideString): HResult; stdcall;
    function Set_ApplicationName(const pVal: WideString): HResult; stdcall;
    function Get_CommandLine(out pVal: WideString): HResult; stdcall;
    function Set_CommandLine(const pVal: WideString): HResult; stdcall;
    function Execute(out Result: WordBool): HResult; stdcall;
    function Wait(Timeout: LongWord; out Result: WordBool): HResult; stdcall;
    function Get_ExitCode(out pVal: LongWord): HResult; stdcall;
    function Get_IntegrityLevel(out pVal: WideString): HResult; stdcall;
    function Set_IntegrityLevel(const pVal: WideString): HResult; stdcall;
    function Get_Error(out pVal: IDispatch): HResult; stdcall;
    function Terminate(ProcessExitCode: LongWord; out Result: WordBool): HResult; stdcall;
    function Set_OnComplete(Param1: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  IExecutorEvents
// Flags:     (4096) Dispatchable
// GUID:      {885A7D58-B7A1-4CA6-BC6F-7C58C09C7812}
// *********************************************************************//
  IExecutorEvents = dispinterface
    ['{885A7D58-B7A1-4CA6-BC6F-7C58C09C7812}']
    procedure OnComplete(const Sender: IDispatch); dispid 1;
  end;

// *********************************************************************//
// Interface: ExecutorEvents
// Flags:     (4096) Dispatchable
// GUID:      {9D263BBD-9C2D-4825-B6AF-12110F16D8BB}
// *********************************************************************//
  ExecutorEvents = interface(IDispatch)
    ['{9D263BBD-9C2D-4825-B6AF-12110F16D8BB}']
    function OnComplete(const Sender: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IControlExtendedProperties
// Flags:     (4096) Dispatchable
// GUID:      {EEB664B4-E288-4CC3-B9C2-ACAB3EFA0ECA}
// *********************************************************************//
  IControlExtendedProperties = interface(IDispatch)
    ['{EEB664B4-E288-4CC3-B9C2-ACAB3EFA0ECA}']
    function Get_AllowLeftButtonDown(out pVal: WordBool): HResult; stdcall;
    function Set_AllowLeftButtonDown(pVal: WordBool): HResult; stdcall;
    function Get_AllowRightButtonDown(out pVal: WordBool): HResult; stdcall;
    function Set_AllowRightButtonDown(pVal: WordBool): HResult; stdcall;
    function Get_AllowMiddleButtonDown(out pVal: WordBool): HResult; stdcall;
    function Set_AllowMiddleButtonDown(pVal: WordBool): HResult; stdcall;
    function Get_AllowLeftButtonDoubleClick(out pVal: WordBool): HResult; stdcall;
    function Set_AllowLeftButtonDoubleClick(pVal: WordBool): HResult; stdcall;
    function Get_AllowRightButtonDoubleClick(out pVal: WordBool): HResult; stdcall;
    function Set_AllowRightButtonDoubleClick(pVal: WordBool): HResult; stdcall;
    function Get_AllowMiddleButtonDoubleClick(out pVal: WordBool): HResult; stdcall;
    function Set_AllowMiddleButtonDoubleClick(pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IError
// Flags:     (4096) Dispatchable
// GUID:      {7190AE34-CBEA-432A-8044-D9B496B7778E}
// *********************************************************************//
  IError = interface(IDispatch)
    ['{7190AE34-CBEA-432A-8044-D9B496B7778E}']
    function Get_Number(out pVal: LongWord): HResult; stdcall;
    function Get_Description(out pVal: WideString): HResult; stdcall;
    function Get_Comment(out pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPropertyInformation
// Flags:     (4096) Dispatchable
// GUID:      {EC6D466C-E844-4FD0-8521-6AE08E452DCA}
// *********************************************************************//
  IPropertyInformation = interface(IDispatch)
    ['{EC6D466C-E844-4FD0-8521-6AE08E452DCA}']
    function Get__NewEnum(out pUnk: IUnknown): HResult; stdcall;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult; stdcall;
    function Get_Count(out pcount: Integer): HResult; stdcall;
    function Get_Text(out pVal: WideString): HResult; stdcall;
    function Get_Type_(out pVal: LongWord): HResult; stdcall;
    function Get_ExType(out pVal: LongWord): HResult; stdcall;
    function Get_DesignDefault(out pVal: OleVariant): HResult; stdcall;
    function Get_SymbolicValues(out pVal: IDispatch): HResult; stdcall;
    function Get_Combination(out pVal: WordBool): HResult; stdcall;
    function Get_Priority(out pVal: LongWord): HResult; stdcall;
    function Get_DefaultValueAsString(out pVal: WideString): HResult; stdcall;
    function Get_DesignReadOnly(out pVal: WordBool): HResult; stdcall;
    function Get_Options(out pVal: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFileManager
// Flags:     (4096) Dispatchable
// GUID:      {FEA423F8-BE89-4285-9279-194AC034221A}
// *********************************************************************//
  IFileManager = interface(IDispatch)
    ['{FEA423F8-BE89-4285-9279-194AC034221A}']
    function GetRelativeFileName(const BaseAbsolutePath: WideString; const Path: WideString; 
                                 out Result: WideString): HResult; stdcall;
    function GetCanonicalFileName(const Path: WideString; ShortNames: WordBool; 
                                  out Result: WideString): HResult; stdcall;
    function GetCurrentDirectory(out Result: WideString): HResult; stdcall;
    function NPath(const Path: WideString; out Result: WideString): HResult; stdcall;
    function DPath(const Path: WideString; out Result: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// The Class CoWindowSystemObject provides a Create and CreateRemote method to          
// create instances of the default interface IWindowSystemObject exposed by              
// the CoClass WindowSystemObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWindowSystemObject = class
    class function Create: IWindowSystemObject;
    class function CreateRemote(const MachineName: string): IWindowSystemObject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TWindowSystemObject
// Help String      : 
// Default Interface: IWindowSystemObject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TWindowSystemObject = class(TOleServer)
  private
    FIntf: IWindowSystemObject;
    function GetDefaultInterface: IWindowSystemObject;
  protected
    procedure InitServerData; override;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_Version(out pVal: IDispatch): HResult;
    function Get_Debug(out pVal: WordBool): HResult;
    function Set_Debug(pVal: WordBool): HResult;
    function Get_Regions(out pVal: IDispatch): HResult;
    function Get_PixelsPerInch(out pVal: Integer): HResult;
    function Set_PixelsPerInch(pVal: Integer): HResult;
    function Get_Screen(out pVal: IDispatch): HResult;
    function Get_EnableVisualStyles(out pVal: WordBool): HResult;
    function Set_EnableVisualStyles(pVal: WordBool): HResult;
    function Get_Console(out pControl: IDispatch): HResult;
    function Get_ActiveForm(out pVal: IDispatch): HResult;
    function Get_ForegroundForm(out pVal: IDispatch): HResult;
    function Get_Color(out Color: IDispatch): HResult;
    function Get_EnableVistaFileDialog(out pVal: WordBool): HResult;
    function Set_EnableVistaFileDialog(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IWindowSystemObject);
    procedure Disconnect; override;
    function CreateForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateImageList(out pControl: IDispatch): HResult;
    function CreateTimer(out pControl: IDispatch): HResult;
    function CreateCOMEvents(const COMObject: IDispatch; out pControl: IDispatch): HResult;
    function CreateFindDialog(const FindText: WideString; Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateReplaceDialog(const FindText: WideString; const ReplaceText: WideString; 
                                 Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateTrayIcon(out pControl: IDispatch): HResult;
    function Run: HResult;
    function Stop: HResult;
    function Translate(const Text: WideString; out pResult: OleVariant): HResult;
    function LoadImage(const Path: WideString; out pResult: IDispatch): HResult;
    function About: HResult;
    function CreateEventHandler(out pControl: IDispatch): HResult;
    function CreatePrintInfo(out pControl: IDispatch): HResult;
    function CreateStdDispatch(const TypeLibrary: WideString; Major: Integer; Minor: Integer; 
                               const Guid: WideString; const Object_: IUnknown; 
                               out pControl: IDispatch): HResult;
    function VirtualKeyCodeToString(VirtualKey: LongWord; UseKeyboardState: WordBool; 
                                    out pVal: WideString): HResult;
    function SaveLayout(out Layout: WideString): HResult;
    function LoadLayout(const Layout: WideString): HResult;
    function LoadIcon(const FileName: WideString; out Result: IDispatch): HResult;
    function LoadSysIcon(ID: Integer; out Result: IDispatch): HResult;
    function GetIconCount(const FileName: WideString; out Result: LongWord): HResult;
    property DefaultInterface: IWindowSystemObject read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoVersion provides a Create and CreateRemote method to          
// create instances of the default interface IVersion exposed by              
// the CoClass Version. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVersion = class
    class function Create: IVersion;
    class function CreateRemote(const MachineName: string): IVersion;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TVersion
// Help String      : 
// Default Interface: IVersion
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TVersion = class(TOleServer)
  private
    FIntf: IVersion;
    function GetDefaultInterface: IVersion;
  protected
    procedure InitServerData; override;
    function Get_Major(out pVal: Integer): HResult;
    function Get_Minor(out pVal: Integer): HResult;
    function Get_BuildNumber(out pVal: Integer): HResult;
    function Get_String_(out pVal: WideString): HResult;
    function Get_Trial(out pVal: WordBool): HResult;
    function Get_Url(out pVal: WideString): HResult;
    function Get_Copyright(out pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IVersion);
    procedure Disconnect; override;
    property DefaultInterface: IVersion read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoControl provides a Create and CreateRemote method to          
// create instances of the default interface IControl exposed by              
// the CoClass Control. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControl = class
    class function Create: IControl;
    class function CreateRemote(const MachineName: string): IControl;
  end;

  TControlOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TControlOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TControlOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TControlOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TControlOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Flags: Integer) of object;
  TControlOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TControlOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TControlOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                     Delta: Integer; x: Integer; y: Integer) of object;
  TControlOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const DockTarget: IDispatch; 
                                                    const BeginDockContext: IDispatch) of object;
  TControlOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                            const Control: IDispatch; 
                                                            const DockTarget: IDispatch; 
                                                            const DockControlCreateContext: IDispatch) of object;
  TControlOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const UndockContext: IDispatch) of object;
  TControlOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TControl
// Help String      : 
// Default Interface: IControl
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TControl = class(TOleServer)
  private
    FOnClick: TControlOnClick;
    FOnDblClick: TControlOnDblClick;
    FOnChange: TControlOnChange;
    FOnKeyDown: TControlOnKeyDown;
    FOnKeyUp: TControlOnKeyUp;
    FOnMouseEnter: TControlOnMouseEnter;
    FOnMouseLeave: TControlOnMouseLeave;
    FOnMouseDown: TControlOnMouseDown;
    FOnMouseMove: TControlOnMouseMove;
    FOnMouseUp: TControlOnMouseUp;
    FOnResize: TControlOnResize;
    FOnMove: TControlOnMove;
    FOnDestroy: TControlOnDestroy;
    FOnShow: TControlOnShow;
    FOnHide: TControlOnHide;
    FOnEnabledChange: TControlOnEnabledChange;
    FOnSetFocus: TControlOnSetFocus;
    FOnKillFocus: TControlOnKillFocus;
    FOnMouseWheel: TControlOnMouseWheel;
    FOnBeginDock: TControlOnBeginDock;
    FOnDockControlCreate: TControlOnDockControlCreate;
    FOnUndockQuery: TControlOnUndockQuery;
    FOnUndock: TControlOnUndock;
    FIntf: IControl;
    function GetDefaultInterface: IControl;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IControl);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IControl read GetDefaultInterface;
  published
    property OnClick: TControlOnClick read FOnClick write FOnClick;
    property OnDblClick: TControlOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TControlOnChange read FOnChange write FOnChange;
    property OnKeyDown: TControlOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TControlOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TControlOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TControlOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TControlOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TControlOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TControlOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TControlOnResize read FOnResize write FOnResize;
    property OnMove: TControlOnMove read FOnMove write FOnMove;
    property OnDestroy: TControlOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TControlOnShow read FOnShow write FOnShow;
    property OnHide: TControlOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TControlOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TControlOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TControlOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TControlOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TControlOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TControlOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TControlOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TControlOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoFrame provides a Create and CreateRemote method to          
// create instances of the default interface IFrame exposed by              
// the CoClass Frame. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFrame = class
    class function Create: IFrame;
    class function CreateRemote(const MachineName: string): IFrame;
  end;

  TFrameOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  TFrameOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TFrameOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TFrameOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TFrameOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Flags: Integer) of object;
  TFrameOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                Button: Integer; Flags: Integer) of object;
  TFrameOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFrameOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                   Delta: Integer; x: Integer; y: Integer) of object;
  TFrameOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                  const DockTarget: IDispatch; 
                                                  const BeginDockContext: IDispatch) of object;
  TFrameOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const Control: IDispatch; 
                                                          const DockTarget: IDispatch; 
                                                          const DockControlCreateContext: IDispatch) of object;
  TFrameOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const UndockContext: IDispatch) of object;
  TFrameOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFrame
// Help String      : 
// Default Interface: IFrame
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TFrame = class(TOleServer)
  private
    FOnClick: TFrameOnClick;
    FOnDblClick: TFrameOnDblClick;
    FOnChange: TFrameOnChange;
    FOnKeyDown: TFrameOnKeyDown;
    FOnKeyUp: TFrameOnKeyUp;
    FOnMouseEnter: TFrameOnMouseEnter;
    FOnMouseLeave: TFrameOnMouseLeave;
    FOnMouseDown: TFrameOnMouseDown;
    FOnMouseMove: TFrameOnMouseMove;
    FOnMouseUp: TFrameOnMouseUp;
    FOnResize: TFrameOnResize;
    FOnMove: TFrameOnMove;
    FOnDestroy: TFrameOnDestroy;
    FOnShow: TFrameOnShow;
    FOnHide: TFrameOnHide;
    FOnEnabledChange: TFrameOnEnabledChange;
    FOnSetFocus: TFrameOnSetFocus;
    FOnKillFocus: TFrameOnKillFocus;
    FOnMouseWheel: TFrameOnMouseWheel;
    FOnBeginDock: TFrameOnBeginDock;
    FOnDockControlCreate: TFrameOnDockControlCreate;
    FOnUndockQuery: TFrameOnUndockQuery;
    FOnUndock: TFrameOnUndock;
    FIntf: IFrame;
    function GetDefaultInterface: IFrame;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Set_BorderWidth(pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Set_BevelWidth(pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Set_BevelOuter(pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Set_BevelInner(pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Set_GraphFont(const pVal: IDispatch): HResult;
    function _Set_GraphFont(const pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Set_AutoScroll(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Set_CaptureMouse(pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Set_ParentBackground(pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Set_BorderParentBackground(pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Set_AutoSplit(pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Set_GroupBox(pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Set_Margin(pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Set_MarginLeft(pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Set_MarginTop(pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Set_MarginRight(pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Set_MarginBottom(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFrame);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    property DefaultInterface: IFrame read GetDefaultInterface;
  published
    property OnClick: TFrameOnClick read FOnClick write FOnClick;
    property OnDblClick: TFrameOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TFrameOnChange read FOnChange write FOnChange;
    property OnKeyDown: TFrameOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TFrameOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TFrameOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TFrameOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TFrameOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TFrameOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TFrameOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TFrameOnResize read FOnResize write FOnResize;
    property OnMove: TFrameOnMove read FOnMove write FOnMove;
    property OnDestroy: TFrameOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TFrameOnShow read FOnShow write FOnShow;
    property OnHide: TFrameOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TFrameOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TFrameOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TFrameOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TFrameOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TFrameOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TFrameOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TFrameOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TFrameOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoForm provides a Create and CreateRemote method to          
// create instances of the default interface IForm exposed by              
// the CoClass Form. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoForm = class
    class function Create: IForm;
    class function CreateRemote(const MachineName: string): IForm;
  end;

  TFormOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                Button: Integer; Flags: Integer) of object;
  TFormOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TFormOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TFormOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  TFormOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Flags: Integer) of object;
  TFormOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                               Button: Integer; Flags: Integer) of object;
  TFormOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                  Delta: Integer; x: Integer; y: Integer) of object;
  TFormOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                 const DockTarget: IDispatch; 
                                                 const BeginDockContext: IDispatch) of object;
  TFormOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                         const Control: IDispatch; 
                                                         const DockTarget: IDispatch; 
                                                         const DockControlCreateContext: IDispatch) of object;
  TFormOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                   const UndockContext: IDispatch) of object;
  TFormOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnCloseQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                  const ResultPtr: IDispatch) of object;
  TFormOnClose = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnActiveControlChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFormOnHitTest = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                               const ResultPtr: IDispatch) of object;
  TFormOnHint = procedure(ASender: TObject; const Sender: IDispatch; const Object_: IDispatch) of object;
  TFormOnMinimize = procedure(ASender: TObject; const Sender: IDispatch; const ResultPtr: IDispatch) of object;
  TFormOnMaximize = procedure(ASender: TObject; const Sender: IDispatch; const ResultPtr: IDispatch) of object;
  TFormOnRestore = procedure(ASender: TObject; const Sender: IDispatch; const ResultPtr: IDispatch) of object;
  TFormOnCopyData = procedure(ASender: TObject; const Sender: IDispatch; const Data: WideString) of object;
  TFormOnActivate = procedure(ASender: TObject; const Sender: IDispatch; Flags: Integer) of object;
  TFormOnEnterSizeMove = procedure(ASender: TObject; const Sender: IDispatch; Flags: Integer) of object;
  TFormOnExitSizeMove = procedure(ASender: TObject; const Sender: IDispatch; Flags: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TForm
// Help String      : 
// Default Interface: IForm
// Def. Intf. DISP? : No
// Event   Interface: IFormEvents
// TypeFlags        : (0)
// *********************************************************************//
  TForm = class(TOleServer)
  private
    FOnClick: TFormOnClick;
    FOnDblClick: TFormOnDblClick;
    FOnChange: TFormOnChange;
    FOnKeyDown: TFormOnKeyDown;
    FOnKeyUp: TFormOnKeyUp;
    FOnMouseEnter: TFormOnMouseEnter;
    FOnMouseLeave: TFormOnMouseLeave;
    FOnMouseDown: TFormOnMouseDown;
    FOnMouseMove: TFormOnMouseMove;
    FOnMouseUp: TFormOnMouseUp;
    FOnResize: TFormOnResize;
    FOnMove: TFormOnMove;
    FOnDestroy: TFormOnDestroy;
    FOnShow: TFormOnShow;
    FOnHide: TFormOnHide;
    FOnEnabledChange: TFormOnEnabledChange;
    FOnSetFocus: TFormOnSetFocus;
    FOnKillFocus: TFormOnKillFocus;
    FOnMouseWheel: TFormOnMouseWheel;
    FOnBeginDock: TFormOnBeginDock;
    FOnDockControlCreate: TFormOnDockControlCreate;
    FOnUndockQuery: TFormOnUndockQuery;
    FOnUndock: TFormOnUndock;
    FOnCloseQuery: TFormOnCloseQuery;
    FOnClose: TFormOnClose;
    FOnActiveControlChange: TFormOnActiveControlChange;
    FOnHitTest: TFormOnHitTest;
    FOnHint: TFormOnHint;
    FOnMinimize: TFormOnMinimize;
    FOnMaximize: TFormOnMaximize;
    FOnRestore: TFormOnRestore;
    FOnCopyData: TFormOnCopyData;
    FOnActivate: TFormOnActivate;
    FOnEnterSizeMove: TFormOnEnterSizeMove;
    FOnExitSizeMove: TFormOnExitSizeMove;
    FIntf: IForm;
    function GetDefaultInterface: IForm;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Set_BorderWidth(pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Set_BevelWidth(pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Set_BevelOuter(pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Set_BevelInner(pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Set_GraphFont(const pVal: IDispatch): HResult;
    function _Set_GraphFont(const pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Set_AutoScroll(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Set_CaptureMouse(pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Set_ParentBackground(pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Set_BorderParentBackground(pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Set_AutoSplit(pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Set_GroupBox(pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Set_Margin(pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Set_MarginLeft(pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Set_MarginTop(pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Set_MarginRight(pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Set_MarginBottom(pVal: LongWord): HResult;
    function Set_Icon(Param1: OleVariant): HResult;
    function Get_Menu(out pVal: IDispatch): HResult;
    function Set_Menu(const pVal: IDispatch): HResult;
    function _Set_Menu(const pVal: IDispatch): HResult;
    function Get_KeyPreview(out pVal: WordBool): HResult;
    function Set_KeyPreview(pVal: WordBool): HResult;
    function Get_MaximizeBox(out pVal: WordBool): HResult;
    function Set_MaximizeBox(pVal: WordBool): HResult;
    function Get_MinimizeBox(out pVal: WordBool): HResult;
    function Set_MinimizeBox(pVal: WordBool): HResult;
    function Get_ControlBox(out pVal: WordBool): HResult;
    function Set_ControlBox(pVal: WordBool): HResult;
    function Get_SizeGrip(out pVal: WordBool): HResult;
    function Set_SizeGrip(pVal: WordBool): HResult;
    function Get_TopMost(out pVal: WordBool): HResult;
    function Set_TopMost(pVal: WordBool): HResult;
    function Get_ToolWindow(out pVal: WordBool): HResult;
    function Set_ToolWindow(pVal: WordBool): HResult;
    function Get_Caption(out pVal: WordBool): HResult;
    function Set_Caption(pVal: WordBool): HResult;
    function Get_AcceptButton(out pVal: IDispatch): HResult;
    function Set_AcceptButton(const pVal: IDispatch): HResult;
    function _Set_AcceptButton(const pVal: IDispatch): HResult;
    function Get_CancelButton(out pVal: IDispatch): HResult;
    function Set_CancelButton(const pVal: IDispatch): HResult;
    function _Set_CancelButton(const pVal: IDispatch): HResult;
    function Get_HelpButton(out pVal: IDispatch): HResult;
    function Set_HelpButton(const pVal: IDispatch): HResult;
    function _Set_HelpButton(const pVal: IDispatch): HResult;
    function Get_ActiveControl(out pVal: IDispatch): HResult;
    function Set_ActiveControl(const pVal: IDispatch): HResult;
    function _Set_ActiveControl(const pVal: IDispatch): HResult;
    function Get_CanClose(out pVal: WordBool): HResult;
    function Set_CanClose(pVal: WordBool): HResult;
    function Set_Region(Param1: LongWord): HResult;
    function Get_TaskBar(out pVal: IDispatch): HResult;
    function Get_Active(out pVal: WordBool): HResult;
    function Set_Active(pVal: WordBool): HResult;
    function Get_Foreground(out pVal: WordBool): HResult;
    function Set_Foreground(pVal: WordBool): HResult;
    function Set_OnCloseQuery(Param1: OleVariant): HResult;
    function Set_OnClose(Param1: OleVariant): HResult;
    function Set_OnActiveControlChange(Param1: OleVariant): HResult;
    function Set_OnHitTest(Param1: OleVariant): HResult;
    function Set_OnHint(Param1: OleVariant): HResult;
    function Set_OnMinimize(Param1: OleVariant): HResult;
    function Set_OnMaximize(Param1: OleVariant): HResult;
    function Set_OnRestore(Param1: OleVariant): HResult;
    function Set_OnCopyData(Param1: OleVariant): HResult;
    function Set_OnActivate(Param1: OleVariant): HResult;
    function Set_OnEnterSizeMove(Param1: OleVariant): HResult;
    function Set_OnExitSizeMove(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IForm);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    function Minimize: HResult;
    function Restore: HResult;
    function Maximize: HResult;
    function Close: HResult;
    function ShowModal: HResult;
    function MessageBox(const Text: WideString; const Caption: WideString; Flags: Integer; 
                        out pResult: Integer): HResult;
    function ColorDialog(StartColor: LongWord; Flags: LongWord; out pColor: LongWord): HResult;
    function FontDialog(const StartValue: IDispatch; Flags: LongWord; out pResult: IDispatch): HResult;
    function OpenDialog(const DefaultExt: WideString; const Filter: WideString; 
                        const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult;
    function SaveDialog(const DefaultExt: WideString; const Filter: WideString; 
                        const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult;
    function SelectFolderDialog(const Title: WideString; Flags: LongWord; out pFolder: WideString): HResult;
    function PrintDialog(Flags: LongWord; MinPage: Word; MaxPage: Word; out pResult: IDispatch): HResult;
    function PrinterSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
    function PageSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateFindDialog(const FindText: WideString; Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateReplaceDialog(const FindText: WideString; const ReplaceText: WideString; 
                                 Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateFontDialog(out pResult: IDispatch): HResult;
    function CreateColorDialog(out pResult: IDispatch): HResult;
    function CreateOpenDialog(out pResult: IDispatch): HResult;
    function CreateSaveDialog(out pResult: IDispatch): HResult;
    function CreateSelectFolderDialog(out pResult: IDispatch): HResult;
    function CreateForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateMessageDialog(const Text: WideString; const Caption: WideString; 
                                 out pResult: IDispatch): HResult;
    function CreateTaskDialog(const Text: WideString; const Caption: WideString; 
                              out pResult: IDispatch): HResult;
    property DefaultInterface: IForm read GetDefaultInterface;
  published
    property OnClick: TFormOnClick read FOnClick write FOnClick;
    property OnDblClick: TFormOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TFormOnChange read FOnChange write FOnChange;
    property OnKeyDown: TFormOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TFormOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TFormOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TFormOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TFormOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TFormOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TFormOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TFormOnResize read FOnResize write FOnResize;
    property OnMove: TFormOnMove read FOnMove write FOnMove;
    property OnDestroy: TFormOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TFormOnShow read FOnShow write FOnShow;
    property OnHide: TFormOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TFormOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TFormOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TFormOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TFormOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TFormOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TFormOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TFormOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TFormOnUndock read FOnUndock write FOnUndock;
    property OnCloseQuery: TFormOnCloseQuery read FOnCloseQuery write FOnCloseQuery;
    property OnClose: TFormOnClose read FOnClose write FOnClose;
    property OnActiveControlChange: TFormOnActiveControlChange read FOnActiveControlChange write FOnActiveControlChange;
    property OnHitTest: TFormOnHitTest read FOnHitTest write FOnHitTest;
    property OnHint: TFormOnHint read FOnHint write FOnHint;
    property OnMinimize: TFormOnMinimize read FOnMinimize write FOnMinimize;
    property OnMaximize: TFormOnMaximize read FOnMaximize write FOnMaximize;
    property OnRestore: TFormOnRestore read FOnRestore write FOnRestore;
    property OnCopyData: TFormOnCopyData read FOnCopyData write FOnCopyData;
    property OnActivate: TFormOnActivate read FOnActivate write FOnActivate;
    property OnEnterSizeMove: TFormOnEnterSizeMove read FOnEnterSizeMove write FOnEnterSizeMove;
    property OnExitSizeMove: TFormOnExitSizeMove read FOnExitSizeMove write FOnExitSizeMove;
  end;

// *********************************************************************//
// The Class CoCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICollection exposed by              
// the CoClass Collection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCollection = class
    class function Create: ICollection;
    class function CreateRemote(const MachineName: string): ICollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCollection
// Help String      : 
// Default Interface: ICollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TCollection = class(TOleServer)
  private
    FIntf: ICollection;
    function GetDefaultInterface: ICollection;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICollection);
    procedure Disconnect; override;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function ExChange(A: OleVariant; B: OleVariant): HResult;
    property DefaultInterface: ICollection read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoStringCollection provides a Create and CreateRemote method to          
// create instances of the default interface IStringCollection exposed by              
// the CoClass StringCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStringCollection = class
    class function Create: IStringCollection;
    class function CreateRemote(const MachineName: string): IStringCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStringCollection
// Help String      : 
// Default Interface: IStringCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TStringCollection = class(TOleServer)
  private
    FIntf: IStringCollection;
    function GetDefaultInterface: IStringCollection;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStringCollection);
    procedure Disconnect; override;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function ExChange(A: OleVariant; B: OleVariant): HResult;
    function Add(const Value: WideString): HResult;
    property DefaultInterface: IStringCollection read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoImageList provides a Create and CreateRemote method to          
// create instances of the default interface IImageList exposed by              
// the CoClass ImageList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImageList = class
    class function Create: IImageList;
    class function CreateRemote(const MachineName: string): IImageList;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TImageList
// Help String      : 
// Default Interface: IImageList
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TImageList = class(TOleServer)
  private
    FIntf: IImageList;
    function GetDefaultInterface: IImageList;
  protected
    procedure InitServerData; override;
    function Get_Width(out pVal: LongWord): HResult;
    function Set_Width(pVal: LongWord): HResult;
    function Get_Height(out pVal: LongWord): HResult;
    function Set_Height(pVal: LongWord): HResult;
    function Get_Count(out pVal: Integer): HResult;
    function Get_BitsPerPixel(out pVal: Integer): HResult;
    function Set_BitsPerPixel(pVal: Integer): HResult;
    function Get_References(out pVal: IDispatch): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IImageList);
    procedure Disconnect; override;
    function Load(Image: OleVariant): HResult;
    function Add(Image: OleVariant): HResult;
    function Clear: HResult;
    function Remove(Index: Integer): HResult;
    property DefaultInterface: IImageList read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoPen provides a Create and CreateRemote method to          
// create instances of the default interface IPen exposed by              
// the CoClass Pen. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPen = class
    class function Create: IPen;
    class function CreateRemote(const MachineName: string): IPen;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPen
// Help String      : 
// Default Interface: IPen
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TPen = class(TOleServer)
  private
    FIntf: IPen;
    function GetDefaultInterface: IPen;
  protected
    procedure InitServerData; override;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Style(out pVal: Integer): HResult;
    function Set_Style(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPen);
    procedure Disconnect; override;
    function Default: HResult;
    property DefaultInterface: IPen read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoBrush provides a Create and CreateRemote method to          
// create instances of the default interface IBrush exposed by              
// the CoClass Brush. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBrush = class
    class function Create: IBrush;
    class function CreateRemote(const MachineName: string): IBrush;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBrush
// Help String      : 
// Default Interface: IBrush
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TBrush = class(TOleServer)
  private
    FIntf: IBrush;
    function GetDefaultInterface: IBrush;
  protected
    procedure InitServerData; override;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_Style(out pVal: Integer): HResult;
    function Set_Style(pVal: Integer): HResult;
    function Set_Image(Param1: OleVariant): HResult;
    function Get_GradientColor(out pVal: LongWord): HResult;
    function Set_GradientColor(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IBrush);
    procedure Disconnect; override;
    function Default: HResult;
    property DefaultInterface: IBrush read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoFont provides a Create and CreateRemote method to          
// create instances of the default interface IFontEx exposed by              
// the CoClass Font. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFont = class
    class function Create: IFontEx;
    class function CreateRemote(const MachineName: string): IFontEx;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFont
// Help String      : 
// Default Interface: IFontEx
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TFont = class(TOleServer)
  private
    FIntf: IFontEx;
    function GetDefaultInterface: IFontEx;
  protected
    procedure InitServerData; override;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_Italic(out pVal: WordBool): HResult;
    function Set_Italic(pVal: WordBool): HResult;
    function Get_Underline(out pVal: WordBool): HResult;
    function Set_Underline(pVal: WordBool): HResult;
    function Get_Strikethrough(out pVal: WordBool): HResult;
    function Set_Strikethrough(pVal: WordBool): HResult;
    function Get_Bold(out pVal: WordBool): HResult;
    function Set_Bold(pVal: WordBool): HResult;
    function Get_Weight(out pVal: Smallint): HResult;
    function Set_Weight(pVal: Smallint): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_Size(out pVal: Currency): HResult;
    function Set_Size(pVal: Currency): HResult;
    function Get_CharSet(out pVal: Smallint): HResult;
    function Set_CharSet(pVal: Smallint): HResult;
    function Get_Angle(out pVal: Integer): HResult;
    function Set_Angle(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFontEx);
    procedure Disconnect; override;
    function Default: HResult;
    property DefaultInterface: IFontEx read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoAction provides a Create and CreateRemote method to          
// create instances of the default interface IAction exposed by              
// the CoClass Action. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAction = class
    class function Create: IAction;
    class function CreateRemote(const MachineName: string): IAction;
  end;

  TActionOnExecute = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActionOnUpdate = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAction
// Help String      : 
// Default Interface: IAction
// Def. Intf. DISP? : No
// Event   Interface: IActionEvents
// TypeFlags        : (0)
// *********************************************************************//
  TAction = class(TOleServer)
  private
    FOnExecute: TActionOnExecute;
    FOnUpdate: TActionOnUpdate;
    FIntf: IAction;
    function GetDefaultInterface: IAction;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Set_Item(Index: Integer; pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Checked(out pVal: WordBool): HResult;
    function Set_Checked(pVal: WordBool): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_CheckBox(out pVal: WordBool): HResult;
    function Set_CheckBox(pVal: WordBool): HResult;
    function Get_RadioCheck(out pVal: WordBool): HResult;
    function Set_RadioCheck(pVal: WordBool): HResult;
    function Get_AllowAllUp(out pVal: WordBool): HResult;
    function Set_AllowAllUp(pVal: WordBool): HResult;
    function Get_Default(out pVal: WordBool): HResult;
    function Set_Default(pVal: WordBool): HResult;
    function Get_Control(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Items(out pVal: IDispatch): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_Break(out pVal: WordBool): HResult;
    function Set_Break(pVal: WordBool): HResult;
    function Get_Key(out pVal: OleVariant): HResult;
    function Set_Key(pVal: OleVariant): HResult;
    function Get_DismissonClick(out pVal: WordBool): HResult;
    function Set_DismissonClick(pVal: WordBool): HResult;
    function Get_Noninteractive(out pVal: WordBool): HResult;
    function Set_Noninteractive(pVal: WordBool): HResult;
    function Get_Nobackground(out pVal: WordBool): HResult;
    function Set_Nobackground(pVal: WordBool): HResult;
    function Get_WholeDropDown(out pVal: WordBool): HResult;
    function Set_WholeDropDown(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Set_OnExecute(Param1: OleVariant): HResult;
    function Set_OnUpdate(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAction);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function ExChange(A: OleVariant; B: OleVariant): HResult;
    function Add(Item: OleVariant; Key: OleVariant; out pControl: IDispatch): HResult;
    function Insert(Index: Integer; Item: OleVariant; Key: OleVariant; out pControl: IDispatch): HResult;
    function NewLine(out pControl: IDispatch): HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IAction read GetDefaultInterface;
  published
    property OnExecute: TActionOnExecute read FOnExecute write FOnExecute;
    property OnUpdate: TActionOnUpdate read FOnUpdate write FOnUpdate;
  end;

// *********************************************************************//
// The Class CoListControlItem provides a Create and CreateRemote method to          
// create instances of the default interface IListControlItem exposed by              
// the CoClass ListControlItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListControlItem = class
    class function Create: IListControlItem;
    class function CreateRemote(const MachineName: string): IListControlItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListControlItem
// Help String      : 
// Default Interface: IListControlItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TListControlItem = class(TOleServer)
  private
    FIntf: IListControlItem;
    function GetDefaultInterface: IListControlItem;
  protected
    procedure InitServerData; override;
    function Get_Text(out pVal: WideString): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Get_Selected(out pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_Index(out pVal: Integer): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_TextBkColor(out pVal: LongWord): HResult;
    function Set_TextBkColor(pVal: LongWord): HResult;
    function Get_ItemData(out pVal: OleVariant): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_Indent(out pVal: LongWord): HResult;
    function Set_Indent(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListControlItem);
    procedure Disconnect; override;
    property DefaultInterface: IListControlItem read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoListBox provides a Create and CreateRemote method to          
// create instances of the default interface IListBox exposed by              
// the CoClass ListBox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListBox = class
    class function Create: IListBox;
    class function CreateRemote(const MachineName: string): IListBox;
  end;

  TListBoxOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TListBoxOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TListBoxOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TListBoxOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TListBoxOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Flags: Integer) of object;
  TListBoxOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TListBoxOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListBoxOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                     Delta: Integer; x: Integer; y: Integer) of object;
  TListBoxOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const DockTarget: IDispatch; 
                                                    const BeginDockContext: IDispatch) of object;
  TListBoxOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                            const Control: IDispatch; 
                                                            const DockTarget: IDispatch; 
                                                            const DockControlCreateContext: IDispatch) of object;
  TListBoxOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const UndockContext: IDispatch) of object;
  TListBoxOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListBox
// Help String      : 
// Default Interface: IListBox
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TListBox = class(TOleServer)
  private
    FOnClick: TListBoxOnClick;
    FOnDblClick: TListBoxOnDblClick;
    FOnChange: TListBoxOnChange;
    FOnKeyDown: TListBoxOnKeyDown;
    FOnKeyUp: TListBoxOnKeyUp;
    FOnMouseEnter: TListBoxOnMouseEnter;
    FOnMouseLeave: TListBoxOnMouseLeave;
    FOnMouseDown: TListBoxOnMouseDown;
    FOnMouseMove: TListBoxOnMouseMove;
    FOnMouseUp: TListBoxOnMouseUp;
    FOnResize: TListBoxOnResize;
    FOnMove: TListBoxOnMove;
    FOnDestroy: TListBoxOnDestroy;
    FOnShow: TListBoxOnShow;
    FOnHide: TListBoxOnHide;
    FOnEnabledChange: TListBoxOnEnabledChange;
    FOnSetFocus: TListBoxOnSetFocus;
    FOnKillFocus: TListBoxOnKillFocus;
    FOnMouseWheel: TListBoxOnMouseWheel;
    FOnBeginDock: TListBoxOnBeginDock;
    FOnDockControlCreate: TListBoxOnDockControlCreate;
    FOnUndockQuery: TListBoxOnUndockQuery;
    FOnUndock: TListBoxOnUndock;
    FIntf: IListBox;
    function GetDefaultInterface: IListBox;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_TopIndex(out pVal: Integer): HResult;
    function Set_TopIndex(pVal: Integer): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: WideString): HResult;
    function Set_Item(Index: Integer; const pvar: WideString): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_ItemIndex(out pVal: Integer): HResult;
    function Set_ItemIndex(pVal: Integer): HResult;
    function Get_ItemHeight(out pVal: Integer): HResult;
    function Set_ItemHeight(pVal: Integer): HResult;
    function Get_ItemData(Index: Integer; out pVal: OleVariant): HResult;
    function Set_ItemData(Index: Integer; pVal: OleVariant): HResult;
    function Get_Sorted(out pVal: WordBool): HResult;
    function Set_Sorted(pVal: WordBool): HResult;
    function Get_IntegralHeight(out pVal: WordBool): HResult;
    function Set_IntegralHeight(pVal: WordBool): HResult;
    function Get_HorizontalExtent(out pVal: Integer): HResult;
    function Set_HorizontalExtent(pVal: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_ImageIndex(Index: Integer; out pVal: Integer): HResult;
    function Set_ImageIndex(Index: Integer; pVal: Integer): HResult;
    function Get_CustomDraw(out pVal: WordBool): HResult;
    function Set_CustomDraw(pVal: WordBool): HResult;
    function Set_OnDrawItem(Param1: OleVariant): HResult;
    function Set_BackgroundImage(Param1: OleVariant): HResult;
    function Get_CustomDrawSelection(out pVal: WordBool): HResult;
    function Set_CustomDrawSelection(pVal: WordBool): HResult;
    function Get_Selected(Index: Integer; out pVal: WordBool): HResult;
    function Set_Selected(Index: Integer; pVal: WordBool): HResult;
    function Get_SelCount(out pVal: Integer): HResult;
    function Get_MultiSelect(out pVal: WordBool): HResult;
    function Set_MultiSelect(pVal: WordBool): HResult;
    function Get_ExtendedSelect(out pVal: WordBool): HResult;
    function Set_ExtendedSelect(pVal: WordBool): HResult;
    function Get_ColumnCount(out pVal: Word): HResult;
    function Set_ColumnCount(pVal: Word): HResult;
    function Get_ColumnWidth(out pVal: Word): HResult;
    function Set_ColumnWidth(pVal: Word): HResult;
    function Get_ScrollBars(out pVal: LongWord): HResult;
    function Set_ScrollBars(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListBox);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Add(const Item: WideString; out pItemIndex: Integer): HResult;
    function Remove(Index: Integer): HResult;
    function Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
    function Clear: HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function ExChange(A: Integer; B: Integer): HResult;
    function Sort(DataType: Integer; Reverse: WordBool): HResult;
    function Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                  out pItemIndex: Integer): HResult;
    function ItemFromPoint(x: Word; y: Word; out pIndex: Integer): HResult;
    property DefaultInterface: IListBox read GetDefaultInterface;
  published
    property OnClick: TListBoxOnClick read FOnClick write FOnClick;
    property OnDblClick: TListBoxOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TListBoxOnChange read FOnChange write FOnChange;
    property OnKeyDown: TListBoxOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TListBoxOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TListBoxOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TListBoxOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TListBoxOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TListBoxOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TListBoxOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TListBoxOnResize read FOnResize write FOnResize;
    property OnMove: TListBoxOnMove read FOnMove write FOnMove;
    property OnDestroy: TListBoxOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TListBoxOnShow read FOnShow write FOnShow;
    property OnHide: TListBoxOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TListBoxOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TListBoxOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TListBoxOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TListBoxOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TListBoxOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TListBoxOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TListBoxOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TListBoxOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoComboBox provides a Create and CreateRemote method to          
// create instances of the default interface IComboBox exposed by              
// the CoClass ComboBox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComboBox = class
    class function Create: IComboBox;
    class function CreateRemote(const MachineName: string): IComboBox;
  end;

  TComboBoxOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TComboBoxOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TComboBoxOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TComboBoxOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TComboBoxOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TComboBoxOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TComboBoxOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TComboBoxOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TComboBoxOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TComboBoxOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TComboBoxOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TComboBoxOnDrawItem = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TComboBoxOnDropDown = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TComboBox
// Help String      : 
// Default Interface: IComboBox
// Def. Intf. DISP? : No
// Event   Interface: IComboBoxEvents
// TypeFlags        : (0)
// *********************************************************************//
  TComboBox = class(TOleServer)
  private
    FOnClick: TComboBoxOnClick;
    FOnDblClick: TComboBoxOnDblClick;
    FOnChange: TComboBoxOnChange;
    FOnKeyDown: TComboBoxOnKeyDown;
    FOnKeyUp: TComboBoxOnKeyUp;
    FOnMouseEnter: TComboBoxOnMouseEnter;
    FOnMouseLeave: TComboBoxOnMouseLeave;
    FOnMouseDown: TComboBoxOnMouseDown;
    FOnMouseMove: TComboBoxOnMouseMove;
    FOnMouseUp: TComboBoxOnMouseUp;
    FOnResize: TComboBoxOnResize;
    FOnMove: TComboBoxOnMove;
    FOnDestroy: TComboBoxOnDestroy;
    FOnShow: TComboBoxOnShow;
    FOnHide: TComboBoxOnHide;
    FOnEnabledChange: TComboBoxOnEnabledChange;
    FOnSetFocus: TComboBoxOnSetFocus;
    FOnKillFocus: TComboBoxOnKillFocus;
    FOnMouseWheel: TComboBoxOnMouseWheel;
    FOnBeginDock: TComboBoxOnBeginDock;
    FOnDockControlCreate: TComboBoxOnDockControlCreate;
    FOnUndockQuery: TComboBoxOnUndockQuery;
    FOnUndock: TComboBoxOnUndock;
    FOnDrawItem: TComboBoxOnDrawItem;
    FOnDropDown: TComboBoxOnDropDown;
    FIntf: IComboBox;
    function GetDefaultInterface: IComboBox;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_TopIndex(out pVal: Integer): HResult;
    function Set_TopIndex(pVal: Integer): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: WideString): HResult;
    function Set_Item(Index: Integer; const pvar: WideString): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_ItemIndex(out pVal: Integer): HResult;
    function Set_ItemIndex(pVal: Integer): HResult;
    function Get_ItemHeight(out pVal: Integer): HResult;
    function Set_ItemHeight(pVal: Integer): HResult;
    function Get_ItemData(Index: Integer; out pVal: OleVariant): HResult;
    function Set_ItemData(Index: Integer; pVal: OleVariant): HResult;
    function Get_Sorted(out pVal: WordBool): HResult;
    function Set_Sorted(pVal: WordBool): HResult;
    function Get_IntegralHeight(out pVal: WordBool): HResult;
    function Set_IntegralHeight(pVal: WordBool): HResult;
    function Get_HorizontalExtent(out pVal: Integer): HResult;
    function Set_HorizontalExtent(pVal: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_ImageIndex(Index: Integer; out pVal: Integer): HResult;
    function Set_ImageIndex(Index: Integer; pVal: Integer): HResult;
    function Get_CustomDraw(out pVal: WordBool): HResult;
    function Set_CustomDraw(pVal: WordBool): HResult;
    function Set_OnDrawItem(Param1: OleVariant): HResult;
    function Set_BackgroundImage(Param1: OleVariant): HResult;
    function Get_CustomDrawSelection(out pVal: WordBool): HResult;
    function Set_CustomDrawSelection(pVal: WordBool): HResult;
    function Get_DropDownCount(out pVal: LongWord): HResult;
    function Set_DropDownCount(pVal: LongWord): HResult;
    function Get_Style(out pVal: Integer): HResult;
    function Set_Style(pVal: Integer): HResult;
    function Get_CharCase(out pVal: Integer): HResult;
    function Set_CharCase(pVal: Integer): HResult;
    function Get_ReadOnly(out pVal: WordBool): HResult;
    function Set_ReadOnly(pVal: WordBool): HResult;
    function Get_DroppedDown(out pVal: WordBool): HResult;
    function Set_DroppedDown(pVal: WordBool): HResult;
    function Get_CueBanner(out pVal: WideString): HResult;
    function Set_CueBanner(const pVal: WideString): HResult;
    function Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult;
    function Set_CueBannerAlwaysVisible(pVal: WordBool): HResult;
    function Get_BalloonTip(out pVal: IDispatch): HResult;
    function Set_OnDropDown(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IComboBox);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Add(const Item: WideString; out pItemIndex: Integer): HResult;
    function Remove(Index: Integer): HResult;
    function Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
    function Clear: HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function ExChange(A: Integer; B: Integer): HResult;
    function Sort(DataType: Integer; Reverse: WordBool): HResult;
    function Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                  out pItemIndex: Integer): HResult;
    property DefaultInterface: IComboBox read GetDefaultInterface;
  published
    property OnClick: TComboBoxOnClick read FOnClick write FOnClick;
    property OnDblClick: TComboBoxOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TComboBoxOnChange read FOnChange write FOnChange;
    property OnKeyDown: TComboBoxOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TComboBoxOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TComboBoxOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TComboBoxOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TComboBoxOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TComboBoxOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TComboBoxOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TComboBoxOnResize read FOnResize write FOnResize;
    property OnMove: TComboBoxOnMove read FOnMove write FOnMove;
    property OnDestroy: TComboBoxOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TComboBoxOnShow read FOnShow write FOnShow;
    property OnHide: TComboBoxOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TComboBoxOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TComboBoxOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TComboBoxOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TComboBoxOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TComboBoxOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TComboBoxOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TComboBoxOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TComboBoxOnUndock read FOnUndock write FOnUndock;
    property OnDrawItem: TComboBoxOnDrawItem read FOnDrawItem write FOnDrawItem;
    property OnDropDown: TComboBoxOnDropDown read FOnDropDown write FOnDropDown;
  end;

// *********************************************************************//
// The Class CoEdit provides a Create and CreateRemote method to          
// create instances of the default interface IEdit exposed by              
// the CoClass Edit. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEdit = class
    class function Create: IEdit;
    class function CreateRemote(const MachineName: string): IEdit;
  end;

  TEditOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                Button: Integer; Flags: Integer) of object;
  TEditOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TEditOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TEditOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  TEditOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Flags: Integer) of object;
  TEditOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                               Button: Integer; Flags: Integer) of object;
  TEditOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TEditOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                  Delta: Integer; x: Integer; y: Integer) of object;
  TEditOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                 const DockTarget: IDispatch; 
                                                 const BeginDockContext: IDispatch) of object;
  TEditOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                         const Control: IDispatch; 
                                                         const DockTarget: IDispatch; 
                                                         const DockControlCreateContext: IDispatch) of object;
  TEditOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                   const UndockContext: IDispatch) of object;
  TEditOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEdit
// Help String      : 
// Default Interface: IEdit
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TEdit = class(TOleServer)
  private
    FOnClick: TEditOnClick;
    FOnDblClick: TEditOnDblClick;
    FOnChange: TEditOnChange;
    FOnKeyDown: TEditOnKeyDown;
    FOnKeyUp: TEditOnKeyUp;
    FOnMouseEnter: TEditOnMouseEnter;
    FOnMouseLeave: TEditOnMouseLeave;
    FOnMouseDown: TEditOnMouseDown;
    FOnMouseMove: TEditOnMouseMove;
    FOnMouseUp: TEditOnMouseUp;
    FOnResize: TEditOnResize;
    FOnMove: TEditOnMove;
    FOnDestroy: TEditOnDestroy;
    FOnShow: TEditOnShow;
    FOnHide: TEditOnHide;
    FOnEnabledChange: TEditOnEnabledChange;
    FOnSetFocus: TEditOnSetFocus;
    FOnKillFocus: TEditOnKillFocus;
    FOnMouseWheel: TEditOnMouseWheel;
    FOnBeginDock: TEditOnBeginDock;
    FOnDockControlCreate: TEditOnDockControlCreate;
    FOnUndockQuery: TEditOnUndockQuery;
    FOnUndock: TEditOnUndock;
    FIntf: IEdit;
    function GetDefaultInterface: IEdit;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_TopIndex(out pVal: Integer): HResult;
    function Set_TopIndex(pVal: Integer): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: WideString): HResult;
    function Set_Item(Index: Integer; const pvar: WideString): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_ReadOnly(out pVal: WordBool): HResult;
    function Set_ReadOnly(pVal: WordBool): HResult;
    function Get_MaxLength(out pVal: Integer): HResult;
    function Set_MaxLength(pVal: Integer): HResult;
    function Get_CharCase(out pVal: Integer): HResult;
    function Set_CharCase(pVal: Integer): HResult;
    function Get_PasswordChar(out pVal: WideString): HResult;
    function Set_PasswordChar(const pVal: WideString): HResult;
    function Get_HideSelection(out pVal: WordBool): HResult;
    function Set_HideSelection(pVal: WordBool): HResult;
    function Get_MultiLine(out pVal: WordBool): HResult;
    function Set_MultiLine(pVal: WordBool): HResult;
    function Get_ScrollBars(out pVal: LongWord): HResult;
    function Set_ScrollBars(pVal: LongWord): HResult;
    function Get_AutoSize(out pVal: WordBool): HResult;
    function Set_AutoSize(pVal: WordBool): HResult;
    function Get_Modified(out pVal: WordBool): HResult;
    function Set_Modified(pVal: WordBool): HResult;
    function Get_SelStart(out pVal: Integer): HResult;
    function Set_SelStart(pVal: Integer): HResult;
    function Get_SelEnd(out pVal: Integer): HResult;
    function Set_SelEnd(pVal: Integer): HResult;
    function Get_SelLength(out pVal: Integer): HResult;
    function Set_SelLength(pVal: Integer): HResult;
    function Get_LeftMargin(out pVal: Word): HResult;
    function Set_LeftMargin(pVal: Word): HResult;
    function Get_RightMargin(out pVal: Word): HResult;
    function Set_RightMargin(pVal: Word): HResult;
    function Get_WordWrap(out pVal: WordBool): HResult;
    function Set_WordWrap(pVal: WordBool): HResult;
    function Get_TextAlign(out pVal: Word): HResult;
    function Set_TextAlign(pVal: Word): HResult;
    function Get_CanUndo(out pVal: WordBool): HResult;
    function Set_CanUndo(pVal: WordBool): HResult;
    function Get_CanPaste(out pVal: WordBool): HResult;
    function Get_DataType(out pVal: Integer): HResult;
    function Set_DataType(pVal: Integer): HResult;
    function Get_Min(out pVal: OleVariant): HResult;
    function Set_Min(pVal: OleVariant): HResult;
    function Get_Max(out pVal: OleVariant): HResult;
    function Set_Max(pVal: OleVariant): HResult;
    function Get_LineFromChar(Index: Integer; out pVal: Integer): HResult;
    function Get_AcceptsReturn(out pVal: WordBool): HResult;
    function Set_AcceptsReturn(pVal: WordBool): HResult;
    function Get_AcceptsTab(out pVal: WordBool): HResult;
    function Set_AcceptsTab(pVal: WordBool): HResult;
    function Get_AutoHeight(out pVal: WordBool): HResult;
    function Set_AutoHeight(pVal: WordBool): HResult;
    function Get_CueBanner(out pVal: WideString): HResult;
    function Set_CueBanner(const pVal: WideString): HResult;
    function Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult;
    function Set_CueBannerAlwaysVisible(pVal: WordBool): HResult;
    function Get_BalloonTip(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IEdit);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Add(const Item: WideString; out pItemIndex: Integer): HResult;
    function Remove(Index: Integer): HResult;
    function Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
    function Clear: HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function ExChange(A: Integer; B: Integer): HResult;
    function Sort(DataType: Integer; Reverse: WordBool): HResult;
    function Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                  out pItemIndex: Integer): HResult;
    function SelectAll: HResult;
    function ClearSelection: HResult;
    function ReplaceSelection(const NewText: WideString; CanUndo: WordBool): HResult;
    function Undo: HResult;
    function Cut: HResult;
    function Copy: HResult;
    function Paste: HResult;
    property DefaultInterface: IEdit read GetDefaultInterface;
  published
    property OnClick: TEditOnClick read FOnClick write FOnClick;
    property OnDblClick: TEditOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TEditOnChange read FOnChange write FOnChange;
    property OnKeyDown: TEditOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TEditOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TEditOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TEditOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TEditOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TEditOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TEditOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TEditOnResize read FOnResize write FOnResize;
    property OnMove: TEditOnMove read FOnMove write FOnMove;
    property OnDestroy: TEditOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TEditOnShow read FOnShow write FOnShow;
    property OnHide: TEditOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TEditOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TEditOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TEditOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TEditOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TEditOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TEditOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TEditOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TEditOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoButton provides a Create and CreateRemote method to          
// create instances of the default interface IButton exposed by              
// the CoClass Button. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoButton = class
    class function Create: IButton;
    class function CreateRemote(const MachineName: string): IButton;
  end;

  TButtonOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TButtonOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TButtonOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TButtonOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TButtonOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Flags: Integer) of object;
  TButtonOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  TButtonOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TButtonOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                    Delta: Integer; x: Integer; y: Integer) of object;
  TButtonOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                   const DockTarget: IDispatch; 
                                                   const BeginDockContext: IDispatch) of object;
  TButtonOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const Control: IDispatch; 
                                                           const DockTarget: IDispatch; 
                                                           const DockControlCreateContext: IDispatch) of object;
  TButtonOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const UndockContext: IDispatch) of object;
  TButtonOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TButton
// Help String      : 
// Default Interface: IButton
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TButton = class(TOleServer)
  private
    FOnClick: TButtonOnClick;
    FOnDblClick: TButtonOnDblClick;
    FOnChange: TButtonOnChange;
    FOnKeyDown: TButtonOnKeyDown;
    FOnKeyUp: TButtonOnKeyUp;
    FOnMouseEnter: TButtonOnMouseEnter;
    FOnMouseLeave: TButtonOnMouseLeave;
    FOnMouseDown: TButtonOnMouseDown;
    FOnMouseMove: TButtonOnMouseMove;
    FOnMouseUp: TButtonOnMouseUp;
    FOnResize: TButtonOnResize;
    FOnMove: TButtonOnMove;
    FOnDestroy: TButtonOnDestroy;
    FOnShow: TButtonOnShow;
    FOnHide: TButtonOnHide;
    FOnEnabledChange: TButtonOnEnabledChange;
    FOnSetFocus: TButtonOnSetFocus;
    FOnKillFocus: TButtonOnKillFocus;
    FOnMouseWheel: TButtonOnMouseWheel;
    FOnBeginDock: TButtonOnBeginDock;
    FOnDockControlCreate: TButtonOnDockControlCreate;
    FOnUndockQuery: TButtonOnUndockQuery;
    FOnUndock: TButtonOnUndock;
    FIntf: IButton;
    function GetDefaultInterface: IButton;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Flat(out pVal: WordBool): HResult;
    function Set_Flat(pVal: WordBool): HResult;
    function Get_Default(out pVal: WordBool): HResult;
    function Set_Default(pVal: WordBool): HResult;
    function Get_Cancel(out pVal: WordBool): HResult;
    function Set_Cancel(pVal: WordBool): HResult;
    function Get_CommandLinkButton(out pVal: WordBool): HResult;
    function Set_CommandLinkButton(pVal: WordBool): HResult;
    function Get_Note(out pVal: WideString): HResult;
    function Set_Note(const pVal: WideString): HResult;
    function Get_Shield(out pVal: WordBool): HResult;
    function Set_Shield(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IButton);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IButton read GetDefaultInterface;
  published
    property OnClick: TButtonOnClick read FOnClick write FOnClick;
    property OnDblClick: TButtonOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TButtonOnChange read FOnChange write FOnChange;
    property OnKeyDown: TButtonOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TButtonOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TButtonOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TButtonOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TButtonOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TButtonOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TButtonOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TButtonOnResize read FOnResize write FOnResize;
    property OnMove: TButtonOnMove read FOnMove write FOnMove;
    property OnDestroy: TButtonOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TButtonOnShow read FOnShow write FOnShow;
    property OnHide: TButtonOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TButtonOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TButtonOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TButtonOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TButtonOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TButtonOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TButtonOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TButtonOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TButtonOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoCheckBox provides a Create and CreateRemote method to          
// create instances of the default interface ICheckBox exposed by              
// the CoClass CheckBox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCheckBox = class
    class function Create: ICheckBox;
    class function CreateRemote(const MachineName: string): ICheckBox;
  end;

  TCheckBoxOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TCheckBoxOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TCheckBoxOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TCheckBoxOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TCheckBoxOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TCheckBoxOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TCheckBoxOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCheckBoxOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TCheckBoxOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TCheckBoxOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TCheckBoxOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TCheckBoxOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCheckBox
// Help String      : 
// Default Interface: ICheckBox
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TCheckBox = class(TOleServer)
  private
    FOnClick: TCheckBoxOnClick;
    FOnDblClick: TCheckBoxOnDblClick;
    FOnChange: TCheckBoxOnChange;
    FOnKeyDown: TCheckBoxOnKeyDown;
    FOnKeyUp: TCheckBoxOnKeyUp;
    FOnMouseEnter: TCheckBoxOnMouseEnter;
    FOnMouseLeave: TCheckBoxOnMouseLeave;
    FOnMouseDown: TCheckBoxOnMouseDown;
    FOnMouseMove: TCheckBoxOnMouseMove;
    FOnMouseUp: TCheckBoxOnMouseUp;
    FOnResize: TCheckBoxOnResize;
    FOnMove: TCheckBoxOnMove;
    FOnDestroy: TCheckBoxOnDestroy;
    FOnShow: TCheckBoxOnShow;
    FOnHide: TCheckBoxOnHide;
    FOnEnabledChange: TCheckBoxOnEnabledChange;
    FOnSetFocus: TCheckBoxOnSetFocus;
    FOnKillFocus: TCheckBoxOnKillFocus;
    FOnMouseWheel: TCheckBoxOnMouseWheel;
    FOnBeginDock: TCheckBoxOnBeginDock;
    FOnDockControlCreate: TCheckBoxOnDockControlCreate;
    FOnUndockQuery: TCheckBoxOnUndockQuery;
    FOnUndock: TCheckBoxOnUndock;
    FIntf: ICheckBox;
    function GetDefaultInterface: ICheckBox;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Flat(out pVal: WordBool): HResult;
    function Set_Flat(pVal: WordBool): HResult;
    function Get_State(out pVal: Integer): HResult;
    function Set_State(pVal: Integer): HResult;
    function Get_AllowGrayed(out pVal: WordBool): HResult;
    function Set_AllowGrayed(pVal: WordBool): HResult;
    function Get_Checked(out pVal: WordBool): HResult;
    function Set_Checked(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICheckBox);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: ICheckBox read GetDefaultInterface;
  published
    property OnClick: TCheckBoxOnClick read FOnClick write FOnClick;
    property OnDblClick: TCheckBoxOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TCheckBoxOnChange read FOnChange write FOnChange;
    property OnKeyDown: TCheckBoxOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TCheckBoxOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TCheckBoxOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TCheckBoxOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TCheckBoxOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TCheckBoxOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TCheckBoxOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TCheckBoxOnResize read FOnResize write FOnResize;
    property OnMove: TCheckBoxOnMove read FOnMove write FOnMove;
    property OnDestroy: TCheckBoxOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TCheckBoxOnShow read FOnShow write FOnShow;
    property OnHide: TCheckBoxOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TCheckBoxOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TCheckBoxOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TCheckBoxOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TCheckBoxOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TCheckBoxOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TCheckBoxOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TCheckBoxOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TCheckBoxOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoRadioButton provides a Create and CreateRemote method to          
// create instances of the default interface IRadioButton exposed by              
// the CoClass RadioButton. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRadioButton = class
    class function Create: IRadioButton;
    class function CreateRemote(const MachineName: string): IRadioButton;
  end;

  TRadioButtonOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TRadioButtonOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                      Flags: Integer) of object;
  TRadioButtonOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  TRadioButtonOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Button: Integer; Flags: Integer) of object;
  TRadioButtonOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Flags: Integer) of object;
  TRadioButtonOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TRadioButtonOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRadioButtonOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                         Delta: Integer; x: Integer; y: Integer) of object;
  TRadioButtonOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const DockTarget: IDispatch; 
                                                        const BeginDockContext: IDispatch) of object;
  TRadioButtonOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                const Control: IDispatch; 
                                                                const DockTarget: IDispatch; 
                                                                const DockControlCreateContext: IDispatch) of object;
  TRadioButtonOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const UndockContext: IDispatch) of object;
  TRadioButtonOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRadioButton
// Help String      : 
// Default Interface: IRadioButton
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TRadioButton = class(TOleServer)
  private
    FOnClick: TRadioButtonOnClick;
    FOnDblClick: TRadioButtonOnDblClick;
    FOnChange: TRadioButtonOnChange;
    FOnKeyDown: TRadioButtonOnKeyDown;
    FOnKeyUp: TRadioButtonOnKeyUp;
    FOnMouseEnter: TRadioButtonOnMouseEnter;
    FOnMouseLeave: TRadioButtonOnMouseLeave;
    FOnMouseDown: TRadioButtonOnMouseDown;
    FOnMouseMove: TRadioButtonOnMouseMove;
    FOnMouseUp: TRadioButtonOnMouseUp;
    FOnResize: TRadioButtonOnResize;
    FOnMove: TRadioButtonOnMove;
    FOnDestroy: TRadioButtonOnDestroy;
    FOnShow: TRadioButtonOnShow;
    FOnHide: TRadioButtonOnHide;
    FOnEnabledChange: TRadioButtonOnEnabledChange;
    FOnSetFocus: TRadioButtonOnSetFocus;
    FOnKillFocus: TRadioButtonOnKillFocus;
    FOnMouseWheel: TRadioButtonOnMouseWheel;
    FOnBeginDock: TRadioButtonOnBeginDock;
    FOnDockControlCreate: TRadioButtonOnDockControlCreate;
    FOnUndockQuery: TRadioButtonOnUndockQuery;
    FOnUndock: TRadioButtonOnUndock;
    FIntf: IRadioButton;
    function GetDefaultInterface: IRadioButton;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Flat(out pVal: WordBool): HResult;
    function Set_Flat(pVal: WordBool): HResult;
    function Get_Checked(out pVal: WordBool): HResult;
    function Set_Checked(pVal: WordBool): HResult;
    function Get_Group(out pVal: Integer): HResult;
    function Set_Group(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRadioButton);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IRadioButton read GetDefaultInterface;
  published
    property OnClick: TRadioButtonOnClick read FOnClick write FOnClick;
    property OnDblClick: TRadioButtonOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TRadioButtonOnChange read FOnChange write FOnChange;
    property OnKeyDown: TRadioButtonOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TRadioButtonOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TRadioButtonOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TRadioButtonOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TRadioButtonOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TRadioButtonOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TRadioButtonOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TRadioButtonOnResize read FOnResize write FOnResize;
    property OnMove: TRadioButtonOnMove read FOnMove write FOnMove;
    property OnDestroy: TRadioButtonOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TRadioButtonOnShow read FOnShow write FOnShow;
    property OnHide: TRadioButtonOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TRadioButtonOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TRadioButtonOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TRadioButtonOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TRadioButtonOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TRadioButtonOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TRadioButtonOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TRadioButtonOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TRadioButtonOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoStatusItem provides a Create and CreateRemote method to          
// create instances of the default interface IStatusItem exposed by              
// the CoClass StatusItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStatusItem = class
    class function Create: IStatusItem;
    class function CreateRemote(const MachineName: string): IStatusItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStatusItem
// Help String      : 
// Default Interface: IStatusItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TStatusItem = class(TOleServer)
  private
    FIntf: IStatusItem;
    function GetDefaultInterface: IStatusItem;
  protected
    procedure InitServerData; override;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Border(out pVal: Integer): HResult;
    function Set_Border(pVal: Integer): HResult;
    function Get_AutoSize(out pVal: WordBool): HResult;
    function Set_AutoSize(pVal: WordBool): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStatusItem);
    procedure Disconnect; override;
    property DefaultInterface: IStatusItem read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoStatusBar provides a Create and CreateRemote method to          
// create instances of the default interface IStatusBar exposed by              
// the CoClass StatusBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStatusBar = class
    class function Create: IStatusBar;
    class function CreateRemote(const MachineName: string): IStatusBar;
  end;

  TStatusBarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TStatusBarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  TStatusBarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TStatusBarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TStatusBarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Flags: Integer) of object;
  TStatusBarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TStatusBarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TStatusBarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                       Delta: Integer; x: Integer; y: Integer) of object;
  TStatusBarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const DockTarget: IDispatch; 
                                                      const BeginDockContext: IDispatch) of object;
  TStatusBarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                              const Control: IDispatch; 
                                                              const DockTarget: IDispatch; 
                                                              const DockControlCreateContext: IDispatch) of object;
  TStatusBarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const UndockContext: IDispatch) of object;
  TStatusBarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStatusBar
// Help String      : 
// Default Interface: IStatusBar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TStatusBar = class(TOleServer)
  private
    FOnClick: TStatusBarOnClick;
    FOnDblClick: TStatusBarOnDblClick;
    FOnChange: TStatusBarOnChange;
    FOnKeyDown: TStatusBarOnKeyDown;
    FOnKeyUp: TStatusBarOnKeyUp;
    FOnMouseEnter: TStatusBarOnMouseEnter;
    FOnMouseLeave: TStatusBarOnMouseLeave;
    FOnMouseDown: TStatusBarOnMouseDown;
    FOnMouseMove: TStatusBarOnMouseMove;
    FOnMouseUp: TStatusBarOnMouseUp;
    FOnResize: TStatusBarOnResize;
    FOnMove: TStatusBarOnMove;
    FOnDestroy: TStatusBarOnDestroy;
    FOnShow: TStatusBarOnShow;
    FOnHide: TStatusBarOnHide;
    FOnEnabledChange: TStatusBarOnEnabledChange;
    FOnSetFocus: TStatusBarOnSetFocus;
    FOnKillFocus: TStatusBarOnKillFocus;
    FOnMouseWheel: TStatusBarOnMouseWheel;
    FOnBeginDock: TStatusBarOnBeginDock;
    FOnDockControlCreate: TStatusBarOnDockControlCreate;
    FOnUndockQuery: TStatusBarOnUndockQuery;
    FOnUndock: TStatusBarOnUndock;
    FIntf: IStatusBar;
    function GetDefaultInterface: IStatusBar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Simple(out pVal: WordBool): HResult;
    function Set_Simple(pVal: WordBool): HResult;
    function Get_SizeGrip(out pVal: WordBool): HResult;
    function Set_SizeGrip(pVal: WordBool): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStatusBar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function ExChange(A: OleVariant; B: OleVariant): HResult;
    function Add(Width: Integer; Border: Integer; out pItem: IDispatch): HResult;
    property DefaultInterface: IStatusBar read GetDefaultInterface;
  published
    property OnClick: TStatusBarOnClick read FOnClick write FOnClick;
    property OnDblClick: TStatusBarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TStatusBarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TStatusBarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TStatusBarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TStatusBarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TStatusBarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TStatusBarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TStatusBarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TStatusBarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TStatusBarOnResize read FOnResize write FOnResize;
    property OnMove: TStatusBarOnMove read FOnMove write FOnMove;
    property OnDestroy: TStatusBarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TStatusBarOnShow read FOnShow write FOnShow;
    property OnHide: TStatusBarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TStatusBarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TStatusBarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TStatusBarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TStatusBarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TStatusBarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TStatusBarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TStatusBarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TStatusBarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoProgressBar provides a Create and CreateRemote method to          
// create instances of the default interface IProgressBar exposed by              
// the CoClass ProgressBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProgressBar = class
    class function Create: IProgressBar;
    class function CreateRemote(const MachineName: string): IProgressBar;
  end;

  TProgressBarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TProgressBarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                      Flags: Integer) of object;
  TProgressBarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  TProgressBarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Button: Integer; Flags: Integer) of object;
  TProgressBarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Flags: Integer) of object;
  TProgressBarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TProgressBarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TProgressBarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                         Delta: Integer; x: Integer; y: Integer) of object;
  TProgressBarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const DockTarget: IDispatch; 
                                                        const BeginDockContext: IDispatch) of object;
  TProgressBarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                const Control: IDispatch; 
                                                                const DockTarget: IDispatch; 
                                                                const DockControlCreateContext: IDispatch) of object;
  TProgressBarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const UndockContext: IDispatch) of object;
  TProgressBarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TProgressBar
// Help String      : 
// Default Interface: IProgressBar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TProgressBar = class(TOleServer)
  private
    FOnClick: TProgressBarOnClick;
    FOnDblClick: TProgressBarOnDblClick;
    FOnChange: TProgressBarOnChange;
    FOnKeyDown: TProgressBarOnKeyDown;
    FOnKeyUp: TProgressBarOnKeyUp;
    FOnMouseEnter: TProgressBarOnMouseEnter;
    FOnMouseLeave: TProgressBarOnMouseLeave;
    FOnMouseDown: TProgressBarOnMouseDown;
    FOnMouseMove: TProgressBarOnMouseMove;
    FOnMouseUp: TProgressBarOnMouseUp;
    FOnResize: TProgressBarOnResize;
    FOnMove: TProgressBarOnMove;
    FOnDestroy: TProgressBarOnDestroy;
    FOnShow: TProgressBarOnShow;
    FOnHide: TProgressBarOnHide;
    FOnEnabledChange: TProgressBarOnEnabledChange;
    FOnSetFocus: TProgressBarOnSetFocus;
    FOnKillFocus: TProgressBarOnKillFocus;
    FOnMouseWheel: TProgressBarOnMouseWheel;
    FOnBeginDock: TProgressBarOnBeginDock;
    FOnDockControlCreate: TProgressBarOnDockControlCreate;
    FOnUndockQuery: TProgressBarOnUndockQuery;
    FOnUndock: TProgressBarOnUndock;
    FIntf: IProgressBar;
    function GetDefaultInterface: IProgressBar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Min(out pVal: Integer): HResult;
    function Set_Min(pVal: Integer): HResult;
    function Get_Max(out pVal: Integer): HResult;
    function Set_Max(pVal: Integer): HResult;
    function Get_Position(out pVal: Integer): HResult;
    function Set_Position(pVal: Integer): HResult;
    function Get_Step(out pVal: Integer): HResult;
    function Set_Step(pVal: Integer): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
    function Get_Smooth(out pVal: WordBool): HResult;
    function Set_Smooth(pVal: WordBool): HResult;
    function Get_State(out pVal: Integer): HResult;
    function Set_State(pVal: Integer): HResult;
    function Get_Marquee(out pVal: WordBool): HResult;
    function Set_Marquee(pVal: WordBool): HResult;
    function Get_MarqueeActive(out pVal: WordBool): HResult;
    function Set_MarqueeActive(pVal: WordBool): HResult;
    function Get_MarqueeInterval(out pVal: LongWord): HResult;
    function Set_MarqueeInterval(pVal: LongWord): HResult;
    function Get_SmoothReverse(out pVal: WordBool): HResult;
    function Set_SmoothReverse(pVal: WordBool): HResult;
    function Get_BarColor(out pVal: LongWord): HResult;
    function Set_BarColor(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IProgressBar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function StepIt: HResult;
    function StepBy(Delta: Integer): HResult;
    property DefaultInterface: IProgressBar read GetDefaultInterface;
  published
    property OnClick: TProgressBarOnClick read FOnClick write FOnClick;
    property OnDblClick: TProgressBarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TProgressBarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TProgressBarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TProgressBarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TProgressBarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TProgressBarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TProgressBarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TProgressBarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TProgressBarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TProgressBarOnResize read FOnResize write FOnResize;
    property OnMove: TProgressBarOnMove read FOnMove write FOnMove;
    property OnDestroy: TProgressBarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TProgressBarOnShow read FOnShow write FOnShow;
    property OnHide: TProgressBarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TProgressBarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TProgressBarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TProgressBarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TProgressBarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TProgressBarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TProgressBarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TProgressBarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TProgressBarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoScrollBar provides a Create and CreateRemote method to          
// create instances of the default interface IScrollBar exposed by              
// the CoClass ScrollBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoScrollBar = class
    class function Create: IScrollBar;
    class function CreateRemote(const MachineName: string): IScrollBar;
  end;

  TScrollBarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TScrollBarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  TScrollBarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TScrollBarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TScrollBarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Flags: Integer) of object;
  TScrollBarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TScrollBarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TScrollBarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                       Delta: Integer; x: Integer; y: Integer) of object;
  TScrollBarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const DockTarget: IDispatch; 
                                                      const BeginDockContext: IDispatch) of object;
  TScrollBarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                              const Control: IDispatch; 
                                                              const DockTarget: IDispatch; 
                                                              const DockControlCreateContext: IDispatch) of object;
  TScrollBarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const UndockContext: IDispatch) of object;
  TScrollBarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TScrollBar
// Help String      : 
// Default Interface: IScrollBar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TScrollBar = class(TOleServer)
  private
    FOnClick: TScrollBarOnClick;
    FOnDblClick: TScrollBarOnDblClick;
    FOnChange: TScrollBarOnChange;
    FOnKeyDown: TScrollBarOnKeyDown;
    FOnKeyUp: TScrollBarOnKeyUp;
    FOnMouseEnter: TScrollBarOnMouseEnter;
    FOnMouseLeave: TScrollBarOnMouseLeave;
    FOnMouseDown: TScrollBarOnMouseDown;
    FOnMouseMove: TScrollBarOnMouseMove;
    FOnMouseUp: TScrollBarOnMouseUp;
    FOnResize: TScrollBarOnResize;
    FOnMove: TScrollBarOnMove;
    FOnDestroy: TScrollBarOnDestroy;
    FOnShow: TScrollBarOnShow;
    FOnHide: TScrollBarOnHide;
    FOnEnabledChange: TScrollBarOnEnabledChange;
    FOnSetFocus: TScrollBarOnSetFocus;
    FOnKillFocus: TScrollBarOnKillFocus;
    FOnMouseWheel: TScrollBarOnMouseWheel;
    FOnBeginDock: TScrollBarOnBeginDock;
    FOnDockControlCreate: TScrollBarOnDockControlCreate;
    FOnUndockQuery: TScrollBarOnUndockQuery;
    FOnUndock: TScrollBarOnUndock;
    FIntf: IScrollBar;
    function GetDefaultInterface: IScrollBar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Min(out pVal: Integer): HResult;
    function Set_Min(pVal: Integer): HResult;
    function Get_Max(out pVal: Integer): HResult;
    function Set_Max(pVal: Integer): HResult;
    function Get_Position(out pVal: Integer): HResult;
    function Set_Position(pVal: Integer): HResult;
    function Get_Step(out pVal: Integer): HResult;
    function Set_Step(pVal: Integer): HResult;
    function Get_Page(out pVal: LongWord): HResult;
    function Set_Page(pVal: LongWord): HResult;
    function Get_SmallChange(out pVal: LongWord): HResult;
    function Set_SmallChange(pVal: LongWord): HResult;
    function Get_LargeChange(out pVal: LongWord): HResult;
    function Set_LargeChange(pVal: LongWord): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IScrollBar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function StepIt: HResult;
    function StepBy(Delta: Integer): HResult;
    property DefaultInterface: IScrollBar read GetDefaultInterface;
  published
    property OnClick: TScrollBarOnClick read FOnClick write FOnClick;
    property OnDblClick: TScrollBarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TScrollBarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TScrollBarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TScrollBarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TScrollBarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TScrollBarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TScrollBarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TScrollBarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TScrollBarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TScrollBarOnResize read FOnResize write FOnResize;
    property OnMove: TScrollBarOnMove read FOnMove write FOnMove;
    property OnDestroy: TScrollBarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TScrollBarOnShow read FOnShow write FOnShow;
    property OnHide: TScrollBarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TScrollBarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TScrollBarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TScrollBarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TScrollBarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TScrollBarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TScrollBarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TScrollBarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TScrollBarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoTab provides a Create and CreateRemote method to          
// create instances of the default interface ITab exposed by              
// the CoClass Tab. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTab = class
    class function Create: ITab;
    class function CreateRemote(const MachineName: string): ITab;
  end;

  TTabOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                               Button: Integer; Flags: Integer) of object;
  TTabOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TTabOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TTabOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                Button: Integer; Flags: Integer) of object;
  TTabOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                Flags: Integer) of object;
  TTabOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                              Button: Integer; Flags: Integer) of object;
  TTabOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                 Delta: Integer; x: Integer; y: Integer) of object;
  TTabOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                const DockTarget: IDispatch; 
                                                const BeginDockContext: IDispatch) of object;
  TTabOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const Control: IDispatch; 
                                                        const DockTarget: IDispatch; 
                                                        const DockControlCreateContext: IDispatch) of object;
  TTabOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                  const UndockContext: IDispatch) of object;
  TTabOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTab
// Help String      : 
// Default Interface: ITab
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TTab = class(TOleServer)
  private
    FOnClick: TTabOnClick;
    FOnDblClick: TTabOnDblClick;
    FOnChange: TTabOnChange;
    FOnKeyDown: TTabOnKeyDown;
    FOnKeyUp: TTabOnKeyUp;
    FOnMouseEnter: TTabOnMouseEnter;
    FOnMouseLeave: TTabOnMouseLeave;
    FOnMouseDown: TTabOnMouseDown;
    FOnMouseMove: TTabOnMouseMove;
    FOnMouseUp: TTabOnMouseUp;
    FOnResize: TTabOnResize;
    FOnMove: TTabOnMove;
    FOnDestroy: TTabOnDestroy;
    FOnShow: TTabOnShow;
    FOnHide: TTabOnHide;
    FOnEnabledChange: TTabOnEnabledChange;
    FOnSetFocus: TTabOnSetFocus;
    FOnKillFocus: TTabOnKillFocus;
    FOnMouseWheel: TTabOnMouseWheel;
    FOnBeginDock: TTabOnBeginDock;
    FOnDockControlCreate: TTabOnDockControlCreate;
    FOnUndockQuery: TTabOnUndockQuery;
    FOnUndock: TTabOnUndock;
    FIntf: ITab;
    function GetDefaultInterface: ITab;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Set_BorderWidth(pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Set_BevelWidth(pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Set_BevelOuter(pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Set_BevelInner(pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Set_GraphFont(const pVal: IDispatch): HResult;
    function _Set_GraphFont(const pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Set_AutoScroll(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Set_CaptureMouse(pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Set_ParentBackground(pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Set_BorderParentBackground(pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Set_AutoSplit(pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Set_GroupBox(pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Set_Margin(pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Set_MarginLeft(pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Set_MarginTop(pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Set_MarginRight(pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Set_MarginBottom(pVal: LongWord): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITab);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    property DefaultInterface: ITab read GetDefaultInterface;
  published
    property OnClick: TTabOnClick read FOnClick write FOnClick;
    property OnDblClick: TTabOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TTabOnChange read FOnChange write FOnChange;
    property OnKeyDown: TTabOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TTabOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TTabOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TTabOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TTabOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TTabOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TTabOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TTabOnResize read FOnResize write FOnResize;
    property OnMove: TTabOnMove read FOnMove write FOnMove;
    property OnDestroy: TTabOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TTabOnShow read FOnShow write FOnShow;
    property OnHide: TTabOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TTabOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TTabOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TTabOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TTabOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TTabOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TTabOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TTabOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TTabOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoTabControl provides a Create and CreateRemote method to          
// create instances of the default interface ITabControl exposed by              
// the CoClass TabControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTabControl = class
    class function Create: ITabControl;
    class function CreateRemote(const MachineName: string): ITabControl;
  end;

  TTabControlOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TTabControlOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                     Flags: Integer) of object;
  TTabControlOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TTabControlOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TTabControlOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Flags: Integer) of object;
  TTabControlOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TTabControlOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTabControlOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                        Delta: Integer; x: Integer; y: Integer) of object;
  TTabControlOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const DockTarget: IDispatch; 
                                                       const BeginDockContext: IDispatch) of object;
  TTabControlOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                               const Control: IDispatch; 
                                                               const DockTarget: IDispatch; 
                                                               const DockControlCreateContext: IDispatch) of object;
  TTabControlOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                         const UndockContext: IDispatch) of object;
  TTabControlOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTabControl
// Help String      : 
// Default Interface: ITabControl
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TTabControl = class(TOleServer)
  private
    FOnClick: TTabControlOnClick;
    FOnDblClick: TTabControlOnDblClick;
    FOnChange: TTabControlOnChange;
    FOnKeyDown: TTabControlOnKeyDown;
    FOnKeyUp: TTabControlOnKeyUp;
    FOnMouseEnter: TTabControlOnMouseEnter;
    FOnMouseLeave: TTabControlOnMouseLeave;
    FOnMouseDown: TTabControlOnMouseDown;
    FOnMouseMove: TTabControlOnMouseMove;
    FOnMouseUp: TTabControlOnMouseUp;
    FOnResize: TTabControlOnResize;
    FOnMove: TTabControlOnMove;
    FOnDestroy: TTabControlOnDestroy;
    FOnShow: TTabControlOnShow;
    FOnHide: TTabControlOnHide;
    FOnEnabledChange: TTabControlOnEnabledChange;
    FOnSetFocus: TTabControlOnSetFocus;
    FOnKillFocus: TTabControlOnKillFocus;
    FOnMouseWheel: TTabControlOnMouseWheel;
    FOnBeginDock: TTabControlOnBeginDock;
    FOnDockControlCreate: TTabControlOnDockControlCreate;
    FOnUndockQuery: TTabControlOnUndockQuery;
    FOnUndock: TTabControlOnUndock;
    FIntf: ITabControl;
    function GetDefaultInterface: ITabControl;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_ActiveControl(out pVal: IDispatch): HResult;
    function Set_ActiveControl(const pVal: IDispatch): HResult;
    function _Set_ActiveControl(const pVal: IDispatch): HResult;
    function Get_Buttons(out pVal: WordBool): HResult;
    function Set_Buttons(pVal: WordBool): HResult;
    function Get_MultiLine(out pVal: WordBool): HResult;
    function Set_MultiLine(pVal: WordBool): HResult;
    function Get_HotTrack(out pVal: WordBool): HResult;
    function Set_HotTrack(pVal: WordBool): HResult;
    function Get_FlatButtons(out pVal: WordBool): HResult;
    function Set_FlatButtons(pVal: WordBool): HResult;
    function Get_RaggedRight(out pVal: WordBool): HResult;
    function Set_RaggedRight(pVal: WordBool): HResult;
    function Get_TabWidth(out pVal: Integer): HResult;
    function Set_TabWidth(pVal: Integer): HResult;
    function Get_TabHeight(out pVal: Integer): HResult;
    function Set_TabHeight(pVal: Integer): HResult;
    function Get_ItemIndex(out pVal: Integer): HResult;
    function Set_ItemIndex(pVal: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_TabsVisible(out pVal: WordBool): HResult;
    function Set_TabsVisible(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITabControl);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateTab(const Text: WideString; out pControl: IDispatch): HResult;
    property DefaultInterface: ITabControl read GetDefaultInterface;
  published
    property OnClick: TTabControlOnClick read FOnClick write FOnClick;
    property OnDblClick: TTabControlOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TTabControlOnChange read FOnChange write FOnChange;
    property OnKeyDown: TTabControlOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TTabControlOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TTabControlOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TTabControlOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TTabControlOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TTabControlOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TTabControlOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TTabControlOnResize read FOnResize write FOnResize;
    property OnMove: TTabControlOnMove read FOnMove write FOnMove;
    property OnDestroy: TTabControlOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TTabControlOnShow read FOnShow write FOnShow;
    property OnHide: TTabControlOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TTabControlOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TTabControlOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TTabControlOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TTabControlOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TTabControlOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TTabControlOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TTabControlOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TTabControlOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoPageControl provides a Create and CreateRemote method to          
// create instances of the default interface IPageControl exposed by              
// the CoClass PageControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageControl = class
    class function Create: IPageControl;
    class function CreateRemote(const MachineName: string): IPageControl;
  end;

  TPageControlOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TPageControlOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                      Flags: Integer) of object;
  TPageControlOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  TPageControlOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Button: Integer; Flags: Integer) of object;
  TPageControlOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Flags: Integer) of object;
  TPageControlOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TPageControlOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPageControlOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                         Delta: Integer; x: Integer; y: Integer) of object;
  TPageControlOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const DockTarget: IDispatch; 
                                                        const BeginDockContext: IDispatch) of object;
  TPageControlOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                const Control: IDispatch; 
                                                                const DockTarget: IDispatch; 
                                                                const DockControlCreateContext: IDispatch) of object;
  TPageControlOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const UndockContext: IDispatch) of object;
  TPageControlOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPageControl
// Help String      : 
// Default Interface: IPageControl
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TPageControl = class(TOleServer)
  private
    FOnClick: TPageControlOnClick;
    FOnDblClick: TPageControlOnDblClick;
    FOnChange: TPageControlOnChange;
    FOnKeyDown: TPageControlOnKeyDown;
    FOnKeyUp: TPageControlOnKeyUp;
    FOnMouseEnter: TPageControlOnMouseEnter;
    FOnMouseLeave: TPageControlOnMouseLeave;
    FOnMouseDown: TPageControlOnMouseDown;
    FOnMouseMove: TPageControlOnMouseMove;
    FOnMouseUp: TPageControlOnMouseUp;
    FOnResize: TPageControlOnResize;
    FOnMove: TPageControlOnMove;
    FOnDestroy: TPageControlOnDestroy;
    FOnShow: TPageControlOnShow;
    FOnHide: TPageControlOnHide;
    FOnEnabledChange: TPageControlOnEnabledChange;
    FOnSetFocus: TPageControlOnSetFocus;
    FOnKillFocus: TPageControlOnKillFocus;
    FOnMouseWheel: TPageControlOnMouseWheel;
    FOnBeginDock: TPageControlOnBeginDock;
    FOnDockControlCreate: TPageControlOnDockControlCreate;
    FOnUndockQuery: TPageControlOnUndockQuery;
    FOnUndock: TPageControlOnUndock;
    FIntf: IPageControl;
    function GetDefaultInterface: IPageControl;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_ActiveControl(out pVal: IDispatch): HResult;
    function Set_ActiveControl(const pVal: IDispatch): HResult;
    function _Set_ActiveControl(const pVal: IDispatch): HResult;
    function Get_Buttons(out pVal: WordBool): HResult;
    function Set_Buttons(pVal: WordBool): HResult;
    function Get_MultiLine(out pVal: WordBool): HResult;
    function Set_MultiLine(pVal: WordBool): HResult;
    function Get_HotTrack(out pVal: WordBool): HResult;
    function Set_HotTrack(pVal: WordBool): HResult;
    function Get_FlatButtons(out pVal: WordBool): HResult;
    function Set_FlatButtons(pVal: WordBool): HResult;
    function Get_RaggedRight(out pVal: WordBool): HResult;
    function Set_RaggedRight(pVal: WordBool): HResult;
    function Get_TabWidth(out pVal: Integer): HResult;
    function Set_TabWidth(pVal: Integer): HResult;
    function Get_TabHeight(out pVal: Integer): HResult;
    function Set_TabHeight(pVal: Integer): HResult;
    function Get_ItemIndex(out pVal: Integer): HResult;
    function Set_ItemIndex(pVal: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_TabsVisible(out pVal: WordBool): HResult;
    function Set_TabsVisible(pVal: WordBool): HResult;
    function Get_TabsAlign(out pVal: Integer): HResult;
    function Set_TabsAlign(pVal: Integer): HResult;
    function Get_HeaderVisible(out pVal: WordBool): HResult;
    function Set_HeaderVisible(pVal: WordBool): HResult;
    function Get_TabCloseButton(out pVal: WordBool): HResult;
    function Set_TabCloseButton(pVal: WordBool): HResult;
    function Get_ShowSingleTab(out pVal: WordBool): HResult;
    function Set_ShowSingleTab(pVal: WordBool): HResult;
    function Get_HideClippedTabs(out pVal: WordBool): HResult;
    function Set_HideClippedTabs(pVal: WordBool): HResult;
    function Get_TabsDragDrop(out pVal: WordBool): HResult;
    function Set_TabsDragDrop(pVal: WordBool): HResult;
    function Get_HeaderColors(out pVal: IDispatch): HResult;
    function Get_TabColors(out pVal: IDispatch): HResult;
    function Get_CloseButtonColors(out pVal: IDispatch): HResult;
    function Get_ChevronColors(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPageControl);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateTab(const Text: WideString; out pControl: IDispatch): HResult;
    property DefaultInterface: IPageControl read GetDefaultInterface;
  published
    property OnClick: TPageControlOnClick read FOnClick write FOnClick;
    property OnDblClick: TPageControlOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TPageControlOnChange read FOnChange write FOnChange;
    property OnKeyDown: TPageControlOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TPageControlOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TPageControlOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TPageControlOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TPageControlOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TPageControlOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TPageControlOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TPageControlOnResize read FOnResize write FOnResize;
    property OnMove: TPageControlOnMove read FOnMove write FOnMove;
    property OnDestroy: TPageControlOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TPageControlOnShow read FOnShow write FOnShow;
    property OnHide: TPageControlOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TPageControlOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TPageControlOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TPageControlOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TPageControlOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TPageControlOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TPageControlOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TPageControlOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TPageControlOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoToolBar provides a Create and CreateRemote method to          
// create instances of the default interface IToolBar exposed by              
// the CoClass ToolBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolBar = class
    class function Create: IToolBar;
    class function CreateRemote(const MachineName: string): IToolBar;
  end;

  TToolBarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TToolBarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TToolBarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TToolBarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TToolBarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Flags: Integer) of object;
  TToolBarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TToolBarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TToolBarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                     Delta: Integer; x: Integer; y: Integer) of object;
  TToolBarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const DockTarget: IDispatch; 
                                                    const BeginDockContext: IDispatch) of object;
  TToolBarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                            const Control: IDispatch; 
                                                            const DockTarget: IDispatch; 
                                                            const DockControlCreateContext: IDispatch) of object;
  TToolBarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const UndockContext: IDispatch) of object;
  TToolBarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolBar
// Help String      : 
// Default Interface: IToolBar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TToolBar = class(TOleServer)
  private
    FOnClick: TToolBarOnClick;
    FOnDblClick: TToolBarOnDblClick;
    FOnChange: TToolBarOnChange;
    FOnKeyDown: TToolBarOnKeyDown;
    FOnKeyUp: TToolBarOnKeyUp;
    FOnMouseEnter: TToolBarOnMouseEnter;
    FOnMouseLeave: TToolBarOnMouseLeave;
    FOnMouseDown: TToolBarOnMouseDown;
    FOnMouseMove: TToolBarOnMouseMove;
    FOnMouseUp: TToolBarOnMouseUp;
    FOnResize: TToolBarOnResize;
    FOnMove: TToolBarOnMove;
    FOnDestroy: TToolBarOnDestroy;
    FOnShow: TToolBarOnShow;
    FOnHide: TToolBarOnHide;
    FOnEnabledChange: TToolBarOnEnabledChange;
    FOnSetFocus: TToolBarOnSetFocus;
    FOnKillFocus: TToolBarOnKillFocus;
    FOnMouseWheel: TToolBarOnMouseWheel;
    FOnBeginDock: TToolBarOnBeginDock;
    FOnDockControlCreate: TToolBarOnDockControlCreate;
    FOnUndockQuery: TToolBarOnUndockQuery;
    FOnUndock: TToolBarOnUndock;
    FIntf: IToolBar;
    function GetDefaultInterface: IToolBar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Buttons(out pVal: IDispatch): HResult;
    function Set_Buttons(const pVal: IDispatch): HResult;
    function _Set_Buttons(const pVal: IDispatch): HResult;
    function Get_Flat(out pVal: WordBool): HResult;
    function Set_Flat(pVal: WordBool): HResult;
    function Get_ShowText(out pVal: WordBool): HResult;
    function Set_ShowText(pVal: WordBool): HResult;
    function Get_ButtonWidth(out pVal: LongWord): HResult;
    function Set_ButtonWidth(pVal: LongWord): HResult;
    function Get_ButtonHeight(out pVal: LongWord): HResult;
    function Set_ButtonHeight(pVal: LongWord): HResult;
    function Get_AutoSizeButtons(out pVal: WordBool): HResult;
    function Set_AutoSizeButtons(pVal: WordBool): HResult;
    function Get_List(out pVal: WordBool): HResult;
    function Set_List(pVal: WordBool): HResult;
    function Get_Wrapable(out pVal: WordBool): HResult;
    function Set_Wrapable(pVal: WordBool): HResult;
    function Get_AutoSize(out pVal: WordBool): HResult;
    function Set_AutoSize(pVal: WordBool): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
    function Get_MinButtonWidth(out pVal: LongWord): HResult;
    function Set_MinButtonWidth(pVal: LongWord): HResult;
    function Get_MaxButtonWidth(out pVal: LongWord): HResult;
    function Set_MaxButtonWidth(pVal: LongWord): HResult;
    function Get_MaxTextRows(out pVal: LongWord): HResult;
    function Set_MaxTextRows(pVal: LongWord): HResult;
    function Get_PaddingX(out pVal: LongWord): HResult;
    function Set_PaddingX(pVal: LongWord): HResult;
    function Get_PaddingY(out pVal: LongWord): HResult;
    function Set_PaddingY(pVal: LongWord): HResult;
    function Get_ButtonSpacingX(out pVal: LongWord): HResult;
    function Set_ButtonSpacingX(pVal: LongWord): HResult;
    function Get_ButtonSpacingY(out pVal: LongWord): HResult;
    function Set_ButtonSpacingY(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IToolBar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IToolBar read GetDefaultInterface;
  published
    property OnClick: TToolBarOnClick read FOnClick write FOnClick;
    property OnDblClick: TToolBarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TToolBarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TToolBarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TToolBarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TToolBarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TToolBarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TToolBarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TToolBarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TToolBarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TToolBarOnResize read FOnResize write FOnResize;
    property OnMove: TToolBarOnMove read FOnMove write FOnMove;
    property OnDestroy: TToolBarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TToolBarOnShow read FOnShow write FOnShow;
    property OnHide: TToolBarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TToolBarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TToolBarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TToolBarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TToolBarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TToolBarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TToolBarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TToolBarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TToolBarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoMenuBar provides a Create and CreateRemote method to          
// create instances of the default interface IMenuBar exposed by              
// the CoClass MenuBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMenuBar = class
    class function Create: IMenuBar;
    class function CreateRemote(const MachineName: string): IMenuBar;
  end;

  TMenuBarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TMenuBarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TMenuBarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TMenuBarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TMenuBarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Flags: Integer) of object;
  TMenuBarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TMenuBarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TMenuBarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                     Delta: Integer; x: Integer; y: Integer) of object;
  TMenuBarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const DockTarget: IDispatch; 
                                                    const BeginDockContext: IDispatch) of object;
  TMenuBarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                            const Control: IDispatch; 
                                                            const DockTarget: IDispatch; 
                                                            const DockControlCreateContext: IDispatch) of object;
  TMenuBarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const UndockContext: IDispatch) of object;
  TMenuBarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMenuBar
// Help String      : 
// Default Interface: IMenuBar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TMenuBar = class(TOleServer)
  private
    FOnClick: TMenuBarOnClick;
    FOnDblClick: TMenuBarOnDblClick;
    FOnChange: TMenuBarOnChange;
    FOnKeyDown: TMenuBarOnKeyDown;
    FOnKeyUp: TMenuBarOnKeyUp;
    FOnMouseEnter: TMenuBarOnMouseEnter;
    FOnMouseLeave: TMenuBarOnMouseLeave;
    FOnMouseDown: TMenuBarOnMouseDown;
    FOnMouseMove: TMenuBarOnMouseMove;
    FOnMouseUp: TMenuBarOnMouseUp;
    FOnResize: TMenuBarOnResize;
    FOnMove: TMenuBarOnMove;
    FOnDestroy: TMenuBarOnDestroy;
    FOnShow: TMenuBarOnShow;
    FOnHide: TMenuBarOnHide;
    FOnEnabledChange: TMenuBarOnEnabledChange;
    FOnSetFocus: TMenuBarOnSetFocus;
    FOnKillFocus: TMenuBarOnKillFocus;
    FOnMouseWheel: TMenuBarOnMouseWheel;
    FOnBeginDock: TMenuBarOnBeginDock;
    FOnDockControlCreate: TMenuBarOnDockControlCreate;
    FOnUndockQuery: TMenuBarOnUndockQuery;
    FOnUndock: TMenuBarOnUndock;
    FIntf: IMenuBar;
    function GetDefaultInterface: IMenuBar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Menu(out pVal: IDispatch): HResult;
    function Set_Menu(const pVal: IDispatch): HResult;
    function _Set_Menu(const pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMenuBar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IMenuBar read GetDefaultInterface;
  published
    property OnClick: TMenuBarOnClick read FOnClick write FOnClick;
    property OnDblClick: TMenuBarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TMenuBarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TMenuBarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TMenuBarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TMenuBarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TMenuBarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TMenuBarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TMenuBarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TMenuBarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TMenuBarOnResize read FOnResize write FOnResize;
    property OnMove: TMenuBarOnMove read FOnMove write FOnMove;
    property OnDestroy: TMenuBarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TMenuBarOnShow read FOnShow write FOnShow;
    property OnHide: TMenuBarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TMenuBarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TMenuBarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TMenuBarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TMenuBarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TMenuBarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TMenuBarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TMenuBarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TMenuBarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoReBarBand provides a Create and CreateRemote method to          
// create instances of the default interface IReBarBand exposed by              
// the CoClass ReBarBand. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReBarBand = class
    class function Create: IReBarBand;
    class function CreateRemote(const MachineName: string): IReBarBand;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TReBarBand
// Help String      : 
// Default Interface: IReBarBand
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TReBarBand = class(TOleServer)
  private
    FIntf: IReBarBand;
    function GetDefaultInterface: IReBarBand;
  protected
    procedure InitServerData; override;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_Color(out pVal: Integer): HResult;
    function Set_Color(pVal: Integer): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Set_Image(Param1: OleVariant): HResult;
    function Get_ParentImage(out pVal: WordBool): HResult;
    function Set_ParentImage(pVal: WordBool): HResult;
    function Get_FixedImage(out pVal: WordBool): HResult;
    function Set_FixedImage(pVal: WordBool): HResult;
    function Get_FixedSize(out pVal: WordBool): HResult;
    function Set_FixedSize(pVal: WordBool): HResult;
    function Get_Break(out pVal: WordBool): HResult;
    function Set_Break(pVal: WordBool): HResult;
    function Get_GripperAlways(out pVal: WordBool): HResult;
    function Set_GripperAlways(pVal: WordBool): HResult;
    function Get_Locked(out pVal: WordBool): HResult;
    function Set_Locked(pVal: WordBool): HResult;
    function Get_Chevron(out pVal: WordBool): HResult;
    function Set_Chevron(pVal: WordBool): HResult;
    function Get_MinWidth(out pVal: LongWord): HResult;
    function Set_MinWidth(pVal: LongWord): HResult;
    function Get_IdealWidth(out pVal: LongWord): HResult;
    function Set_IdealWidth(pVal: LongWord): HResult;
    function Get_Width(out pVal: LongWord): HResult;
    function Set_Width(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IReBarBand);
    procedure Disconnect; override;
    function Maximize: HResult;
    function Minimize: HResult;
    property DefaultInterface: IReBarBand read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoReBar provides a Create and CreateRemote method to          
// create instances of the default interface IReBar exposed by              
// the CoClass ReBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReBar = class
    class function Create: IReBar;
    class function CreateRemote(const MachineName: string): IReBar;
  end;

  TReBarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  TReBarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TReBarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TReBarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TReBarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Flags: Integer) of object;
  TReBarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                Button: Integer; Flags: Integer) of object;
  TReBarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TReBarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                   Delta: Integer; x: Integer; y: Integer) of object;
  TReBarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                  const DockTarget: IDispatch; 
                                                  const BeginDockContext: IDispatch) of object;
  TReBarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const Control: IDispatch; 
                                                          const DockTarget: IDispatch; 
                                                          const DockControlCreateContext: IDispatch) of object;
  TReBarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const UndockContext: IDispatch) of object;
  TReBarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TReBar
// Help String      : 
// Default Interface: IReBar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TReBar = class(TOleServer)
  private
    FOnClick: TReBarOnClick;
    FOnDblClick: TReBarOnDblClick;
    FOnChange: TReBarOnChange;
    FOnKeyDown: TReBarOnKeyDown;
    FOnKeyUp: TReBarOnKeyUp;
    FOnMouseEnter: TReBarOnMouseEnter;
    FOnMouseLeave: TReBarOnMouseLeave;
    FOnMouseDown: TReBarOnMouseDown;
    FOnMouseMove: TReBarOnMouseMove;
    FOnMouseUp: TReBarOnMouseUp;
    FOnResize: TReBarOnResize;
    FOnMove: TReBarOnMove;
    FOnDestroy: TReBarOnDestroy;
    FOnShow: TReBarOnShow;
    FOnHide: TReBarOnHide;
    FOnEnabledChange: TReBarOnEnabledChange;
    FOnSetFocus: TReBarOnSetFocus;
    FOnKillFocus: TReBarOnKillFocus;
    FOnMouseWheel: TReBarOnMouseWheel;
    FOnBeginDock: TReBarOnBeginDock;
    FOnDockControlCreate: TReBarOnDockControlCreate;
    FOnUndockQuery: TReBarOnUndockQuery;
    FOnUndock: TReBarOnUndock;
    FIntf: IReBar;
    function GetDefaultInterface: IReBar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Set_BorderWidth(pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Set_BevelWidth(pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Set_BevelOuter(pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Set_BevelInner(pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Set_GraphFont(const pVal: IDispatch): HResult;
    function _Set_GraphFont(const pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Set_AutoScroll(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Set_CaptureMouse(pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Set_ParentBackground(pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Set_BorderParentBackground(pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Set_AutoSplit(pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Set_GroupBox(pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Set_Margin(pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Set_MarginLeft(pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Set_MarginTop(pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Set_MarginRight(pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Set_MarginBottom(pVal: LongWord): HResult;
    function Get_Locked(out pVal: WordBool): HResult;
    function Set_Locked(pVal: WordBool): HResult;
    function Get_InsertNewRow(out pVal: WordBool): HResult;
    function Set_InsertNewRow(pVal: WordBool): HResult;
    function Get_Band(const Control: IDispatch; out pVal: IDispatch): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Set_Image(Param1: OleVariant): HResult;
    function Get_FixedOrder(out pVal: WordBool): HResult;
    function Set_FixedOrder(pVal: WordBool): HResult;
    function Get_VarHeight(out pVal: WordBool): HResult;
    function Set_VarHeight(pVal: WordBool): HResult;
    function Get_BandBorders(out pVal: WordBool): HResult;
    function Set_BandBorders(pVal: WordBool): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
    function Get_DblClkToggle(out pVal: WordBool): HResult;
    function Set_DblClkToggle(pVal: WordBool): HResult;
    function Get_VerticalGripper(out pVal: WordBool): HResult;
    function Set_VerticalGripper(pVal: WordBool): HResult;
    function Get_AutoLayout(out pVal: WordBool): HResult;
    function Set_AutoLayout(pVal: WordBool): HResult;
    function Get_RowCount(out pVal: Integer): HResult;
    function Get_RowHeight(Index: Integer; out pVal: Integer): HResult;
    function Get_BandCount(out pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IReBar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    property DefaultInterface: IReBar read GetDefaultInterface;
  published
    property OnClick: TReBarOnClick read FOnClick write FOnClick;
    property OnDblClick: TReBarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TReBarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TReBarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TReBarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TReBarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TReBarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TReBarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TReBarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TReBarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TReBarOnResize read FOnResize write FOnResize;
    property OnMove: TReBarOnMove read FOnMove write FOnMove;
    property OnDestroy: TReBarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TReBarOnShow read FOnShow write FOnShow;
    property OnHide: TReBarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TReBarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TReBarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TReBarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TReBarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TReBarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TReBarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TReBarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TReBarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoHyperLink provides a Create and CreateRemote method to          
// create instances of the default interface IHyperLink exposed by              
// the CoClass HyperLink. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHyperLink = class
    class function Create: IHyperLink;
    class function CreateRemote(const MachineName: string): IHyperLink;
  end;

  THyperLinkOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  THyperLinkOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  THyperLinkOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  THyperLinkOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  THyperLinkOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Flags: Integer) of object;
  THyperLinkOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  THyperLinkOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THyperLinkOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                       Delta: Integer; x: Integer; y: Integer) of object;
  THyperLinkOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const DockTarget: IDispatch; 
                                                      const BeginDockContext: IDispatch) of object;
  THyperLinkOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                              const Control: IDispatch; 
                                                              const DockTarget: IDispatch; 
                                                              const DockControlCreateContext: IDispatch) of object;
  THyperLinkOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const UndockContext: IDispatch) of object;
  THyperLinkOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : THyperLink
// Help String      : 
// Default Interface: IHyperLink
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  THyperLink = class(TOleServer)
  private
    FOnClick: THyperLinkOnClick;
    FOnDblClick: THyperLinkOnDblClick;
    FOnChange: THyperLinkOnChange;
    FOnKeyDown: THyperLinkOnKeyDown;
    FOnKeyUp: THyperLinkOnKeyUp;
    FOnMouseEnter: THyperLinkOnMouseEnter;
    FOnMouseLeave: THyperLinkOnMouseLeave;
    FOnMouseDown: THyperLinkOnMouseDown;
    FOnMouseMove: THyperLinkOnMouseMove;
    FOnMouseUp: THyperLinkOnMouseUp;
    FOnResize: THyperLinkOnResize;
    FOnMove: THyperLinkOnMove;
    FOnDestroy: THyperLinkOnDestroy;
    FOnShow: THyperLinkOnShow;
    FOnHide: THyperLinkOnHide;
    FOnEnabledChange: THyperLinkOnEnabledChange;
    FOnSetFocus: THyperLinkOnSetFocus;
    FOnKillFocus: THyperLinkOnKillFocus;
    FOnMouseWheel: THyperLinkOnMouseWheel;
    FOnBeginDock: THyperLinkOnBeginDock;
    FOnDockControlCreate: THyperLinkOnDockControlCreate;
    FOnUndockQuery: THyperLinkOnUndockQuery;
    FOnUndock: THyperLinkOnUndock;
    FIntf: IHyperLink;
    function GetDefaultInterface: IHyperLink;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Url(out pVal: WideString): HResult;
    function Set_Url(const pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IHyperLink);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IHyperLink read GetDefaultInterface;
  published
    property OnClick: THyperLinkOnClick read FOnClick write FOnClick;
    property OnDblClick: THyperLinkOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: THyperLinkOnChange read FOnChange write FOnChange;
    property OnKeyDown: THyperLinkOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: THyperLinkOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: THyperLinkOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: THyperLinkOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: THyperLinkOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: THyperLinkOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: THyperLinkOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: THyperLinkOnResize read FOnResize write FOnResize;
    property OnMove: THyperLinkOnMove read FOnMove write FOnMove;
    property OnDestroy: THyperLinkOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: THyperLinkOnShow read FOnShow write FOnShow;
    property OnHide: THyperLinkOnHide read FOnHide write FOnHide;
    property OnEnabledChange: THyperLinkOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: THyperLinkOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: THyperLinkOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: THyperLinkOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: THyperLinkOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: THyperLinkOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: THyperLinkOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: THyperLinkOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoPager provides a Create and CreateRemote method to          
// create instances of the default interface IPager exposed by              
// the CoClass Pager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPager = class
    class function Create: IPager;
    class function CreateRemote(const MachineName: string): IPager;
  end;

  TPagerOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  TPagerOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TPagerOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TPagerOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TPagerOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Flags: Integer) of object;
  TPagerOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                Button: Integer; Flags: Integer) of object;
  TPagerOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPagerOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                   Delta: Integer; x: Integer; y: Integer) of object;
  TPagerOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                  const DockTarget: IDispatch; 
                                                  const BeginDockContext: IDispatch) of object;
  TPagerOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const Control: IDispatch; 
                                                          const DockTarget: IDispatch; 
                                                          const DockControlCreateContext: IDispatch) of object;
  TPagerOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const UndockContext: IDispatch) of object;
  TPagerOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPager
// Help String      : 
// Default Interface: IPager
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TPager = class(TOleServer)
  private
    FOnClick: TPagerOnClick;
    FOnDblClick: TPagerOnDblClick;
    FOnChange: TPagerOnChange;
    FOnKeyDown: TPagerOnKeyDown;
    FOnKeyUp: TPagerOnKeyUp;
    FOnMouseEnter: TPagerOnMouseEnter;
    FOnMouseLeave: TPagerOnMouseLeave;
    FOnMouseDown: TPagerOnMouseDown;
    FOnMouseMove: TPagerOnMouseMove;
    FOnMouseUp: TPagerOnMouseUp;
    FOnResize: TPagerOnResize;
    FOnMove: TPagerOnMove;
    FOnDestroy: TPagerOnDestroy;
    FOnShow: TPagerOnShow;
    FOnHide: TPagerOnHide;
    FOnEnabledChange: TPagerOnEnabledChange;
    FOnSetFocus: TPagerOnSetFocus;
    FOnKillFocus: TPagerOnKillFocus;
    FOnMouseWheel: TPagerOnMouseWheel;
    FOnBeginDock: TPagerOnBeginDock;
    FOnDockControlCreate: TPagerOnDockControlCreate;
    FOnUndockQuery: TPagerOnUndockQuery;
    FOnUndock: TPagerOnUndock;
    FIntf: IPager;
    function GetDefaultInterface: IPager;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Set_BorderWidth(pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Set_BevelWidth(pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Set_BevelOuter(pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Set_BevelInner(pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Set_GraphFont(const pVal: IDispatch): HResult;
    function _Set_GraphFont(const pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Set_AutoScroll(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Set_CaptureMouse(pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Set_ParentBackground(pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Set_BorderParentBackground(pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Set_AutoSplit(pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Set_GroupBox(pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Set_Margin(pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Set_MarginLeft(pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Set_MarginTop(pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Set_MarginRight(pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Set_MarginBottom(pVal: LongWord): HResult;
    function Get_Control(out pVal: IDispatch): HResult;
    function Set_Control(const pVal: IDispatch): HResult;
    function _Set_Control(const pVal: IDispatch): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
    function Get_ButtonSize(out pVal: LongWord): HResult;
    function Set_ButtonSize(pVal: LongWord): HResult;
    function Get_Position(out pVal: Integer): HResult;
    function Set_Position(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPager);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    property DefaultInterface: IPager read GetDefaultInterface;
  published
    property OnClick: TPagerOnClick read FOnClick write FOnClick;
    property OnDblClick: TPagerOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TPagerOnChange read FOnChange write FOnChange;
    property OnKeyDown: TPagerOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TPagerOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TPagerOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TPagerOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TPagerOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TPagerOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TPagerOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TPagerOnResize read FOnResize write FOnResize;
    property OnMove: TPagerOnMove read FOnMove write FOnMove;
    property OnDestroy: TPagerOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TPagerOnShow read FOnShow write FOnShow;
    property OnHide: TPagerOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TPagerOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TPagerOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TPagerOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TPagerOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TPagerOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TPagerOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TPagerOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TPagerOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoCOMConnectionPoint provides a Create and CreateRemote method to          
// create instances of the default interface ICOMConnectionPoint exposed by              
// the CoClass COMConnectionPoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCOMConnectionPoint = class
    class function Create: ICOMConnectionPoint;
    class function CreateRemote(const MachineName: string): ICOMConnectionPoint;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCOMConnectionPoint
// Help String      : 
// Default Interface: ICOMConnectionPoint
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TCOMConnectionPoint = class(TOleServer)
  private
    FIntf: ICOMConnectionPoint;
    function GetDefaultInterface: ICOMConnectionPoint;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Get_Text(out pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICOMConnectionPoint);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    property DefaultInterface: ICOMConnectionPoint read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoCOMEvents provides a Create and CreateRemote method to          
// create instances of the default interface ICOMEvents exposed by              
// the CoClass COMEvents. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCOMEvents = class
    class function Create: ICOMEvents;
    class function CreateRemote(const MachineName: string): ICOMEvents;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCOMEvents
// Help String      : 
// Default Interface: ICOMEvents
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TCOMEvents = class(TOleServer)
  private
    FIntf: ICOMEvents;
    function GetDefaultInterface: ICOMEvents;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: OleVariant; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICOMEvents);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    property DefaultInterface: ICOMEvents read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoActiveXControl provides a Create and CreateRemote method to          
// create instances of the default interface IActiveXControl exposed by              
// the CoClass ActiveXControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoActiveXControl = class
    class function Create: IActiveXControl;
    class function CreateRemote(const MachineName: string): IActiveXControl;
  end;

  TActiveXControlOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                          y: Integer; Button: Integer; 
                                                          Flags: Integer) of object;
  TActiveXControlOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                         Flags: Integer) of object;
  TActiveXControlOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                       Flags: Integer) of object;
  TActiveXControlOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                           y: Integer; Button: Integer; 
                                                           Flags: Integer) of object;
  TActiveXControlOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                           y: Integer; Flags: Integer) of object;
  TActiveXControlOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                         y: Integer; Button: Integer; Flags: Integer) of object;
  TActiveXControlOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TActiveXControlOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                            Delta: Integer; x: Integer; y: Integer) of object;
  TActiveXControlOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const DockTarget: IDispatch; 
                                                           const BeginDockContext: IDispatch) of object;
  TActiveXControlOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                   const Control: IDispatch; 
                                                                   const DockTarget: IDispatch; 
                                                                   const DockControlCreateContext: IDispatch) of object;
  TActiveXControlOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const UndockContext: IDispatch) of object;
  TActiveXControlOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TActiveXControl
// Help String      : 
// Default Interface: IActiveXControl
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TActiveXControl = class(TOleServer)
  private
    FOnClick: TActiveXControlOnClick;
    FOnDblClick: TActiveXControlOnDblClick;
    FOnChange: TActiveXControlOnChange;
    FOnKeyDown: TActiveXControlOnKeyDown;
    FOnKeyUp: TActiveXControlOnKeyUp;
    FOnMouseEnter: TActiveXControlOnMouseEnter;
    FOnMouseLeave: TActiveXControlOnMouseLeave;
    FOnMouseDown: TActiveXControlOnMouseDown;
    FOnMouseMove: TActiveXControlOnMouseMove;
    FOnMouseUp: TActiveXControlOnMouseUp;
    FOnResize: TActiveXControlOnResize;
    FOnMove: TActiveXControlOnMove;
    FOnDestroy: TActiveXControlOnDestroy;
    FOnShow: TActiveXControlOnShow;
    FOnHide: TActiveXControlOnHide;
    FOnEnabledChange: TActiveXControlOnEnabledChange;
    FOnSetFocus: TActiveXControlOnSetFocus;
    FOnKillFocus: TActiveXControlOnKillFocus;
    FOnMouseWheel: TActiveXControlOnMouseWheel;
    FOnBeginDock: TActiveXControlOnBeginDock;
    FOnDockControlCreate: TActiveXControlOnDockControlCreate;
    FOnUndockQuery: TActiveXControlOnUndockQuery;
    FOnUndock: TActiveXControlOnUndock;
    FIntf: IActiveXControl;
    function GetDefaultInterface: IActiveXControl;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Control(out pVal: IDispatch): HResult;
    function Get_Events(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IActiveXControl);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IActiveXControl read GetDefaultInterface;
  published
    property OnClick: TActiveXControlOnClick read FOnClick write FOnClick;
    property OnDblClick: TActiveXControlOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TActiveXControlOnChange read FOnChange write FOnChange;
    property OnKeyDown: TActiveXControlOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TActiveXControlOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TActiveXControlOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TActiveXControlOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TActiveXControlOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TActiveXControlOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TActiveXControlOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TActiveXControlOnResize read FOnResize write FOnResize;
    property OnMove: TActiveXControlOnMove read FOnMove write FOnMove;
    property OnDestroy: TActiveXControlOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TActiveXControlOnShow read FOnShow write FOnShow;
    property OnHide: TActiveXControlOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TActiveXControlOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TActiveXControlOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TActiveXControlOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TActiveXControlOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TActiveXControlOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TActiveXControlOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TActiveXControlOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TActiveXControlOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoHeaderItem provides a Create and CreateRemote method to          
// create instances of the default interface IHeaderItem exposed by              
// the CoClass HeaderItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHeaderItem = class
    class function Create: IHeaderItem;
    class function CreateRemote(const MachineName: string): IHeaderItem;
  end;

  THeaderItemOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderItemOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderItemOnBeginTrack = procedure(ASender: TObject; const Sender: IDispatch; Button: Integer; 
                                                        const ResultPtr: IDispatch) of object;
  THeaderItemOnTrack = procedure(ASender: TObject; const Sender: IDispatch; Width: Integer; 
                                                   Button: Integer; const ResultPtr: IDispatch) of object;
  THeaderItemOnDividerDblClick = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const ResultPtr: IDispatch) of object;
  THeaderItemOnBeginDrag = procedure(ASender: TObject; const Sender: IDispatch; Button: Integer; 
                                                       const ResultPtr: IDispatch) of object;
  THeaderItemOnEndDrag = procedure(ASender: TObject; const Sender: IDispatch; Button: Integer; 
                                                     const ResultPtr: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : THeaderItem
// Help String      : 
// Default Interface: IHeaderItem
// Def. Intf. DISP? : No
// Event   Interface: IHeaderItemEvents
// TypeFlags        : (0)
// *********************************************************************//
  THeaderItem = class(TOleServer)
  private
    FOnClick: THeaderItemOnClick;
    FOnResize: THeaderItemOnResize;
    FOnBeginTrack: THeaderItemOnBeginTrack;
    FOnTrack: THeaderItemOnTrack;
    FOnDividerDblClick: THeaderItemOnDividerDblClick;
    FOnBeginDrag: THeaderItemOnBeginDrag;
    FOnEndDrag: THeaderItemOnEndDrag;
    FIntf: IHeaderItem;
    function GetDefaultInterface: IHeaderItem;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_TextAlign(out pVal: Integer): HResult;
    function Set_TextAlign(pVal: Integer): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_DataType(out pVal: Integer): HResult;
    function Set_DataType(pVal: Integer): HResult;
    function Get_SortType(out pVal: Integer): HResult;
    function Set_SortType(pVal: Integer): HResult;
    function Get_Index(out pVal: Integer): HResult;
    function Get_Owner(out pVal: IDispatch): HResult;
    function Get_Order(out pVal: Integer): HResult;
    function Set_Order(pVal: Integer): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnBeginTrack(Param1: OleVariant): HResult;
    function Set_OnTrack(Param1: OleVariant): HResult;
    function Set_OnDividerDblClick(Param1: OleVariant): HResult;
    function Set_OnBeginDrag(Param1: OleVariant): HResult;
    function Set_OnEndDrag(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IHeaderItem);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    property DefaultInterface: IHeaderItem read GetDefaultInterface;
  published
    property OnClick: THeaderItemOnClick read FOnClick write FOnClick;
    property OnResize: THeaderItemOnResize read FOnResize write FOnResize;
    property OnBeginTrack: THeaderItemOnBeginTrack read FOnBeginTrack write FOnBeginTrack;
    property OnTrack: THeaderItemOnTrack read FOnTrack write FOnTrack;
    property OnDividerDblClick: THeaderItemOnDividerDblClick read FOnDividerDblClick write FOnDividerDblClick;
    property OnBeginDrag: THeaderItemOnBeginDrag read FOnBeginDrag write FOnBeginDrag;
    property OnEndDrag: THeaderItemOnEndDrag read FOnEndDrag write FOnEndDrag;
  end;

// *********************************************************************//
// The Class CoHeader provides a Create and CreateRemote method to          
// create instances of the default interface IHeader exposed by              
// the CoClass Header. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHeader = class
    class function Create: IHeader;
    class function CreateRemote(const MachineName: string): IHeader;
  end;

  THeaderOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  THeaderOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  THeaderOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  THeaderOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  THeaderOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Flags: Integer) of object;
  THeaderOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  THeaderOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                    Delta: Integer; x: Integer; y: Integer) of object;
  THeaderOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                   const DockTarget: IDispatch; 
                                                   const BeginDockContext: IDispatch) of object;
  THeaderOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const Control: IDispatch; 
                                                           const DockTarget: IDispatch; 
                                                           const DockControlCreateContext: IDispatch) of object;
  THeaderOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const UndockContext: IDispatch) of object;
  THeaderOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THeaderOnColumnClick = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  THeaderOnColumnResize = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : THeader
// Help String      : 
// Default Interface: IHeader
// Def. Intf. DISP? : No
// Event   Interface: IHeaderEvents
// TypeFlags        : (0)
// *********************************************************************//
  THeader = class(TOleServer)
  private
    FOnClick: THeaderOnClick;
    FOnDblClick: THeaderOnDblClick;
    FOnChange: THeaderOnChange;
    FOnKeyDown: THeaderOnKeyDown;
    FOnKeyUp: THeaderOnKeyUp;
    FOnMouseEnter: THeaderOnMouseEnter;
    FOnMouseLeave: THeaderOnMouseLeave;
    FOnMouseDown: THeaderOnMouseDown;
    FOnMouseMove: THeaderOnMouseMove;
    FOnMouseUp: THeaderOnMouseUp;
    FOnResize: THeaderOnResize;
    FOnMove: THeaderOnMove;
    FOnDestroy: THeaderOnDestroy;
    FOnShow: THeaderOnShow;
    FOnHide: THeaderOnHide;
    FOnEnabledChange: THeaderOnEnabledChange;
    FOnSetFocus: THeaderOnSetFocus;
    FOnKillFocus: THeaderOnKillFocus;
    FOnMouseWheel: THeaderOnMouseWheel;
    FOnBeginDock: THeaderOnBeginDock;
    FOnDockControlCreate: THeaderOnDockControlCreate;
    FOnUndockQuery: THeaderOnUndockQuery;
    FOnUndock: THeaderOnUndock;
    FOnColumnClick: THeaderOnColumnClick;
    FOnColumnResize: THeaderOnColumnResize;
    FIntf: IHeader;
    function GetDefaultInterface: IHeader;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_HotTrack(out pVal: WordBool): HResult;
    function Set_HotTrack(pVal: WordBool): HResult;
    function Get_Flat(out pVal: WordBool): HResult;
    function Set_Flat(pVal: WordBool): HResult;
    function Get_DragDrop(out pVal: WordBool): HResult;
    function Set_DragDrop(pVal: WordBool): HResult;
    function Set_OnColumnClick(Param1: OleVariant): HResult;
    function Set_OnColumnResize(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IHeader);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function Add(const Text: WideString; Width: Integer; TextAlign: Integer; out pItem: IDispatch): HResult;
    property DefaultInterface: IHeader read GetDefaultInterface;
  published
    property OnClick: THeaderOnClick read FOnClick write FOnClick;
    property OnDblClick: THeaderOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: THeaderOnChange read FOnChange write FOnChange;
    property OnKeyDown: THeaderOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: THeaderOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: THeaderOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: THeaderOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: THeaderOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: THeaderOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: THeaderOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: THeaderOnResize read FOnResize write FOnResize;
    property OnMove: THeaderOnMove read FOnMove write FOnMove;
    property OnDestroy: THeaderOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: THeaderOnShow read FOnShow write FOnShow;
    property OnHide: THeaderOnHide read FOnHide write FOnHide;
    property OnEnabledChange: THeaderOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: THeaderOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: THeaderOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: THeaderOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: THeaderOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: THeaderOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: THeaderOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: THeaderOnUndock read FOnUndock write FOnUndock;
    property OnColumnClick: THeaderOnColumnClick read FOnColumnClick write FOnColumnClick;
    property OnColumnResize: THeaderOnColumnResize read FOnColumnResize write FOnColumnResize;
  end;

// *********************************************************************//
// The Class CoListSubItem provides a Create and CreateRemote method to          
// create instances of the default interface IListSubItem exposed by              
// the CoClass ListSubItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListSubItem = class
    class function Create: IListSubItem;
    class function CreateRemote(const MachineName: string): IListSubItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListSubItem
// Help String      : 
// Default Interface: IListSubItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TListSubItem = class(TOleServer)
  private
    FIntf: IListSubItem;
    function GetDefaultInterface: IListSubItem;
  protected
    procedure InitServerData; override;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListSubItem);
    procedure Disconnect; override;
    property DefaultInterface: IListSubItem read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoListItem provides a Create and CreateRemote method to          
// create instances of the default interface IListItem exposed by              
// the CoClass ListItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListItem = class
    class function Create: IListItem;
    class function CreateRemote(const MachineName: string): IListItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListItem
// Help String      : 
// Default Interface: IListItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TListItem = class(TOleServer)
  private
    FIntf: IListItem;
    function GetDefaultInterface: IListItem;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_Selected(out pVal: WordBool): HResult;
    function Set_Selected(pVal: WordBool): HResult;
    function Get_Checked(out pVal: WordBool): HResult;
    function Set_Checked(pVal: WordBool): HResult;
    function Get_SubItems(Index: Integer; out pVal: WideString): HResult;
    function Set_SubItems(Index: Integer; const pVal: WideString): HResult;
    function Get_SubItemImage(Index: Integer; out pVal: Integer): HResult;
    function Set_SubItemImage(Index: Integer; pVal: Integer): HResult;
    function Get_Index(out pVal: Integer): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: WideString): HResult;
    function Set_Hint(const pVal: WideString): HResult;
    function Get_Group(out pVal: LongWord): HResult;
    function Set_Group(pVal: LongWord): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_TextBkColor(out pVal: LongWord): HResult;
    function Set_TextBkColor(pVal: LongWord): HResult;
    function Get_SubItemsEx(Index: Integer; out pVal: IDispatch): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListItem);
    procedure Disconnect; override;
    function SetPosition(Left: LongWord; Top: LongWord): HResult;
    property DefaultInterface: IListItem read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoListViewColumns provides a Create and CreateRemote method to          
// create instances of the default interface IListViewColumns exposed by              
// the CoClass ListViewColumns. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListViewColumns = class
    class function Create: IListViewColumns;
    class function CreateRemote(const MachineName: string): IListViewColumns;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListViewColumns
// Help String      : 
// Default Interface: IListViewColumns
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TListViewColumns = class(TOleServer)
  private
    FIntf: IListViewColumns;
    function GetDefaultInterface: IListViewColumns;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Flat(out pVal: WordBool): HResult;
    function Set_Flat(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListViewColumns);
    procedure Disconnect; override;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function Add(const Text: WideString; Width: Integer; TextAlign: Integer; out pItem: IDispatch): HResult;
    property DefaultInterface: IListViewColumns read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoWorkArea provides a Create and CreateRemote method to          
// create instances of the default interface IWorkArea exposed by              
// the CoClass WorkArea. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWorkArea = class
    class function Create: IWorkArea;
    class function CreateRemote(const MachineName: string): IWorkArea;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TWorkArea
// Help String      : 
// Default Interface: IWorkArea
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TWorkArea = class(TOleServer)
  private
    FIntf: IWorkArea;
    function GetDefaultInterface: IWorkArea;
  protected
    procedure InitServerData; override;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IWorkArea);
    procedure Disconnect; override;
    property DefaultInterface: IWorkArea read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoWorkAreas provides a Create and CreateRemote method to          
// create instances of the default interface IWorkAreas exposed by              
// the CoClass WorkAreas. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWorkAreas = class
    class function Create: IWorkAreas;
    class function CreateRemote(const MachineName: string): IWorkAreas;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TWorkAreas
// Help String      : 
// Default Interface: IWorkAreas
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TWorkAreas = class(TOleServer)
  private
    FIntf: IWorkAreas;
    function GetDefaultInterface: IWorkAreas;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IWorkAreas);
    procedure Disconnect; override;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function Add(Left: Integer; Top: Integer; Width: Integer; Height: Integer; out Item: IDispatch): HResult;
    property DefaultInterface: IWorkAreas read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoListViewGroup provides a Create and CreateRemote method to          
// create instances of the default interface IListViewGroup exposed by              
// the CoClass ListViewGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListViewGroup = class
    class function Create: IListViewGroup;
    class function CreateRemote(const MachineName: string): IListViewGroup;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListViewGroup
// Help String      : 
// Default Interface: IListViewGroup
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TListViewGroup = class(TOleServer)
  private
    FIntf: IListViewGroup;
    function GetDefaultInterface: IListViewGroup;
  protected
    procedure InitServerData; override;
    function Get_Header(out pVal: WideString): HResult;
    function Set_Header(const pVal: WideString): HResult;
    function Get_SubTitle(out pVal: WideString): HResult;
    function Set_SubTitle(const pVal: WideString): HResult;
    function Get_Task(out pVal: WideString): HResult;
    function Set_Task(const pVal: WideString): HResult;
    function Get_DescriptionTop(out pVal: WideString): HResult;
    function Set_DescriptionTop(const pVal: WideString): HResult;
    function Get_DescriptionBottom(out pVal: WideString): HResult;
    function Set_DescriptionBottom(const pVal: WideString): HResult;
    function Get_SubsetTitle(out pVal: WideString): HResult;
    function Set_SubsetTitle(const pVal: WideString): HResult;
    function Get_Subseted(out pVal: WordBool): HResult;
    function Set_Subseted(pVal: WordBool): HResult;
    function Get_NoHeader(out pVal: WordBool): HResult;
    function Set_NoHeader(pVal: WordBool): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Expanded(out pVal: WordBool): HResult;
    function Set_Expanded(pVal: WordBool): HResult;
    function Get_Collapsible(out pVal: WordBool): HResult;
    function Set_Collapsible(pVal: WordBool): HResult;
    function Get_HeaderAlign(out pVal: Integer): HResult;
    function Set_HeaderAlign(pVal: Integer): HResult;
    function Get_TitleImage(out pVal: Integer): HResult;
    function Set_TitleImage(pVal: Integer): HResult;
    function Get_ExtendedImage(out pVal: Integer): HResult;
    function Set_ExtendedImage(pVal: Integer): HResult;
    function Get_Footer(out pVal: WideString): HResult;
    function Set_Footer(const pVal: WideString): HResult;
    function Get_FooterAlign(out pVal: Integer): HResult;
    function Set_FooterAlign(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListViewGroup);
    procedure Disconnect; override;
    property DefaultInterface: IListViewGroup read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoListViewGroups provides a Create and CreateRemote method to          
// create instances of the default interface IListViewGroups exposed by              
// the CoClass ListViewGroups. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListViewGroups = class
    class function Create: IListViewGroups;
    class function CreateRemote(const MachineName: string): IListViewGroups;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListViewGroups
// Help String      : 
// Default Interface: IListViewGroups
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TListViewGroups = class(TOleServer)
  private
    FIntf: IListViewGroups;
    function GetDefaultInterface: IListViewGroups;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListViewGroups);
    procedure Disconnect; override;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function Add(const Name: WideString; out Item: IDispatch): HResult;
    property DefaultInterface: IListViewGroups read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoListView provides a Create and CreateRemote method to          
// create instances of the default interface IListView exposed by              
// the CoClass ListView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoListView = class
    class function Create: IListView;
    class function CreateRemote(const MachineName: string): IListView;
  end;

  TListViewOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TListViewOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TListViewOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TListViewOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TListViewOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TListViewOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TListViewOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TListViewOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TListViewOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TListViewOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TListViewOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TListViewOnColumnClick = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const Item: IDispatch) of object;
  TListViewOnColumnResize = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const Item: IDispatch) of object;
  TListViewOnData = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TListViewOnItemCheck = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TListViewOnEdited = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch; 
                                                  const NewText: IResult) of object;
  TListViewOnBeginEdit = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const Item: IDispatch; const ResultPtr: IResult) of object;
  TListViewOnGroupLinkClick = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const Group: IDispatch) of object;
  TListViewOnDrawItem = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TListViewOnSubItemEdited = procedure(ASender: TObject; const Sender: IDispatch; 
                                                         const Item: IDispatch; SubItem: Integer; 
                                                         const NewText: IResult) of object;
  TListViewOnBeginSubItemEdit = procedure(ASender: TObject; const Sender: IDispatch; 
                                                            const Item: IDispatch; 
                                                            SubItem: Integer; 
                                                            const ResultPtr: IResult) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TListView
// Help String      : 
// Default Interface: IListView
// Def. Intf. DISP? : No
// Event   Interface: IListViewEvents
// TypeFlags        : (0)
// *********************************************************************//
  TListView = class(TOleServer)
  private
    FOnClick: TListViewOnClick;
    FOnDblClick: TListViewOnDblClick;
    FOnChange: TListViewOnChange;
    FOnKeyDown: TListViewOnKeyDown;
    FOnKeyUp: TListViewOnKeyUp;
    FOnMouseEnter: TListViewOnMouseEnter;
    FOnMouseLeave: TListViewOnMouseLeave;
    FOnMouseDown: TListViewOnMouseDown;
    FOnMouseMove: TListViewOnMouseMove;
    FOnMouseUp: TListViewOnMouseUp;
    FOnResize: TListViewOnResize;
    FOnMove: TListViewOnMove;
    FOnDestroy: TListViewOnDestroy;
    FOnShow: TListViewOnShow;
    FOnHide: TListViewOnHide;
    FOnEnabledChange: TListViewOnEnabledChange;
    FOnSetFocus: TListViewOnSetFocus;
    FOnKillFocus: TListViewOnKillFocus;
    FOnMouseWheel: TListViewOnMouseWheel;
    FOnBeginDock: TListViewOnBeginDock;
    FOnDockControlCreate: TListViewOnDockControlCreate;
    FOnUndockQuery: TListViewOnUndockQuery;
    FOnUndock: TListViewOnUndock;
    FOnColumnClick: TListViewOnColumnClick;
    FOnColumnResize: TListViewOnColumnResize;
    FOnData: TListViewOnData;
    FOnItemCheck: TListViewOnItemCheck;
    FOnEdited: TListViewOnEdited;
    FOnBeginEdit: TListViewOnBeginEdit;
    FOnGroupLinkClick: TListViewOnGroupLinkClick;
    FOnDrawItem: TListViewOnDrawItem;
    FOnSubItemEdited: TListViewOnSubItemEdited;
    FOnBeginSubItemEdit: TListViewOnBeginSubItemEdit;
    FIntf: IListView;
    function GetDefaultInterface: IListView;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Set_Count(pcount: Integer): HResult;
    function Get_LargeImages(out pVal: IDispatch): HResult;
    function Set_LargeImages(const pVal: IDispatch): HResult;
    function _Set_LargeImages(const pVal: IDispatch): HResult;
    function Get_SmallImages(out pVal: IDispatch): HResult;
    function Set_SmallImages(const pVal: IDispatch): HResult;
    function _Set_SmallImages(const pVal: IDispatch): HResult;
    function Get_StateImages(out pVal: IDispatch): HResult;
    function Set_StateImages(const pVal: IDispatch): HResult;
    function _Set_StateImages(const pVal: IDispatch): HResult;
    function Get_Style(out pVal: Integer): HResult;
    function Set_Style(pVal: Integer): HResult;
    function Get_TextBkColor(out pVal: LongWord): HResult;
    function Set_TextBkColor(pVal: LongWord): HResult;
    function Get_MultiSelect(out pVal: WordBool): HResult;
    function Set_MultiSelect(pVal: WordBool): HResult;
    function Get_HideSelection(out pVal: WordBool): HResult;
    function Set_HideSelection(pVal: WordBool): HResult;
    function Get_SelCount(out pVal: Integer): HResult;
    function Get_ItemIndex(out pVal: Integer): HResult;
    function Set_ItemIndex(pVal: Integer): HResult;
    function Get_Columns(out pVal: IDispatch): HResult;
    function Get_CheckBoxes(out pVal: WordBool): HResult;
    function Set_CheckBoxes(pVal: WordBool): HResult;
    function Get_GridLines(out pVal: WordBool): HResult;
    function Set_GridLines(pVal: WordBool): HResult;
    function Get_HotTrack(out pVal: WordBool): HResult;
    function Set_HotTrack(pVal: WordBool): HResult;
    function Get_RowSelect(out pVal: WordBool): HResult;
    function Set_RowSelect(pVal: WordBool): HResult;
    function Get_BorderSelect(out pVal: WordBool): HResult;
    function Set_BorderSelect(pVal: WordBool): HResult;
    function Get_FlatScrollBars(out pVal: WordBool): HResult;
    function Set_FlatScrollBars(pVal: WordBool): HResult;
    function Get_OwnerData(out pVal: WordBool): HResult;
    function Set_OwnerData(pVal: WordBool): HResult;
    function Get_ReadOnly(out pVal: WordBool): HResult;
    function Set_ReadOnly(pVal: WordBool): HResult;
    function Get_WrapText(out pVal: WordBool): HResult;
    function Set_WrapText(pVal: WordBool): HResult;
    function Get_Arrangement(out pVal: Integer): HResult;
    function Set_Arrangement(pVal: Integer): HResult;
    function Get_HeaderDragDrop(out pVal: WordBool): HResult;
    function Set_HeaderDragDrop(pVal: WordBool): HResult;
    function Get_InfoTip(out pVal: WordBool): HResult;
    function Set_InfoTip(pVal: WordBool): HResult;
    function Set_BackgroundImage(Param1: OleVariant): HResult;
    function Get_WorkAreas(out pVal: IDispatch): HResult;
    function Get_Groups(out pVal: IDispatch): HResult;
    function Get_TileLines(out pVal: LongWord): HResult;
    function Set_TileLines(pVal: LongWord): HResult;
    function Get_TileWidth(out pVal: LongWord): HResult;
    function Set_TileWidth(pVal: LongWord): HResult;
    function Get_TileHeight(out pVal: LongWord): HResult;
    function Set_TileHeight(pVal: LongWord): HResult;
    function Get_DoubleBuffering(out pVal: WordBool): HResult;
    function Set_DoubleBuffering(pVal: WordBool): HResult;
    function Get_TransparentBackground(out pVal: WordBool): HResult;
    function Set_TransparentBackground(pVal: WordBool): HResult;
    function Get_GroupHeaderImages(out pVal: IDispatch): HResult;
    function Set_GroupHeaderImages(const pVal: IDispatch): HResult;
    function _Set_GroupHeaderImages(const pVal: IDispatch): HResult;
    function Get_IconSpacingWidth(out pVal: Integer): HResult;
    function Set_IconSpacingWidth(pVal: Integer): HResult;
    function Get_IconSpacingHeight(out pVal: Integer): HResult;
    function Set_IconSpacingHeight(pVal: Integer): HResult;
    function Get_CustomDraw(out pVal: WordBool): HResult;
    function Set_CustomDraw(pVal: WordBool): HResult;
    function Get_ReadOnlySubItems(out pVal: WordBool): HResult;
    function Set_ReadOnlySubItems(pVal: WordBool): HResult;
    function Get_QuickEdit(out pVal: WordBool): HResult;
    function Set_QuickEdit(pVal: WordBool): HResult;
    function Get_CheckByMouse(out pVal: WordBool): HResult;
    function Set_CheckByMouse(pVal: WordBool): HResult;
    function Set_OnColumnClick(Param1: OleVariant): HResult;
    function Set_OnColumnResize(Param1: OleVariant): HResult;
    function Set_OnData(Param1: OleVariant): HResult;
    function Set_OnItemCheck(Param1: OleVariant): HResult;
    function Set_OnEdited(Param1: OleVariant): HResult;
    function Set_OnBeginEdit(Param1: OleVariant): HResult;
    function Set_OnGroupLinkClick(Param1: OleVariant): HResult;
    function Set_OnDrawItem(Param1: OleVariant): HResult;
    function Set_OnSubItemEdited(Param1: OleVariant): HResult;
    function Set_OnBeginSubItemEdit(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IListView);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Add(const Text: WideString; out pItem: IDispatch): HResult;
    function Insert(Index: Integer; const Text: WideString; out pItem: IDispatch): HResult;
    function Remove(Index: Integer): HResult;
    function Clear: HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function SelectAll: HResult;
    function ClearSelection: HResult;
    function EditItem(Index: Integer): HResult;
    function Sort(DataType: Integer; Reverse: WordBool; Column: LongWord): HResult;
    function Arrange: HResult;
    property DefaultInterface: IListView read GetDefaultInterface;
  published
    property OnClick: TListViewOnClick read FOnClick write FOnClick;
    property OnDblClick: TListViewOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TListViewOnChange read FOnChange write FOnChange;
    property OnKeyDown: TListViewOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TListViewOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TListViewOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TListViewOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TListViewOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TListViewOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TListViewOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TListViewOnResize read FOnResize write FOnResize;
    property OnMove: TListViewOnMove read FOnMove write FOnMove;
    property OnDestroy: TListViewOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TListViewOnShow read FOnShow write FOnShow;
    property OnHide: TListViewOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TListViewOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TListViewOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TListViewOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TListViewOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TListViewOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TListViewOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TListViewOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TListViewOnUndock read FOnUndock write FOnUndock;
    property OnColumnClick: TListViewOnColumnClick read FOnColumnClick write FOnColumnClick;
    property OnColumnResize: TListViewOnColumnResize read FOnColumnResize write FOnColumnResize;
    property OnData: TListViewOnData read FOnData write FOnData;
    property OnItemCheck: TListViewOnItemCheck read FOnItemCheck write FOnItemCheck;
    property OnEdited: TListViewOnEdited read FOnEdited write FOnEdited;
    property OnBeginEdit: TListViewOnBeginEdit read FOnBeginEdit write FOnBeginEdit;
    property OnGroupLinkClick: TListViewOnGroupLinkClick read FOnGroupLinkClick write FOnGroupLinkClick;
    property OnDrawItem: TListViewOnDrawItem read FOnDrawItem write FOnDrawItem;
    property OnSubItemEdited: TListViewOnSubItemEdited read FOnSubItemEdited write FOnSubItemEdited;
    property OnBeginSubItemEdit: TListViewOnBeginSubItemEdit read FOnBeginSubItemEdit write FOnBeginSubItemEdit;
  end;

// *********************************************************************//
// The Class CoTreeItem provides a Create and CreateRemote method to          
// create instances of the default interface ITreeItem exposed by              
// the CoClass TreeItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTreeItem = class
    class function Create: ITreeItem;
    class function CreateRemote(const MachineName: string): ITreeItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTreeItem
// Help String      : 
// Default Interface: ITreeItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TTreeItem = class(TOleServer)
  private
    FIntf: ITreeItem;
    function GetDefaultInterface: ITreeItem;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_SelectedImageIndex(out pVal: Integer): HResult;
    function Set_SelectedImageIndex(pVal: Integer): HResult;
    function Get_Selected(out pVal: WordBool): HResult;
    function Set_Selected(pVal: WordBool): HResult;
    function Get_Expanded(out pVal: WordBool): HResult;
    function Set_Expanded(pVal: WordBool): HResult;
    function Get_Bold(out pVal: WordBool): HResult;
    function Set_Bold(pVal: WordBool): HResult;
    function Get_Checked(out pVal: WordBool): HResult;
    function Set_Checked(pVal: WordBool): HResult;
    function Get_HasChildren(out pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_NextSibling(out pVal: IDispatch): HResult;
    function Get_PrevSibling(out pVal: IDispatch): HResult;
    function Get_FirstChild(out pVal: IDispatch): HResult;
    function Get_LastChild(out pVal: IDispatch): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: WideString): HResult;
    function Set_Hint(const pVal: WideString): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_TextBkColor(out pVal: LongWord): HResult;
    function Set_TextBkColor(pVal: LongWord): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITreeItem);
    procedure Disconnect; override;
    function Add(const Text: WideString; ImageIndex: Integer; SelectedImageIndex: Integer; 
                 out pItem: IDispatch): HResult;
    function Insert(Index: Integer; const Text: WideString; ImageIndex: Integer; 
                    SelectedImageIndex: Integer; out pItem: IDispatch): HResult;
    function Remove(Index: Integer): HResult;
    function Clear: HResult;
    function Expand(Recurse: WordBool): HResult;
    function Collapse: HResult;
    function EditLabel: HResult;
    function Sort(Recurse: WordBool): HResult;
    function MakeVisible: HResult;
    function ShowHint: HResult;
    property DefaultInterface: ITreeItem read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoTreeView provides a Create and CreateRemote method to          
// create instances of the default interface ITreeView exposed by              
// the CoClass TreeView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTreeView = class
    class function Create: ITreeView;
    class function CreateRemote(const MachineName: string): ITreeView;
  end;

  TTreeViewOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TTreeViewOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TTreeViewOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TTreeViewOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TTreeViewOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TTreeViewOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TTreeViewOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TTreeViewOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TTreeViewOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TTreeViewOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TTreeViewOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTreeViewOnEdited = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch; 
                                                  const NewText: IResult) of object;
  TTreeViewOnExpanding = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TTreeViewOnExpanded = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TTreeViewOnCollapsing = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TTreeViewOnCollapsed = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TTreeViewOnItemCheck = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;
  TTreeViewOnBeginEdit = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const Item: IDispatch; const ResultPtr: IResult) of object;
  TTreeViewOnDrawItem = procedure(ASender: TObject; const Sender: IDispatch; const Item: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTreeView
// Help String      : 
// Default Interface: ITreeView
// Def. Intf. DISP? : No
// Event   Interface: ITreeViewEvents
// TypeFlags        : (0)
// *********************************************************************//
  TTreeView = class(TOleServer)
  private
    FOnClick: TTreeViewOnClick;
    FOnDblClick: TTreeViewOnDblClick;
    FOnChange: TTreeViewOnChange;
    FOnKeyDown: TTreeViewOnKeyDown;
    FOnKeyUp: TTreeViewOnKeyUp;
    FOnMouseEnter: TTreeViewOnMouseEnter;
    FOnMouseLeave: TTreeViewOnMouseLeave;
    FOnMouseDown: TTreeViewOnMouseDown;
    FOnMouseMove: TTreeViewOnMouseMove;
    FOnMouseUp: TTreeViewOnMouseUp;
    FOnResize: TTreeViewOnResize;
    FOnMove: TTreeViewOnMove;
    FOnDestroy: TTreeViewOnDestroy;
    FOnShow: TTreeViewOnShow;
    FOnHide: TTreeViewOnHide;
    FOnEnabledChange: TTreeViewOnEnabledChange;
    FOnSetFocus: TTreeViewOnSetFocus;
    FOnKillFocus: TTreeViewOnKillFocus;
    FOnMouseWheel: TTreeViewOnMouseWheel;
    FOnBeginDock: TTreeViewOnBeginDock;
    FOnDockControlCreate: TTreeViewOnDockControlCreate;
    FOnUndockQuery: TTreeViewOnUndockQuery;
    FOnUndock: TTreeViewOnUndock;
    FOnEdited: TTreeViewOnEdited;
    FOnExpanding: TTreeViewOnExpanding;
    FOnExpanded: TTreeViewOnExpanded;
    FOnCollapsing: TTreeViewOnCollapsing;
    FOnCollapsed: TTreeViewOnCollapsed;
    FOnItemCheck: TTreeViewOnItemCheck;
    FOnBeginEdit: TTreeViewOnBeginEdit;
    FOnDrawItem: TTreeViewOnDrawItem;
    FIntf: ITreeView;
    function GetDefaultInterface: ITreeView;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Items(out pVal: IDispatch): HResult;
    function Get_SelectedItem(out pVal: IDispatch): HResult;
    function Get_TopItem(out pVal: IDispatch): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_StateImages(out pVal: IDispatch): HResult;
    function Set_StateImages(const pVal: IDispatch): HResult;
    function _Set_StateImages(const pVal: IDispatch): HResult;
    function Get_HasButtons(out pVal: WordBool): HResult;
    function Set_HasButtons(pVal: WordBool): HResult;
    function Get_HasLines(out pVal: WordBool): HResult;
    function Set_HasLines(pVal: WordBool): HResult;
    function Get_LinesAtRoot(out pVal: WordBool): HResult;
    function Set_LinesAtRoot(pVal: WordBool): HResult;
    function Get_ReadOnly(out pVal: WordBool): HResult;
    function Set_ReadOnly(pVal: WordBool): HResult;
    function Get_CheckBoxes(out pVal: WordBool): HResult;
    function Set_CheckBoxes(pVal: WordBool): HResult;
    function Get_HotTrack(out pVal: WordBool): HResult;
    function Set_HotTrack(pVal: WordBool): HResult;
    function Get_RowSelect(out pVal: WordBool): HResult;
    function Set_RowSelect(pVal: WordBool): HResult;
    function Get_HideSelection(out pVal: WordBool): HResult;
    function Set_HideSelection(pVal: WordBool): HResult;
    function Get_AutoExpand(out pVal: WordBool): HResult;
    function Set_AutoExpand(pVal: WordBool): HResult;
    function Get_InfoTip(out pVal: WordBool): HResult;
    function Set_InfoTip(pVal: WordBool): HResult;
    function Get_CustomDraw(out pVal: WordBool): HResult;
    function Set_CustomDraw(pVal: WordBool): HResult;
    function Get_DoubleBuffering(out pVal: WordBool): HResult;
    function Set_DoubleBuffering(pVal: WordBool): HResult;
    function Get_NoIndentState(out pVal: WordBool): HResult;
    function Set_NoIndentState(pVal: WordBool): HResult;
    function Get_AutoHScroll(out pVal: WordBool): HResult;
    function Set_AutoHScroll(pVal: WordBool): HResult;
    function Set_OnEdited(Param1: OleVariant): HResult;
    function Set_OnExpanding(Param1: OleVariant): HResult;
    function Set_OnExpanded(Param1: OleVariant): HResult;
    function Set_OnCollapsing(Param1: OleVariant): HResult;
    function Set_OnCollapsed(Param1: OleVariant): HResult;
    function Set_OnItemCheck(Param1: OleVariant): HResult;
    function Set_OnBeginEdit(Param1: OleVariant): HResult;
    function Set_OnDrawItem(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITreeView);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    property DefaultInterface: ITreeView read GetDefaultInterface;
  published
    property OnClick: TTreeViewOnClick read FOnClick write FOnClick;
    property OnDblClick: TTreeViewOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TTreeViewOnChange read FOnChange write FOnChange;
    property OnKeyDown: TTreeViewOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TTreeViewOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TTreeViewOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TTreeViewOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TTreeViewOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TTreeViewOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TTreeViewOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TTreeViewOnResize read FOnResize write FOnResize;
    property OnMove: TTreeViewOnMove read FOnMove write FOnMove;
    property OnDestroy: TTreeViewOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TTreeViewOnShow read FOnShow write FOnShow;
    property OnHide: TTreeViewOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TTreeViewOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TTreeViewOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TTreeViewOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TTreeViewOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TTreeViewOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TTreeViewOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TTreeViewOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TTreeViewOnUndock read FOnUndock write FOnUndock;
    property OnEdited: TTreeViewOnEdited read FOnEdited write FOnEdited;
    property OnExpanding: TTreeViewOnExpanding read FOnExpanding write FOnExpanding;
    property OnExpanded: TTreeViewOnExpanded read FOnExpanded write FOnExpanded;
    property OnCollapsing: TTreeViewOnCollapsing read FOnCollapsing write FOnCollapsing;
    property OnCollapsed: TTreeViewOnCollapsed read FOnCollapsed write FOnCollapsed;
    property OnItemCheck: TTreeViewOnItemCheck read FOnItemCheck write FOnItemCheck;
    property OnBeginEdit: TTreeViewOnBeginEdit read FOnBeginEdit write FOnBeginEdit;
    property OnDrawItem: TTreeViewOnDrawItem read FOnDrawItem write FOnDrawItem;
  end;

// *********************************************************************//
// The Class CoParagraph provides a Create and CreateRemote method to          
// create instances of the default interface IParagraph exposed by              
// the CoClass Paragraph. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoParagraph = class
    class function Create: IParagraph;
    class function CreateRemote(const MachineName: string): IParagraph;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TParagraph
// Help String      : 
// Default Interface: IParagraph
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TParagraph = class(TOleServer)
  private
    FIntf: IParagraph;
    function GetDefaultInterface: IParagraph;
  protected
    procedure InitServerData; override;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Numbering(out pVal: WordBool): HResult;
    function Set_Numbering(pVal: WordBool): HResult;
    function Get_StartIndent(out pVal: Integer): HResult;
    function Set_StartIndent(pVal: Integer): HResult;
    function Get_LeftIndent(out pVal: Integer): HResult;
    function Set_LeftIndent(pVal: Integer): HResult;
    function Get_RightIndent(out pVal: Integer): HResult;
    function Set_RightIndent(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IParagraph);
    procedure Disconnect; override;
    property DefaultInterface: IParagraph read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoRichEdit provides a Create and CreateRemote method to          
// create instances of the default interface IRichEdit exposed by              
// the CoClass RichEdit. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRichEdit = class
    class function Create: IRichEdit;
    class function CreateRemote(const MachineName: string): IRichEdit;
  end;

  TRichEditOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TRichEditOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TRichEditOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TRichEditOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TRichEditOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TRichEditOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TRichEditOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TRichEditOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TRichEditOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TRichEditOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TRichEditOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TRichEditOnSelChange = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRichEdit
// Help String      : 
// Default Interface: IRichEdit
// Def. Intf. DISP? : No
// Event   Interface: IRichEditEvents
// TypeFlags        : (0)
// *********************************************************************//
  TRichEdit = class(TOleServer)
  private
    FOnClick: TRichEditOnClick;
    FOnDblClick: TRichEditOnDblClick;
    FOnChange: TRichEditOnChange;
    FOnKeyDown: TRichEditOnKeyDown;
    FOnKeyUp: TRichEditOnKeyUp;
    FOnMouseEnter: TRichEditOnMouseEnter;
    FOnMouseLeave: TRichEditOnMouseLeave;
    FOnMouseDown: TRichEditOnMouseDown;
    FOnMouseMove: TRichEditOnMouseMove;
    FOnMouseUp: TRichEditOnMouseUp;
    FOnResize: TRichEditOnResize;
    FOnMove: TRichEditOnMove;
    FOnDestroy: TRichEditOnDestroy;
    FOnShow: TRichEditOnShow;
    FOnHide: TRichEditOnHide;
    FOnEnabledChange: TRichEditOnEnabledChange;
    FOnSetFocus: TRichEditOnSetFocus;
    FOnKillFocus: TRichEditOnKillFocus;
    FOnMouseWheel: TRichEditOnMouseWheel;
    FOnBeginDock: TRichEditOnBeginDock;
    FOnDockControlCreate: TRichEditOnDockControlCreate;
    FOnUndockQuery: TRichEditOnUndockQuery;
    FOnUndock: TRichEditOnUndock;
    FOnSelChange: TRichEditOnSelChange;
    FIntf: IRichEdit;
    function GetDefaultInterface: IRichEdit;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_TopIndex(out pVal: Integer): HResult;
    function Set_TopIndex(pVal: Integer): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: WideString): HResult;
    function Set_Item(Index: Integer; const pvar: WideString): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_ReadOnly(out pVal: WordBool): HResult;
    function Set_ReadOnly(pVal: WordBool): HResult;
    function Get_MaxLength(out pVal: Integer): HResult;
    function Set_MaxLength(pVal: Integer): HResult;
    function Get_CharCase(out pVal: Integer): HResult;
    function Set_CharCase(pVal: Integer): HResult;
    function Get_PasswordChar(out pVal: WideString): HResult;
    function Set_PasswordChar(const pVal: WideString): HResult;
    function Get_HideSelection(out pVal: WordBool): HResult;
    function Set_HideSelection(pVal: WordBool): HResult;
    function Get_MultiLine(out pVal: WordBool): HResult;
    function Set_MultiLine(pVal: WordBool): HResult;
    function Get_ScrollBars(out pVal: LongWord): HResult;
    function Set_ScrollBars(pVal: LongWord): HResult;
    function Get_AutoSize(out pVal: WordBool): HResult;
    function Set_AutoSize(pVal: WordBool): HResult;
    function Get_Modified(out pVal: WordBool): HResult;
    function Set_Modified(pVal: WordBool): HResult;
    function Get_SelStart(out pVal: Integer): HResult;
    function Set_SelStart(pVal: Integer): HResult;
    function Get_SelEnd(out pVal: Integer): HResult;
    function Set_SelEnd(pVal: Integer): HResult;
    function Get_SelLength(out pVal: Integer): HResult;
    function Set_SelLength(pVal: Integer): HResult;
    function Get_LeftMargin(out pVal: Word): HResult;
    function Set_LeftMargin(pVal: Word): HResult;
    function Get_RightMargin(out pVal: Word): HResult;
    function Set_RightMargin(pVal: Word): HResult;
    function Get_WordWrap(out pVal: WordBool): HResult;
    function Set_WordWrap(pVal: WordBool): HResult;
    function Get_TextAlign(out pVal: Word): HResult;
    function Set_TextAlign(pVal: Word): HResult;
    function Get_CanUndo(out pVal: WordBool): HResult;
    function Set_CanUndo(pVal: WordBool): HResult;
    function Get_CanPaste(out pVal: WordBool): HResult;
    function Get_DataType(out pVal: Integer): HResult;
    function Set_DataType(pVal: Integer): HResult;
    function Get_Min(out pVal: OleVariant): HResult;
    function Set_Min(pVal: OleVariant): HResult;
    function Get_Max(out pVal: OleVariant): HResult;
    function Set_Max(pVal: OleVariant): HResult;
    function Get_LineFromChar(Index: Integer; out pVal: Integer): HResult;
    function Get_AcceptsReturn(out pVal: WordBool): HResult;
    function Set_AcceptsReturn(pVal: WordBool): HResult;
    function Get_AcceptsTab(out pVal: WordBool): HResult;
    function Set_AcceptsTab(pVal: WordBool): HResult;
    function Get_AutoHeight(out pVal: WordBool): HResult;
    function Set_AutoHeight(pVal: WordBool): HResult;
    function Get_CueBanner(out pVal: WideString): HResult;
    function Set_CueBanner(const pVal: WideString): HResult;
    function Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult;
    function Set_CueBannerAlwaysVisible(pVal: WordBool): HResult;
    function Get_BalloonTip(out pVal: IDispatch): HResult;
    function Get_SelFont(out pVal: IDispatch): HResult;
    function Set_SelFont(const pVal: IDispatch): HResult;
    function _Set_SelFont(const pVal: IDispatch): HResult;
    function Get_Paragraph(out pVal: IDispatch): HResult;
    function Get_AutoURLDetect(out pVal: WordBool): HResult;
    function Set_AutoURLDetect(pVal: WordBool): HResult;
    function Get_CanRedo(out pVal: WordBool): HResult;
    function Get_UndoLimit(out pVal: LongWord): HResult;
    function Set_UndoLimit(pVal: LongWord): HResult;
    function Set_OnSelChange(Param1: OleVariant): HResult;
    function Get_PageRotate(out pVal: LongWord): HResult;
    function Set_PageRotate(pVal: LongWord): HResult;
    function Get_UndoName(out pVal: LongWord): HResult;
    function Get_UndoNameString(out pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichEdit);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Add(const Item: WideString; out pItemIndex: Integer): HResult;
    function Remove(Index: Integer): HResult;
    function Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
    function Clear: HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function ExChange(A: Integer; B: Integer): HResult;
    function Sort(DataType: Integer; Reverse: WordBool): HResult;
    function Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                  out pItemIndex: Integer): HResult;
    function SelectAll: HResult;
    function ClearSelection: HResult;
    function ReplaceSelection(const NewText: WideString; CanUndo: WordBool): HResult;
    function Undo: HResult;
    function Cut: HResult;
    function Copy: HResult;
    function Paste: HResult;
    function FindText(const Text: WideString; Flags: LongWord; MinPos: Integer; MaxPos: Integer; 
                      out pResult: Integer): HResult;
    function Load(Stream: OleVariant; Flags: LongWord; out pResult: WordBool): HResult;
    function Save(Stream: OleVariant; Flags: LongWord; out pResult: WordBool): HResult;
    function Redo: HResult;
    function Print(const Driver: WideString; const Device: WideString; const PrintInfo: IDispatch; 
                   Selection: WordBool): HResult;
    property DefaultInterface: IRichEdit read GetDefaultInterface;
  published
    property OnClick: TRichEditOnClick read FOnClick write FOnClick;
    property OnDblClick: TRichEditOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TRichEditOnChange read FOnChange write FOnChange;
    property OnKeyDown: TRichEditOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TRichEditOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TRichEditOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TRichEditOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TRichEditOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TRichEditOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TRichEditOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TRichEditOnResize read FOnResize write FOnResize;
    property OnMove: TRichEditOnMove read FOnMove write FOnMove;
    property OnDestroy: TRichEditOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TRichEditOnShow read FOnShow write FOnShow;
    property OnHide: TRichEditOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TRichEditOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TRichEditOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TRichEditOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TRichEditOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TRichEditOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TRichEditOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TRichEditOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TRichEditOnUndock read FOnUndock write FOnUndock;
    property OnSelChange: TRichEditOnSelChange read FOnSelChange write FOnSelChange;
  end;

// *********************************************************************//
// The Class CoUpDown provides a Create and CreateRemote method to          
// create instances of the default interface IUpDown exposed by              
// the CoClass UpDown. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUpDown = class
    class function Create: IUpDown;
    class function CreateRemote(const MachineName: string): IUpDown;
  end;

  TUpDownOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TUpDownOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TUpDownOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  TUpDownOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TUpDownOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Flags: Integer) of object;
  TUpDownOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  TUpDownOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TUpDownOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                    Delta: Integer; x: Integer; y: Integer) of object;
  TUpDownOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                   const DockTarget: IDispatch; 
                                                   const BeginDockContext: IDispatch) of object;
  TUpDownOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const Control: IDispatch; 
                                                           const DockTarget: IDispatch; 
                                                           const DockControlCreateContext: IDispatch) of object;
  TUpDownOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const UndockContext: IDispatch) of object;
  TUpDownOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUpDown
// Help String      : 
// Default Interface: IUpDown
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TUpDown = class(TOleServer)
  private
    FOnClick: TUpDownOnClick;
    FOnDblClick: TUpDownOnDblClick;
    FOnChange: TUpDownOnChange;
    FOnKeyDown: TUpDownOnKeyDown;
    FOnKeyUp: TUpDownOnKeyUp;
    FOnMouseEnter: TUpDownOnMouseEnter;
    FOnMouseLeave: TUpDownOnMouseLeave;
    FOnMouseDown: TUpDownOnMouseDown;
    FOnMouseMove: TUpDownOnMouseMove;
    FOnMouseUp: TUpDownOnMouseUp;
    FOnResize: TUpDownOnResize;
    FOnMove: TUpDownOnMove;
    FOnDestroy: TUpDownOnDestroy;
    FOnShow: TUpDownOnShow;
    FOnHide: TUpDownOnHide;
    FOnEnabledChange: TUpDownOnEnabledChange;
    FOnSetFocus: TUpDownOnSetFocus;
    FOnKillFocus: TUpDownOnKillFocus;
    FOnMouseWheel: TUpDownOnMouseWheel;
    FOnBeginDock: TUpDownOnBeginDock;
    FOnDockControlCreate: TUpDownOnDockControlCreate;
    FOnUndockQuery: TUpDownOnUndockQuery;
    FOnUndock: TUpDownOnUndock;
    FIntf: IUpDown;
    function GetDefaultInterface: IUpDown;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Min(out pVal: Integer): HResult;
    function Set_Min(pVal: Integer): HResult;
    function Get_Max(out pVal: Integer): HResult;
    function Set_Max(pVal: Integer): HResult;
    function Get_Position(out pVal: Integer): HResult;
    function Set_Position(pVal: Integer): HResult;
    function Get_Step(out pVal: Integer): HResult;
    function Set_Step(pVal: Integer): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
    function Get_HotTrack(out pVal: WordBool): HResult;
    function Set_HotTrack(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IUpDown);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function StepIt: HResult;
    function StepBy(Delta: Integer): HResult;
    property DefaultInterface: IUpDown read GetDefaultInterface;
  published
    property OnClick: TUpDownOnClick read FOnClick write FOnClick;
    property OnDblClick: TUpDownOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TUpDownOnChange read FOnChange write FOnChange;
    property OnKeyDown: TUpDownOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TUpDownOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TUpDownOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TUpDownOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TUpDownOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TUpDownOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TUpDownOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TUpDownOnResize read FOnResize write FOnResize;
    property OnMove: TUpDownOnMove read FOnMove write FOnMove;
    property OnDestroy: TUpDownOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TUpDownOnShow read FOnShow write FOnShow;
    property OnHide: TUpDownOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TUpDownOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TUpDownOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TUpDownOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TUpDownOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TUpDownOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TUpDownOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TUpDownOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TUpDownOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoTrackBar provides a Create and CreateRemote method to          
// create instances of the default interface ITrackBar exposed by              
// the CoClass TrackBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTrackBar = class
    class function Create: ITrackBar;
    class function CreateRemote(const MachineName: string): ITrackBar;
  end;

  TTrackBarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TTrackBarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TTrackBarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TTrackBarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TTrackBarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TTrackBarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TTrackBarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrackBarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TTrackBarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TTrackBarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TTrackBarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TTrackBarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTrackBar
// Help String      : 
// Default Interface: ITrackBar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TTrackBar = class(TOleServer)
  private
    FOnClick: TTrackBarOnClick;
    FOnDblClick: TTrackBarOnDblClick;
    FOnChange: TTrackBarOnChange;
    FOnKeyDown: TTrackBarOnKeyDown;
    FOnKeyUp: TTrackBarOnKeyUp;
    FOnMouseEnter: TTrackBarOnMouseEnter;
    FOnMouseLeave: TTrackBarOnMouseLeave;
    FOnMouseDown: TTrackBarOnMouseDown;
    FOnMouseMove: TTrackBarOnMouseMove;
    FOnMouseUp: TTrackBarOnMouseUp;
    FOnResize: TTrackBarOnResize;
    FOnMove: TTrackBarOnMove;
    FOnDestroy: TTrackBarOnDestroy;
    FOnShow: TTrackBarOnShow;
    FOnHide: TTrackBarOnHide;
    FOnEnabledChange: TTrackBarOnEnabledChange;
    FOnSetFocus: TTrackBarOnSetFocus;
    FOnKillFocus: TTrackBarOnKillFocus;
    FOnMouseWheel: TTrackBarOnMouseWheel;
    FOnBeginDock: TTrackBarOnBeginDock;
    FOnDockControlCreate: TTrackBarOnDockControlCreate;
    FOnUndockQuery: TTrackBarOnUndockQuery;
    FOnUndock: TTrackBarOnUndock;
    FIntf: ITrackBar;
    function GetDefaultInterface: ITrackBar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Min(out pVal: Integer): HResult;
    function Set_Min(pVal: Integer): HResult;
    function Get_Max(out pVal: Integer): HResult;
    function Set_Max(pVal: Integer): HResult;
    function Get_Position(out pVal: Integer): HResult;
    function Set_Position(pVal: Integer): HResult;
    function Get_Step(out pVal: Integer): HResult;
    function Set_Step(pVal: Integer): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
    function Get_TickMarks(out pVal: Integer): HResult;
    function Set_TickMarks(pVal: Integer): HResult;
    function Get_SmallChange(out pVal: LongWord): HResult;
    function Set_SmallChange(pVal: LongWord): HResult;
    function Get_LargeChange(out pVal: LongWord): HResult;
    function Set_LargeChange(pVal: LongWord): HResult;
    function Get_ThumbLength(out pVal: LongWord): HResult;
    function Set_ThumbLength(pVal: LongWord): HResult;
    function Get_TickFrequency(out pVal: LongWord): HResult;
    function Set_TickFrequency(pVal: LongWord): HResult;
    function Get_EnableSelRange(out pVal: WordBool): HResult;
    function Set_EnableSelRange(pVal: WordBool): HResult;
    function Get_SelStart(out pVal: Integer): HResult;
    function Set_SelStart(pVal: Integer): HResult;
    function Get_SelEnd(out pVal: Integer): HResult;
    function Set_SelEnd(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITrackBar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function StepIt: HResult;
    function StepBy(Delta: Integer): HResult;
    function SelectAll: HResult;
    function ClearSelection: HResult;
    property DefaultInterface: ITrackBar read GetDefaultInterface;
  published
    property OnClick: TTrackBarOnClick read FOnClick write FOnClick;
    property OnDblClick: TTrackBarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TTrackBarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TTrackBarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TTrackBarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TTrackBarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TTrackBarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TTrackBarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TTrackBarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TTrackBarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TTrackBarOnResize read FOnResize write FOnResize;
    property OnMove: TTrackBarOnMove read FOnMove write FOnMove;
    property OnDestroy: TTrackBarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TTrackBarOnShow read FOnShow write FOnShow;
    property OnHide: TTrackBarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TTrackBarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TTrackBarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TTrackBarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TTrackBarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TTrackBarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TTrackBarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TTrackBarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TTrackBarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoHotKey provides a Create and CreateRemote method to          
// create instances of the default interface IHotKey exposed by              
// the CoClass HotKey. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHotKey = class
    class function Create: IHotKey;
    class function CreateRemote(const MachineName: string): IHotKey;
  end;

  THotKeyOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  THotKeyOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  THotKeyOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; Flags: Integer) of object;
  THotKeyOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  THotKeyOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Flags: Integer) of object;
  THotKeyOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                 Button: Integer; Flags: Integer) of object;
  THotKeyOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  THotKeyOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                    Delta: Integer; x: Integer; y: Integer) of object;
  THotKeyOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                   const DockTarget: IDispatch; 
                                                   const BeginDockContext: IDispatch) of object;
  THotKeyOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const Control: IDispatch; 
                                                           const DockTarget: IDispatch; 
                                                           const DockControlCreateContext: IDispatch) of object;
  THotKeyOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const UndockContext: IDispatch) of object;
  THotKeyOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : THotKey
// Help String      : 
// Default Interface: IHotKey
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  THotKey = class(TOleServer)
  private
    FOnClick: THotKeyOnClick;
    FOnDblClick: THotKeyOnDblClick;
    FOnChange: THotKeyOnChange;
    FOnKeyDown: THotKeyOnKeyDown;
    FOnKeyUp: THotKeyOnKeyUp;
    FOnMouseEnter: THotKeyOnMouseEnter;
    FOnMouseLeave: THotKeyOnMouseLeave;
    FOnMouseDown: THotKeyOnMouseDown;
    FOnMouseMove: THotKeyOnMouseMove;
    FOnMouseUp: THotKeyOnMouseUp;
    FOnResize: THotKeyOnResize;
    FOnMove: THotKeyOnMove;
    FOnDestroy: THotKeyOnDestroy;
    FOnShow: THotKeyOnShow;
    FOnHide: THotKeyOnHide;
    FOnEnabledChange: THotKeyOnEnabledChange;
    FOnSetFocus: THotKeyOnSetFocus;
    FOnKillFocus: THotKeyOnKillFocus;
    FOnMouseWheel: THotKeyOnMouseWheel;
    FOnBeginDock: THotKeyOnBeginDock;
    FOnDockControlCreate: THotKeyOnDockControlCreate;
    FOnUndockQuery: THotKeyOnUndockQuery;
    FOnUndock: THotKeyOnUndock;
    FIntf: IHotKey;
    function GetDefaultInterface: IHotKey;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Key(out pVal: OleVariant): HResult;
    function Set_Key(pVal: OleVariant): HResult;
    function Get_InvalidKeys(out pVal: Integer): HResult;
    function Set_InvalidKeys(pVal: Integer): HResult;
    function Get_DefaultKey(out pVal: OleVariant): HResult;
    function Set_DefaultKey(pVal: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IHotKey);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IHotKey read GetDefaultInterface;
  published
    property OnClick: THotKeyOnClick read FOnClick write FOnClick;
    property OnDblClick: THotKeyOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: THotKeyOnChange read FOnChange write FOnChange;
    property OnKeyDown: THotKeyOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: THotKeyOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: THotKeyOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: THotKeyOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: THotKeyOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: THotKeyOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: THotKeyOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: THotKeyOnResize read FOnResize write FOnResize;
    property OnMove: THotKeyOnMove read FOnMove write FOnMove;
    property OnDestroy: THotKeyOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: THotKeyOnShow read FOnShow write FOnShow;
    property OnHide: THotKeyOnHide read FOnHide write FOnHide;
    property OnEnabledChange: THotKeyOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: THotKeyOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: THotKeyOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: THotKeyOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: THotKeyOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: THotKeyOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: THotKeyOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: THotKeyOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoAnimate provides a Create and CreateRemote method to          
// create instances of the default interface IAnimate exposed by              
// the CoClass Animate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnimate = class
    class function Create: IAnimate;
    class function CreateRemote(const MachineName: string): IAnimate;
  end;

  TAnimateOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TAnimateOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TAnimateOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                Flags: Integer) of object;
  TAnimateOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TAnimateOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Flags: Integer) of object;
  TAnimateOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                  Button: Integer; Flags: Integer) of object;
  TAnimateOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TAnimateOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                     Delta: Integer; x: Integer; y: Integer) of object;
  TAnimateOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                    const DockTarget: IDispatch; 
                                                    const BeginDockContext: IDispatch) of object;
  TAnimateOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                            const Control: IDispatch; 
                                                            const DockTarget: IDispatch; 
                                                            const DockControlCreateContext: IDispatch) of object;
  TAnimateOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const UndockContext: IDispatch) of object;
  TAnimateOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAnimate
// Help String      : 
// Default Interface: IAnimate
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TAnimate = class(TOleServer)
  private
    FOnClick: TAnimateOnClick;
    FOnDblClick: TAnimateOnDblClick;
    FOnChange: TAnimateOnChange;
    FOnKeyDown: TAnimateOnKeyDown;
    FOnKeyUp: TAnimateOnKeyUp;
    FOnMouseEnter: TAnimateOnMouseEnter;
    FOnMouseLeave: TAnimateOnMouseLeave;
    FOnMouseDown: TAnimateOnMouseDown;
    FOnMouseMove: TAnimateOnMouseMove;
    FOnMouseUp: TAnimateOnMouseUp;
    FOnResize: TAnimateOnResize;
    FOnMove: TAnimateOnMove;
    FOnDestroy: TAnimateOnDestroy;
    FOnShow: TAnimateOnShow;
    FOnHide: TAnimateOnHide;
    FOnEnabledChange: TAnimateOnEnabledChange;
    FOnSetFocus: TAnimateOnSetFocus;
    FOnKillFocus: TAnimateOnKillFocus;
    FOnMouseWheel: TAnimateOnMouseWheel;
    FOnBeginDock: TAnimateOnBeginDock;
    FOnDockControlCreate: TAnimateOnDockControlCreate;
    FOnUndockQuery: TAnimateOnUndockQuery;
    FOnUndock: TAnimateOnUndock;
    FIntf: IAnimate;
    function GetDefaultInterface: IAnimate;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_AutoRepeat(out pVal: WordBool): HResult;
    function Set_AutoRepeat(pVal: WordBool): HResult;
    function Get_Transparent(out pVal: WordBool): HResult;
    function Set_Transparent(pVal: WordBool): HResult;
    function Get_Center(out pVal: WordBool): HResult;
    function Set_Center(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAnimate);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Open(newVal: OleVariant; StartPlay: WordBool; out pResult: WordBool): HResult;
    function Play: HResult;
    function Stop: HResult;
    function Close: HResult;
    function Seek(Position: Integer): HResult;
    property DefaultInterface: IAnimate read GetDefaultInterface;
  published
    property OnClick: TAnimateOnClick read FOnClick write FOnClick;
    property OnDblClick: TAnimateOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TAnimateOnChange read FOnChange write FOnChange;
    property OnKeyDown: TAnimateOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TAnimateOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TAnimateOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TAnimateOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TAnimateOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TAnimateOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TAnimateOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TAnimateOnResize read FOnResize write FOnResize;
    property OnMove: TAnimateOnMove read FOnMove write FOnMove;
    property OnDestroy: TAnimateOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TAnimateOnShow read FOnShow write FOnShow;
    property OnHide: TAnimateOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TAnimateOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TAnimateOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TAnimateOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TAnimateOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TAnimateOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TAnimateOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TAnimateOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TAnimateOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoIPAddress provides a Create and CreateRemote method to          
// create instances of the default interface IIPAddress exposed by              
// the CoClass IPAddress. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoIPAddress = class
    class function Create: IIPAddress;
    class function CreateRemote(const MachineName: string): IIPAddress;
  end;

  TIPAddressOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TIPAddressOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  TIPAddressOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                  Flags: Integer) of object;
  TIPAddressOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TIPAddressOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Flags: Integer) of object;
  TIPAddressOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TIPAddressOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TIPAddressOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                       Delta: Integer; x: Integer; y: Integer) of object;
  TIPAddressOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                      const DockTarget: IDispatch; 
                                                      const BeginDockContext: IDispatch) of object;
  TIPAddressOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                              const Control: IDispatch; 
                                                              const DockTarget: IDispatch; 
                                                              const DockControlCreateContext: IDispatch) of object;
  TIPAddressOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const UndockContext: IDispatch) of object;
  TIPAddressOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TIPAddress
// Help String      : 
// Default Interface: IIPAddress
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TIPAddress = class(TOleServer)
  private
    FOnClick: TIPAddressOnClick;
    FOnDblClick: TIPAddressOnDblClick;
    FOnChange: TIPAddressOnChange;
    FOnKeyDown: TIPAddressOnKeyDown;
    FOnKeyUp: TIPAddressOnKeyUp;
    FOnMouseEnter: TIPAddressOnMouseEnter;
    FOnMouseLeave: TIPAddressOnMouseLeave;
    FOnMouseDown: TIPAddressOnMouseDown;
    FOnMouseMove: TIPAddressOnMouseMove;
    FOnMouseUp: TIPAddressOnMouseUp;
    FOnResize: TIPAddressOnResize;
    FOnMove: TIPAddressOnMove;
    FOnDestroy: TIPAddressOnDestroy;
    FOnShow: TIPAddressOnShow;
    FOnHide: TIPAddressOnHide;
    FOnEnabledChange: TIPAddressOnEnabledChange;
    FOnSetFocus: TIPAddressOnSetFocus;
    FOnKillFocus: TIPAddressOnKillFocus;
    FOnMouseWheel: TIPAddressOnMouseWheel;
    FOnBeginDock: TIPAddressOnBeginDock;
    FOnDockControlCreate: TIPAddressOnDockControlCreate;
    FOnUndockQuery: TIPAddressOnUndockQuery;
    FOnUndock: TIPAddressOnUndock;
    FIntf: IIPAddress;
    function GetDefaultInterface: IIPAddress;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Value(out pVal: LongWord): HResult;
    function Set_Value(pVal: LongWord): HResult;
    function Get_IsBlank(out pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IIPAddress);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function SetRange(Index: Integer; Min: Byte; Max: Byte): HResult;
    property DefaultInterface: IIPAddress read GetDefaultInterface;
  published
    property OnClick: TIPAddressOnClick read FOnClick write FOnClick;
    property OnDblClick: TIPAddressOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TIPAddressOnChange read FOnChange write FOnChange;
    property OnKeyDown: TIPAddressOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TIPAddressOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TIPAddressOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TIPAddressOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TIPAddressOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TIPAddressOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TIPAddressOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TIPAddressOnResize read FOnResize write FOnResize;
    property OnMove: TIPAddressOnMove read FOnMove write FOnMove;
    property OnDestroy: TIPAddressOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TIPAddressOnShow read FOnShow write FOnShow;
    property OnHide: TIPAddressOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TIPAddressOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TIPAddressOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TIPAddressOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TIPAddressOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TIPAddressOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TIPAddressOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TIPAddressOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TIPAddressOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoDateTime provides a Create and CreateRemote method to          
// create instances of the default interface IDateTime exposed by              
// the CoClass DateTime. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDateTime = class
    class function Create: IDateTime;
    class function CreateRemote(const MachineName: string): IDateTime;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDateTime
// Help String      : 
// Default Interface: IDateTime
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TDateTime = class(TOleServer)
  private
    FIntf: IDateTime;
    function GetDefaultInterface: IDateTime;
  protected
    procedure InitServerData; override;
    function Get_Value(out pVal: TDateTime): HResult;
    function Set_Value(pVal: TDateTime): HResult;
    function Get_Year(out pVal: Word): HResult;
    function Set_Year(pVal: Word): HResult;
    function Get_Month(out pVal: Word): HResult;
    function Set_Month(pVal: Word): HResult;
    function Get_Day(out pVal: Word): HResult;
    function Set_Day(pVal: Word): HResult;
    function Get_Hour(out pVal: Word): HResult;
    function Set_Hour(pVal: Word): HResult;
    function Get_Minute(out pVal: Word): HResult;
    function Set_Minute(pVal: Word): HResult;
    function Get_Second(out pVal: Word): HResult;
    function Set_Second(pVal: Word): HResult;
    function Get_Milliseconds(out pVal: Word): HResult;
    function Set_Milliseconds(pVal: Word): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDateTime);
    procedure Disconnect; override;
    property DefaultInterface: IDateTime read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoDateTimePicker provides a Create and CreateRemote method to          
// create instances of the default interface IDateTimePicker exposed by              
// the CoClass DateTimePicker. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDateTimePicker = class
    class function Create: IDateTimePicker;
    class function CreateRemote(const MachineName: string): IDateTimePicker;
  end;

  TDateTimePickerOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                          y: Integer; Button: Integer; 
                                                          Flags: Integer) of object;
  TDateTimePickerOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                         Flags: Integer) of object;
  TDateTimePickerOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                       Flags: Integer) of object;
  TDateTimePickerOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                           y: Integer; Button: Integer; 
                                                           Flags: Integer) of object;
  TDateTimePickerOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                           y: Integer; Flags: Integer) of object;
  TDateTimePickerOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                         y: Integer; Button: Integer; Flags: Integer) of object;
  TDateTimePickerOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TDateTimePickerOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                            Delta: Integer; x: Integer; y: Integer) of object;
  TDateTimePickerOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const DockTarget: IDispatch; 
                                                           const BeginDockContext: IDispatch) of object;
  TDateTimePickerOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                   const Control: IDispatch; 
                                                                   const DockTarget: IDispatch; 
                                                                   const DockControlCreateContext: IDispatch) of object;
  TDateTimePickerOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const UndockContext: IDispatch) of object;
  TDateTimePickerOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDateTimePicker
// Help String      : 
// Default Interface: IDateTimePicker
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TDateTimePicker = class(TOleServer)
  private
    FOnClick: TDateTimePickerOnClick;
    FOnDblClick: TDateTimePickerOnDblClick;
    FOnChange: TDateTimePickerOnChange;
    FOnKeyDown: TDateTimePickerOnKeyDown;
    FOnKeyUp: TDateTimePickerOnKeyUp;
    FOnMouseEnter: TDateTimePickerOnMouseEnter;
    FOnMouseLeave: TDateTimePickerOnMouseLeave;
    FOnMouseDown: TDateTimePickerOnMouseDown;
    FOnMouseMove: TDateTimePickerOnMouseMove;
    FOnMouseUp: TDateTimePickerOnMouseUp;
    FOnResize: TDateTimePickerOnResize;
    FOnMove: TDateTimePickerOnMove;
    FOnDestroy: TDateTimePickerOnDestroy;
    FOnShow: TDateTimePickerOnShow;
    FOnHide: TDateTimePickerOnHide;
    FOnEnabledChange: TDateTimePickerOnEnabledChange;
    FOnSetFocus: TDateTimePickerOnSetFocus;
    FOnKillFocus: TDateTimePickerOnKillFocus;
    FOnMouseWheel: TDateTimePickerOnMouseWheel;
    FOnBeginDock: TDateTimePickerOnBeginDock;
    FOnDockControlCreate: TDateTimePickerOnDockControlCreate;
    FOnUndockQuery: TDateTimePickerOnUndockQuery;
    FOnUndock: TDateTimePickerOnUndock;
    FIntf: IDateTimePicker;
    function GetDefaultInterface: IDateTimePicker;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Value(out pVal: IDispatch): HResult;
    function Get_Min(out pVal: IDispatch): HResult;
    function Get_Max(out pVal: IDispatch): HResult;
    function Get_Style(out pVal: LongWord): HResult;
    function Set_Style(pVal: LongWord): HResult;
    function Get_ShowCheckBox(out pVal: WordBool): HResult;
    function Set_ShowCheckBox(pVal: WordBool): HResult;
    function Get_ShowUpDown(out pVal: WordBool): HResult;
    function Set_ShowUpDown(pVal: WordBool): HResult;
    function Get_DropDownRightAlign(out pVal: WordBool): HResult;
    function Set_DropDownRightAlign(pVal: WordBool): HResult;
    function Get_CustomFormat(out pVal: WideString): HResult;
    function Set_CustomFormat(const pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDateTimePicker);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IDateTimePicker read GetDefaultInterface;
  published
    property OnClick: TDateTimePickerOnClick read FOnClick write FOnClick;
    property OnDblClick: TDateTimePickerOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TDateTimePickerOnChange read FOnChange write FOnChange;
    property OnKeyDown: TDateTimePickerOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TDateTimePickerOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TDateTimePickerOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TDateTimePickerOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TDateTimePickerOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TDateTimePickerOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TDateTimePickerOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TDateTimePickerOnResize read FOnResize write FOnResize;
    property OnMove: TDateTimePickerOnMove read FOnMove write FOnMove;
    property OnDestroy: TDateTimePickerOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TDateTimePickerOnShow read FOnShow write FOnShow;
    property OnHide: TDateTimePickerOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TDateTimePickerOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TDateTimePickerOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TDateTimePickerOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TDateTimePickerOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TDateTimePickerOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TDateTimePickerOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TDateTimePickerOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TDateTimePickerOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoCalendar provides a Create and CreateRemote method to          
// create instances of the default interface ICalendar exposed by              
// the CoClass Calendar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCalendar = class
    class function Create: ICalendar;
    class function CreateRemote(const MachineName: string): ICalendar;
  end;

  TCalendarOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TCalendarOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TCalendarOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TCalendarOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TCalendarOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TCalendarOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TCalendarOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TCalendarOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TCalendarOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TCalendarOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TCalendarOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TCalendarOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCalendar
// Help String      : 
// Default Interface: ICalendar
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TCalendar = class(TOleServer)
  private
    FOnClick: TCalendarOnClick;
    FOnDblClick: TCalendarOnDblClick;
    FOnChange: TCalendarOnChange;
    FOnKeyDown: TCalendarOnKeyDown;
    FOnKeyUp: TCalendarOnKeyUp;
    FOnMouseEnter: TCalendarOnMouseEnter;
    FOnMouseLeave: TCalendarOnMouseLeave;
    FOnMouseDown: TCalendarOnMouseDown;
    FOnMouseMove: TCalendarOnMouseMove;
    FOnMouseUp: TCalendarOnMouseUp;
    FOnResize: TCalendarOnResize;
    FOnMove: TCalendarOnMove;
    FOnDestroy: TCalendarOnDestroy;
    FOnShow: TCalendarOnShow;
    FOnHide: TCalendarOnHide;
    FOnEnabledChange: TCalendarOnEnabledChange;
    FOnSetFocus: TCalendarOnSetFocus;
    FOnKillFocus: TCalendarOnKillFocus;
    FOnMouseWheel: TCalendarOnMouseWheel;
    FOnBeginDock: TCalendarOnBeginDock;
    FOnDockControlCreate: TCalendarOnDockControlCreate;
    FOnUndockQuery: TCalendarOnUndockQuery;
    FOnUndock: TCalendarOnUndock;
    FIntf: ICalendar;
    function GetDefaultInterface: ICalendar;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Value(out pVal: IDispatch): HResult;
    function Get_Min(out pVal: IDispatch): HResult;
    function Get_Max(out pVal: IDispatch): HResult;
    function Get_MultiSelect(out pVal: WordBool): HResult;
    function Set_MultiSelect(pVal: WordBool): HResult;
    function Get_SelEnd(out pVal: IDispatch): HResult;
    function Get_SelStart(out pVal: IDispatch): HResult;
    function Get_Today(out pVal: IDispatch): HResult;
    function Get_MonthDelta(out pVal: LongWord): HResult;
    function Set_MonthDelta(pVal: LongWord): HResult;
    function Get_MaxSelCount(out pVal: LongWord): HResult;
    function Set_MaxSelCount(pVal: LongWord): HResult;
    function Get_TodayText(out pVal: WordBool): HResult;
    function Set_TodayText(pVal: WordBool): HResult;
    function Get_TodayCircle(out pVal: WordBool): HResult;
    function Set_TodayCircle(pVal: WordBool): HResult;
    function Get_WeekNumbers(out pVal: WordBool): HResult;
    function Set_WeekNumbers(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICalendar);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: ICalendar read GetDefaultInterface;
  published
    property OnClick: TCalendarOnClick read FOnClick write FOnClick;
    property OnDblClick: TCalendarOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TCalendarOnChange read FOnChange write FOnChange;
    property OnKeyDown: TCalendarOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TCalendarOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TCalendarOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TCalendarOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TCalendarOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TCalendarOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TCalendarOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TCalendarOnResize read FOnResize write FOnResize;
    property OnMove: TCalendarOnMove read FOnMove write FOnMove;
    property OnDestroy: TCalendarOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TCalendarOnShow read FOnShow write FOnShow;
    property OnHide: TCalendarOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TCalendarOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TCalendarOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TCalendarOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TCalendarOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TCalendarOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TCalendarOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TCalendarOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TCalendarOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoSplitter provides a Create and CreateRemote method to          
// create instances of the default interface ISplitter exposed by              
// the CoClass Splitter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSplitter = class
    class function Create: ISplitter;
    class function CreateRemote(const MachineName: string): ISplitter;
  end;

  TSplitterOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TSplitterOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TSplitterOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                 Flags: Integer) of object;
  TSplitterOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TSplitterOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Flags: Integer) of object;
  TSplitterOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;
  TSplitterOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitterOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                      Delta: Integer; x: Integer; y: Integer) of object;
  TSplitterOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                     const DockTarget: IDispatch; 
                                                     const BeginDockContext: IDispatch) of object;
  TSplitterOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const Control: IDispatch; 
                                                             const DockTarget: IDispatch; 
                                                             const DockControlCreateContext: IDispatch) of object;
  TSplitterOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const UndockContext: IDispatch) of object;
  TSplitterOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSplitter
// Help String      : 
// Default Interface: ISplitter
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TSplitter = class(TOleServer)
  private
    FOnClick: TSplitterOnClick;
    FOnDblClick: TSplitterOnDblClick;
    FOnChange: TSplitterOnChange;
    FOnKeyDown: TSplitterOnKeyDown;
    FOnKeyUp: TSplitterOnKeyUp;
    FOnMouseEnter: TSplitterOnMouseEnter;
    FOnMouseLeave: TSplitterOnMouseLeave;
    FOnMouseDown: TSplitterOnMouseDown;
    FOnMouseMove: TSplitterOnMouseMove;
    FOnMouseUp: TSplitterOnMouseUp;
    FOnResize: TSplitterOnResize;
    FOnMove: TSplitterOnMove;
    FOnDestroy: TSplitterOnDestroy;
    FOnShow: TSplitterOnShow;
    FOnHide: TSplitterOnHide;
    FOnEnabledChange: TSplitterOnEnabledChange;
    FOnSetFocus: TSplitterOnSetFocus;
    FOnKillFocus: TSplitterOnKillFocus;
    FOnMouseWheel: TSplitterOnMouseWheel;
    FOnBeginDock: TSplitterOnBeginDock;
    FOnDockControlCreate: TSplitterOnDockControlCreate;
    FOnUndockQuery: TSplitterOnUndockQuery;
    FOnUndock: TSplitterOnUndock;
    FIntf: ISplitter;
    function GetDefaultInterface: ISplitter;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISplitter);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: ISplitter read GetDefaultInterface;
  published
    property OnClick: TSplitterOnClick read FOnClick write FOnClick;
    property OnDblClick: TSplitterOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TSplitterOnChange read FOnChange write FOnChange;
    property OnKeyDown: TSplitterOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TSplitterOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TSplitterOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TSplitterOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TSplitterOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TSplitterOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TSplitterOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TSplitterOnResize read FOnResize write FOnResize;
    property OnMove: TSplitterOnMove read FOnMove write FOnMove;
    property OnDestroy: TSplitterOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TSplitterOnShow read FOnShow write FOnShow;
    property OnHide: TSplitterOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TSplitterOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TSplitterOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TSplitterOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TSplitterOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TSplitterOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TSplitterOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TSplitterOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TSplitterOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoSplitPanel provides a Create and CreateRemote method to          
// create instances of the default interface ISplitPanel exposed by              
// the CoClass SplitPanel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSplitPanel = class
    class function Create: ISplitPanel;
    class function CreateRemote(const MachineName: string): ISplitPanel;
  end;

  TSplitPanelOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TSplitPanelOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                     Flags: Integer) of object;
  TSplitPanelOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                   Flags: Integer) of object;
  TSplitPanelOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TSplitPanelOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Flags: Integer) of object;
  TSplitPanelOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TSplitPanelOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TSplitPanelOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                        Delta: Integer; x: Integer; y: Integer) of object;
  TSplitPanelOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                       const DockTarget: IDispatch; 
                                                       const BeginDockContext: IDispatch) of object;
  TSplitPanelOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                               const Control: IDispatch; 
                                                               const DockTarget: IDispatch; 
                                                               const DockControlCreateContext: IDispatch) of object;
  TSplitPanelOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                         const UndockContext: IDispatch) of object;
  TSplitPanelOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSplitPanel
// Help String      : 
// Default Interface: ISplitPanel
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TSplitPanel = class(TOleServer)
  private
    FOnClick: TSplitPanelOnClick;
    FOnDblClick: TSplitPanelOnDblClick;
    FOnChange: TSplitPanelOnChange;
    FOnKeyDown: TSplitPanelOnKeyDown;
    FOnKeyUp: TSplitPanelOnKeyUp;
    FOnMouseEnter: TSplitPanelOnMouseEnter;
    FOnMouseLeave: TSplitPanelOnMouseLeave;
    FOnMouseDown: TSplitPanelOnMouseDown;
    FOnMouseMove: TSplitPanelOnMouseMove;
    FOnMouseUp: TSplitPanelOnMouseUp;
    FOnResize: TSplitPanelOnResize;
    FOnMove: TSplitPanelOnMove;
    FOnDestroy: TSplitPanelOnDestroy;
    FOnShow: TSplitPanelOnShow;
    FOnHide: TSplitPanelOnHide;
    FOnEnabledChange: TSplitPanelOnEnabledChange;
    FOnSetFocus: TSplitPanelOnSetFocus;
    FOnKillFocus: TSplitPanelOnKillFocus;
    FOnMouseWheel: TSplitPanelOnMouseWheel;
    FOnBeginDock: TSplitPanelOnBeginDock;
    FOnDockControlCreate: TSplitPanelOnDockControlCreate;
    FOnUndockQuery: TSplitPanelOnUndockQuery;
    FOnUndock: TSplitPanelOnUndock;
    FIntf: ISplitPanel;
    function GetDefaultInterface: ISplitPanel;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Set_BorderWidth(pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Set_BevelWidth(pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Set_BevelOuter(pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Set_BevelInner(pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Set_GraphFont(const pVal: IDispatch): HResult;
    function _Set_GraphFont(const pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Set_AutoScroll(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Set_CaptureMouse(pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Set_ParentBackground(pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Set_BorderParentBackground(pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Set_AutoSplit(pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Set_GroupBox(pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Set_Margin(pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Set_MarginLeft(pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Set_MarginTop(pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Set_MarginRight(pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Set_MarginBottom(pVal: LongWord): HResult;
    function Get_DefaultSplit(out pVal: Double): HResult;
    function Set_DefaultSplit(pVal: Double): HResult;
    function Get_Live(out pVal: WordBool): HResult;
    function Set_Live(pVal: WordBool): HResult;
    function Get_Vertical(out pVal: WordBool): HResult;
    function Set_Vertical(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISplitPanel);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    property DefaultInterface: ISplitPanel read GetDefaultInterface;
  published
    property OnClick: TSplitPanelOnClick read FOnClick write FOnClick;
    property OnDblClick: TSplitPanelOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TSplitPanelOnChange read FOnChange write FOnChange;
    property OnKeyDown: TSplitPanelOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TSplitPanelOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TSplitPanelOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TSplitPanelOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TSplitPanelOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TSplitPanelOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TSplitPanelOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TSplitPanelOnResize read FOnResize write FOnResize;
    property OnMove: TSplitPanelOnMove read FOnMove write FOnMove;
    property OnDestroy: TSplitPanelOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TSplitPanelOnShow read FOnShow write FOnShow;
    property OnHide: TSplitPanelOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TSplitPanelOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TSplitPanelOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TSplitPanelOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TSplitPanelOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TSplitPanelOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TSplitPanelOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TSplitPanelOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TSplitPanelOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoPolygonGraphic provides a Create and CreateRemote method to          
// create instances of the default interface IPolygon exposed by              
// the CoClass PolygonGraphic. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPolygonGraphic = class
    class function Create: IPolygon;
    class function CreateRemote(const MachineName: string): IPolygon;
  end;

  TPolygonGraphicOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                          y: Integer; Button: Integer; 
                                                          Flags: Integer) of object;
  TPolygonGraphicOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                         Flags: Integer) of object;
  TPolygonGraphicOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                       Flags: Integer) of object;
  TPolygonGraphicOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                           y: Integer; Button: Integer; 
                                                           Flags: Integer) of object;
  TPolygonGraphicOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                           y: Integer; Flags: Integer) of object;
  TPolygonGraphicOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                         y: Integer; Button: Integer; Flags: Integer) of object;
  TPolygonGraphicOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPolygonGraphicOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                            Delta: Integer; x: Integer; y: Integer) of object;
  TPolygonGraphicOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const DockTarget: IDispatch; 
                                                           const BeginDockContext: IDispatch) of object;
  TPolygonGraphicOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                   const Control: IDispatch; 
                                                                   const DockTarget: IDispatch; 
                                                                   const DockControlCreateContext: IDispatch) of object;
  TPolygonGraphicOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                             const UndockContext: IDispatch) of object;
  TPolygonGraphicOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPolygonGraphic
// Help String      : 
// Default Interface: IPolygon
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TPolygonGraphic = class(TOleServer)
  private
    FOnClick: TPolygonGraphicOnClick;
    FOnDblClick: TPolygonGraphicOnDblClick;
    FOnChange: TPolygonGraphicOnChange;
    FOnKeyDown: TPolygonGraphicOnKeyDown;
    FOnKeyUp: TPolygonGraphicOnKeyUp;
    FOnMouseEnter: TPolygonGraphicOnMouseEnter;
    FOnMouseLeave: TPolygonGraphicOnMouseLeave;
    FOnMouseDown: TPolygonGraphicOnMouseDown;
    FOnMouseMove: TPolygonGraphicOnMouseMove;
    FOnMouseUp: TPolygonGraphicOnMouseUp;
    FOnResize: TPolygonGraphicOnResize;
    FOnMove: TPolygonGraphicOnMove;
    FOnDestroy: TPolygonGraphicOnDestroy;
    FOnShow: TPolygonGraphicOnShow;
    FOnHide: TPolygonGraphicOnHide;
    FOnEnabledChange: TPolygonGraphicOnEnabledChange;
    FOnSetFocus: TPolygonGraphicOnSetFocus;
    FOnKillFocus: TPolygonGraphicOnKillFocus;
    FOnMouseWheel: TPolygonGraphicOnMouseWheel;
    FOnBeginDock: TPolygonGraphicOnBeginDock;
    FOnDockControlCreate: TPolygonGraphicOnDockControlCreate;
    FOnUndockQuery: TPolygonGraphicOnUndockQuery;
    FOnUndock: TPolygonGraphicOnUndock;
    FIntf: IPolygon;
    function GetDefaultInterface: IPolygon;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_FillAll(out pVal: WordBool): HResult;
    function Set_FillAll(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPolygon);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IPolygon read GetDefaultInterface;
  published
    property OnClick: TPolygonGraphicOnClick read FOnClick write FOnClick;
    property OnDblClick: TPolygonGraphicOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TPolygonGraphicOnChange read FOnChange write FOnChange;
    property OnKeyDown: TPolygonGraphicOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TPolygonGraphicOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TPolygonGraphicOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TPolygonGraphicOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TPolygonGraphicOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TPolygonGraphicOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TPolygonGraphicOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TPolygonGraphicOnResize read FOnResize write FOnResize;
    property OnMove: TPolygonGraphicOnMove read FOnMove write FOnMove;
    property OnDestroy: TPolygonGraphicOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TPolygonGraphicOnShow read FOnShow write FOnShow;
    property OnHide: TPolygonGraphicOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TPolygonGraphicOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TPolygonGraphicOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TPolygonGraphicOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TPolygonGraphicOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TPolygonGraphicOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TPolygonGraphicOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TPolygonGraphicOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TPolygonGraphicOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoImageGraphic provides a Create and CreateRemote method to          
// create instances of the default interface IImage exposed by              
// the CoClass ImageGraphic. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImageGraphic = class
    class function Create: IImage;
    class function CreateRemote(const MachineName: string): IImage;
  end;

  TImageGraphicOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Button: Integer; Flags: Integer) of object;
  TImageGraphicOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                       Flags: Integer) of object;
  TImageGraphicOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                     Flags: Integer) of object;
  TImageGraphicOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                         y: Integer; Button: Integer; Flags: Integer) of object;
  TImageGraphicOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                         y: Integer; Flags: Integer) of object;
  TImageGraphicOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TImageGraphicOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TImageGraphicOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                          Delta: Integer; x: Integer; y: Integer) of object;
  TImageGraphicOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                         const DockTarget: IDispatch; 
                                                         const BeginDockContext: IDispatch) of object;
  TImageGraphicOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                 const Control: IDispatch; 
                                                                 const DockTarget: IDispatch; 
                                                                 const DockControlCreateContext: IDispatch) of object;
  TImageGraphicOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const UndockContext: IDispatch) of object;
  TImageGraphicOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TImageGraphic
// Help String      : 
// Default Interface: IImage
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TImageGraphic = class(TOleServer)
  private
    FOnClick: TImageGraphicOnClick;
    FOnDblClick: TImageGraphicOnDblClick;
    FOnChange: TImageGraphicOnChange;
    FOnKeyDown: TImageGraphicOnKeyDown;
    FOnKeyUp: TImageGraphicOnKeyUp;
    FOnMouseEnter: TImageGraphicOnMouseEnter;
    FOnMouseLeave: TImageGraphicOnMouseLeave;
    FOnMouseDown: TImageGraphicOnMouseDown;
    FOnMouseMove: TImageGraphicOnMouseMove;
    FOnMouseUp: TImageGraphicOnMouseUp;
    FOnResize: TImageGraphicOnResize;
    FOnMove: TImageGraphicOnMove;
    FOnDestroy: TImageGraphicOnDestroy;
    FOnShow: TImageGraphicOnShow;
    FOnHide: TImageGraphicOnHide;
    FOnEnabledChange: TImageGraphicOnEnabledChange;
    FOnSetFocus: TImageGraphicOnSetFocus;
    FOnKillFocus: TImageGraphicOnKillFocus;
    FOnMouseWheel: TImageGraphicOnMouseWheel;
    FOnBeginDock: TImageGraphicOnBeginDock;
    FOnDockControlCreate: TImageGraphicOnDockControlCreate;
    FOnUndockQuery: TImageGraphicOnUndockQuery;
    FOnUndock: TImageGraphicOnUndock;
    FIntf: IImage;
    function GetDefaultInterface: IImage;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_DrawType(out pVal: LongWord): HResult;
    function Set_DrawType(pVal: LongWord): HResult;
    function Get_CopyMode(out pVal: LongWord): HResult;
    function Set_CopyMode(pVal: LongWord): HResult;
    function Get_ImageWidth(out pVal: LongWord): HResult;
    function Get_ImageHeight(out pVal: LongWord): HResult;
    function Get_AlphaBlend(out pVal: LongWord): HResult;
    function Set_AlphaBlend(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IImage);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: IImage read GetDefaultInterface;
  published
    property OnClick: TImageGraphicOnClick read FOnClick write FOnClick;
    property OnDblClick: TImageGraphicOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TImageGraphicOnChange read FOnChange write FOnChange;
    property OnKeyDown: TImageGraphicOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TImageGraphicOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TImageGraphicOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TImageGraphicOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TImageGraphicOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TImageGraphicOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TImageGraphicOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TImageGraphicOnResize read FOnResize write FOnResize;
    property OnMove: TImageGraphicOnMove read FOnMove write FOnMove;
    property OnDestroy: TImageGraphicOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TImageGraphicOnShow read FOnShow write FOnShow;
    property OnHide: TImageGraphicOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TImageGraphicOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TImageGraphicOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TImageGraphicOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TImageGraphicOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TImageGraphicOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TImageGraphicOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TImageGraphicOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TImageGraphicOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoLineGraphic provides a Create and CreateRemote method to          
// create instances of the default interface ILine exposed by              
// the CoClass LineGraphic. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLineGraphic = class
    class function Create: ILine;
    class function CreateRemote(const MachineName: string): ILine;
  end;

  TLineGraphicOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TLineGraphicOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                      Flags: Integer) of object;
  TLineGraphicOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                    Flags: Integer) of object;
  TLineGraphicOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Button: Integer; Flags: Integer) of object;
  TLineGraphicOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Flags: Integer) of object;
  TLineGraphicOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                      y: Integer; Button: Integer; Flags: Integer) of object;
  TLineGraphicOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TLineGraphicOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                         Delta: Integer; x: Integer; y: Integer) of object;
  TLineGraphicOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                        const DockTarget: IDispatch; 
                                                        const BeginDockContext: IDispatch) of object;
  TLineGraphicOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                const Control: IDispatch; 
                                                                const DockTarget: IDispatch; 
                                                                const DockControlCreateContext: IDispatch) of object;
  TLineGraphicOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                          const UndockContext: IDispatch) of object;
  TLineGraphicOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLineGraphic
// Help String      : 
// Default Interface: ILine
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TLineGraphic = class(TOleServer)
  private
    FOnClick: TLineGraphicOnClick;
    FOnDblClick: TLineGraphicOnDblClick;
    FOnChange: TLineGraphicOnChange;
    FOnKeyDown: TLineGraphicOnKeyDown;
    FOnKeyUp: TLineGraphicOnKeyUp;
    FOnMouseEnter: TLineGraphicOnMouseEnter;
    FOnMouseLeave: TLineGraphicOnMouseLeave;
    FOnMouseDown: TLineGraphicOnMouseDown;
    FOnMouseMove: TLineGraphicOnMouseMove;
    FOnMouseUp: TLineGraphicOnMouseUp;
    FOnResize: TLineGraphicOnResize;
    FOnMove: TLineGraphicOnMove;
    FOnDestroy: TLineGraphicOnDestroy;
    FOnShow: TLineGraphicOnShow;
    FOnHide: TLineGraphicOnHide;
    FOnEnabledChange: TLineGraphicOnEnabledChange;
    FOnSetFocus: TLineGraphicOnSetFocus;
    FOnKillFocus: TLineGraphicOnKillFocus;
    FOnMouseWheel: TLineGraphicOnMouseWheel;
    FOnBeginDock: TLineGraphicOnBeginDock;
    FOnDockControlCreate: TLineGraphicOnDockControlCreate;
    FOnUndockQuery: TLineGraphicOnUndockQuery;
    FOnUndock: TLineGraphicOnUndock;
    FIntf: ILine;
    function GetDefaultInterface: ILine;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_x(Index: Integer; out pVal: Integer): HResult;
    function Set_x(Index: Integer; pVal: Integer): HResult;
    function Get_y(Index: Integer; out pVal: Integer): HResult;
    function Set_y(Index: Integer; pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ILine);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    property DefaultInterface: ILine read GetDefaultInterface;
  published
    property OnClick: TLineGraphicOnClick read FOnClick write FOnClick;
    property OnDblClick: TLineGraphicOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TLineGraphicOnChange read FOnChange write FOnChange;
    property OnKeyDown: TLineGraphicOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TLineGraphicOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TLineGraphicOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TLineGraphicOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TLineGraphicOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TLineGraphicOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TLineGraphicOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TLineGraphicOnResize read FOnResize write FOnResize;
    property OnMove: TLineGraphicOnMove read FOnMove write FOnMove;
    property OnDestroy: TLineGraphicOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TLineGraphicOnShow read FOnShow write FOnShow;
    property OnHide: TLineGraphicOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TLineGraphicOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TLineGraphicOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TLineGraphicOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TLineGraphicOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TLineGraphicOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TLineGraphicOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TLineGraphicOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TLineGraphicOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoPrintDialogBase provides a Create and CreateRemote method to          
// create instances of the default interface IPrintDialogBase exposed by              
// the CoClass PrintDialogBase. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPrintDialogBase = class
    class function Create: IPrintDialogBase;
    class function CreateRemote(const MachineName: string): IPrintDialogBase;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPrintDialogBase
// Help String      : 
// Default Interface: IPrintDialogBase
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TPrintDialogBase = class(TOleServer)
  private
    FIntf: IPrintDialogBase;
    function GetDefaultInterface: IPrintDialogBase;
  protected
    procedure InitServerData; override;
    function Get_Driver(out pVal: WideString): HResult;
    function Get_Device(out pVal: WideString): HResult;
    function Get_Port(out pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPrintDialogBase);
    procedure Disconnect; override;
    property DefaultInterface: IPrintDialogBase read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoPrintDialog provides a Create and CreateRemote method to          
// create instances of the default interface IPrintDialog exposed by              
// the CoClass PrintDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPrintDialog = class
    class function Create: IPrintDialog;
    class function CreateRemote(const MachineName: string): IPrintDialog;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPrintDialog
// Help String      : 
// Default Interface: IPrintDialog
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TPrintDialog = class(TOleServer)
  private
    FIntf: IPrintDialog;
    function GetDefaultInterface: IPrintDialog;
  protected
    procedure InitServerData; override;
    function Get_Driver(out pVal: WideString): HResult;
    function Get_Device(out pVal: WideString): HResult;
    function Get_Port(out pVal: WideString): HResult;
    function Get_Copies(out pVal: Integer): HResult;
    function Get_Collate(out pVal: WordBool): HResult;
    function Get_Selection(out pVal: WordBool): HResult;
    function Get_All(out pVal: WordBool): HResult;
    function Get_Range(out pVal: WordBool): HResult;
    function Get_ToFile(out pVal: WordBool): HResult;
    function Get_FromPage(out pVal: Integer): HResult;
    function Get_ToPage(out pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPrintDialog);
    procedure Disconnect; override;
    property DefaultInterface: IPrintDialog read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoPageSetupDialog provides a Create and CreateRemote method to          
// create instances of the default interface IPageSetupDialog exposed by              
// the CoClass PageSetupDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageSetupDialog = class
    class function Create: IPageSetupDialog;
    class function CreateRemote(const MachineName: string): IPageSetupDialog;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPageSetupDialog
// Help String      : 
// Default Interface: IPageSetupDialog
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TPageSetupDialog = class(TOleServer)
  private
    FIntf: IPageSetupDialog;
    function GetDefaultInterface: IPageSetupDialog;
  protected
    procedure InitServerData; override;
    function Get_Driver(out pVal: WideString): HResult;
    function Get_Device(out pVal: WideString): HResult;
    function Get_Port(out pVal: WideString): HResult;
    function Get_PaperWidth(out pVal: Integer): HResult;
    function Get_PaperHeight(out pVal: Integer): HResult;
    function Get_LeftMargin(out pVal: Integer): HResult;
    function Get_RightMargin(out pVal: Integer): HResult;
    function Get_TopMargin(out pVal: Integer): HResult;
    function Get_BottomMargin(out pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPageSetupDialog);
    procedure Disconnect; override;
    property DefaultInterface: IPageSetupDialog read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoFindReplaceDialog provides a Create and CreateRemote method to          
// create instances of the default interface IFindReplaceDialog exposed by              
// the CoClass FindReplaceDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFindReplaceDialog = class
    class function Create: IFindReplaceDialog;
    class function CreateRemote(const MachineName: string): IFindReplaceDialog;
  end;

  TFindReplaceDialogOnFind = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFindReplaceDialogOnReplace = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFindReplaceDialogOnReplaceAll = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFindReplaceDialogOnClose = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFindReplaceDialogOnHelp = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFindReplaceDialog
// Help String      : 
// Default Interface: IFindReplaceDialog
// Def. Intf. DISP? : No
// Event   Interface: IFindReplaceDialogEvents
// TypeFlags        : (0)
// *********************************************************************//
  TFindReplaceDialog = class(TOleServer)
  private
    FOnFind: TFindReplaceDialogOnFind;
    FOnReplace: TFindReplaceDialogOnReplace;
    FOnReplaceAll: TFindReplaceDialogOnReplaceAll;
    FOnClose: TFindReplaceDialogOnClose;
    FOnHelp: TFindReplaceDialogOnHelp;
    FIntf: IFindReplaceDialog;
    function GetDefaultInterface: IFindReplaceDialog;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_FindText(out pVal: WideString): HResult;
    function Get_ReplaceText(out pVal: WideString): HResult;
    function Get_SearchDown(out pVal: WordBool): HResult;
    function Get_MatchCase(out pVal: WordBool): HResult;
    function Get_WholeWord(out pVal: WordBool): HResult;
    function Set_OnFind(Param1: OleVariant): HResult;
    function Set_OnReplace(Param1: OleVariant): HResult;
    function Set_OnReplaceAll(Param1: OleVariant): HResult;
    function Set_OnClose(Param1: OleVariant): HResult;
    function Set_OnHelp(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFindReplaceDialog);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Close: HResult;
    property DefaultInterface: IFindReplaceDialog read GetDefaultInterface;
  published
    property OnFind: TFindReplaceDialogOnFind read FOnFind write FOnFind;
    property OnReplace: TFindReplaceDialogOnReplace read FOnReplace write FOnReplace;
    property OnReplaceAll: TFindReplaceDialogOnReplaceAll read FOnReplaceAll write FOnReplaceAll;
    property OnClose: TFindReplaceDialogOnClose read FOnClose write FOnClose;
    property OnHelp: TFindReplaceDialogOnHelp read FOnHelp write FOnHelp;
  end;

// *********************************************************************//
// The Class CoFontDialog provides a Create and CreateRemote method to          
// create instances of the default interface IFontDialog exposed by              
// the CoClass FontDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFontDialog = class
    class function Create: IFontDialog;
    class function CreateRemote(const MachineName: string): IFontDialog;
  end;

  TFontDialogOnHelp = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFontDialogOnApply = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFontDialog
// Help String      : 
// Default Interface: IFontDialog
// Def. Intf. DISP? : No
// Event   Interface: IFontDialogEvents
// TypeFlags        : (0)
// *********************************************************************//
  TFontDialog = class(TOleServer)
  private
    FOnHelp: TFontDialogOnHelp;
    FOnApply: TFontDialogOnApply;
    FIntf: IFontDialog;
    function GetDefaultInterface: IFontDialog;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Flags(out pVal: LongWord): HResult;
    function Set_Flags(pVal: LongWord): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Set_OnHelp(Param1: OleVariant): HResult;
    function Set_OnApply(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFontDialog);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Execute(out pResult: WordBool): HResult;
    property DefaultInterface: IFontDialog read GetDefaultInterface;
  published
    property OnHelp: TFontDialogOnHelp read FOnHelp write FOnHelp;
    property OnApply: TFontDialogOnApply read FOnApply write FOnApply;
  end;

// *********************************************************************//
// The Class CoColorDialog provides a Create and CreateRemote method to          
// create instances of the default interface IColorDialog exposed by              
// the CoClass ColorDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoColorDialog = class
    class function Create: IColorDialog;
    class function CreateRemote(const MachineName: string): IColorDialog;
  end;

  TColorDialogOnHelp = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TColorDialog
// Help String      : 
// Default Interface: IColorDialog
// Def. Intf. DISP? : No
// Event   Interface: IColorDialogEvents
// TypeFlags        : (0)
// *********************************************************************//
  TColorDialog = class(TOleServer)
  private
    FOnHelp: TColorDialogOnHelp;
    FIntf: IColorDialog;
    function GetDefaultInterface: IColorDialog;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Flags(out pVal: LongWord): HResult;
    function Set_Flags(pVal: LongWord): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Set_OnHelp(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IColorDialog);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Execute(out pResult: WordBool): HResult;
    property DefaultInterface: IColorDialog read GetDefaultInterface;
  published
    property OnHelp: TColorDialogOnHelp read FOnHelp write FOnHelp;
  end;

// *********************************************************************//
// The Class CoFileOpenSaveDialog provides a Create and CreateRemote method to          
// create instances of the default interface IFileOpenSaveDialog exposed by              
// the CoClass FileOpenSaveDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFileOpenSaveDialog = class
    class function Create: IFileOpenSaveDialog;
    class function CreateRemote(const MachineName: string): IFileOpenSaveDialog;
  end;

  TFileOpenSaveDialogOnCloseQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                const ResultPtr: IDispatch) of object;
  TFileOpenSaveDialogOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFileOpenSaveDialogOnFolderChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFileOpenSaveDialogOnTypeChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TFileOpenSaveDialogOnHelp = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFileOpenSaveDialog
// Help String      : 
// Default Interface: IFileOpenSaveDialog
// Def. Intf. DISP? : No
// Event   Interface: IFileOpenSaveDialogEvents
// TypeFlags        : (0)
// *********************************************************************//
  TFileOpenSaveDialog = class(TOleServer)
  private
    FOnCloseQuery: TFileOpenSaveDialogOnCloseQuery;
    FOnChange: TFileOpenSaveDialogOnChange;
    FOnFolderChange: TFileOpenSaveDialogOnFolderChange;
    FOnTypeChange: TFileOpenSaveDialogOnTypeChange;
    FOnHelp: TFileOpenSaveDialogOnHelp;
    FIntf: IFileOpenSaveDialog;
    function GetDefaultInterface: IFileOpenSaveDialog;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_DefaultExt(out pVal: WideString): HResult;
    function Set_DefaultExt(const pVal: WideString): HResult;
    function Get_Filter(out pVal: WideString): HResult;
    function Set_Filter(const pVal: WideString): HResult;
    function Get_FileName(out pVal: WideString): HResult;
    function Set_FileName(const pVal: WideString): HResult;
    function Get_Flags(out pVal: LongWord): HResult;
    function Set_Flags(pVal: LongWord): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_FilterIndex(out pVal: LongWord): HResult;
    function Set_FilterIndex(pVal: LongWord): HResult;
    function Get_Directory(out pVal: WideString): HResult;
    function Set_Directory(const pVal: WideString): HResult;
    function Get_OverwritePrompt(out pVal: WordBool): HResult;
    function Set_OverwritePrompt(pVal: WordBool): HResult;
    function Get_AllowMultiselect(out pVal: WordBool): HResult;
    function Set_AllowMultiselect(pVal: WordBool): HResult;
    function Get_PathMustExist(out pVal: WordBool): HResult;
    function Set_PathMustExist(pVal: WordBool): HResult;
    function Get_FileMustExist(out pVal: WordBool): HResult;
    function Set_FileMustExist(pVal: WordBool): HResult;
    function Get_CreatePrompt(out pVal: WordBool): HResult;
    function Set_CreatePrompt(pVal: WordBool): HResult;
    function Get_NoReadOnlyReturn(out pVal: WordBool): HResult;
    function Set_NoReadOnlyReturn(pVal: WordBool): HResult;
    function Get_NoTestFileCreate(out pVal: WordBool): HResult;
    function Set_NoTestFileCreate(pVal: WordBool): HResult;
    function Get_NoDereferenceLinks(out pVal: WordBool): HResult;
    function Set_NoDereferenceLinks(pVal: WordBool): HResult;
    function Get_DontAddToRecent(out pVal: WordBool): HResult;
    function Set_DontAddToRecent(pVal: WordBool): HResult;
    function Get_ForceShowHidden(out pVal: WordBool): HResult;
    function Set_ForceShowHidden(pVal: WordBool): HResult;
    function Get_NoPlacesBar(out pVal: WordBool): HResult;
    function Set_NoPlacesBar(pVal: WordBool): HResult;
    function Get_ForceFileSystem(out pVal: WordBool): HResult;
    function Set_ForceFileSystem(pVal: WordBool): HResult;
    function Get_AllNonStorageItems(out pVal: WordBool): HResult;
    function Set_AllNonStorageItems(pVal: WordBool): HResult;
    function Get_HideMRUPlaces(out pVal: WordBool): HResult;
    function Set_HideMRUPlaces(pVal: WordBool): HResult;
    function Get_HidePinnedPlaces(out pVal: WordBool): HResult;
    function Set_HidePinnedPlaces(pVal: WordBool): HResult;
    function Get_DefaultNoMiniMode(out pVal: WordBool): HResult;
    function Set_DefaultNoMiniMode(pVal: WordBool): HResult;
    function Get_ForcePreviewPaneOn(out pVal: WordBool): HResult;
    function Set_ForcePreviewPaneOn(pVal: WordBool): HResult;
    function Get_FileNames(out pVal: IDispatch): HResult;
    function Get_ClientGuid(out pVal: WideString): HResult;
    function Set_ClientGuid(const pVal: WideString): HResult;
    function Set_OnCloseQuery(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnFolderChange(Param1: OleVariant): HResult;
    function Set_OnTypeChange(Param1: OleVariant): HResult;
    function Set_OnHelp(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFileOpenSaveDialog);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Execute(out pResult: WordBool): HResult;
    function AddPlace(const Value: WideString; const Name: WideString; Placement: Integer): HResult;
    property DefaultInterface: IFileOpenSaveDialog read GetDefaultInterface;
  published
    property OnCloseQuery: TFileOpenSaveDialogOnCloseQuery read FOnCloseQuery write FOnCloseQuery;
    property OnChange: TFileOpenSaveDialogOnChange read FOnChange write FOnChange;
    property OnFolderChange: TFileOpenSaveDialogOnFolderChange read FOnFolderChange write FOnFolderChange;
    property OnTypeChange: TFileOpenSaveDialogOnTypeChange read FOnTypeChange write FOnTypeChange;
    property OnHelp: TFileOpenSaveDialogOnHelp read FOnHelp write FOnHelp;
  end;

// *********************************************************************//
// The Class CoSelectFolderDialog provides a Create and CreateRemote method to          
// create instances of the default interface ISelectFolderDialog exposed by              
// the CoClass SelectFolderDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectFolderDialog = class
    class function Create: ISelectFolderDialog;
    class function CreateRemote(const MachineName: string): ISelectFolderDialog;
  end;

  TSelectFolderDialogOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSelectFolderDialog
// Help String      : 
// Default Interface: ISelectFolderDialog
// Def. Intf. DISP? : No
// Event   Interface: ISelectFolderDialogEvents
// TypeFlags        : (0)
// *********************************************************************//
  TSelectFolderDialog = class(TOleServer)
  private
    FOnChange: TSelectFolderDialogOnChange;
    FIntf: ISelectFolderDialog;
    function GetDefaultInterface: ISelectFolderDialog;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Flags(out pVal: LongWord): HResult;
    function Set_Flags(pVal: LongWord): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Value(out pVal: WideString): HResult;
    function Set_Value(const pVal: WideString): HResult;
    function Get_Root(out pVal: WideString): HResult;
    function Set_Root(const pVal: WideString): HResult;
    function Get_StatusText(out pVal: WideString): HResult;
    function Set_StatusText(const pVal: WideString): HResult;
    function Get_Title(out pVal: WideString): HResult;
    function Set_Title(const pVal: WideString): HResult;
    function Get_EnableOK(out pVal: WordBool): HResult;
    function Set_EnableOK(pVal: WordBool): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISelectFolderDialog);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Execute(out pResult: WordBool): HResult;
    function Close: HResult;
    property DefaultInterface: ISelectFolderDialog read GetDefaultInterface;
  published
    property OnChange: TSelectFolderDialogOnChange read FOnChange write FOnChange;
  end;

// *********************************************************************//
// The Class CoTimer provides a Create and CreateRemote method to          
// create instances of the default interface ITimer exposed by              
// the CoClass Timer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTimer = class
    class function Create: ITimer;
    class function CreateRemote(const MachineName: string): ITimer;
  end;

  TTimerOnExecute = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTimer
// Help String      : 
// Default Interface: ITimer
// Def. Intf. DISP? : No
// Event   Interface: ITimerEvents
// TypeFlags        : (0)
// *********************************************************************//
  TTimer = class(TOleServer)
  private
    FOnExecute: TTimerOnExecute;
    FIntf: ITimer;
    function GetDefaultInterface: ITimer;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Active(out pVal: WordBool): HResult;
    function Set_Active(pVal: WordBool): HResult;
    function Get_Interval(out pVal: LongWord): HResult;
    function Set_Interval(pVal: LongWord): HResult;
    function Set_OnExecute(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITimer);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    property DefaultInterface: ITimer read GetDefaultInterface;
  published
    property OnExecute: TTimerOnExecute read FOnExecute write FOnExecute;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TWindowSystemControl
// Help String      : 
// Default Interface: IForm
// Def. Intf. DISP? : No
// Event   Interface: IFormEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TWindowSystemControlOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                               y: Integer; Button: Integer; 
                                                               Flags: Integer) of object;
  TWindowSystemControlOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; 
                                                              Key: Integer; Flags: Integer) of object;
  TWindowSystemControlOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                            Flags: Integer) of object;
  TWindowSystemControlOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                x: Integer; y: Integer; 
                                                                Button: Integer; Flags: Integer) of object;
  TWindowSystemControlOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                x: Integer; y: Integer; 
                                                                Flags: Integer) of object;
  TWindowSystemControlOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                              y: Integer; Button: Integer; 
                                                              Flags: Integer) of object;
  TWindowSystemControlOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                 Keys: Integer; Delta: Integer; 
                                                                 x: Integer; y: Integer) of object;
  TWindowSystemControlOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                const DockTarget: IDispatch; 
                                                                const BeginDockContext: IDispatch) of object;
  TWindowSystemControlOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                        const Control: IDispatch; 
                                                                        const DockTarget: IDispatch; 
                                                                        const DockControlCreateContext: IDispatch) of object;
  TWindowSystemControlOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                  const UndockContext: IDispatch) of object;
  TWindowSystemControlOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnCloseQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                 const ResultPtr: IDispatch) of object;
  TWindowSystemControlOnClose = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnActiveControlChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TWindowSystemControlOnHitTest = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                              y: Integer; const ResultPtr: IDispatch) of object;
  TWindowSystemControlOnHint = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const Object_: IDispatch) of object;
  TWindowSystemControlOnMinimize = procedure(ASender: TObject; const Sender: IDispatch; 
                                                               const ResultPtr: IDispatch) of object;
  TWindowSystemControlOnMaximize = procedure(ASender: TObject; const Sender: IDispatch; 
                                                               const ResultPtr: IDispatch) of object;
  TWindowSystemControlOnRestore = procedure(ASender: TObject; const Sender: IDispatch; 
                                                              const ResultPtr: IDispatch) of object;
  TWindowSystemControlOnCopyData = procedure(ASender: TObject; const Sender: IDispatch; 
                                                               const Data: WideString) of object;
  TWindowSystemControlOnActivate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                               Flags: Integer) of object;
  TWindowSystemControlOnEnterSizeMove = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                    Flags: Integer) of object;
  TWindowSystemControlOnExitSizeMove = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                   Flags: Integer) of object;

  TWindowSystemControl = class(TOleControl)
  private
    FOnClick: TWindowSystemControlOnClick;
    FOnDblClick: TWindowSystemControlOnDblClick;
    FOnChange: TWindowSystemControlOnChange;
    FOnKeyDown: TWindowSystemControlOnKeyDown;
    FOnKeyUp: TWindowSystemControlOnKeyUp;
    FOnMouseEnter: TWindowSystemControlOnMouseEnter;
    FOnMouseLeave: TWindowSystemControlOnMouseLeave;
    FOnMouseDown: TWindowSystemControlOnMouseDown;
    FOnMouseMove: TWindowSystemControlOnMouseMove;
    FOnMouseUp: TWindowSystemControlOnMouseUp;
    FOnResize: TWindowSystemControlOnResize;
    FOnMove: TWindowSystemControlOnMove;
    FOnDestroy: TWindowSystemControlOnDestroy;
    FOnShow: TWindowSystemControlOnShow;
    FOnHide: TWindowSystemControlOnHide;
    FOnEnabledChange: TWindowSystemControlOnEnabledChange;
    FOnSetFocus: TWindowSystemControlOnSetFocus;
    FOnKillFocus: TWindowSystemControlOnKillFocus;
    FOnMouseWheel: TWindowSystemControlOnMouseWheel;
    FOnBeginDock: TWindowSystemControlOnBeginDock;
    FOnDockControlCreate: TWindowSystemControlOnDockControlCreate;
    FOnUndockQuery: TWindowSystemControlOnUndockQuery;
    FOnUndock: TWindowSystemControlOnUndock;
    FOnCloseQuery: TWindowSystemControlOnCloseQuery;
    FOnClose: TWindowSystemControlOnClose;
    FOnActiveControlChange: TWindowSystemControlOnActiveControlChange;
    FOnHitTest: TWindowSystemControlOnHitTest;
    FOnHint: TWindowSystemControlOnHint;
    FOnMinimize: TWindowSystemControlOnMinimize;
    FOnMaximize: TWindowSystemControlOnMaximize;
    FOnRestore: TWindowSystemControlOnRestore;
    FOnCopyData: TWindowSystemControlOnCopyData;
    FOnActivate: TWindowSystemControlOnActivate;
    FOnEnterSizeMove: TWindowSystemControlOnEnterSizeMove;
    FOnExitSizeMove: TWindowSystemControlOnExitSizeMove;
    FIntf: IForm;
    function  GetControlInterface: IForm;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Get_Menu(out pVal: IDispatch): HResult;
    function Get_KeyPreview(out pVal: WordBool): HResult;
    function Get_MaximizeBox(out pVal: WordBool): HResult;
    function Get_MinimizeBox(out pVal: WordBool): HResult;
    function Get_ControlBox(out pVal: WordBool): HResult;
    function Get_SizeGrip(out pVal: WordBool): HResult;
    function Get_TopMost(out pVal: WordBool): HResult;
    function Get_ToolWindow(out pVal: WordBool): HResult;
    function Get_Caption(out pVal: WordBool): HResult;
    function Get_AcceptButton(out pVal: IDispatch): HResult;
    function Get_CancelButton(out pVal: IDispatch): HResult;
    function Get_HelpButton(out pVal: IDispatch): HResult;
    function Get_ActiveControl(out pVal: IDispatch): HResult;
    function Get_CanClose(out pVal: WordBool): HResult;
    function Get_TaskBar(out pVal: IDispatch): HResult;
    function Get_Active(out pVal: WordBool): HResult;
    function Get_Foreground(out pVal: WordBool): HResult;
  public
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    function Minimize: HResult;
    function Restore: HResult;
    function Maximize: HResult;
    function Close: HResult;
    function ShowModal: HResult;
    function MessageBox(const Text: WideString; const Caption: WideString; Flags: Integer; 
                        out pResult: Integer): HResult;
    function ColorDialog(StartColor: LongWord; Flags: LongWord; out pColor: LongWord): HResult;
    function FontDialog(const StartValue: IDispatch; Flags: LongWord; out pResult: IDispatch): HResult;
    function OpenDialog(const DefaultExt: WideString; const Filter: WideString; 
                        const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult;
    function SaveDialog(const DefaultExt: WideString; const Filter: WideString; 
                        const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult;
    function SelectFolderDialog(const Title: WideString; Flags: LongWord; out pFolder: WideString): HResult;
    function PrintDialog(Flags: LongWord; MinPage: Word; MaxPage: Word; out pResult: IDispatch): HResult;
    function PrinterSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
    function PageSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateFindDialog(const FindText: WideString; Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateReplaceDialog(const FindText: WideString; const ReplaceText: WideString; 
                                 Flags: LongWord; out pResult: IDispatch): HResult;
    function CreateFontDialog(out pResult: IDispatch): HResult;
    function CreateColorDialog(out pResult: IDispatch): HResult;
    function CreateOpenDialog(out pResult: IDispatch): HResult;
    function CreateSaveDialog(out pResult: IDispatch): HResult;
    function CreateSelectFolderDialog(out pResult: IDispatch): HResult;
    function CreateForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateMessageDialog(const Text: WideString; const Caption: WideString; 
                                 out pResult: IDispatch): HResult;
    function CreateTaskDialog(const Text: WideString; const Caption: WideString; 
                              out pResult: IDispatch): HResult;
    property  ControlInterface: IForm read GetControlInterface;
    property  DefaultInterface: IForm read GetControlInterface;
  published
    property Anchors;
    property  DragCursor;
    property  DragMode;
    property  ParentShowHint;
    property  ShowHint;
    property  OnDragDrop;
    property  OnDragOver;
    property  OnEndDrag;
    property  OnEnter;
    property  OnExit;
    property  OnStartDrag;
    property OnClick: TWindowSystemControlOnClick read FOnClick write FOnClick;
    property OnDblClick: TWindowSystemControlOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TWindowSystemControlOnChange read FOnChange write FOnChange;
    property OnKeyDown: TWindowSystemControlOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TWindowSystemControlOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TWindowSystemControlOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TWindowSystemControlOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TWindowSystemControlOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TWindowSystemControlOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TWindowSystemControlOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TWindowSystemControlOnResize read FOnResize write FOnResize;
    property OnMove: TWindowSystemControlOnMove read FOnMove write FOnMove;
    property OnDestroy: TWindowSystemControlOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TWindowSystemControlOnShow read FOnShow write FOnShow;
    property OnHide: TWindowSystemControlOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TWindowSystemControlOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TWindowSystemControlOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TWindowSystemControlOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TWindowSystemControlOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TWindowSystemControlOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TWindowSystemControlOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TWindowSystemControlOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TWindowSystemControlOnUndock read FOnUndock write FOnUndock;
    property OnCloseQuery: TWindowSystemControlOnCloseQuery read FOnCloseQuery write FOnCloseQuery;
    property OnClose: TWindowSystemControlOnClose read FOnClose write FOnClose;
    property OnActiveControlChange: TWindowSystemControlOnActiveControlChange read FOnActiveControlChange write FOnActiveControlChange;
    property OnHitTest: TWindowSystemControlOnHitTest read FOnHitTest write FOnHitTest;
    property OnHint: TWindowSystemControlOnHint read FOnHint write FOnHint;
    property OnMinimize: TWindowSystemControlOnMinimize read FOnMinimize write FOnMinimize;
    property OnMaximize: TWindowSystemControlOnMaximize read FOnMaximize write FOnMaximize;
    property OnRestore: TWindowSystemControlOnRestore read FOnRestore write FOnRestore;
    property OnCopyData: TWindowSystemControlOnCopyData read FOnCopyData write FOnCopyData;
    property OnActivate: TWindowSystemControlOnActivate read FOnActivate write FOnActivate;
    property OnEnterSizeMove: TWindowSystemControlOnEnterSizeMove read FOnEnterSizeMove write FOnEnterSizeMove;
    property OnExitSizeMove: TWindowSystemControlOnExitSizeMove read FOnExitSizeMove write FOnExitSizeMove;
  end;

// *********************************************************************//
// The Class CoResult provides a Create and CreateRemote method to          
// create instances of the default interface IResult exposed by              
// the CoClass Result. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoResult = class
    class function Create: IResult;
    class function CreateRemote(const MachineName: string): IResult;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TResult
// Help String      : 
// Default Interface: IResult
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TResult = class(TOleServer)
  private
    FIntf: IResult;
    function GetDefaultInterface: IResult;
  protected
    procedure InitServerData; override;
    function Get_Value(out pVal: OleVariant): HResult;
    function Set_Value(pVal: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IResult);
    procedure Disconnect; override;
    function Put(newVal: OleVariant): HResult;
    property DefaultInterface: IResult read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoTrayIcon provides a Create and CreateRemote method to          
// create instances of the default interface ITrayIcon exposed by              
// the CoClass TrayIcon. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTrayIcon = class
    class function Create: ITrayIcon;
    class function CreateRemote(const MachineName: string): ITrayIcon;
  end;

  TTrayIconOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TTrayIconOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                    y: Integer; Button: Integer; Flags: Integer) of object;
  TTrayIconOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                     y: Integer; Button: Integer; Flags: Integer) of object;
  TTrayIconOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; y: Integer; 
                                                   Button: Integer; Flags: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTrayIcon
// Help String      : 
// Default Interface: ITrayIcon
// Def. Intf. DISP? : No
// Event   Interface: ITrayIconEvents
// TypeFlags        : (0)
// *********************************************************************//
  TTrayIcon = class(TOleServer)
  private
    FOnClick: TTrayIconOnClick;
    FOnDblClick: TTrayIconOnDblClick;
    FOnMouseDown: TTrayIconOnMouseDown;
    FOnMouseUp: TTrayIconOnMouseUp;
    FIntf: ITrayIcon;
    function GetDefaultInterface: ITrayIcon;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Active(out pVal: WordBool): HResult;
    function Set_Active(pVal: WordBool): HResult;
    function Get_Images(out pVal: IDispatch): HResult;
    function Set_Images(const pVal: IDispatch): HResult;
    function _Set_Images(const pVal: IDispatch): HResult;
    function Get_ImageIndex(out pVal: Integer): HResult;
    function Set_ImageIndex(pVal: Integer): HResult;
    function Get_Hint(out pVal: WideString): HResult;
    function Set_Hint(const pVal: WideString): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_BalloonTip(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITrayIcon);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    property DefaultInterface: ITrayIcon read GetDefaultInterface;
  published
    property OnClick: TTrayIconOnClick read FOnClick write FOnClick;
    property OnDblClick: TTrayIconOnDblClick read FOnDblClick write FOnDblClick;
    property OnMouseDown: TTrayIconOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseUp: TTrayIconOnMouseUp read FOnMouseUp write FOnMouseUp;
  end;

// *********************************************************************//
// The Class CoRegions provides a Create and CreateRemote method to          
// create instances of the default interface IRegions exposed by              
// the CoClass Regions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegions = class
    class function Create: IRegions;
    class function CreateRemote(const MachineName: string): IRegions;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRegions
// Help String      : 
// Default Interface: IRegions
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TRegions = class(TOleServer)
  private
    FIntf: IRegions;
    function GetDefaultInterface: IRegions;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRegions);
    procedure Disconnect; override;
    function CombineRgn(hrgnSrc1: LongWord; hrgnSrc2: LongWord; fnCombineMode: Integer; 
                        out pRegion: IDispatch): HResult;
    function CreateEllipticRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pRegion: IDispatch): HResult;
    function CreatePolygonRgn(Data: PSafeArray; out pRegion: IDispatch): HResult;
    function CreateRectRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pRegion: IDispatch): HResult;
    function CreateRoundRectRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                nWidthEllipse: Integer; nHeightEllipse: Integer; 
                                out pRegion: IDispatch): HResult;
    function TransformRgn(ARegion: LongWord; eM11: Single; eM12: Single; eM21: Single; 
                          eM22: Single; eDx: Single; eDy: Single; out pRegion: IDispatch): HResult;
    function EqualRgn(hSrcRgn1: LongWord; hSrcRgn2: LongWord; out pResult: WordBool): HResult;
    function CreateRgnFromImage(Image: OleVariant; MaskColor: LongWord; out Region: IDispatch): HResult;
    property DefaultInterface: IRegions read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoRegion provides a Create and CreateRemote method to          
// create instances of the default interface IRegion exposed by              
// the CoClass Region. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegion = class
    class function Create: IRegion;
    class function CreateRemote(const MachineName: string): IRegion;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRegion
// Help String      : 
// Default Interface: IRegion
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TRegion = class(TOleServer)
  private
    FIntf: IRegion;
    function GetDefaultInterface: IRegion;
  protected
    procedure InitServerData; override;
    function Get_Value: LongWord;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRegion);
    procedure Disconnect; override;
    property DefaultInterface: IRegion read GetDefaultInterface;
    property Value: LongWord read Get_Value;
  published
  end;

// *********************************************************************//
// The Class CoScreen provides a Create and CreateRemote method to          
// create instances of the default interface IScreen exposed by              
// the CoClass Screen. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoScreen = class
    class function Create: IScreen;
    class function CreateRemote(const MachineName: string): IScreen;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TScreen
// Help String      : 
// Default Interface: IScreen
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TScreen = class(TOleServer)
  private
    FIntf: IScreen;
    function GetDefaultInterface: IScreen;
  protected
    procedure InitServerData; override;
    function Get_Width(out pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Get_PixelsPerInchX(out pVal: Integer): HResult;
    function Get_PixelsPerInchY(out pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IScreen);
    procedure Disconnect; override;
    property DefaultInterface: IScreen read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoHint provides a Create and CreateRemote method to          
// create instances of the default interface IHint exposed by              
// the CoClass Hint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHint = class
    class function Create: IHint;
    class function CreateRemote(const MachineName: string): IHint;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : THint
// Help String      : 
// Default Interface: IHint
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  THint = class(TOleServer)
  private
    FIntf: IHint;
    function GetDefaultInterface: IHint;
  protected
    procedure InitServerData; override;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Title(out pVal: WideString): HResult;
    function Set_Title(const pVal: WideString): HResult;
    function Get_Image(out pVal: Integer): HResult;
    function Set_Image(pVal: Integer): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Balloon(out pVal: WordBool): HResult;
    function Set_Balloon(pVal: WordBool): HResult;
    function Get_AlwaysTip(out pVal: WordBool): HResult;
    function Set_AlwaysTip(pVal: WordBool): HResult;
    function Get_NoPrefix(out pVal: WordBool): HResult;
    function Set_NoPrefix(pVal: WordBool): HResult;
    function Get_MaxWidth(out pVal: Integer): HResult;
    function Set_MaxWidth(pVal: Integer): HResult;
    function Get_ParentData(out pVal: WordBool): HResult;
    function Set_ParentData(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IHint);
    procedure Disconnect; override;
    property DefaultInterface: IHint read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface IEventHandler exposed by              
// the CoClass EventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEventHandler = class
    class function Create: IEventHandler;
    class function CreateRemote(const MachineName: string): IEventHandler;
  end;

  TEventHandlerOnExecute = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEventHandler
// Help String      : 
// Default Interface: IEventHandler
// Def. Intf. DISP? : No
// Event   Interface: IEventHandlerEvents
// TypeFlags        : (0)
// *********************************************************************//
  TEventHandler = class(TOleServer)
  private
    FOnExecute: TEventHandlerOnExecute;
    FIntf: IEventHandler;
    function GetDefaultInterface: IEventHandler;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Set_OnExecute(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IEventHandler);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Execute: HResult;
    property DefaultInterface: IEventHandler read GetDefaultInterface;
  published
    property OnExecute: TEventHandlerOnExecute read FOnExecute write FOnExecute;
  end;

// *********************************************************************//
// The Class CoWindowSystemObjectExtensions provides a Create and CreateRemote method to          
// create instances of the default interface IWindowSystemObjectExtensions exposed by              
// the CoClass WindowSystemObjectExtensions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWindowSystemObjectExtensions = class
    class function Create: IWindowSystemObjectExtensions;
    class function CreateRemote(const MachineName: string): IWindowSystemObjectExtensions;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TWindowSystemObjectExtensions
// Help String      : WindowSystemObjectExtensions Class
// Default Interface: IWindowSystemObjectExtensions
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TWindowSystemObjectExtensions = class(TOleServer)
  private
    FIntf: IWindowSystemObjectExtensions;
    function GetDefaultInterface: IWindowSystemObjectExtensions;
  protected
    procedure InitServerData; override;
    function Get_SystemImageListSmall(out pVal: IDispatch): HResult;
    function Get_SystemImageListLarge(out pVal: IDispatch): HResult;
    function Get_IsWindowsXP(out pVal: WordBool): HResult;
    function Get_IsWindowsVista(out pVal: WordBool): HResult;
    function Get_IsWindows7(out pVal: WordBool): HResult;
    function Get_IsWindows8(out pVal: WordBool): HResult;
    function Get_IsThemeActive(out pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IWindowSystemObjectExtensions);
    procedure Disconnect; override;
    function SendMessage(Control: OleVariant; Message: Integer; wParam: Integer; 
                         lParam: OleVariant; out pVal: OleVariant): HResult;
    function PostMessage(Control: OleVariant; Message: Integer; wParam: Integer; 
                         lParam: OleVariant; out pVal: OleVariant): HResult;
    function AddMessageHandler(const Control: IDispatch; Message: Integer; 
                               MessageHandler: OleVariant): HResult;
    function RegisterWindowMessage(const Message: WideString; out MessageId: LongWord): HResult;
    function EnumWindows(out Result: IDispatch): HResult;
    function SendCopyData(Control: OleVariant; const Data: WideString; out pVal: OleVariant): HResult;
    function PostCopyData(Control: OleVariant; const Data: WideString; out pVal: OleVariant): HResult;
    function CreateClipboard(ClipboardViewer: WordBool; out Clipboard: IDispatch): HResult;
    function GetFileSysIconIndexSmall(const pVal: WideString; FileAttributes: LongWord; 
                                      out Result: LongWord): HResult;
    function GetFileSysIconIndexLarge(const pVal: WideString; FileAttributes: LongWord; 
                                      out Result: LongWord): HResult;
    function UuidCreate(out Result: WideString): HResult;
    function CreateIconBuilder(out Result: IDispatch): HResult;
    function CreateExecutor(out Result: IDispatch): HResult;
    function CreateFileManager(out Result: IDispatch): HResult;
    property DefaultInterface: IWindowSystemObjectExtensions read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoPrintInfo provides a Create and CreateRemote method to          
// create instances of the default interface IPrintInfo exposed by              
// the CoClass PrintInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPrintInfo = class
    class function Create: IPrintInfo;
    class function CreateRemote(const MachineName: string): IPrintInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPrintInfo
// Help String      : 
// Default Interface: IPrintInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TPrintInfo = class(TOleServer)
  private
    FIntf: IPrintInfo;
    function GetDefaultInterface: IPrintInfo;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_DocumentName(out pVal: WideString): HResult;
    function Set_DocumentName(const pVal: WideString): HResult;
    function Get_LeftMargin(out pVal: Integer): HResult;
    function Set_LeftMargin(pVal: Integer): HResult;
    function Get_RightMargin(out pVal: Integer): HResult;
    function Set_RightMargin(pVal: Integer): HResult;
    function Get_TopMargin(out pVal: Integer): HResult;
    function Set_TopMargin(pVal: Integer): HResult;
    function Get_BottomMargin(out pVal: Integer): HResult;
    function Set_BottomMargin(pVal: Integer): HResult;
    function Get_MarginMeasurement(out pVal: Integer): HResult;
    function Set_MarginMeasurement(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPrintInfo);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    property DefaultInterface: IPrintInfo read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoStdDispatch provides a Create and CreateRemote method to          
// create instances of the default interface IStdDispatch exposed by              
// the CoClass StdDispatch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStdDispatch = class
    class function Create: IStdDispatch;
    class function CreateRemote(const MachineName: string): IStdDispatch;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStdDispatch
// Help String      : 
// Default Interface: IStdDispatch
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TStdDispatch = class(TOleServer)
  private
    FIntf: IStdDispatch;
    function GetDefaultInterface: IStdDispatch;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStdDispatch);
    procedure Disconnect; override;
    property DefaultInterface: IStdDispatch read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoBalloonTip provides a Create and CreateRemote method to          
// create instances of the default interface IBalloonTip exposed by              
// the CoClass BalloonTip. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBalloonTip = class
    class function Create: IBalloonTip;
    class function CreateRemote(const MachineName: string): IBalloonTip;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBalloonTip
// Help String      : 
// Default Interface: IBalloonTip
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TBalloonTip = class(TOleServer)
  private
    FIntf: IBalloonTip;
    function GetDefaultInterface: IBalloonTip;
  protected
    procedure InitServerData; override;
    function Get_Title(out pVal: WideString): HResult;
    function Set_Title(const pVal: WideString): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Icon(out pVal: Integer): HResult;
    function Set_Icon(pVal: Integer): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Timeout(out pVal: LongWord): HResult;
    function Set_Timeout(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IBalloonTip);
    procedure Disconnect; override;
    property DefaultInterface: IBalloonTip read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoWindow provides a Create and CreateRemote method to          
// create instances of the default interface IWindow exposed by              
// the CoClass Window. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWindow = class
    class function Create: IWindow;
    class function CreateRemote(const MachineName: string): IWindow;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TWindow
// Help String      : 
// Default Interface: IWindow
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TWindow = class(TOleServer)
  private
    FIntf: IWindow;
    function GetDefaultInterface: IWindow;
  protected
    procedure InitServerData; override;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ClassName(out pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IWindow);
    procedure Disconnect; override;
    property DefaultInterface: IWindow read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoClipboard provides a Create and CreateRemote method to          
// create instances of the default interface IClipboard exposed by              
// the CoClass Clipboard. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoClipboard = class
    class function Create: IClipboard;
    class function CreateRemote(const MachineName: string): IClipboard;
  end;

  TClipboardOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TClipboard
// Help String      : 
// Default Interface: IClipboard
// Def. Intf. DISP? : No
// Event   Interface: IClipboardEvents
// TypeFlags        : (0)
// *********************************************************************//
  TClipboard = class(TOleServer)
  private
    FOnChange: TClipboardOnChange;
    FIntf: IClipboard;
    function GetDefaultInterface: IClipboard;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ClipboardViewer(out pVal: WordBool): HResult;
    function Set_ClipboardViewer(pVal: WordBool): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IClipboard);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Empty: HResult;
    property DefaultInterface: IClipboard read GetDefaultInterface;
  published
    property OnChange: TClipboardOnChange read FOnChange write FOnChange;
  end;

// *********************************************************************//
// The Class CoTaskBar provides a Create and CreateRemote method to          
// create instances of the default interface ITaskBar exposed by              
// the CoClass TaskBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTaskBar = class
    class function Create: ITaskBar;
    class function CreateRemote(const MachineName: string): ITaskBar;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTaskBar
// Help String      : 
// Default Interface: ITaskBar
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TTaskBar = class(TOleServer)
  private
    FIntf: ITaskBar;
    function GetDefaultInterface: ITaskBar;
  protected
    procedure InitServerData; override;
    function Get_Buttons(out pVal: IDispatch): HResult;
    function Set_Buttons(const pVal: IDispatch): HResult;
    function _Set_Buttons(const pVal: IDispatch): HResult;
    function Get_State(out pVal: Integer): HResult;
    function Set_State(pVal: Integer): HResult;
    function Get_Max(out pVal: LongWord): HResult;
    function Set_Max(pVal: LongWord): HResult;
    function Get_Position(out pVal: LongWord): HResult;
    function Set_Position(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITaskBar);
    procedure Disconnect; override;
    function AddImages(const newVal: IDispatch): HResult;
    function SetThumbnailClip(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    property DefaultInterface: ITaskBar read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoResourceUsageGraph provides a Create and CreateRemote method to          
// create instances of the default interface IResourceUsageGraph exposed by              
// the CoClass ResourceUsageGraph. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoResourceUsageGraph = class
    class function Create: IResourceUsageGraph;
    class function CreateRemote(const MachineName: string): IResourceUsageGraph;
  end;

  TResourceUsageGraphOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                              y: Integer; Button: Integer; 
                                                              Flags: Integer) of object;
  TResourceUsageGraphOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                             Flags: Integer) of object;
  TResourceUsageGraphOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                           Flags: Integer) of object;
  TResourceUsageGraphOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                               y: Integer; Button: Integer; 
                                                               Flags: Integer) of object;
  TResourceUsageGraphOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                               y: Integer; Flags: Integer) of object;
  TResourceUsageGraphOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                             y: Integer; Button: Integer; 
                                                             Flags: Integer) of object;
  TResourceUsageGraphOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TResourceUsageGraphOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                Keys: Integer; Delta: Integer; 
                                                                x: Integer; y: Integer) of object;
  TResourceUsageGraphOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                               const DockTarget: IDispatch; 
                                                               const BeginDockContext: IDispatch) of object;
  TResourceUsageGraphOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                       const Control: IDispatch; 
                                                                       const DockTarget: IDispatch; 
                                                                       const DockControlCreateContext: IDispatch) of object;
  TResourceUsageGraphOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                 const UndockContext: IDispatch) of object;
  TResourceUsageGraphOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TResourceUsageGraph
// Help String      : 
// Default Interface: IResourceUsageGraph
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TResourceUsageGraph = class(TOleServer)
  private
    FOnClick: TResourceUsageGraphOnClick;
    FOnDblClick: TResourceUsageGraphOnDblClick;
    FOnChange: TResourceUsageGraphOnChange;
    FOnKeyDown: TResourceUsageGraphOnKeyDown;
    FOnKeyUp: TResourceUsageGraphOnKeyUp;
    FOnMouseEnter: TResourceUsageGraphOnMouseEnter;
    FOnMouseLeave: TResourceUsageGraphOnMouseLeave;
    FOnMouseDown: TResourceUsageGraphOnMouseDown;
    FOnMouseMove: TResourceUsageGraphOnMouseMove;
    FOnMouseUp: TResourceUsageGraphOnMouseUp;
    FOnResize: TResourceUsageGraphOnResize;
    FOnMove: TResourceUsageGraphOnMove;
    FOnDestroy: TResourceUsageGraphOnDestroy;
    FOnShow: TResourceUsageGraphOnShow;
    FOnHide: TResourceUsageGraphOnHide;
    FOnEnabledChange: TResourceUsageGraphOnEnabledChange;
    FOnSetFocus: TResourceUsageGraphOnSetFocus;
    FOnKillFocus: TResourceUsageGraphOnKillFocus;
    FOnMouseWheel: TResourceUsageGraphOnMouseWheel;
    FOnBeginDock: TResourceUsageGraphOnBeginDock;
    FOnDockControlCreate: TResourceUsageGraphOnDockControlCreate;
    FOnUndockQuery: TResourceUsageGraphOnUndockQuery;
    FOnUndock: TResourceUsageGraphOnUndock;
    FIntf: IResourceUsageGraph;
    function GetDefaultInterface: IResourceUsageGraph;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Value(out pVal: IDispatch): HResult;
    function Get_Min(out pVal: IDispatch): HResult;
    function Get_Max(out pVal: IDispatch): HResult;
    function Get_Page(out pVal: LongWord): HResult;
    function Set_Page(pVal: LongWord): HResult;
    function Get_MinYValue(out pVal: Double): HResult;
    function Set_MinYValue(pVal: Double): HResult;
    function Get_MaxYValue(out pVal: Double): HResult;
    function Set_MaxYValue(pVal: Double): HResult;
    function Get_BackgroundBrush(out pVal: IDispatch): HResult;
    function Set_BackgroundBrush(const pVal: IDispatch): HResult;
    function _Set_BackgroundBrush(const pVal: IDispatch): HResult;
    function Get_PageControlWidth(out pVal: LongWord): HResult;
    function Set_PageControlWidth(pVal: LongWord): HResult;
    function Get_SelectedValue(out pVal: LongWord): HResult;
    function Set_SelectedValue(pVal: LongWord): HResult;
    function Get_SelectedYValue(out pVal: Double): HResult;
    function Get_SelectedIndex(out pVal: Integer): HResult;
    function Set_SelectedIndex(pVal: Integer): HResult;
    function Get_Approximation(out pVal: WordBool): HResult;
    function Set_Approximation(pVal: WordBool): HResult;
    function Get_AlwaysFillWindow(out pVal: WordBool): HResult;
    function Set_AlwaysFillWindow(pVal: WordBool): HResult;
    function Get_AutoRemove(out pVal: WordBool): HResult;
    function Set_AutoRemove(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IResourceUsageGraph);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function Add(Offset: LongWord; Value: Double): HResult;
    function AddEx(Offset: LongWord; Value: Double; const Text: WideString): HResult;
    function Clear: HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    property DefaultInterface: IResourceUsageGraph read GetDefaultInterface;
  published
    property OnClick: TResourceUsageGraphOnClick read FOnClick write FOnClick;
    property OnDblClick: TResourceUsageGraphOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TResourceUsageGraphOnChange read FOnChange write FOnChange;
    property OnKeyDown: TResourceUsageGraphOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TResourceUsageGraphOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TResourceUsageGraphOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TResourceUsageGraphOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TResourceUsageGraphOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TResourceUsageGraphOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TResourceUsageGraphOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TResourceUsageGraphOnResize read FOnResize write FOnResize;
    property OnMove: TResourceUsageGraphOnMove read FOnMove write FOnMove;
    property OnDestroy: TResourceUsageGraphOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TResourceUsageGraphOnShow read FOnShow write FOnShow;
    property OnHide: TResourceUsageGraphOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TResourceUsageGraphOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TResourceUsageGraphOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TResourceUsageGraphOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TResourceUsageGraphOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TResourceUsageGraphOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TResourceUsageGraphOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TResourceUsageGraphOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TResourceUsageGraphOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoProperty_ provides a Create and CreateRemote method to          
// create instances of the default interface IProperty exposed by              
// the CoClass Property_. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProperty_ = class
    class function Create: IProperty;
    class function CreateRemote(const MachineName: string): IProperty;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TProperty_
// Help String      : 
// Default Interface: IProperty
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TProperty_ = class(TOleServer)
  private
    FIntf: IProperty;
    function GetDefaultInterface: IProperty;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Expanded(out pVal: WordBool): HResult;
    function Set_Expanded(pVal: WordBool): HResult;
    function Get_Value(out pVal: WideString): HResult;
    function Set_Value(const pVal: WideString): HResult;
    function Get_Control(out pVal: IDispatch): HResult;
    function Get_Height(out pVal: LongWord): HResult;
    function Set_Height(pVal: LongWord): HResult;
    function Get_Selected(out pVal: WordBool): HResult;
    function Set_Selected(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IProperty);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Add(const Text: WideString; out pItem: IDispatch): HResult;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    property DefaultInterface: IProperty read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoPropertyGrid provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyGrid exposed by              
// the CoClass PropertyGrid. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyGrid = class
    class function Create: IPropertyGrid;
    class function CreateRemote(const MachineName: string): IPropertyGrid;
  end;

  TPropertyGridOnClick = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnDblClick = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                        y: Integer; Button: Integer; Flags: Integer) of object;
  TPropertyGridOnChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnKeyDown = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                       Flags: Integer) of object;
  TPropertyGridOnKeyUp = procedure(ASender: TObject; const Sender: IDispatch; Key: Integer; 
                                                     Flags: Integer) of object;
  TPropertyGridOnMouseEnter = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnMouseLeave = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnMouseDown = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                         y: Integer; Button: Integer; Flags: Integer) of object;
  TPropertyGridOnMouseMove = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                         y: Integer; Flags: Integer) of object;
  TPropertyGridOnMouseUp = procedure(ASender: TObject; const Sender: IDispatch; x: Integer; 
                                                       y: Integer; Button: Integer; Flags: Integer) of object;
  TPropertyGridOnResize = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnMove = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnDestroy = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnShow = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnHide = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnEnabledChange = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnSetFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnKillFocus = procedure(ASender: TObject; const Sender: IDispatch) of object;
  TPropertyGridOnMouseWheel = procedure(ASender: TObject; const Sender: IDispatch; Keys: Integer; 
                                                          Delta: Integer; x: Integer; y: Integer) of object;
  TPropertyGridOnBeginDock = procedure(ASender: TObject; const Sender: IDispatch; 
                                                         const DockTarget: IDispatch; 
                                                         const BeginDockContext: IDispatch) of object;
  TPropertyGridOnDockControlCreate = procedure(ASender: TObject; const Sender: IDispatch; 
                                                                 const Control: IDispatch; 
                                                                 const DockTarget: IDispatch; 
                                                                 const DockControlCreateContext: IDispatch) of object;
  TPropertyGridOnUndockQuery = procedure(ASender: TObject; const Sender: IDispatch; 
                                                           const UndockContext: IDispatch) of object;
  TPropertyGridOnUndock = procedure(ASender: TObject; const Sender: IDispatch) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPropertyGrid
// Help String      : 
// Default Interface: IPropertyGrid
// Def. Intf. DISP? : No
// Event   Interface: IControlEvents
// TypeFlags        : (0)
// *********************************************************************//
  TPropertyGrid = class(TOleServer)
  private
    FOnClick: TPropertyGridOnClick;
    FOnDblClick: TPropertyGridOnDblClick;
    FOnChange: TPropertyGridOnChange;
    FOnKeyDown: TPropertyGridOnKeyDown;
    FOnKeyUp: TPropertyGridOnKeyUp;
    FOnMouseEnter: TPropertyGridOnMouseEnter;
    FOnMouseLeave: TPropertyGridOnMouseLeave;
    FOnMouseDown: TPropertyGridOnMouseDown;
    FOnMouseMove: TPropertyGridOnMouseMove;
    FOnMouseUp: TPropertyGridOnMouseUp;
    FOnResize: TPropertyGridOnResize;
    FOnMove: TPropertyGridOnMove;
    FOnDestroy: TPropertyGridOnDestroy;
    FOnShow: TPropertyGridOnShow;
    FOnHide: TPropertyGridOnHide;
    FOnEnabledChange: TPropertyGridOnEnabledChange;
    FOnSetFocus: TPropertyGridOnSetFocus;
    FOnKillFocus: TPropertyGridOnKillFocus;
    FOnMouseWheel: TPropertyGridOnMouseWheel;
    FOnBeginDock: TPropertyGridOnBeginDock;
    FOnDockControlCreate: TPropertyGridOnDockControlCreate;
    FOnUndockQuery: TPropertyGridOnUndockQuery;
    FOnUndock: TPropertyGridOnUndock;
    FIntf: IPropertyGrid;
    function GetDefaultInterface: IPropertyGrid;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_Root(out pVal: IDispatch): HResult;
    function Get_Form(out pVal: IDispatch): HResult;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
    function Get_MinWidth(out pVal: Word): HResult;
    function Set_MinWidth(pVal: Word): HResult;
    function Get_MinHeight(out pVal: Word): HResult;
    function Set_MinHeight(pVal: Word): HResult;
    function Get_MaxWidth(out pVal: Word): HResult;
    function Set_MaxWidth(pVal: Word): HResult;
    function Get_MaxHeight(out pVal: Word): HResult;
    function Set_MaxHeight(pVal: Word): HResult;
    function Get_Align(out pVal: Word): HResult;
    function Set_Align(pVal: Word): HResult;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_ParentColor(out pVal: WordBool): HResult;
    function Set_ParentColor(pVal: WordBool): HResult;
    function Get_Font(out pVal: IDispatch): HResult;
    function Set_Font(const pVal: IDispatch): HResult;
    function _Set_Font(const pVal: IDispatch): HResult;
    function Get_ParentFont(out pVal: WordBool): HResult;
    function Set_ParentFont(pVal: WordBool): HResult;
    function Get_Pen(out pVal: IDispatch): HResult;
    function Set_Pen(const pVal: IDispatch): HResult;
    function _Set_Pen(const pVal: IDispatch): HResult;
    function Get_Brush(out pVal: IDispatch): HResult;
    function Set_Brush(const pVal: IDispatch): HResult;
    function _Set_Brush(const pVal: IDispatch): HResult;
    function Get_PopupMenu(out pVal: IDispatch): HResult;
    function Set_PopupMenu(const pVal: IDispatch): HResult;
    function _Set_PopupMenu(const pVal: IDispatch): HResult;
    function Get_Border(out pVal: WordBool): HResult;
    function Set_Border(pVal: WordBool): HResult;
    function Get_Focused(out pVal: WordBool): HResult;
    function Get_TabOrder(out pVal: Integer): HResult;
    function Set_TabOrder(pVal: Integer): HResult;
    function Get_TabStop(out pVal: WordBool): HResult;
    function Set_TabStop(pVal: WordBool): HResult;
    function Get_Name(out pVal: WideString): HResult;
    function Set_Name(const pVal: WideString): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_ClientWidth(out pVal: Integer): HResult;
    function Set_ClientWidth(pVal: Integer): HResult;
    function Get_ClientHeight(out pVal: Integer): HResult;
    function Set_ClientHeight(pVal: Integer): HResult;
    function Get_Cursor(out pVal: OleVariant): HResult;
    function Set_Cursor(pVal: OleVariant): HResult;
    function Get_Hint(out pVal: OleVariant): HResult;
    function Set_Hint(pVal: OleVariant): HResult;
    function Get_ThemeApplicationName(out pVal: WideString): HResult;
    function Set_ThemeApplicationName(const pVal: WideString): HResult;
    function Get_Docking(out pVal: IDispatch): HResult;
    function Get_Layering(out pVal: IDispatch): HResult;
    function Set_OnClick(Param1: OleVariant): HResult;
    function Set_OnDblClick(Param1: OleVariant): HResult;
    function Set_OnChange(Param1: OleVariant): HResult;
    function Set_OnKeyDown(Param1: OleVariant): HResult;
    function Set_OnKeyUp(Param1: OleVariant): HResult;
    function Set_OnMouseEnter(Param1: OleVariant): HResult;
    function Set_OnMouseLeave(Param1: OleVariant): HResult;
    function Set_OnMouseUp(Param1: OleVariant): HResult;
    function Set_OnMouseMove(Param1: OleVariant): HResult;
    function Set_OnMouseDown(Param1: OleVariant): HResult;
    function Set_OnResize(Param1: OleVariant): HResult;
    function Set_OnMove(Param1: OleVariant): HResult;
    function Set_OnDestroy(Param1: OleVariant): HResult;
    function Set_OnShow(Param1: OleVariant): HResult;
    function Set_OnHide(Param1: OleVariant): HResult;
    function Set_OnEnabledChange(Param1: OleVariant): HResult;
    function Set_OnSetFocus(Param1: OleVariant): HResult;
    function Set_OnKillFocus(Param1: OleVariant): HResult;
    function Set_OnMouseWheel(Param1: OleVariant): HResult;
    function Set_OnBeginDock(Param1: OleVariant): HResult;
    function Set_OnDockControlCreate(Param1: OleVariant): HResult;
    function Set_OnUndockQuery(Param1: OleVariant): HResult;
    function Set_OnUndock(Param1: OleVariant): HResult;
    function Get_Debug(out pVal: LongWord): HResult;
    function Set_Debug(pVal: LongWord): HResult;
    function Get_ParentMouseWheel(out pVal: WordBool): HResult;
    function Set_ParentMouseWheel(pVal: WordBool): HResult;
    function Get_StopMouseWheel(out pVal: WordBool): HResult;
    function Set_StopMouseWheel(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_ExtendedProperties(out pVal: IDispatch): HResult;
    function Get_MaskEvents(out pVal: WordBool): HResult;
    function Set_MaskEvents(pVal: WordBool): HResult;
    function Get_Controls(out pVal: IDispatch): HResult;
    function Get_BorderWidth(out pVal: LongWord): HResult;
    function Set_BorderWidth(pVal: LongWord): HResult;
    function Get_BevelWidth(out pVal: LongWord): HResult;
    function Set_BevelWidth(pVal: LongWord): HResult;
    function Get_BevelOuter(out pVal: Integer): HResult;
    function Set_BevelOuter(pVal: Integer): HResult;
    function Get_BevelInner(out pVal: Integer): HResult;
    function Set_BevelInner(pVal: Integer): HResult;
    function Get_GraphFont(out pVal: IDispatch): HResult;
    function Set_GraphFont(const pVal: IDispatch): HResult;
    function _Set_GraphFont(const pVal: IDispatch): HResult;
    function Get_AutoScroll(out pVal: WordBool): HResult;
    function Set_AutoScroll(pVal: WordBool): HResult;
    function Get_Tracking(out pVal: WordBool): HResult;
    function Set_Tracking(pVal: WordBool): HResult;
    function Get_CaptureMouse(out pVal: Word): HResult;
    function Set_CaptureMouse(pVal: Word): HResult;
    function Get_ParentBackground(out pVal: WordBool): HResult;
    function Set_ParentBackground(pVal: WordBool): HResult;
    function Get_BorderParentBackground(out pVal: WordBool): HResult;
    function Set_BorderParentBackground(pVal: WordBool): HResult;
    function Get_AutoSplit(out pVal: WordBool): HResult;
    function Set_AutoSplit(pVal: WordBool): HResult;
    function Get_GroupBox(out pVal: WordBool): HResult;
    function Set_GroupBox(pVal: WordBool): HResult;
    function Get_Margin(out pVal: LongWord): HResult;
    function Set_Margin(pVal: LongWord): HResult;
    function Get_MarginLeft(out pVal: LongWord): HResult;
    function Set_MarginLeft(pVal: LongWord): HResult;
    function Get_MarginTop(out pVal: LongWord): HResult;
    function Set_MarginTop(pVal: LongWord): HResult;
    function Get_MarginRight(out pVal: LongWord): HResult;
    function Set_MarginRight(pVal: LongWord): HResult;
    function Get_MarginBottom(out pVal: LongWord): HResult;
    function Set_MarginBottom(pVal: LongWord): HResult;
    function Get_Items(out pVal: IDispatch): HResult;
    function Get_ValueColor(out pVal: LongWord): HResult;
    function Set_ValueColor(pVal: LongWord): HResult;
    function Get_Property_(out pVal: IDispatch): HResult;
    function Set_Property_(const pVal: IDispatch): HResult;
    function Get_SelectedItem(out pVal: IDispatch): HResult;
    function Set_SelectedItem(const pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPropertyGrid);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Show: HResult;
    function Hide: HResult;
    function Destroy1: HResult;
    function SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
    function CenterControl: HResult;
    function SetFocus: HResult;
    function Repaint: HResult;
    function PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
    function CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          const Text: WideString; out pControl: IDispatch): HResult;
    function CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
    function CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; out pControl: IDispatch): HResult;
    function CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Style: Integer; out pControl: IDispatch): HResult;
    function CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
    function CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
    function CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
    function CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
    function CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreateStatusBar(out pControl: IDispatch): HResult;
    function CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Url: WideString; const Label_: WideString; 
                             out pControl: IDispatch): HResult;
    function CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
    function CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
    function CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const ID: WideString; out pControl: IDispatch): HResult;
    function CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          const LicKey: WideString; out pControl: IDispatch): HResult;
    function CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
    function CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
    function CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
    function CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
    function CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
    function CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
    function CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
    function CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
    function CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Vertical: WordBool; out pControl: IDispatch): HResult;
    function CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
    function CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
    function CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
    function CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
    function CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
    function Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
    function Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
    function RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
    function Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
    function Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     out pControl: IDispatch): HResult;
    function Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXStartArc: Integer; 
                 nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; out pControl: IDispatch): HResult;
    function Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
    function Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                 nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; out pControl: IDispatch): HResult;
    function Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
    function TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
    function TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
    function DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       Image: OleVariant; out pControl: IDispatch): HResult;
    function DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
    function Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                   BevelWidth: LongWord; out pControl: IDispatch): HResult;
    function BeginUpdate: HResult;
    function EndUpdate: HResult;
    function Get(const Name: WideString; out Control: IDispatch): HResult;
    function Lookup(Value: OleVariant; out pVal: IDispatch): HResult;
    property DefaultInterface: IPropertyGrid read GetDefaultInterface;
  published
    property OnClick: TPropertyGridOnClick read FOnClick write FOnClick;
    property OnDblClick: TPropertyGridOnDblClick read FOnDblClick write FOnDblClick;
    property OnChange: TPropertyGridOnChange read FOnChange write FOnChange;
    property OnKeyDown: TPropertyGridOnKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyUp: TPropertyGridOnKeyUp read FOnKeyUp write FOnKeyUp;
    property OnMouseEnter: TPropertyGridOnMouseEnter read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TPropertyGridOnMouseLeave read FOnMouseLeave write FOnMouseLeave;
    property OnMouseDown: TPropertyGridOnMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TPropertyGridOnMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TPropertyGridOnMouseUp read FOnMouseUp write FOnMouseUp;
    property OnResize: TPropertyGridOnResize read FOnResize write FOnResize;
    property OnMove: TPropertyGridOnMove read FOnMove write FOnMove;
    property OnDestroy: TPropertyGridOnDestroy read FOnDestroy write FOnDestroy;
    property OnShow: TPropertyGridOnShow read FOnShow write FOnShow;
    property OnHide: TPropertyGridOnHide read FOnHide write FOnHide;
    property OnEnabledChange: TPropertyGridOnEnabledChange read FOnEnabledChange write FOnEnabledChange;
    property OnSetFocus: TPropertyGridOnSetFocus read FOnSetFocus write FOnSetFocus;
    property OnKillFocus: TPropertyGridOnKillFocus read FOnKillFocus write FOnKillFocus;
    property OnMouseWheel: TPropertyGridOnMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnBeginDock: TPropertyGridOnBeginDock read FOnBeginDock write FOnBeginDock;
    property OnDockControlCreate: TPropertyGridOnDockControlCreate read FOnDockControlCreate write FOnDockControlCreate;
    property OnUndockQuery: TPropertyGridOnUndockQuery read FOnUndockQuery write FOnUndockQuery;
    property OnUndock: TPropertyGridOnUndock read FOnUndock write FOnUndock;
  end;

// *********************************************************************//
// The Class CoConsole provides a Create and CreateRemote method to          
// create instances of the default interface IConsole exposed by              
// the CoClass Console. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoConsole = class
    class function Create: IConsole;
    class function CreateRemote(const MachineName: string): IConsole;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TConsole
// Help String      : 
// Default Interface: IConsole
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TConsole = class(TOleServer)
  private
    FIntf: IConsole;
    function GetDefaultInterface: IConsole;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Visible(out pVal: WordBool): HResult;
    function Set_Visible(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IConsole);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function WriteLine(const Text: WideString): HResult;
    function Write(const Text: WideString): HResult;
    property DefaultInterface: IConsole read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoDocking provides a Create and CreateRemote method to          
// create instances of the default interface IDocking exposed by              
// the CoClass Docking. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDocking = class
    class function Create: IDocking;
    class function CreateRemote(const MachineName: string): IDocking;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDocking
// Help String      : 
// Default Interface: IDocking
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TDocking = class(TOleServer)
  private
    FIntf: IDocking;
    function GetDefaultInterface: IDocking;
  protected
    procedure InitServerData; override;
    function Get_UniqueId(out pVal: WideString): HResult;
    function Set_UniqueId(const pVal: WideString): HResult;
    function Get_AllowDockAsChild(out pVal: WordBool): HResult;
    function Set_AllowDockAsChild(pVal: WordBool): HResult;
    function Get_AllowDockAsNeighbour(out pVal: WordBool): HResult;
    function Set_AllowDockAsNeighbour(pVal: WordBool): HResult;
    function Get_DropTarget(out pVal: WordBool): HResult;
    function Set_DropTarget(pVal: WordBool): HResult;
    function Get_AlwaysDockTab(out pVal: WordBool): HResult;
    function Set_AlwaysDockTab(pVal: WordBool): HResult;
    function Get_AlwaysDockPage(out pVal: WordBool): HResult;
    function Set_AlwaysDockPage(pVal: WordBool): HResult;
    function Get_DockToolWindow(out pVal: WordBool): HResult;
    function Set_DockToolWindow(pVal: WordBool): HResult;
    function Get_AutoCreated(out pVal: WordBool): HResult;
    function Set_AutoCreated(pVal: WordBool): HResult;
    function Get_PageControlTag(out pVal: Integer): HResult;
    function Set_PageControlTag(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDocking);
    procedure Disconnect; override;
    function DockAsChild(const Control: IDispatch; ControlAlign: Word): HResult;
    function DockAsNeighbour(const Control: IDispatch; ControlAlign: Word): HResult;
    function UnDock(ControlVisible: WordBool): HResult;
    property DefaultInterface: IDocking read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoGraphicElement provides a Create and CreateRemote method to          
// create instances of the default interface IGraphicElement exposed by              
// the CoClass GraphicElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGraphicElement = class
    class function Create: IGraphicElement;
    class function CreateRemote(const MachineName: string): IGraphicElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGraphicElement
// Help String      : 
// Default Interface: IGraphicElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TGraphicElement = class(TOleServer)
  private
    FIntf: IGraphicElement;
    function GetDefaultInterface: IGraphicElement;
  protected
    procedure InitServerData; override;
    function Get_Color(out pVal: LongWord): HResult;
    function Set_Color(pVal: LongWord): HResult;
    function Get_FontColor(out pVal: LongWord): HResult;
    function Set_FontColor(pVal: LongWord): HResult;
    function Get_Normal(out pVal: IDispatch): HResult;
    function Get_Selected(out pVal: IDispatch): HResult;
    function Get_Hot(out pVal: IDispatch): HResult;
    function Get_ControlFocused(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IGraphicElement);
    procedure Disconnect; override;
    property DefaultInterface: IGraphicElement read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoBeginDockContext provides a Create and CreateRemote method to          
// create instances of the default interface IBeginDockContext exposed by              
// the CoClass BeginDockContext. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeginDockContext = class
    class function Create: IBeginDockContext;
    class function CreateRemote(const MachineName: string): IBeginDockContext;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBeginDockContext
// Help String      : 
// Default Interface: IBeginDockContext
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TBeginDockContext = class(TOleServer)
  private
    FIntf: IBeginDockContext;
    function GetDefaultInterface: IBeginDockContext;
  protected
    procedure InitServerData; override;
    function Get_AllowDropTargetPageControlType(out pVal: WordBool): HResult;
    function Set_AllowDropTargetPageControlType(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IBeginDockContext);
    procedure Disconnect; override;
    property DefaultInterface: IBeginDockContext read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoDockControlCreateContext provides a Create and CreateRemote method to          
// create instances of the default interface IDockControlCreateContext exposed by              
// the CoClass DockControlCreateContext. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDockControlCreateContext = class
    class function Create: IDockControlCreateContext;
    class function CreateRemote(const MachineName: string): IDockControlCreateContext;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDockControlCreateContext
// Help String      : 
// Default Interface: IDockControlCreateContext
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TDockControlCreateContext = class(TOleServer)
  private
    FIntf: IDockControlCreateContext;
    function GetDefaultInterface: IDockControlCreateContext;
  protected
    procedure InitServerData; override;
    function Get_UseDropTargetPageControlType(out pVal: WordBool): HResult;
    function Set_UseDropTargetPageControlType(pVal: WordBool): HResult;
    function Get_Target(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDockControlCreateContext);
    procedure Disconnect; override;
    property DefaultInterface: IDockControlCreateContext read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoUndockContext provides a Create and CreateRemote method to          
// create instances of the default interface IUndockContext exposed by              
// the CoClass UndockContext. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUndockContext = class
    class function Create: IUndockContext;
    class function CreateRemote(const MachineName: string): IUndockContext;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUndockContext
// Help String      : 
// Default Interface: IUndockContext
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUndockContext = class(TOleServer)
  private
    FIntf: IUndockContext;
    function GetDefaultInterface: IUndockContext;
  protected
    procedure InitServerData; override;
    function Get_Value(out pVal: OleVariant): HResult;
    function Set_Value(pVal: OleVariant): HResult;
    function Get_ControlVisible(out pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IUndockContext);
    procedure Disconnect; override;
    function Put(newVal: OleVariant): HResult;
    property DefaultInterface: IUndockContext read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoColor provides a Create and CreateRemote method to          
// create instances of the default interface IColor exposed by              
// the CoClass Color. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoColor = class
    class function Create: IColor;
    class function CreateRemote(const MachineName: string): IColor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TColor
// Help String      : 
// Default Interface: IColor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TColor = class(TOleServer)
  private
    FIntf: IColor;
    function GetDefaultInterface: IColor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IColor);
    procedure Disconnect; override;
    function Light(Color: LongWord; Shift: Double; out Result: LongWord): HResult;
    function Dark(Color: LongWord; Shift: Double; out Result: LongWord): HResult;
    function Invert(Color: LongWord; out Result: LongWord): HResult;
    property DefaultInterface: IColor read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoLayering provides a Create and CreateRemote method to          
// create instances of the default interface ILayering exposed by              
// the CoClass Layering. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLayering = class
    class function Create: ILayering;
    class function CreateRemote(const MachineName: string): ILayering;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLayering
// Help String      : 
// Default Interface: ILayering
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TLayering = class(TOleServer)
  private
    FIntf: ILayering;
    function GetDefaultInterface: ILayering;
  protected
    procedure InitServerData; override;
    function Get_Layered(out pVal: WordBool): HResult;
    function Set_Layered(pVal: WordBool): HResult;
    function Get_Alpha(out pVal: Byte): HResult;
    function Set_Alpha(pVal: Byte): HResult;
    function Get_TransparentColor(out pVal: LongWord): HResult;
    function Set_TransparentColor(pVal: LongWord): HResult;
    function Get_Flags(out pVal: LongWord): HResult;
    function Set_Flags(pVal: LongWord): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ILayering);
    procedure Disconnect; override;
    property DefaultInterface: ILayering read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoMessageDialog provides a Create and CreateRemote method to          
// create instances of the default interface IMessageDialog exposed by              
// the CoClass MessageDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMessageDialog = class
    class function Create: IMessageDialog;
    class function CreateRemote(const MachineName: string): IMessageDialog;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMessageDialog
// Help String      : 
// Default Interface: IMessageDialog
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TMessageDialog = class(TOleServer)
  private
    FIntf: IMessageDialog;
    function GetDefaultInterface: IMessageDialog;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_DefaultButton(out pVal: Integer): HResult;
    function Set_DefaultButton(pVal: Integer): HResult;
    function Get_CancelButton(out pVal: Integer): HResult;
    function Set_CancelButton(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMessageDialog);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function AddButton(ID: Integer; const Text: WideString): HResult;
    function AddIcon(ID: LongWord): HResult;
    function Execute(out Result: Integer): HResult;
    property DefaultInterface: IMessageDialog read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoTaskDialog provides a Create and CreateRemote method to          
// create instances of the default interface ITaskDialog exposed by              
// the CoClass TaskDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTaskDialog = class
    class function Create: ITaskDialog;
    class function CreateRemote(const MachineName: string): ITaskDialog;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTaskDialog
// Help String      : 
// Default Interface: ITaskDialog
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TTaskDialog = class(TOleServer)
  private
    FIntf: ITaskDialog;
    function GetDefaultInterface: ITaskDialog;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Icon(out pVal: LongWord): HResult;
    function Set_Icon(pVal: LongWord): HResult;
    function Get_MainInstruction(out pVal: WideString): HResult;
    function Set_MainInstruction(const pVal: WideString): HResult;
    function Get_ExpandedInformation(out pVal: WideString): HResult;
    function Set_ExpandedInformation(const pVal: WideString): HResult;
    function Get_Footer(out pVal: WideString): HResult;
    function Set_Footer(const pVal: WideString): HResult;
    function Get_ExpandedControlText(out pVal: WideString): HResult;
    function Set_ExpandedControlText(const pVal: WideString): HResult;
    function Get_CollapsedControlText(out pVal: WideString): HResult;
    function Set_CollapsedControlText(const pVal: WideString): HResult;
    function Get_VerificationText(out pVal: WideString): HResult;
    function Set_VerificationText(const pVal: WideString): HResult;
    function Get_FooterIcon(out pVal: LongWord): HResult;
    function Set_FooterIcon(pVal: LongWord): HResult;
    function Get_RadioButton(out pVal: Integer): HResult;
    function Set_RadioButton(pVal: Integer): HResult;
    function Get_AllowDialogCancellation(out pVal: WordBool): HResult;
    function Set_AllowDialogCancellation(pVal: WordBool): HResult;
    function Get_UseCommandLinks(out pVal: WordBool): HResult;
    function Set_UseCommandLinks(pVal: WordBool): HResult;
    function Get_UseCommandLinksNoIcon(out pVal: WordBool): HResult;
    function Set_UseCommandLinksNoIcon(pVal: WordBool): HResult;
    function Get_ExpandFooterArea(out pVal: WordBool): HResult;
    function Set_ExpandFooterArea(pVal: WordBool): HResult;
    function Get_ExpandedByDefault(out pVal: WordBool): HResult;
    function Set_ExpandedByDefault(pVal: WordBool): HResult;
    function Get_VerificationFlagChecked(out pVal: WordBool): HResult;
    function Set_VerificationFlagChecked(pVal: WordBool): HResult;
    function Get_ShowProgressBar(out pVal: WordBool): HResult;
    function Set_ShowProgressBar(pVal: WordBool): HResult;
    function Get_ShowMarqueeProgressBar(out pVal: WordBool): HResult;
    function Set_ShowMarqueeProgressBar(pVal: WordBool): HResult;
    function Get_CallbackTimer(out pVal: WordBool): HResult;
    function Set_CallbackTimer(pVal: WordBool): HResult;
    function Get_PositionRelativeToWindow(out pVal: WordBool): HResult;
    function Set_PositionRelativeToWindow(pVal: WordBool): HResult;
    function Get_NoDefaultRadioButton(out pVal: WordBool): HResult;
    function Set_NoDefaultRadioButton(pVal: WordBool): HResult;
    function Get_CanBeMinimized(out pVal: WordBool): HResult;
    function Set_CanBeMinimized(pVal: WordBool): HResult;
    function Get_DefaultButton(out pVal: Integer): HResult;
    function Set_DefaultButton(pVal: Integer): HResult;
    function Get_Position(out pVal: Integer): HResult;
    function Set_Position(pVal: Integer): HResult;
    function Set_OnTimer(Param1: OleVariant): HResult;
    function Set_OnButtonClick(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITaskDialog);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function AddButton(ID: Integer; const Text: WideString): HResult;
    function AddCommandLinkButton(ID: Integer; const Text: WideString): HResult;
    function AddRadioButton(ID: Integer; const Text: WideString): HResult;
    function Execute(out Result: Integer): HResult;
    property DefaultInterface: ITaskDialog read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoIcon provides a Create and CreateRemote method to          
// create instances of the default interface IIcon exposed by              
// the CoClass Icon. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoIcon = class
    class function Create: IIcon;
    class function CreateRemote(const MachineName: string): IIcon;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TIcon
// Help String      : 
// Default Interface: IIcon
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TIcon = class(TOleServer)
  private
    FIntf: IIcon;
    function GetDefaultInterface: IIcon;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IIcon);
    procedure Disconnect; override;
    property DefaultInterface: IIcon read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoRect provides a Create and CreateRemote method to          
// create instances of the default interface IRect exposed by              
// the CoClass Rect. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRect = class
    class function Create: IRect;
    class function CreateRemote(const MachineName: string): IRect;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRect
// Help String      : 
// Default Interface: IRect
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TRect = class(TOleServer)
  private
    FIntf: IRect;
    function GetDefaultInterface: IRect;
  protected
    procedure InitServerData; override;
    function Get_Left(out pVal: Integer): HResult;
    function Set_Left(pVal: Integer): HResult;
    function Get_Top(out pVal: Integer): HResult;
    function Set_Top(pVal: Integer): HResult;
    function Get_Width(out pVal: Integer): HResult;
    function Set_Width(pVal: Integer): HResult;
    function Get_Height(out pVal: Integer): HResult;
    function Set_Height(pVal: Integer): HResult;
    function Get_Right(out pVal: Integer): HResult;
    function Set_Right(pVal: Integer): HResult;
    function Get_Bottom(out pVal: Integer): HResult;
    function Set_Bottom(pVal: Integer): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRect);
    procedure Disconnect; override;
    property DefaultInterface: IRect read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoIconBuilder provides a Create and CreateRemote method to          
// create instances of the default interface IIconBuilder exposed by              
// the CoClass IconBuilder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoIconBuilder = class
    class function Create: IIconBuilder;
    class function CreateRemote(const MachineName: string): IIconBuilder;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TIconBuilder
// Help String      : 
// Default Interface: IIconBuilder
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TIconBuilder = class(TOleServer)
  private
    FIntf: IIconBuilder;
    function GetDefaultInterface: IIconBuilder;
  protected
    procedure InitServerData; override;
    function Get_Cursor(out pVal: WordBool): HResult;
    function Set_Cursor(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IIconBuilder);
    procedure Disconnect; override;
    function Add(Image: OleVariant; Transparent: WordBool; x: LongWord; y: LongWord): HResult;
    function Save(const FileName: WideString): HResult;
    function Clear: HResult;
    property DefaultInterface: IIconBuilder read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoDesignReference provides a Create and CreateRemote method to          
// create instances of the default interface IDesignReference exposed by              
// the CoClass DesignReference. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDesignReference = class
    class function Create: IDesignReference;
    class function CreateRemote(const MachineName: string): IDesignReference;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDesignReference
// Help String      : 
// Default Interface: IDesignReference
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TDesignReference = class(TOleServer)
  private
    FIntf: IDesignReference;
    function GetDefaultInterface: IDesignReference;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Set_Text(const pVal: WideString): HResult;
    function Get_ReferenceType(out pVal: LongWord): HResult;
    function Set_ReferenceType(pVal: LongWord): HResult;
    function Get_Main(out pVal: WordBool): HResult;
    function Set_Main(pVal: WordBool): HResult;
    function Get_Design(out pVal: IDispatch): HResult;
    function Get_Parent(out pVal: IDispatch): HResult;
    function Get_ID(out pVal: WideString): HResult;
    function Set_ID(const pVal: WideString): HResult;
    function Get_FileName(out pVal: WideString): HResult;
    function Set_FileName(const pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDesignReference);
    procedure Disconnect; override;
    function Remove(Index: OleVariant): HResult;
    function Clear: HResult;
    function ExChange(A: OleVariant; B: OleVariant): HResult;
    function Add(const Text: WideString; const CurrentAbsoluteFileName: WideString; 
                 out Result: IDispatch): HResult;
    function Find(const Text: WideString; out Result: IDispatch): HResult;
    function Lookup(const Value: WideString; out pVal: IDispatch): HResult;
    property DefaultInterface: IDesignReference read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoDesign provides a Create and CreateRemote method to          
// create instances of the default interface IDesign exposed by              
// the CoClass Design. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDesign = class
    class function Create: IDesign;
    class function CreateRemote(const MachineName: string): IDesign;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDesign
// Help String      : 
// Default Interface: IDesign
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TDesign = class(TOleServer)
  private
    FIntf: IDesign;
    function GetDefaultInterface: IDesign;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_Enabled(out pVal: WordBool): HResult;
    function Set_Enabled(pVal: WordBool): HResult;
    function Get_NewControlType(out pVal: WideString): HResult;
    function Set_NewControlType(const pVal: WideString): HResult;
    function Get_NewControlCreationFlags(out pVal: LongWord): HResult;
    function Set_NewControlCreationFlags(pVal: LongWord): HResult;
    function Get_Properties(out pVal: IDispatch): HResult;
    function Get_ShowDetailsButton(out pVal: WordBool): HResult;
    function Set_ShowDetailsButton(pVal: WordBool): HResult;
    function Get_References(out pVal: IDispatch): HResult;
    function Set_OnActiveControlChange(Param1: OleVariant): HResult;
    function Set_OnControlCreate(Param1: OleVariant): HResult;
    function Set_OnDetailsButtonClick(Param1: OleVariant): HResult;
    function Set_OnDesignerAdd(Param1: OleVariant): HResult;
    function Set_OnDesignerRemove(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDesign);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Save(out Layout: WideString): HResult;
    function Load(const Layout: WideString; Flags: LongWord): HResult; overload;
    function Load(const Layout: WideString; Flags: LongWord; Resources: OleVariant): HResult; overload;
    function Open(const FileName: WideString; Flags: LongWord): HResult;
    property DefaultInterface: IDesign read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoExecutor provides a Create and CreateRemote method to          
// create instances of the default interface IExecutor exposed by              
// the CoClass Executor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExecutor = class
    class function Create: IExecutor;
    class function CreateRemote(const MachineName: string): IExecutor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TExecutor
// Help String      : 
// Default Interface: IExecutor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TExecutor = class(TOleServer)
  private
    FIntf: IExecutor;
    function GetDefaultInterface: IExecutor;
  protected
    procedure InitServerData; override;
    function Get_Type_(out pVal: WideString): HResult;
    function Get_UserData(out pVal: OleVariant): HResult;
    function Set_UserData(pVal: OleVariant): HResult;
    function Get_ApplicationName(out pVal: WideString): HResult;
    function Set_ApplicationName(const pVal: WideString): HResult;
    function Get_CommandLine(out pVal: WideString): HResult;
    function Set_CommandLine(const pVal: WideString): HResult;
    function Get_ExitCode(out pVal: LongWord): HResult;
    function Get_IntegrityLevel(out pVal: WideString): HResult;
    function Set_IntegrityLevel(const pVal: WideString): HResult;
    function Get_Error(out pVal: IDispatch): HResult;
    function Set_OnComplete(Param1: OleVariant): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IExecutor);
    procedure Disconnect; override;
    function AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
    function Execute(out Result: WordBool): HResult;
    function Wait(Timeout: LongWord; out Result: WordBool): HResult;
    function Terminate(ProcessExitCode: LongWord; out Result: WordBool): HResult;
    property DefaultInterface: IExecutor read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoControlExtendedProperties provides a Create and CreateRemote method to          
// create instances of the default interface IControlExtendedProperties exposed by              
// the CoClass ControlExtendedProperties. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlExtendedProperties = class
    class function Create: IControlExtendedProperties;
    class function CreateRemote(const MachineName: string): IControlExtendedProperties;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TControlExtendedProperties
// Help String      : 
// Default Interface: IControlExtendedProperties
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TControlExtendedProperties = class(TOleServer)
  private
    FIntf: IControlExtendedProperties;
    function GetDefaultInterface: IControlExtendedProperties;
  protected
    procedure InitServerData; override;
    function Get_AllowLeftButtonDown(out pVal: WordBool): HResult;
    function Set_AllowLeftButtonDown(pVal: WordBool): HResult;
    function Get_AllowRightButtonDown(out pVal: WordBool): HResult;
    function Set_AllowRightButtonDown(pVal: WordBool): HResult;
    function Get_AllowMiddleButtonDown(out pVal: WordBool): HResult;
    function Set_AllowMiddleButtonDown(pVal: WordBool): HResult;
    function Get_AllowLeftButtonDoubleClick(out pVal: WordBool): HResult;
    function Set_AllowLeftButtonDoubleClick(pVal: WordBool): HResult;
    function Get_AllowRightButtonDoubleClick(out pVal: WordBool): HResult;
    function Set_AllowRightButtonDoubleClick(pVal: WordBool): HResult;
    function Get_AllowMiddleButtonDoubleClick(out pVal: WordBool): HResult;
    function Set_AllowMiddleButtonDoubleClick(pVal: WordBool): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IControlExtendedProperties);
    procedure Disconnect; override;
    property DefaultInterface: IControlExtendedProperties read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoError provides a Create and CreateRemote method to          
// create instances of the default interface IError exposed by              
// the CoClass Error. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoError = class
    class function Create: IError;
    class function CreateRemote(const MachineName: string): IError;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TError
// Help String      : 
// Default Interface: IError
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TError = class(TOleServer)
  private
    FIntf: IError;
    function GetDefaultInterface: IError;
  protected
    procedure InitServerData; override;
    function Get_Number(out pVal: LongWord): HResult;
    function Get_Description(out pVal: WideString): HResult;
    function Get_Comment(out pVal: WideString): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IError);
    procedure Disconnect; override;
    property DefaultInterface: IError read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoPropertyInformation provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyInformation exposed by              
// the CoClass PropertyInformation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyInformation = class
    class function Create: IPropertyInformation;
    class function CreateRemote(const MachineName: string): IPropertyInformation;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPropertyInformation
// Help String      : 
// Default Interface: IPropertyInformation
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TPropertyInformation = class(TOleServer)
  private
    FIntf: IPropertyInformation;
    function GetDefaultInterface: IPropertyInformation;
  protected
    procedure InitServerData; override;
    function Get__NewEnum(out pUnk: IUnknown): HResult;
    function Get_Item(Index: Integer; out pvar: OleVariant): HResult;
    function Get_Count(out pcount: Integer): HResult;
    function Get_Text(out pVal: WideString): HResult;
    function Get_Type_(out pVal: LongWord): HResult;
    function Get_ExType(out pVal: LongWord): HResult;
    function Get_DesignDefault(out pVal: OleVariant): HResult;
    function Get_SymbolicValues(out pVal: IDispatch): HResult;
    function Get_Combination(out pVal: WordBool): HResult;
    function Get_Priority(out pVal: LongWord): HResult;
    function Get_DefaultValueAsString(out pVal: WideString): HResult;
    function Get_DesignReadOnly(out pVal: WordBool): HResult;
    function Get_Options(out pVal: IDispatch): HResult;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPropertyInformation);
    procedure Disconnect; override;
    property DefaultInterface: IPropertyInformation read GetDefaultInterface;
  published
  end;

// *********************************************************************//
// The Class CoFileManager provides a Create and CreateRemote method to          
// create instances of the default interface IFileManager exposed by              
// the CoClass FileManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFileManager = class
    class function Create: IFileManager;
    class function CreateRemote(const MachineName: string): IFileManager;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFileManager
// Help String      : 
// Default Interface: IFileManager
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TFileManager = class(TOleServer)
  private
    FIntf: IFileManager;
    function GetDefaultInterface: IFileManager;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFileManager);
    procedure Disconnect; override;
    function GetRelativeFileName(const BaseAbsolutePath: WideString; const Path: WideString; 
                                 out Result: WideString): HResult;
    function GetCanonicalFileName(const Path: WideString; ShortNames: WordBool; 
                                  out Result: WideString): HResult;
    function GetCurrentDirectory(out Result: WideString): HResult;
    function NPath(const Path: WideString; out Result: WideString): HResult;
    function DPath(const Path: WideString; out Result: WideString): HResult;
    property DefaultInterface: IFileManager read GetDefaultInterface;
  published
  end;

procedure Register;

resourcestring
  dtlServerPage = 'Servers';

  dtlOcxPage = 'ActiveX';

implementation

uses System.Win.ComObj;

class function CoWindowSystemObject.Create: IWindowSystemObject;
begin
  Result := CreateComObject(CLASS_WindowSystemObject) as IWindowSystemObject;
end;

class function CoWindowSystemObject.CreateRemote(const MachineName: string): IWindowSystemObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WindowSystemObject) as IWindowSystemObject;
end;

procedure TWindowSystemObject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4CE85115-9B90-419F-9193-1C10C75E1383}';
    IntfIID:   '{06983696-F0BE-40C1-992E-76172C1CA324}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TWindowSystemObject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IWindowSystemObject;
  end;
end;

procedure TWindowSystemObject.ConnectTo(svrIntf: IWindowSystemObject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TWindowSystemObject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TWindowSystemObject.GetDefaultInterface: IWindowSystemObject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TWindowSystemObject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TWindowSystemObject.Destroy;
begin
  inherited Destroy;
end;

function TWindowSystemObject.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TWindowSystemObject.Get_Version(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Version(pVal);
end;

function TWindowSystemObject.Get_Debug(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TWindowSystemObject.Set_Debug(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TWindowSystemObject.Get_Regions(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Regions(pVal);
end;

function TWindowSystemObject.Get_PixelsPerInch(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_PixelsPerInch(pVal);
end;

function TWindowSystemObject.Set_PixelsPerInch(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_PixelsPerInch(pVal);
end;

function TWindowSystemObject.Get_Screen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Screen(pVal);
end;

function TWindowSystemObject.Get_EnableVisualStyles(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_EnableVisualStyles(pVal);
end;

function TWindowSystemObject.Set_EnableVisualStyles(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_EnableVisualStyles(pVal);
end;

function TWindowSystemObject.Get_Console(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Console(pControl);
end;

function TWindowSystemObject.Get_ActiveForm(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ActiveForm(pVal);
end;

function TWindowSystemObject.Get_ForegroundForm(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ForegroundForm(pVal);
end;

function TWindowSystemObject.Get_Color(out Color: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Color(Color);
end;

function TWindowSystemObject.Get_EnableVistaFileDialog(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_EnableVistaFileDialog(pVal);
end;

function TWindowSystemObject.Set_EnableVistaFileDialog(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_EnableVistaFileDialog(pVal);
end;

function TWindowSystemObject.CreateForm(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateForm(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemObject.CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; 
                                              Height: Integer; Style: Integer; 
                                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDialogForm(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemObject.CreateImageList(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateImageList(pControl);
end;

function TWindowSystemObject.CreateTimer(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTimer(pControl);
end;

function TWindowSystemObject.CreateCOMEvents(const COMObject: IDispatch; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCOMEvents(COMObject, pControl);
end;

function TWindowSystemObject.CreateFindDialog(const FindText: WideString; Flags: LongWord; 
                                              out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFindDialog(FindText, Flags, pResult);
end;

function TWindowSystemObject.CreateReplaceDialog(const FindText: WideString; 
                                                 const ReplaceText: WideString; Flags: LongWord; 
                                                 out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReplaceDialog(FindText, ReplaceText, Flags, pResult);
end;

function TWindowSystemObject.CreateTrayIcon(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrayIcon(pControl);
end;

function TWindowSystemObject.Run: HResult;
begin
  Result := DefaultInterface.Run;
end;

function TWindowSystemObject.Stop: HResult;
begin
  Result := DefaultInterface.Stop;
end;

function TWindowSystemObject.Translate(const Text: WideString; out pResult: OleVariant): HResult;
begin
  Result := DefaultInterface.Translate(Text, pResult);
end;

function TWindowSystemObject.LoadImage(const Path: WideString; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.LoadImage(Path, pResult);
end;

function TWindowSystemObject.About: HResult;
begin
  Result := DefaultInterface.About;
end;

function TWindowSystemObject.CreateEventHandler(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEventHandler(pControl);
end;

function TWindowSystemObject.CreatePrintInfo(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePrintInfo(pControl);
end;

function TWindowSystemObject.CreateStdDispatch(const TypeLibrary: WideString; Major: Integer; 
                                               Minor: Integer; const Guid: WideString; 
                                               const Object_: IUnknown; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStdDispatch(TypeLibrary, Major, Minor, Guid, Object_, pControl);
end;

function TWindowSystemObject.VirtualKeyCodeToString(VirtualKey: LongWord; 
                                                    UseKeyboardState: WordBool; out pVal: WideString): HResult;
begin
  Result := DefaultInterface.VirtualKeyCodeToString(VirtualKey, UseKeyboardState, pVal);
end;

function TWindowSystemObject.SaveLayout(out Layout: WideString): HResult;
begin
  Result := DefaultInterface.SaveLayout(Layout);
end;

function TWindowSystemObject.LoadLayout(const Layout: WideString): HResult;
begin
  Result := DefaultInterface.LoadLayout(Layout);
end;

function TWindowSystemObject.LoadIcon(const FileName: WideString; out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.LoadIcon(FileName, Result);
end;

function TWindowSystemObject.LoadSysIcon(ID: Integer; out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.LoadSysIcon(ID, Result);
end;

function TWindowSystemObject.GetIconCount(const FileName: WideString; out Result: LongWord): HResult;
begin
  Result := DefaultInterface.GetIconCount(FileName, Result);
end;

class function CoVersion.Create: IVersion;
begin
  Result := CreateComObject(CLASS_Version) as IVersion;
end;

class function CoVersion.CreateRemote(const MachineName: string): IVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Version) as IVersion;
end;

procedure TVersion.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{60704220-E07F-4BA2-94A9-A8541D58DF1C}';
    IntfIID:   '{AC444C04-F889-47E1-B56E-9F648D8AB009}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TVersion.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IVersion;
  end;
end;

procedure TVersion.ConnectTo(svrIntf: IVersion);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TVersion.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TVersion.GetDefaultInterface: IVersion;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TVersion.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TVersion.Destroy;
begin
  inherited Destroy;
end;

function TVersion.Get_Major(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Major(pVal);
end;

function TVersion.Get_Minor(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Minor(pVal);
end;

function TVersion.Get_BuildNumber(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BuildNumber(pVal);
end;

function TVersion.Get_String_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_String_(pVal);
end;

function TVersion.Get_Trial(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Trial(pVal);
end;

function TVersion.Get_Url(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Url(pVal);
end;

function TVersion.Get_Copyright(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Copyright(pVal);
end;

class function CoControl.Create: IControl;
begin
  Result := CreateComObject(CLASS_Control) as IControl;
end;

class function CoControl.CreateRemote(const MachineName: string): IControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Control) as IControl;
end;

procedure TControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0CD57D2F-14E0-4940-B657-6AEE349C0522}';
    IntfIID:   '{4397A1F9-F35F-4234-AF6A-F6327B0F784E}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IControl;
  end;
end;

procedure TControl.ConnectTo(svrIntf: IControl);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TControl.GetDefaultInterface: IControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TControl.Destroy;
begin
  inherited Destroy;
end;

procedure TControl.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TControl.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TControl.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TControl.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TControl.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TControl.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TControl.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TControl.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TControl.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TControl.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TControl.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TControl.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TControl.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TControl.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TControl.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TControl.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TControl.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TControl.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TControl.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TControl.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TControl.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TControl.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TControl.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TControl.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TControl.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TControl.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TControl.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TControl.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TControl.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TControl.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TControl.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TControl.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TControl.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TControl.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TControl.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TControl.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TControl.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TControl.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TControl.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TControl.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TControl.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TControl._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TControl.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TControl.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TControl.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TControl.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TControl._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TControl.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TControl.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TControl._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TControl.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TControl.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TControl._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TControl.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TControl.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TControl.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TControl.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TControl.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TControl.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TControl.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TControl.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TControl.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TControl.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TControl.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TControl.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TControl.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TControl.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TControl.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TControl.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TControl.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TControl.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TControl.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TControl.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TControl.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TControl.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TControl.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TControl.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TControl.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TControl.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TControl.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TControl.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TControl.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TControl.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TControl.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TControl.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TControl.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TControl.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TControl.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TControl.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TControl.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TControl.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TControl.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TControl.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TControl.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TControl.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TControl.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TControl.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TControl.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TControl.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TControl.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TControl.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TControl.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TControl.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TControl.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TControl.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TControl.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TControl.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TControl.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TControl.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TControl.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TControl.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TControl.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TControl.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TControl.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TControl.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TControl.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TControl.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TControl.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TControl.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoFrame.Create: IFrame;
begin
  Result := CreateComObject(CLASS_Frame) as IFrame;
end;

class function CoFrame.CreateRemote(const MachineName: string): IFrame;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Frame) as IFrame;
end;

procedure TFrame.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0026E5CA-9BA2-4AC6-9BA5-A8775866DE4F}';
    IntfIID:   '{92337C2C-1C7D-4848-8AD2-B9D33E4EB242}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFrame.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IFrame;
  end;
end;

procedure TFrame.ConnectTo(svrIntf: IFrame);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TFrame.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TFrame.GetDefaultInterface: IFrame;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TFrame.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TFrame.Destroy;
begin
  inherited Destroy;
end;

procedure TFrame.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TFrame.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TFrame.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TFrame.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TFrame.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TFrame.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TFrame.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TFrame.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TFrame.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TFrame.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TFrame.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TFrame.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TFrame.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TFrame.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TFrame.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TFrame.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TFrame.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TFrame.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TFrame.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TFrame.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TFrame.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TFrame.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TFrame.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TFrame.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TFrame.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TFrame.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TFrame.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TFrame.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TFrame.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TFrame.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TFrame.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TFrame.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TFrame.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TFrame.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TFrame.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TFrame.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TFrame.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TFrame.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TFrame.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TFrame.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TFrame.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TFrame._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TFrame.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TFrame.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TFrame.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TFrame.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TFrame._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TFrame.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TFrame.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TFrame._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TFrame.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TFrame.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TFrame._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TFrame.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TFrame.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TFrame.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TFrame.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TFrame.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TFrame.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TFrame.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TFrame.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TFrame.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TFrame.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TFrame.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TFrame.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TFrame.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TFrame.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TFrame.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TFrame.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TFrame.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TFrame.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TFrame.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TFrame.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TFrame.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TFrame.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TFrame.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TFrame.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TFrame.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TFrame.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TFrame.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TFrame.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TFrame.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TFrame.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TFrame.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TFrame.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TFrame.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TFrame.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TFrame.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TFrame.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TFrame.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TFrame.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TFrame.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TFrame.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TFrame.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TFrame.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TFrame.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TFrame.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TFrame.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TFrame.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TFrame.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TFrame.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TFrame.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TFrame.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TFrame.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TFrame.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TFrame.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TFrame.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TFrame.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TFrame.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TFrame.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TFrame.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TFrame.Set_BorderWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BorderWidth(pVal);
end;

function TFrame.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TFrame.Set_BevelWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BevelWidth(pVal);
end;

function TFrame.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TFrame.Set_BevelOuter(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelOuter(pVal);
end;

function TFrame.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TFrame.Set_BevelInner(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelInner(pVal);
end;

function TFrame.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TFrame.Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GraphFont(pVal);
end;

function TFrame._Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GraphFont(pVal);
end;

function TFrame.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TFrame.Set_AutoScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoScroll(pVal);
end;

function TFrame.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TFrame.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TFrame.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TFrame.Set_CaptureMouse(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_CaptureMouse(pVal);
end;

function TFrame.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TFrame.Set_ParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentBackground(pVal);
end;

function TFrame.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TFrame.Set_BorderParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderParentBackground(pVal);
end;

function TFrame.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TFrame.Set_AutoSplit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSplit(pVal);
end;

function TFrame.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TFrame.Set_GroupBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GroupBox(pVal);
end;

function TFrame.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TFrame.Set_Margin(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Margin(pVal);
end;

function TFrame.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TFrame.Set_MarginLeft(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginLeft(pVal);
end;

function TFrame.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TFrame.Set_MarginTop(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginTop(pVal);
end;

function TFrame.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TFrame.Set_MarginRight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginRight(pVal);
end;

function TFrame.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TFrame.Set_MarginBottom(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginBottom(pVal);
end;

function TFrame.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TFrame.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TFrame.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TFrame.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TFrame.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TFrame.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TFrame.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TFrame.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TFrame.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TFrame.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TFrame.CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TFrame.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TFrame.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TFrame.CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TFrame.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                const Url: WideString; const Label_: WideString; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TFrame.CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     const ID: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TFrame.CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; const ID: WideString; 
                                             const LicKey: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TFrame.CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TFrame.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TFrame.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Vertical: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TFrame.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TFrame.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TFrame.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TFrame.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TFrame.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TFrame.Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TFrame.RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TFrame.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TFrame.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TFrame.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; 
                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TFrame.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                      nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TFrame.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TFrame.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TFrame.TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TFrame.TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TFrame.DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TFrame.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TFrame.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                      BevelWidth: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TFrame.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TFrame.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TFrame.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

class function CoForm.Create: IForm;
begin
  Result := CreateComObject(CLASS_Form) as IForm;
end;

class function CoForm.CreateRemote(const MachineName: string): IForm;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Form) as IForm;
end;

procedure TForm.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0360E66F-A21B-4BAE-9FB1-C9F251C3B733}';
    IntfIID:   '{044B381D-C581-4B9E-9C95-08B66B38468F}';
    EventIID:  '{E83611E0-B0CD-4087-887B-4A0454176AA9}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TForm.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IForm;
  end;
end;

procedure TForm.ConnectTo(svrIntf: IForm);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TForm.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TForm.GetDefaultInterface: IForm;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TForm.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TForm.Destroy;
begin
  inherited Destroy;
end;

procedure TForm.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
    19: if Assigned(FOnCloseQuery) then
         FOnCloseQuery(Self,
                       Params[0] {const IDispatch},
                       Params[1] {const IDispatch});
    20: if Assigned(FOnClose) then
         FOnClose(Self, Params[0] {const IDispatch});
    21: if Assigned(FOnActiveControlChange) then
         FOnActiveControlChange(Self, Params[0] {const IDispatch});
    22: if Assigned(FOnHitTest) then
         FOnHitTest(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {const IDispatch});
    23: if Assigned(FOnHint) then
         FOnHint(Self,
                 Params[0] {const IDispatch},
                 Params[1] {const IDispatch});
    24: if Assigned(FOnMinimize) then
         FOnMinimize(Self,
                     Params[0] {const IDispatch},
                     Params[1] {const IDispatch});
    25: if Assigned(FOnMaximize) then
         FOnMaximize(Self,
                     Params[0] {const IDispatch},
                     Params[1] {const IDispatch});
    26: if Assigned(FOnRestore) then
         FOnRestore(Self,
                    Params[0] {const IDispatch},
                    Params[1] {const IDispatch});
    27: if Assigned(FOnCopyData) then
         FOnCopyData(Self,
                     Params[0] {const IDispatch},
                     Params[1] {const WideString});
    28: if Assigned(FOnActivate) then
         FOnActivate(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer});
    29: if Assigned(FOnEnterSizeMove) then
         FOnEnterSizeMove(Self,
                          Params[0] {const IDispatch},
                          Params[1] {Integer});
    30: if Assigned(FOnExitSizeMove) then
         FOnExitSizeMove(Self,
                         Params[0] {const IDispatch},
                         Params[1] {Integer});
  end; {case DispID}
end;

function TForm.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TForm.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TForm.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TForm.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TForm.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TForm.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TForm.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TForm.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TForm.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TForm.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TForm.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TForm.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TForm.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TForm.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TForm.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TForm.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TForm.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TForm.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TForm.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TForm.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TForm.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TForm.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TForm.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TForm.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TForm.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TForm.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TForm.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TForm.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TForm.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TForm.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TForm.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TForm.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TForm.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TForm.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TForm.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TForm.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TForm.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TForm.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TForm.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TForm.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TForm._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TForm.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TForm.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TForm.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TForm.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TForm._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TForm.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TForm.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TForm._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TForm.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TForm.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TForm._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TForm.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TForm.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TForm.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TForm.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TForm.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TForm.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TForm.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TForm.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TForm.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TForm.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TForm.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TForm.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TForm.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TForm.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TForm.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TForm.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TForm.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TForm.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TForm.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TForm.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TForm.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TForm.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TForm.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TForm.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TForm.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TForm.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TForm.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TForm.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TForm.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TForm.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TForm.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TForm.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TForm.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TForm.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TForm.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TForm.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TForm.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TForm.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TForm.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TForm.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TForm.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TForm.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TForm.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TForm.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TForm.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TForm.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TForm.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TForm.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TForm.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TForm.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TForm.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TForm.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TForm.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TForm.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TForm.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TForm.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TForm.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TForm.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TForm.Set_BorderWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BorderWidth(pVal);
end;

function TForm.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TForm.Set_BevelWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BevelWidth(pVal);
end;

function TForm.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TForm.Set_BevelOuter(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelOuter(pVal);
end;

function TForm.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TForm.Set_BevelInner(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelInner(pVal);
end;

function TForm.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TForm.Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GraphFont(pVal);
end;

function TForm._Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GraphFont(pVal);
end;

function TForm.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TForm.Set_AutoScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoScroll(pVal);
end;

function TForm.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TForm.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TForm.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TForm.Set_CaptureMouse(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_CaptureMouse(pVal);
end;

function TForm.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TForm.Set_ParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentBackground(pVal);
end;

function TForm.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TForm.Set_BorderParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderParentBackground(pVal);
end;

function TForm.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TForm.Set_AutoSplit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSplit(pVal);
end;

function TForm.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TForm.Set_GroupBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GroupBox(pVal);
end;

function TForm.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TForm.Set_Margin(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Margin(pVal);
end;

function TForm.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TForm.Set_MarginLeft(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginLeft(pVal);
end;

function TForm.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TForm.Set_MarginTop(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginTop(pVal);
end;

function TForm.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TForm.Set_MarginRight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginRight(pVal);
end;

function TForm.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TForm.Set_MarginBottom(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginBottom(pVal);
end;

function TForm.Set_Icon(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Icon(Param1);
end;

function TForm.Get_Menu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Menu(pVal);
end;

function TForm.Set_Menu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Menu(pVal);
end;

function TForm._Set_Menu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Menu(pVal);
end;

function TForm.Get_KeyPreview(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_KeyPreview(pVal);
end;

function TForm.Set_KeyPreview(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_KeyPreview(pVal);
end;

function TForm.Get_MaximizeBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaximizeBox(pVal);
end;

function TForm.Set_MaximizeBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaximizeBox(pVal);
end;

function TForm.Get_MinimizeBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MinimizeBox(pVal);
end;

function TForm.Set_MinimizeBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MinimizeBox(pVal);
end;

function TForm.Get_ControlBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ControlBox(pVal);
end;

function TForm.Set_ControlBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ControlBox(pVal);
end;

function TForm.Get_SizeGrip(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_SizeGrip(pVal);
end;

function TForm.Set_SizeGrip(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_SizeGrip(pVal);
end;

function TForm.Get_TopMost(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TopMost(pVal);
end;

function TForm.Set_TopMost(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TopMost(pVal);
end;

function TForm.Get_ToolWindow(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ToolWindow(pVal);
end;

function TForm.Set_ToolWindow(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ToolWindow(pVal);
end;

function TForm.Get_Caption(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Caption(pVal);
end;

function TForm.Set_Caption(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Caption(pVal);
end;

function TForm.Get_AcceptButton(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_AcceptButton(pVal);
end;

function TForm.Set_AcceptButton(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_AcceptButton(pVal);
end;

function TForm._Set_AcceptButton(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_AcceptButton(pVal);
end;

function TForm.Get_CancelButton(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_CancelButton(pVal);
end;

function TForm.Set_CancelButton(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_CancelButton(pVal);
end;

function TForm._Set_CancelButton(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_CancelButton(pVal);
end;

function TForm.Get_HelpButton(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_HelpButton(pVal);
end;

function TForm.Set_HelpButton(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_HelpButton(pVal);
end;

function TForm._Set_HelpButton(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_HelpButton(pVal);
end;

function TForm.Get_ActiveControl(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ActiveControl(pVal);
end;

function TForm.Set_ActiveControl(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_ActiveControl(pVal);
end;

function TForm._Set_ActiveControl(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_ActiveControl(pVal);
end;

function TForm.Get_CanClose(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanClose(pVal);
end;

function TForm.Set_CanClose(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CanClose(pVal);
end;

function TForm.Set_Region(Param1: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Region(Param1);
end;

function TForm.Get_TaskBar(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_TaskBar(pVal);
end;

function TForm.Get_Active(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Active(pVal);
end;

function TForm.Set_Active(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Active(pVal);
end;

function TForm.Get_Foreground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Foreground(pVal);
end;

function TForm.Set_Foreground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Foreground(pVal);
end;

function TForm.Set_OnCloseQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnCloseQuery(Param1);
end;

function TForm.Set_OnClose(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClose(Param1);
end;

function TForm.Set_OnActiveControlChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnActiveControlChange(Param1);
end;

function TForm.Set_OnHitTest(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHitTest(Param1);
end;

function TForm.Set_OnHint(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHint(Param1);
end;

function TForm.Set_OnMinimize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMinimize(Param1);
end;

function TForm.Set_OnMaximize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMaximize(Param1);
end;

function TForm.Set_OnRestore(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnRestore(Param1);
end;

function TForm.Set_OnCopyData(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnCopyData(Param1);
end;

function TForm.Set_OnActivate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnActivate(Param1);
end;

function TForm.Set_OnEnterSizeMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnterSizeMove(Param1);
end;

function TForm.Set_OnExitSizeMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnExitSizeMove(Param1);
end;

function TForm.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TForm.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TForm.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TForm.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TForm.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TForm.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TForm.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TForm.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TForm.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TForm.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TForm.CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TForm.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TForm.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TForm.CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TForm.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TForm.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TForm.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TForm.CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TForm.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Url: WideString; const Label_: WideString; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TForm.CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TForm.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    const ID: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TForm.CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; const ID: WideString; 
                                            const LicKey: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TForm.CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TForm.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TForm.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TForm.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TForm.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Vertical: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TForm.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TForm.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TForm.CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TForm.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TForm.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TForm.Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TForm.RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TForm.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TForm.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TForm.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; 
                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TForm.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                     nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TForm.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                   nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TForm.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TForm.TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TForm.TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TForm.DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TForm.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TForm.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                     BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                     BevelWidth: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TForm.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TForm.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TForm.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

function TForm.Minimize: HResult;
begin
  Result := DefaultInterface.Minimize;
end;

function TForm.Restore: HResult;
begin
  Result := DefaultInterface.Restore;
end;

function TForm.Maximize: HResult;
begin
  Result := DefaultInterface.Maximize;
end;

function TForm.Close: HResult;
begin
  Result := DefaultInterface.Close;
end;

function TForm.ShowModal: HResult;
begin
  Result := DefaultInterface.ShowModal;
end;

function TForm.MessageBox(const Text: WideString; const Caption: WideString; Flags: Integer; 
                          out pResult: Integer): HResult;
begin
  Result := DefaultInterface.MessageBox(Text, Caption, Flags, pResult);
end;

function TForm.ColorDialog(StartColor: LongWord; Flags: LongWord; out pColor: LongWord): HResult;
begin
  Result := DefaultInterface.ColorDialog(StartColor, Flags, pColor);
end;

function TForm.FontDialog(const StartValue: IDispatch; Flags: LongWord; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.FontDialog(StartValue, Flags, pResult);
end;

function TForm.OpenDialog(const DefaultExt: WideString; const Filter: WideString; 
                          const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult;
begin
  Result := DefaultInterface.OpenDialog(DefaultExt, Filter, StartFile, Flags, pFileName);
end;

function TForm.SaveDialog(const DefaultExt: WideString; const Filter: WideString; 
                          const StartFile: WideString; Flags: LongWord; out pFileName: WideString): HResult;
begin
  Result := DefaultInterface.SaveDialog(DefaultExt, Filter, StartFile, Flags, pFileName);
end;

function TForm.SelectFolderDialog(const Title: WideString; Flags: LongWord; out pFolder: WideString): HResult;
begin
  Result := DefaultInterface.SelectFolderDialog(Title, Flags, pFolder);
end;

function TForm.PrintDialog(Flags: LongWord; MinPage: Word; MaxPage: Word; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.PrintDialog(Flags, MinPage, MaxPage, pResult);
end;

function TForm.PrinterSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.PrinterSetupDialog(Flags, pResult);
end;

function TForm.PageSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.PageSetupDialog(Flags, pResult);
end;

function TForm.CreateFindDialog(const FindText: WideString; Flags: LongWord; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFindDialog(FindText, Flags, pResult);
end;

function TForm.CreateReplaceDialog(const FindText: WideString; const ReplaceText: WideString; 
                                   Flags: LongWord; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReplaceDialog(FindText, ReplaceText, Flags, pResult);
end;

function TForm.CreateFontDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFontDialog(pResult);
end;

function TForm.CreateColorDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateColorDialog(pResult);
end;

function TForm.CreateOpenDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateOpenDialog(pResult);
end;

function TForm.CreateSaveDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSaveDialog(pResult);
end;

function TForm.CreateSelectFolderDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSelectFolderDialog(pResult);
end;

function TForm.CreateForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateForm(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDialogForm(Left, Top, Width, Height, Style, pControl);
end;

function TForm.CreateMessageDialog(const Text: WideString; const Caption: WideString; 
                                   out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMessageDialog(Text, Caption, pResult);
end;

function TForm.CreateTaskDialog(const Text: WideString; const Caption: WideString; 
                                out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTaskDialog(Text, Caption, pResult);
end;

class function CoCollection.Create: ICollection;
begin
  Result := CreateComObject(CLASS_Collection) as ICollection;
end;

class function CoCollection.CreateRemote(const MachineName: string): ICollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Collection) as ICollection;
end;

procedure TCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F595597D-9EE0-45E5-9360-2AF03DA197DB}';
    IntfIID:   '{92BEFD16-E781-484B-BC2D-F3B5E5DA2CC5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICollection;
  end;
end;

procedure TCollection.ConnectTo(svrIntf: ICollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCollection.GetDefaultInterface: ICollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TCollection.Destroy;
begin
  inherited Destroy;
end;

function TCollection.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TCollection.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TCollection.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TCollection.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TCollection.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TCollection.ExChange(A: OleVariant; B: OleVariant): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

class function CoStringCollection.Create: IStringCollection;
begin
  Result := CreateComObject(CLASS_StringCollection) as IStringCollection;
end;

class function CoStringCollection.CreateRemote(const MachineName: string): IStringCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StringCollection) as IStringCollection;
end;

procedure TStringCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{749BABA2-8F65-4682-8577-AF7656779100}';
    IntfIID:   '{A68CF60C-30F0-4A23-B592-3CB23708733A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStringCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStringCollection;
  end;
end;

procedure TStringCollection.ConnectTo(svrIntf: IStringCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStringCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStringCollection.GetDefaultInterface: IStringCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TStringCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TStringCollection.Destroy;
begin
  inherited Destroy;
end;

function TStringCollection.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TStringCollection.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TStringCollection.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TStringCollection.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TStringCollection.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TStringCollection.ExChange(A: OleVariant; B: OleVariant): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TStringCollection.Add(const Value: WideString): HResult;
begin
  Result := DefaultInterface.Add(Value);
end;

class function CoImageList.Create: IImageList;
begin
  Result := CreateComObject(CLASS_ImageList) as IImageList;
end;

class function CoImageList.CreateRemote(const MachineName: string): IImageList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ImageList) as IImageList;
end;

procedure TImageList.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F36EC7DC-6EDC-44CA-B7B8-53D513BBE717}';
    IntfIID:   '{68343C86-0240-44FD-A24F-5CD611E0A33F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TImageList.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IImageList;
  end;
end;

procedure TImageList.ConnectTo(svrIntf: IImageList);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TImageList.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TImageList.GetDefaultInterface: IImageList;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TImageList.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TImageList.Destroy;
begin
  inherited Destroy;
end;

function TImageList.Get_Width(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TImageList.Set_Width(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TImageList.Get_Height(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TImageList.Set_Height(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TImageList.Get_Count(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pVal);
end;

function TImageList.Get_BitsPerPixel(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BitsPerPixel(pVal);
end;

function TImageList.Set_BitsPerPixel(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BitsPerPixel(pVal);
end;

function TImageList.Get_References(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_References(pVal);
end;

function TImageList.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TImageList.Load(Image: OleVariant): HResult;
begin
  Result := DefaultInterface.Load(Image);
end;

function TImageList.Add(Image: OleVariant): HResult;
begin
  Result := DefaultInterface.Add(Image);
end;

function TImageList.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TImageList.Remove(Index: Integer): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

class function CoPen.Create: IPen;
begin
  Result := CreateComObject(CLASS_Pen) as IPen;
end;

class function CoPen.CreateRemote(const MachineName: string): IPen;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Pen) as IPen;
end;

procedure TPen.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{74C1B713-ED60-4D29-AF2A-FD6879F28C8D}';
    IntfIID:   '{A6BFFF0E-7526-495A-AEA9-7BE6005184D7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPen.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPen;
  end;
end;

procedure TPen.ConnectTo(svrIntf: IPen);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPen.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPen.GetDefaultInterface: IPen;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPen.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPen.Destroy;
begin
  inherited Destroy;
end;

function TPen.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TPen.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TPen.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TPen.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TPen.Get_Style(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Style(pVal);
end;

function TPen.Set_Style(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Style(pVal);
end;

function TPen.Default: HResult;
begin
  Result := DefaultInterface.Default;
end;

class function CoBrush.Create: IBrush;
begin
  Result := CreateComObject(CLASS_Brush) as IBrush;
end;

class function CoBrush.CreateRemote(const MachineName: string): IBrush;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Brush) as IBrush;
end;

procedure TBrush.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E1F77E03-CD0B-4C1B-A3B0-386BD27D4509}';
    IntfIID:   '{68FA42FE-34AC-40E9-857D-F94846E91B0A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBrush.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IBrush;
  end;
end;

procedure TBrush.ConnectTo(svrIntf: IBrush);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBrush.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBrush.GetDefaultInterface: IBrush;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TBrush.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TBrush.Destroy;
begin
  inherited Destroy;
end;

function TBrush.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TBrush.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TBrush.Get_Style(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Style(pVal);
end;

function TBrush.Set_Style(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Style(pVal);
end;

function TBrush.Set_Image(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Image(Param1);
end;

function TBrush.Get_GradientColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_GradientColor(pVal);
end;

function TBrush.Set_GradientColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_GradientColor(pVal);
end;

function TBrush.Default: HResult;
begin
  Result := DefaultInterface.Default;
end;

class function CoFont.Create: IFontEx;
begin
  Result := CreateComObject(CLASS_Font) as IFontEx;
end;

class function CoFont.CreateRemote(const MachineName: string): IFontEx;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Font) as IFontEx;
end;

procedure TFont.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D03E82B0-C778-4B91-AE34-A98AA109CBE7}';
    IntfIID:   '{FAE1D3D9-57B5-42D7-AF14-AC9ED6B31EA8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFont.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFontEx;
  end;
end;

procedure TFont.ConnectTo(svrIntf: IFontEx);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFont.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFont.GetDefaultInterface: IFontEx;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TFont.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TFont.Destroy;
begin
  inherited Destroy;
end;

function TFont.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TFont.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TFont.Get_Italic(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Italic(pVal);
end;

function TFont.Set_Italic(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Italic(pVal);
end;

function TFont.Get_Underline(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Underline(pVal);
end;

function TFont.Set_Underline(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Underline(pVal);
end;

function TFont.Get_Strikethrough(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Strikethrough(pVal);
end;

function TFont.Set_Strikethrough(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Strikethrough(pVal);
end;

function TFont.Get_Bold(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Bold(pVal);
end;

function TFont.Set_Bold(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Bold(pVal);
end;

function TFont.Get_Weight(out pVal: Smallint): HResult;
begin
  Result := DefaultInterface.Get_Weight(pVal);
end;

function TFont.Set_Weight(pVal: Smallint): HResult;
begin
  Result := DefaultInterface.Set_Weight(pVal);
end;

function TFont.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TFont.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TFont.Get_Size(out pVal: Currency): HResult;
begin
  Result := DefaultInterface.Get_Size(pVal);
end;

function TFont.Set_Size(pVal: Currency): HResult;
begin
  Result := DefaultInterface.Set_Size(pVal);
end;

function TFont.Get_CharSet(out pVal: Smallint): HResult;
begin
  Result := DefaultInterface.Get_CharSet(pVal);
end;

function TFont.Set_CharSet(pVal: Smallint): HResult;
begin
  Result := DefaultInterface.Set_CharSet(pVal);
end;

function TFont.Get_Angle(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Angle(pVal);
end;

function TFont.Set_Angle(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Angle(pVal);
end;

function TFont.Default: HResult;
begin
  Result := DefaultInterface.Default;
end;

class function CoAction.Create: IAction;
begin
  Result := CreateComObject(CLASS_Action) as IAction;
end;

class function CoAction.CreateRemote(const MachineName: string): IAction;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Action) as IAction;
end;

procedure TAction.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EDE6D37C-07A3-4A1D-B6C2-05CC89364BEF}';
    IntfIID:   '{752D00E4-9EBE-4A1A-82D8-5D62F66CB4ED}';
    EventIID:  '{EFCC7766-9D3D-48CE-94B0-F0EAC186B763}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAction.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IAction;
  end;
end;

procedure TAction.ConnectTo(svrIntf: IAction);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAction.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAction.GetDefaultInterface: IAction;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TAction.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TAction.Destroy;
begin
  inherited Destroy;
end;

procedure TAction.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnExecute) then
         FOnExecute(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnUpdate) then
         FOnUpdate(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TAction.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TAction.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TAction.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TAction.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TAction.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TAction.Set_Item(Index: Integer; pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Item(Index, pvar);
end;

function TAction.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TAction.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TAction.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TAction._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TAction.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TAction.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TAction.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TAction.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TAction.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TAction.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TAction.Get_Checked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Checked(pVal);
end;

function TAction.Set_Checked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Checked(pVal);
end;

function TAction.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TAction.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TAction.Get_CheckBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CheckBox(pVal);
end;

function TAction.Set_CheckBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CheckBox(pVal);
end;

function TAction.Get_RadioCheck(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_RadioCheck(pVal);
end;

function TAction.Set_RadioCheck(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_RadioCheck(pVal);
end;

function TAction.Get_AllowAllUp(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowAllUp(pVal);
end;

function TAction.Set_AllowAllUp(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowAllUp(pVal);
end;

function TAction.Get_Default(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Default(pVal);
end;

function TAction.Set_Default(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Default(pVal);
end;

function TAction.Get_Control(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Control(pVal);
end;

function TAction.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TAction.Get_Items(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Items(pVal);
end;

function TAction.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TAction.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TAction.Get_Break(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Break(pVal);
end;

function TAction.Set_Break(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Break(pVal);
end;

function TAction.Get_Key(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Key(pVal);
end;

function TAction.Set_Key(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Key(pVal);
end;

function TAction.Get_DismissonClick(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DismissonClick(pVal);
end;

function TAction.Set_DismissonClick(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DismissonClick(pVal);
end;

function TAction.Get_Noninteractive(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Noninteractive(pVal);
end;

function TAction.Set_Noninteractive(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Noninteractive(pVal);
end;

function TAction.Get_Nobackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Nobackground(pVal);
end;

function TAction.Set_Nobackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Nobackground(pVal);
end;

function TAction.Get_WholeDropDown(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_WholeDropDown(pVal);
end;

function TAction.Set_WholeDropDown(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_WholeDropDown(pVal);
end;

function TAction.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TAction.Set_OnExecute(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnExecute(Param1);
end;

function TAction.Set_OnUpdate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUpdate(Param1);
end;

function TAction.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TAction.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TAction.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TAction.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TAction.ExChange(A: OleVariant; B: OleVariant): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TAction.Add(Item: OleVariant; Key: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Item, Key, pControl);
end;

function TAction.Insert(Index: Integer; Item: OleVariant; Key: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Insert(Index, Item, Key, pControl);
end;

function TAction.NewLine(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.NewLine(pControl);
end;

function TAction.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoListControlItem.Create: IListControlItem;
begin
  Result := CreateComObject(CLASS_ListControlItem) as IListControlItem;
end;

class function CoListControlItem.CreateRemote(const MachineName: string): IListControlItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListControlItem) as IListControlItem;
end;

procedure TListControlItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C33DDC65-E6C2-45AC-B232-2E77B3831F9B}';
    IntfIID:   '{D5F460EE-3010-4A7A-AAD2-FA3F768BAC57}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListControlItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IListControlItem;
  end;
end;

procedure TListControlItem.ConnectTo(svrIntf: IListControlItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TListControlItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TListControlItem.GetDefaultInterface: IListControlItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListControlItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListControlItem.Destroy;
begin
  inherited Destroy;
end;

function TListControlItem.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TListControlItem.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TListControlItem.Get_Selected(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Selected(pVal);
end;

function TListControlItem.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TListControlItem.Get_Index(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Index(pVal);
end;

function TListControlItem.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TListControlItem.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TListControlItem._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TListControlItem.Get_TextBkColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TextBkColor(pVal);
end;

function TListControlItem.Set_TextBkColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TextBkColor(pVal);
end;

function TListControlItem.Get_ItemData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_ItemData(pVal);
end;

function TListControlItem.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TListControlItem.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TListControlItem._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TListControlItem.Get_Indent(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Indent(pVal);
end;

function TListControlItem.Set_Indent(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Indent(pVal);
end;

class function CoListBox.Create: IListBox;
begin
  Result := CreateComObject(CLASS_ListBox) as IListBox;
end;

class function CoListBox.CreateRemote(const MachineName: string): IListBox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListBox) as IListBox;
end;

procedure TListBox.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F1599B69-0FFD-417A-8B4B-FD886006D8CB}';
    IntfIID:   '{A33F2256-EF4D-409B-B1FD-0BE23F8F8C2D}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListBox.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IListBox;
  end;
end;

procedure TListBox.ConnectTo(svrIntf: IListBox);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TListBox.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TListBox.GetDefaultInterface: IListBox;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListBox.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListBox.Destroy;
begin
  inherited Destroy;
end;

procedure TListBox.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TListBox.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TListBox.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TListBox.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TListBox.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TListBox.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TListBox.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TListBox.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TListBox.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TListBox.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TListBox.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TListBox.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TListBox.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TListBox.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TListBox.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TListBox.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TListBox.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TListBox.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TListBox.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TListBox.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TListBox.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TListBox.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TListBox.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TListBox.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TListBox.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TListBox.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TListBox.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TListBox.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TListBox.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TListBox.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TListBox.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TListBox.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TListBox.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TListBox.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TListBox.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TListBox.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TListBox.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TListBox.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TListBox.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TListBox.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TListBox.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TListBox._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TListBox.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TListBox.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TListBox.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TListBox.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TListBox._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TListBox.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TListBox.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TListBox._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TListBox.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TListBox.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TListBox._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TListBox.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TListBox.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TListBox.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TListBox.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TListBox.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TListBox.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TListBox.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TListBox.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TListBox.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TListBox.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TListBox.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TListBox.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TListBox.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TListBox.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TListBox.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TListBox.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TListBox.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TListBox.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TListBox.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TListBox.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TListBox.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TListBox.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TListBox.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TListBox.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TListBox.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TListBox.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TListBox.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TListBox.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TListBox.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TListBox.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TListBox.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TListBox.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TListBox.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TListBox.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TListBox.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TListBox.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TListBox.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TListBox.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TListBox.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TListBox.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TListBox.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TListBox.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TListBox.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TListBox.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TListBox.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TListBox.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TListBox.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TListBox.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TListBox.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TListBox.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TListBox.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TListBox.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TListBox.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TListBox.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TListBox.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TListBox.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TListBox.Get_TopIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TopIndex(pVal);
end;

function TListBox.Set_TopIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TopIndex(pVal);
end;

function TListBox.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TListBox.Get_Item(Index: Integer; out pvar: WideString): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TListBox.Set_Item(Index: Integer; const pvar: WideString): HResult;
begin
  Result := DefaultInterface.Set_Item(Index, pvar);
end;

function TListBox.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TListBox.Get_ItemIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ItemIndex(pVal);
end;

function TListBox.Set_ItemIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ItemIndex(pVal);
end;

function TListBox.Get_ItemHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ItemHeight(pVal);
end;

function TListBox.Set_ItemHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ItemHeight(pVal);
end;

function TListBox.Get_ItemData(Index: Integer; out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_ItemData(Index, pVal);
end;

function TListBox.Set_ItemData(Index: Integer; pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_ItemData(Index, pVal);
end;

function TListBox.Get_Sorted(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Sorted(pVal);
end;

function TListBox.Set_Sorted(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Sorted(pVal);
end;

function TListBox.Get_IntegralHeight(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IntegralHeight(pVal);
end;

function TListBox.Set_IntegralHeight(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_IntegralHeight(pVal);
end;

function TListBox.Get_HorizontalExtent(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_HorizontalExtent(pVal);
end;

function TListBox.Set_HorizontalExtent(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_HorizontalExtent(pVal);
end;

function TListBox.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TListBox.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TListBox._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TListBox.Get_ImageIndex(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(Index, pVal);
end;

function TListBox.Set_ImageIndex(Index: Integer; pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(Index, pVal);
end;

function TListBox.Get_CustomDraw(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CustomDraw(pVal);
end;

function TListBox.Set_CustomDraw(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CustomDraw(pVal);
end;

function TListBox.Set_OnDrawItem(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDrawItem(Param1);
end;

function TListBox.Set_BackgroundImage(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_BackgroundImage(Param1);
end;

function TListBox.Get_CustomDrawSelection(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CustomDrawSelection(pVal);
end;

function TListBox.Set_CustomDrawSelection(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CustomDrawSelection(pVal);
end;

function TListBox.Get_Selected(Index: Integer; out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Selected(Index, pVal);
end;

function TListBox.Set_Selected(Index: Integer; pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Selected(Index, pVal);
end;

function TListBox.Get_SelCount(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelCount(pVal);
end;

function TListBox.Get_MultiSelect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MultiSelect(pVal);
end;

function TListBox.Set_MultiSelect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MultiSelect(pVal);
end;

function TListBox.Get_ExtendedSelect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ExtendedSelect(pVal);
end;

function TListBox.Set_ExtendedSelect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ExtendedSelect(pVal);
end;

function TListBox.Get_ColumnCount(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_ColumnCount(pVal);
end;

function TListBox.Set_ColumnCount(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_ColumnCount(pVal);
end;

function TListBox.Get_ColumnWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_ColumnWidth(pVal);
end;

function TListBox.Set_ColumnWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_ColumnWidth(pVal);
end;

function TListBox.Get_ScrollBars(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ScrollBars(pVal);
end;

function TListBox.Set_ScrollBars(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ScrollBars(pVal);
end;

function TListBox.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TListBox.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TListBox.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TListBox.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TListBox.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TListBox.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TListBox.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TListBox.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TListBox.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TListBox.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TListBox.Add(const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Add(Item, pItemIndex);
end;

function TListBox.Remove(Index: Integer): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TListBox.Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Insert(Index, Item, pItemIndex);
end;

function TListBox.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TListBox.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TListBox.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TListBox.ExChange(A: Integer; B: Integer): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TListBox.Sort(DataType: Integer; Reverse: WordBool): HResult;
begin
  Result := DefaultInterface.Sort(DataType, Reverse);
end;

function TListBox.Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                       out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Find(Text, Start, IgnoreCase, pItemIndex);
end;

function TListBox.ItemFromPoint(x: Word; y: Word; out pIndex: Integer): HResult;
begin
  Result := DefaultInterface.ItemFromPoint(x, y, pIndex);
end;

class function CoComboBox.Create: IComboBox;
begin
  Result := CreateComObject(CLASS_ComboBox) as IComboBox;
end;

class function CoComboBox.CreateRemote(const MachineName: string): IComboBox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComboBox) as IComboBox;
end;

procedure TComboBox.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CBAA954E-199E-46F6-ABA7-4521B1671E51}';
    IntfIID:   '{AA09373F-278A-49DF-9F40-74C5B92ABB6F}';
    EventIID:  '{B8A6F3A3-EE81-4472-938E-F1B42513B7D2}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TComboBox.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IComboBox;
  end;
end;

procedure TComboBox.ConnectTo(svrIntf: IComboBox);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TComboBox.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TComboBox.GetDefaultInterface: IComboBox;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TComboBox.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TComboBox.Destroy;
begin
  inherited Destroy;
end;

procedure TComboBox.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
    19: if Assigned(FOnDrawItem) then
         FOnDrawItem(Self,
                     Params[0] {const IDispatch},
                     Params[1] {const IDispatch});
    20: if Assigned(FOnDropDown) then
         FOnDropDown(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TComboBox.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TComboBox.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TComboBox.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TComboBox.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TComboBox.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TComboBox.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TComboBox.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TComboBox.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TComboBox.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TComboBox.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TComboBox.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TComboBox.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TComboBox.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TComboBox.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TComboBox.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TComboBox.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TComboBox.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TComboBox.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TComboBox.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TComboBox.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TComboBox.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TComboBox.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TComboBox.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TComboBox.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TComboBox.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TComboBox.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TComboBox.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TComboBox.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TComboBox.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TComboBox.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TComboBox.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TComboBox.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TComboBox.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TComboBox.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TComboBox.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TComboBox.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TComboBox.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TComboBox.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TComboBox.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TComboBox.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TComboBox._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TComboBox.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TComboBox.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TComboBox.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TComboBox.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TComboBox._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TComboBox.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TComboBox.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TComboBox._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TComboBox.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TComboBox.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TComboBox._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TComboBox.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TComboBox.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TComboBox.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TComboBox.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TComboBox.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TComboBox.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TComboBox.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TComboBox.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TComboBox.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TComboBox.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TComboBox.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TComboBox.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TComboBox.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TComboBox.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TComboBox.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TComboBox.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TComboBox.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TComboBox.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TComboBox.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TComboBox.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TComboBox.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TComboBox.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TComboBox.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TComboBox.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TComboBox.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TComboBox.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TComboBox.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TComboBox.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TComboBox.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TComboBox.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TComboBox.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TComboBox.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TComboBox.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TComboBox.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TComboBox.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TComboBox.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TComboBox.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TComboBox.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TComboBox.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TComboBox.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TComboBox.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TComboBox.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TComboBox.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TComboBox.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TComboBox.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TComboBox.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TComboBox.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TComboBox.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TComboBox.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TComboBox.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TComboBox.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TComboBox.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TComboBox.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TComboBox.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TComboBox.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TComboBox.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TComboBox.Get_TopIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TopIndex(pVal);
end;

function TComboBox.Set_TopIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TopIndex(pVal);
end;

function TComboBox.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TComboBox.Get_Item(Index: Integer; out pvar: WideString): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TComboBox.Set_Item(Index: Integer; const pvar: WideString): HResult;
begin
  Result := DefaultInterface.Set_Item(Index, pvar);
end;

function TComboBox.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TComboBox.Get_ItemIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ItemIndex(pVal);
end;

function TComboBox.Set_ItemIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ItemIndex(pVal);
end;

function TComboBox.Get_ItemHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ItemHeight(pVal);
end;

function TComboBox.Set_ItemHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ItemHeight(pVal);
end;

function TComboBox.Get_ItemData(Index: Integer; out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_ItemData(Index, pVal);
end;

function TComboBox.Set_ItemData(Index: Integer; pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_ItemData(Index, pVal);
end;

function TComboBox.Get_Sorted(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Sorted(pVal);
end;

function TComboBox.Set_Sorted(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Sorted(pVal);
end;

function TComboBox.Get_IntegralHeight(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IntegralHeight(pVal);
end;

function TComboBox.Set_IntegralHeight(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_IntegralHeight(pVal);
end;

function TComboBox.Get_HorizontalExtent(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_HorizontalExtent(pVal);
end;

function TComboBox.Set_HorizontalExtent(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_HorizontalExtent(pVal);
end;

function TComboBox.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TComboBox.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TComboBox._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TComboBox.Get_ImageIndex(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(Index, pVal);
end;

function TComboBox.Set_ImageIndex(Index: Integer; pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(Index, pVal);
end;

function TComboBox.Get_CustomDraw(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CustomDraw(pVal);
end;

function TComboBox.Set_CustomDraw(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CustomDraw(pVal);
end;

function TComboBox.Set_OnDrawItem(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDrawItem(Param1);
end;

function TComboBox.Set_BackgroundImage(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_BackgroundImage(Param1);
end;

function TComboBox.Get_CustomDrawSelection(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CustomDrawSelection(pVal);
end;

function TComboBox.Set_CustomDrawSelection(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CustomDrawSelection(pVal);
end;

function TComboBox.Get_DropDownCount(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_DropDownCount(pVal);
end;

function TComboBox.Set_DropDownCount(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_DropDownCount(pVal);
end;

function TComboBox.Get_Style(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Style(pVal);
end;

function TComboBox.Set_Style(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Style(pVal);
end;

function TComboBox.Get_CharCase(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_CharCase(pVal);
end;

function TComboBox.Set_CharCase(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_CharCase(pVal);
end;

function TComboBox.Get_ReadOnly(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ReadOnly(pVal);
end;

function TComboBox.Set_ReadOnly(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ReadOnly(pVal);
end;

function TComboBox.Get_DroppedDown(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DroppedDown(pVal);
end;

function TComboBox.Set_DroppedDown(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DroppedDown(pVal);
end;

function TComboBox.Get_CueBanner(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_CueBanner(pVal);
end;

function TComboBox.Set_CueBanner(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_CueBanner(pVal);
end;

function TComboBox.Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CueBannerAlwaysVisible(pVal);
end;

function TComboBox.Set_CueBannerAlwaysVisible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CueBannerAlwaysVisible(pVal);
end;

function TComboBox.Get_BalloonTip(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_BalloonTip(pVal);
end;

function TComboBox.Set_OnDropDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDropDown(Param1);
end;

function TComboBox.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TComboBox.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TComboBox.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TComboBox.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TComboBox.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TComboBox.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TComboBox.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TComboBox.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TComboBox.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TComboBox.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TComboBox.Add(const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Add(Item, pItemIndex);
end;

function TComboBox.Remove(Index: Integer): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TComboBox.Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Insert(Index, Item, pItemIndex);
end;

function TComboBox.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TComboBox.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TComboBox.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TComboBox.ExChange(A: Integer; B: Integer): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TComboBox.Sort(DataType: Integer; Reverse: WordBool): HResult;
begin
  Result := DefaultInterface.Sort(DataType, Reverse);
end;

function TComboBox.Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                        out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Find(Text, Start, IgnoreCase, pItemIndex);
end;

class function CoEdit.Create: IEdit;
begin
  Result := CreateComObject(CLASS_Edit) as IEdit;
end;

class function CoEdit.CreateRemote(const MachineName: string): IEdit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Edit) as IEdit;
end;

procedure TEdit.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DFC75B27-89ED-4652-AFDA-0223C2AA7820}';
    IntfIID:   '{1D2D9535-7884-49AB-90C2-49955A388137}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEdit.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IEdit;
  end;
end;

procedure TEdit.ConnectTo(svrIntf: IEdit);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TEdit.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TEdit.GetDefaultInterface: IEdit;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEdit.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEdit.Destroy;
begin
  inherited Destroy;
end;

procedure TEdit.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TEdit.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TEdit.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TEdit.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TEdit.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TEdit.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TEdit.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TEdit.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TEdit.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TEdit.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TEdit.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TEdit.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TEdit.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TEdit.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TEdit.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TEdit.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TEdit.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TEdit.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TEdit.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TEdit.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TEdit.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TEdit.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TEdit.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TEdit.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TEdit.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TEdit.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TEdit.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TEdit.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TEdit.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TEdit.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TEdit.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TEdit.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TEdit.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TEdit.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TEdit.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TEdit.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TEdit.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TEdit.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TEdit.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TEdit.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TEdit.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TEdit._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TEdit.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TEdit.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TEdit.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TEdit.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TEdit._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TEdit.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TEdit.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TEdit._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TEdit.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TEdit.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TEdit._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TEdit.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TEdit.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TEdit.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TEdit.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TEdit.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TEdit.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TEdit.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TEdit.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TEdit.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TEdit.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TEdit.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TEdit.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TEdit.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TEdit.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TEdit.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TEdit.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TEdit.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TEdit.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TEdit.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TEdit.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TEdit.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TEdit.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TEdit.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TEdit.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TEdit.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TEdit.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TEdit.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TEdit.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TEdit.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TEdit.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TEdit.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TEdit.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TEdit.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TEdit.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TEdit.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TEdit.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TEdit.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TEdit.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TEdit.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TEdit.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TEdit.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TEdit.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TEdit.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TEdit.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TEdit.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TEdit.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TEdit.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TEdit.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TEdit.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TEdit.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TEdit.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TEdit.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TEdit.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TEdit.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TEdit.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TEdit.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TEdit.Get_TopIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TopIndex(pVal);
end;

function TEdit.Set_TopIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TopIndex(pVal);
end;

function TEdit.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TEdit.Get_Item(Index: Integer; out pvar: WideString): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TEdit.Set_Item(Index: Integer; const pvar: WideString): HResult;
begin
  Result := DefaultInterface.Set_Item(Index, pvar);
end;

function TEdit.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TEdit.Get_ReadOnly(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ReadOnly(pVal);
end;

function TEdit.Set_ReadOnly(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ReadOnly(pVal);
end;

function TEdit.Get_MaxLength(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_MaxLength(pVal);
end;

function TEdit.Set_MaxLength(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_MaxLength(pVal);
end;

function TEdit.Get_CharCase(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_CharCase(pVal);
end;

function TEdit.Set_CharCase(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_CharCase(pVal);
end;

function TEdit.Get_PasswordChar(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_PasswordChar(pVal);
end;

function TEdit.Set_PasswordChar(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_PasswordChar(pVal);
end;

function TEdit.Get_HideSelection(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HideSelection(pVal);
end;

function TEdit.Set_HideSelection(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HideSelection(pVal);
end;

function TEdit.Get_MultiLine(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MultiLine(pVal);
end;

function TEdit.Set_MultiLine(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MultiLine(pVal);
end;

function TEdit.Get_ScrollBars(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ScrollBars(pVal);
end;

function TEdit.Set_ScrollBars(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ScrollBars(pVal);
end;

function TEdit.Get_AutoSize(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSize(pVal);
end;

function TEdit.Set_AutoSize(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSize(pVal);
end;

function TEdit.Get_Modified(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Modified(pVal);
end;

function TEdit.Set_Modified(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Modified(pVal);
end;

function TEdit.Get_SelStart(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelStart(pVal);
end;

function TEdit.Set_SelStart(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelStart(pVal);
end;

function TEdit.Get_SelEnd(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelEnd(pVal);
end;

function TEdit.Set_SelEnd(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelEnd(pVal);
end;

function TEdit.Get_SelLength(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelLength(pVal);
end;

function TEdit.Set_SelLength(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelLength(pVal);
end;

function TEdit.Get_LeftMargin(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_LeftMargin(pVal);
end;

function TEdit.Set_LeftMargin(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_LeftMargin(pVal);
end;

function TEdit.Get_RightMargin(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_RightMargin(pVal);
end;

function TEdit.Set_RightMargin(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_RightMargin(pVal);
end;

function TEdit.Get_WordWrap(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_WordWrap(pVal);
end;

function TEdit.Set_WordWrap(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_WordWrap(pVal);
end;

function TEdit.Get_TextAlign(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_TextAlign(pVal);
end;

function TEdit.Set_TextAlign(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_TextAlign(pVal);
end;

function TEdit.Get_CanUndo(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanUndo(pVal);
end;

function TEdit.Set_CanUndo(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CanUndo(pVal);
end;

function TEdit.Get_CanPaste(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanPaste(pVal);
end;

function TEdit.Get_DataType(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_DataType(pVal);
end;

function TEdit.Set_DataType(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_DataType(pVal);
end;

function TEdit.Get_Min(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TEdit.Set_Min(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Min(pVal);
end;

function TEdit.Get_Max(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TEdit.Set_Max(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Max(pVal);
end;

function TEdit.Get_LineFromChar(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_LineFromChar(Index, pVal);
end;

function TEdit.Get_AcceptsReturn(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AcceptsReturn(pVal);
end;

function TEdit.Set_AcceptsReturn(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AcceptsReturn(pVal);
end;

function TEdit.Get_AcceptsTab(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AcceptsTab(pVal);
end;

function TEdit.Set_AcceptsTab(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AcceptsTab(pVal);
end;

function TEdit.Get_AutoHeight(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoHeight(pVal);
end;

function TEdit.Set_AutoHeight(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoHeight(pVal);
end;

function TEdit.Get_CueBanner(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_CueBanner(pVal);
end;

function TEdit.Set_CueBanner(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_CueBanner(pVal);
end;

function TEdit.Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CueBannerAlwaysVisible(pVal);
end;

function TEdit.Set_CueBannerAlwaysVisible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CueBannerAlwaysVisible(pVal);
end;

function TEdit.Get_BalloonTip(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_BalloonTip(pVal);
end;

function TEdit.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TEdit.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TEdit.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TEdit.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TEdit.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TEdit.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TEdit.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TEdit.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TEdit.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TEdit.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TEdit.Add(const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Add(Item, pItemIndex);
end;

function TEdit.Remove(Index: Integer): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TEdit.Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Insert(Index, Item, pItemIndex);
end;

function TEdit.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TEdit.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TEdit.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TEdit.ExChange(A: Integer; B: Integer): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TEdit.Sort(DataType: Integer; Reverse: WordBool): HResult;
begin
  Result := DefaultInterface.Sort(DataType, Reverse);
end;

function TEdit.Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                    out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Find(Text, Start, IgnoreCase, pItemIndex);
end;

function TEdit.SelectAll: HResult;
begin
  Result := DefaultInterface.SelectAll;
end;

function TEdit.ClearSelection: HResult;
begin
  Result := DefaultInterface.ClearSelection;
end;

function TEdit.ReplaceSelection(const NewText: WideString; CanUndo: WordBool): HResult;
begin
  Result := DefaultInterface.ReplaceSelection(NewText, CanUndo);
end;

function TEdit.Undo: HResult;
begin
  Result := DefaultInterface.Undo;
end;

function TEdit.Cut: HResult;
begin
  Result := DefaultInterface.Cut;
end;

function TEdit.Copy: HResult;
begin
  Result := DefaultInterface.Copy;
end;

function TEdit.Paste: HResult;
begin
  Result := DefaultInterface.Paste;
end;

class function CoButton.Create: IButton;
begin
  Result := CreateComObject(CLASS_Button) as IButton;
end;

class function CoButton.CreateRemote(const MachineName: string): IButton;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Button) as IButton;
end;

procedure TButton.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0DE86A81-8827-4281-8C0C-965C34F25147}';
    IntfIID:   '{31DC6745-8E8E-4F4A-9F17-36651B160FE9}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TButton.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IButton;
  end;
end;

procedure TButton.ConnectTo(svrIntf: IButton);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TButton.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TButton.GetDefaultInterface: IButton;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TButton.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TButton.Destroy;
begin
  inherited Destroy;
end;

procedure TButton.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TButton.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TButton.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TButton.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TButton.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TButton.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TButton.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TButton.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TButton.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TButton.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TButton.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TButton.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TButton.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TButton.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TButton.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TButton.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TButton.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TButton.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TButton.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TButton.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TButton.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TButton.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TButton.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TButton.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TButton.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TButton.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TButton.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TButton.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TButton.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TButton.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TButton.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TButton.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TButton.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TButton.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TButton.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TButton.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TButton.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TButton.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TButton.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TButton.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TButton.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TButton._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TButton.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TButton.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TButton.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TButton.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TButton._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TButton.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TButton.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TButton._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TButton.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TButton.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TButton._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TButton.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TButton.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TButton.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TButton.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TButton.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TButton.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TButton.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TButton.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TButton.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TButton.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TButton.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TButton.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TButton.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TButton.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TButton.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TButton.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TButton.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TButton.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TButton.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TButton.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TButton.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TButton.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TButton.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TButton.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TButton.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TButton.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TButton.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TButton.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TButton.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TButton.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TButton.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TButton.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TButton.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TButton.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TButton.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TButton.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TButton.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TButton.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TButton.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TButton.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TButton.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TButton.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TButton.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TButton.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TButton.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TButton.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TButton.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TButton.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TButton.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TButton.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TButton.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TButton.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TButton.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TButton.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TButton.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TButton.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TButton.Get_Flat(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Flat(pVal);
end;

function TButton.Set_Flat(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Flat(pVal);
end;

function TButton.Get_Default(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Default(pVal);
end;

function TButton.Set_Default(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Default(pVal);
end;

function TButton.Get_Cancel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Cancel(pVal);
end;

function TButton.Set_Cancel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Cancel(pVal);
end;

function TButton.Get_CommandLinkButton(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CommandLinkButton(pVal);
end;

function TButton.Set_CommandLinkButton(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CommandLinkButton(pVal);
end;

function TButton.Get_Note(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Note(pVal);
end;

function TButton.Set_Note(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Note(pVal);
end;

function TButton.Get_Shield(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Shield(pVal);
end;

function TButton.Set_Shield(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Shield(pVal);
end;

function TButton.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TButton.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TButton.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TButton.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TButton.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TButton.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TButton.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TButton.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TButton.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TButton.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoCheckBox.Create: ICheckBox;
begin
  Result := CreateComObject(CLASS_CheckBox) as ICheckBox;
end;

class function CoCheckBox.CreateRemote(const MachineName: string): ICheckBox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CheckBox) as ICheckBox;
end;

procedure TCheckBox.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DECB994A-CE1B-4294-85A0-0F8C88CA671E}';
    IntfIID:   '{A924A1F1-1896-462D-98E9-873E721811CE}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCheckBox.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ICheckBox;
  end;
end;

procedure TCheckBox.ConnectTo(svrIntf: ICheckBox);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TCheckBox.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TCheckBox.GetDefaultInterface: ICheckBox;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCheckBox.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TCheckBox.Destroy;
begin
  inherited Destroy;
end;

procedure TCheckBox.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TCheckBox.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TCheckBox.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TCheckBox.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TCheckBox.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TCheckBox.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TCheckBox.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TCheckBox.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TCheckBox.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TCheckBox.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TCheckBox.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TCheckBox.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TCheckBox.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TCheckBox.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TCheckBox.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TCheckBox.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TCheckBox.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TCheckBox.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TCheckBox.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TCheckBox.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TCheckBox.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TCheckBox.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TCheckBox.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TCheckBox.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TCheckBox.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TCheckBox.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TCheckBox.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TCheckBox.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TCheckBox.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TCheckBox.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TCheckBox.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TCheckBox.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TCheckBox.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TCheckBox.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TCheckBox.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TCheckBox.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TCheckBox.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TCheckBox.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TCheckBox.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TCheckBox.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TCheckBox.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TCheckBox._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TCheckBox.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TCheckBox.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TCheckBox.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TCheckBox.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TCheckBox._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TCheckBox.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TCheckBox.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TCheckBox._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TCheckBox.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TCheckBox.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TCheckBox._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TCheckBox.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TCheckBox.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TCheckBox.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TCheckBox.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TCheckBox.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TCheckBox.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TCheckBox.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TCheckBox.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TCheckBox.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TCheckBox.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TCheckBox.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TCheckBox.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TCheckBox.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TCheckBox.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TCheckBox.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TCheckBox.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TCheckBox.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TCheckBox.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TCheckBox.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TCheckBox.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TCheckBox.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TCheckBox.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TCheckBox.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TCheckBox.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TCheckBox.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TCheckBox.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TCheckBox.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TCheckBox.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TCheckBox.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TCheckBox.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TCheckBox.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TCheckBox.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TCheckBox.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TCheckBox.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TCheckBox.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TCheckBox.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TCheckBox.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TCheckBox.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TCheckBox.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TCheckBox.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TCheckBox.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TCheckBox.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TCheckBox.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TCheckBox.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TCheckBox.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TCheckBox.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TCheckBox.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TCheckBox.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TCheckBox.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TCheckBox.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TCheckBox.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TCheckBox.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TCheckBox.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TCheckBox.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TCheckBox.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TCheckBox.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TCheckBox.Get_Flat(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Flat(pVal);
end;

function TCheckBox.Set_Flat(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Flat(pVal);
end;

function TCheckBox.Get_State(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_State(pVal);
end;

function TCheckBox.Set_State(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_State(pVal);
end;

function TCheckBox.Get_AllowGrayed(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowGrayed(pVal);
end;

function TCheckBox.Set_AllowGrayed(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowGrayed(pVal);
end;

function TCheckBox.Get_Checked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Checked(pVal);
end;

function TCheckBox.Set_Checked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Checked(pVal);
end;

function TCheckBox.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TCheckBox.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TCheckBox.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TCheckBox.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TCheckBox.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TCheckBox.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TCheckBox.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TCheckBox.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TCheckBox.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TCheckBox.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoRadioButton.Create: IRadioButton;
begin
  Result := CreateComObject(CLASS_RadioButton) as IRadioButton;
end;

class function CoRadioButton.CreateRemote(const MachineName: string): IRadioButton;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RadioButton) as IRadioButton;
end;

procedure TRadioButton.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C9D07782-E3A6-4791-B2F4-052EDA60F660}';
    IntfIID:   '{E4D0E174-9AB6-4BDF-9186-8905F5B54AAA}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRadioButton.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IRadioButton;
  end;
end;

procedure TRadioButton.ConnectTo(svrIntf: IRadioButton);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TRadioButton.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TRadioButton.GetDefaultInterface: IRadioButton;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TRadioButton.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TRadioButton.Destroy;
begin
  inherited Destroy;
end;

procedure TRadioButton.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TRadioButton.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TRadioButton.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TRadioButton.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TRadioButton.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TRadioButton.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TRadioButton.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TRadioButton.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TRadioButton.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TRadioButton.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TRadioButton.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TRadioButton.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TRadioButton.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TRadioButton.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TRadioButton.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TRadioButton.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TRadioButton.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TRadioButton.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TRadioButton.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TRadioButton.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TRadioButton.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TRadioButton.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TRadioButton.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TRadioButton.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TRadioButton.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TRadioButton.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TRadioButton.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TRadioButton.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TRadioButton.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TRadioButton.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TRadioButton.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TRadioButton.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TRadioButton.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TRadioButton.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TRadioButton.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TRadioButton.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TRadioButton.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TRadioButton.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TRadioButton.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TRadioButton.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TRadioButton.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TRadioButton._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TRadioButton.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TRadioButton.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TRadioButton.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TRadioButton.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TRadioButton._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TRadioButton.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TRadioButton.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TRadioButton._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TRadioButton.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TRadioButton.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TRadioButton._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TRadioButton.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TRadioButton.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TRadioButton.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TRadioButton.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TRadioButton.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TRadioButton.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TRadioButton.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TRadioButton.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TRadioButton.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TRadioButton.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TRadioButton.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TRadioButton.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TRadioButton.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TRadioButton.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TRadioButton.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TRadioButton.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TRadioButton.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TRadioButton.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TRadioButton.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TRadioButton.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TRadioButton.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TRadioButton.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TRadioButton.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TRadioButton.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TRadioButton.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TRadioButton.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TRadioButton.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TRadioButton.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TRadioButton.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TRadioButton.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TRadioButton.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TRadioButton.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TRadioButton.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TRadioButton.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TRadioButton.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TRadioButton.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TRadioButton.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TRadioButton.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TRadioButton.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TRadioButton.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TRadioButton.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TRadioButton.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TRadioButton.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TRadioButton.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TRadioButton.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TRadioButton.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TRadioButton.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TRadioButton.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TRadioButton.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TRadioButton.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TRadioButton.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TRadioButton.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TRadioButton.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TRadioButton.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TRadioButton.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TRadioButton.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TRadioButton.Get_Flat(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Flat(pVal);
end;

function TRadioButton.Set_Flat(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Flat(pVal);
end;

function TRadioButton.Get_Checked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Checked(pVal);
end;

function TRadioButton.Set_Checked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Checked(pVal);
end;

function TRadioButton.Get_Group(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Group(pVal);
end;

function TRadioButton.Set_Group(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Group(pVal);
end;

function TRadioButton.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TRadioButton.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TRadioButton.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TRadioButton.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TRadioButton.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TRadioButton.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TRadioButton.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TRadioButton.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TRadioButton.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TRadioButton.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoStatusItem.Create: IStatusItem;
begin
  Result := CreateComObject(CLASS_StatusItem) as IStatusItem;
end;

class function CoStatusItem.CreateRemote(const MachineName: string): IStatusItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StatusItem) as IStatusItem;
end;

procedure TStatusItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{629B72FD-0C82-4E52-B367-35F1DBEACF94}';
    IntfIID:   '{80508CDF-06EA-43C5-B41E-F2F97D516151}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStatusItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStatusItem;
  end;
end;

procedure TStatusItem.ConnectTo(svrIntf: IStatusItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStatusItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStatusItem.GetDefaultInterface: IStatusItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TStatusItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TStatusItem.Destroy;
begin
  inherited Destroy;
end;

function TStatusItem.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TStatusItem.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TStatusItem.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TStatusItem.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TStatusItem.Get_Border(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TStatusItem.Set_Border(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TStatusItem.Get_AutoSize(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSize(pVal);
end;

function TStatusItem.Set_AutoSize(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSize(pVal);
end;

function TStatusItem.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TStatusItem.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TStatusItem.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

class function CoStatusBar.Create: IStatusBar;
begin
  Result := CreateComObject(CLASS_StatusBar) as IStatusBar;
end;

class function CoStatusBar.CreateRemote(const MachineName: string): IStatusBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StatusBar) as IStatusBar;
end;

procedure TStatusBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B89272AC-3FB4-41D5-8AFA-2934A7782DF3}';
    IntfIID:   '{F61D55A1-ECC9-484B-A635-F0C5E71A8C29}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStatusBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IStatusBar;
  end;
end;

procedure TStatusBar.ConnectTo(svrIntf: IStatusBar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TStatusBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TStatusBar.GetDefaultInterface: IStatusBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TStatusBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TStatusBar.Destroy;
begin
  inherited Destroy;
end;

procedure TStatusBar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TStatusBar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TStatusBar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TStatusBar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TStatusBar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TStatusBar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TStatusBar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TStatusBar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TStatusBar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TStatusBar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TStatusBar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TStatusBar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TStatusBar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TStatusBar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TStatusBar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TStatusBar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TStatusBar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TStatusBar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TStatusBar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TStatusBar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TStatusBar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TStatusBar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TStatusBar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TStatusBar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TStatusBar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TStatusBar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TStatusBar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TStatusBar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TStatusBar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TStatusBar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TStatusBar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TStatusBar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TStatusBar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TStatusBar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TStatusBar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TStatusBar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TStatusBar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TStatusBar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TStatusBar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TStatusBar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TStatusBar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TStatusBar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TStatusBar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TStatusBar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TStatusBar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TStatusBar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TStatusBar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TStatusBar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TStatusBar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TStatusBar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TStatusBar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TStatusBar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TStatusBar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TStatusBar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TStatusBar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TStatusBar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TStatusBar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TStatusBar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TStatusBar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TStatusBar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TStatusBar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TStatusBar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TStatusBar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TStatusBar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TStatusBar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TStatusBar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TStatusBar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TStatusBar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TStatusBar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TStatusBar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TStatusBar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TStatusBar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TStatusBar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TStatusBar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TStatusBar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TStatusBar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TStatusBar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TStatusBar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TStatusBar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TStatusBar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TStatusBar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TStatusBar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TStatusBar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TStatusBar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TStatusBar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TStatusBar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TStatusBar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TStatusBar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TStatusBar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TStatusBar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TStatusBar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TStatusBar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TStatusBar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TStatusBar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TStatusBar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TStatusBar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TStatusBar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TStatusBar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TStatusBar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TStatusBar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TStatusBar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TStatusBar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TStatusBar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TStatusBar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TStatusBar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TStatusBar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TStatusBar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TStatusBar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TStatusBar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TStatusBar.Get_Simple(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Simple(pVal);
end;

function TStatusBar.Set_Simple(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Simple(pVal);
end;

function TStatusBar.Get_SizeGrip(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_SizeGrip(pVal);
end;

function TStatusBar.Set_SizeGrip(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_SizeGrip(pVal);
end;

function TStatusBar.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TStatusBar.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TStatusBar.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TStatusBar.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TStatusBar.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TStatusBar._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TStatusBar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TStatusBar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TStatusBar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TStatusBar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TStatusBar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TStatusBar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TStatusBar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TStatusBar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TStatusBar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TStatusBar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TStatusBar.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TStatusBar.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TStatusBar.ExChange(A: OleVariant; B: OleVariant): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TStatusBar.Add(Width: Integer; Border: Integer; out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Width, Border, pItem);
end;

class function CoProgressBar.Create: IProgressBar;
begin
  Result := CreateComObject(CLASS_ProgressBar) as IProgressBar;
end;

class function CoProgressBar.CreateRemote(const MachineName: string): IProgressBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProgressBar) as IProgressBar;
end;

procedure TProgressBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{97ABFEB5-CB07-4546-876F-52E9A8A300B6}';
    IntfIID:   '{16271F21-45E5-4632-BC36-E3E429B49AD8}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TProgressBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IProgressBar;
  end;
end;

procedure TProgressBar.ConnectTo(svrIntf: IProgressBar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TProgressBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TProgressBar.GetDefaultInterface: IProgressBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TProgressBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TProgressBar.Destroy;
begin
  inherited Destroy;
end;

procedure TProgressBar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TProgressBar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TProgressBar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TProgressBar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TProgressBar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TProgressBar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TProgressBar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TProgressBar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TProgressBar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TProgressBar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TProgressBar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TProgressBar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TProgressBar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TProgressBar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TProgressBar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TProgressBar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TProgressBar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TProgressBar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TProgressBar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TProgressBar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TProgressBar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TProgressBar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TProgressBar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TProgressBar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TProgressBar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TProgressBar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TProgressBar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TProgressBar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TProgressBar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TProgressBar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TProgressBar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TProgressBar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TProgressBar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TProgressBar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TProgressBar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TProgressBar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TProgressBar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TProgressBar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TProgressBar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TProgressBar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TProgressBar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TProgressBar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TProgressBar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TProgressBar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TProgressBar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TProgressBar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TProgressBar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TProgressBar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TProgressBar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TProgressBar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TProgressBar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TProgressBar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TProgressBar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TProgressBar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TProgressBar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TProgressBar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TProgressBar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TProgressBar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TProgressBar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TProgressBar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TProgressBar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TProgressBar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TProgressBar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TProgressBar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TProgressBar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TProgressBar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TProgressBar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TProgressBar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TProgressBar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TProgressBar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TProgressBar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TProgressBar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TProgressBar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TProgressBar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TProgressBar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TProgressBar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TProgressBar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TProgressBar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TProgressBar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TProgressBar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TProgressBar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TProgressBar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TProgressBar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TProgressBar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TProgressBar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TProgressBar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TProgressBar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TProgressBar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TProgressBar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TProgressBar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TProgressBar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TProgressBar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TProgressBar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TProgressBar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TProgressBar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TProgressBar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TProgressBar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TProgressBar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TProgressBar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TProgressBar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TProgressBar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TProgressBar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TProgressBar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TProgressBar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TProgressBar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TProgressBar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TProgressBar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TProgressBar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TProgressBar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TProgressBar.Get_Min(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TProgressBar.Set_Min(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Min(pVal);
end;

function TProgressBar.Get_Max(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TProgressBar.Set_Max(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Max(pVal);
end;

function TProgressBar.Get_Position(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Position(pVal);
end;

function TProgressBar.Set_Position(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Position(pVal);
end;

function TProgressBar.Get_Step(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Step(pVal);
end;

function TProgressBar.Set_Step(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Step(pVal);
end;

function TProgressBar.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TProgressBar.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TProgressBar.Get_Smooth(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Smooth(pVal);
end;

function TProgressBar.Set_Smooth(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Smooth(pVal);
end;

function TProgressBar.Get_State(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_State(pVal);
end;

function TProgressBar.Set_State(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_State(pVal);
end;

function TProgressBar.Get_Marquee(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Marquee(pVal);
end;

function TProgressBar.Set_Marquee(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Marquee(pVal);
end;

function TProgressBar.Get_MarqueeActive(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MarqueeActive(pVal);
end;

function TProgressBar.Set_MarqueeActive(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MarqueeActive(pVal);
end;

function TProgressBar.Get_MarqueeInterval(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarqueeInterval(pVal);
end;

function TProgressBar.Set_MarqueeInterval(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarqueeInterval(pVal);
end;

function TProgressBar.Get_SmoothReverse(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_SmoothReverse(pVal);
end;

function TProgressBar.Set_SmoothReverse(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_SmoothReverse(pVal);
end;

function TProgressBar.Get_BarColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BarColor(pVal);
end;

function TProgressBar.Set_BarColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BarColor(pVal);
end;

function TProgressBar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TProgressBar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TProgressBar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TProgressBar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TProgressBar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TProgressBar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TProgressBar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TProgressBar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TProgressBar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TProgressBar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TProgressBar.StepIt: HResult;
begin
  Result := DefaultInterface.StepIt;
end;

function TProgressBar.StepBy(Delta: Integer): HResult;
begin
  Result := DefaultInterface.StepBy(Delta);
end;

class function CoScrollBar.Create: IScrollBar;
begin
  Result := CreateComObject(CLASS_ScrollBar) as IScrollBar;
end;

class function CoScrollBar.CreateRemote(const MachineName: string): IScrollBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ScrollBar) as IScrollBar;
end;

procedure TScrollBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BDC6FE54-F45E-4DC6-BD98-E0CDF2EE5EC0}';
    IntfIID:   '{FC140361-F789-48AD-AE2B-A4B5A2643FB0}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TScrollBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IScrollBar;
  end;
end;

procedure TScrollBar.ConnectTo(svrIntf: IScrollBar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TScrollBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TScrollBar.GetDefaultInterface: IScrollBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TScrollBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TScrollBar.Destroy;
begin
  inherited Destroy;
end;

procedure TScrollBar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TScrollBar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TScrollBar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TScrollBar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TScrollBar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TScrollBar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TScrollBar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TScrollBar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TScrollBar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TScrollBar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TScrollBar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TScrollBar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TScrollBar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TScrollBar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TScrollBar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TScrollBar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TScrollBar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TScrollBar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TScrollBar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TScrollBar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TScrollBar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TScrollBar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TScrollBar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TScrollBar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TScrollBar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TScrollBar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TScrollBar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TScrollBar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TScrollBar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TScrollBar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TScrollBar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TScrollBar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TScrollBar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TScrollBar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TScrollBar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TScrollBar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TScrollBar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TScrollBar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TScrollBar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TScrollBar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TScrollBar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TScrollBar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TScrollBar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TScrollBar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TScrollBar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TScrollBar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TScrollBar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TScrollBar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TScrollBar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TScrollBar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TScrollBar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TScrollBar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TScrollBar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TScrollBar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TScrollBar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TScrollBar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TScrollBar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TScrollBar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TScrollBar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TScrollBar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TScrollBar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TScrollBar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TScrollBar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TScrollBar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TScrollBar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TScrollBar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TScrollBar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TScrollBar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TScrollBar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TScrollBar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TScrollBar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TScrollBar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TScrollBar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TScrollBar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TScrollBar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TScrollBar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TScrollBar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TScrollBar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TScrollBar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TScrollBar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TScrollBar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TScrollBar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TScrollBar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TScrollBar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TScrollBar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TScrollBar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TScrollBar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TScrollBar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TScrollBar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TScrollBar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TScrollBar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TScrollBar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TScrollBar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TScrollBar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TScrollBar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TScrollBar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TScrollBar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TScrollBar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TScrollBar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TScrollBar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TScrollBar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TScrollBar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TScrollBar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TScrollBar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TScrollBar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TScrollBar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TScrollBar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TScrollBar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TScrollBar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TScrollBar.Get_Min(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TScrollBar.Set_Min(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Min(pVal);
end;

function TScrollBar.Get_Max(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TScrollBar.Set_Max(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Max(pVal);
end;

function TScrollBar.Get_Position(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Position(pVal);
end;

function TScrollBar.Set_Position(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Position(pVal);
end;

function TScrollBar.Get_Step(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Step(pVal);
end;

function TScrollBar.Set_Step(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Step(pVal);
end;

function TScrollBar.Get_Page(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Page(pVal);
end;

function TScrollBar.Set_Page(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Page(pVal);
end;

function TScrollBar.Get_SmallChange(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_SmallChange(pVal);
end;

function TScrollBar.Set_SmallChange(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_SmallChange(pVal);
end;

function TScrollBar.Get_LargeChange(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_LargeChange(pVal);
end;

function TScrollBar.Set_LargeChange(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_LargeChange(pVal);
end;

function TScrollBar.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TScrollBar.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TScrollBar.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TScrollBar.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TScrollBar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TScrollBar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TScrollBar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TScrollBar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TScrollBar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TScrollBar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TScrollBar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TScrollBar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TScrollBar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TScrollBar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TScrollBar.StepIt: HResult;
begin
  Result := DefaultInterface.StepIt;
end;

function TScrollBar.StepBy(Delta: Integer): HResult;
begin
  Result := DefaultInterface.StepBy(Delta);
end;

class function CoTab.Create: ITab;
begin
  Result := CreateComObject(CLASS_Tab) as ITab;
end;

class function CoTab.CreateRemote(const MachineName: string): ITab;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Tab) as ITab;
end;

procedure TTab.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E5CD43B6-862B-4D7D-8C8E-DD7EA77A8FED}';
    IntfIID:   '{F8019994-24F1-475D-8AC4-5A1BCFF213D0}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTab.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ITab;
  end;
end;

procedure TTab.ConnectTo(svrIntf: ITab);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTab.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTab.GetDefaultInterface: ITab;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTab.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTab.Destroy;
begin
  inherited Destroy;
end;

procedure TTab.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TTab.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TTab.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTab.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTab.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TTab.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TTab.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TTab.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TTab.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TTab.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TTab.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TTab.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TTab.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TTab.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TTab.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TTab.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TTab.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TTab.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TTab.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TTab.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TTab.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TTab.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TTab.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TTab.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TTab.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TTab.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TTab.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TTab.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TTab.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TTab.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TTab.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TTab.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TTab.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TTab.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TTab.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TTab.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TTab.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TTab.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TTab.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TTab.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TTab.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TTab._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TTab.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TTab.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TTab.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TTab.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TTab._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TTab.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TTab.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TTab._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TTab.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TTab.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TTab._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TTab.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TTab.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TTab.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TTab.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TTab.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TTab.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TTab.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TTab.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TTab.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TTab.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TTab.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TTab.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TTab.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TTab.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TTab.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TTab.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TTab.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TTab.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TTab.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TTab.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TTab.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TTab.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TTab.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TTab.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TTab.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TTab.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TTab.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TTab.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TTab.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TTab.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TTab.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TTab.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TTab.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TTab.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TTab.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TTab.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TTab.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TTab.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TTab.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TTab.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TTab.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TTab.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TTab.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TTab.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TTab.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TTab.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TTab.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TTab.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TTab.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TTab.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TTab.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TTab.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TTab.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TTab.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TTab.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TTab.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TTab.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TTab.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TTab.Set_BorderWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BorderWidth(pVal);
end;

function TTab.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TTab.Set_BevelWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BevelWidth(pVal);
end;

function TTab.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TTab.Set_BevelOuter(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelOuter(pVal);
end;

function TTab.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TTab.Set_BevelInner(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelInner(pVal);
end;

function TTab.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TTab.Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GraphFont(pVal);
end;

function TTab._Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GraphFont(pVal);
end;

function TTab.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TTab.Set_AutoScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoScroll(pVal);
end;

function TTab.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TTab.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TTab.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TTab.Set_CaptureMouse(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_CaptureMouse(pVal);
end;

function TTab.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TTab.Set_ParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentBackground(pVal);
end;

function TTab.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TTab.Set_BorderParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderParentBackground(pVal);
end;

function TTab.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TTab.Set_AutoSplit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSplit(pVal);
end;

function TTab.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TTab.Set_GroupBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GroupBox(pVal);
end;

function TTab.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TTab.Set_Margin(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Margin(pVal);
end;

function TTab.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TTab.Set_MarginLeft(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginLeft(pVal);
end;

function TTab.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TTab.Set_MarginTop(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginTop(pVal);
end;

function TTab.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TTab.Set_MarginRight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginRight(pVal);
end;

function TTab.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TTab.Set_MarginBottom(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginBottom(pVal);
end;

function TTab.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TTab.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TTab.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TTab.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TTab.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TTab.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TTab.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TTab.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TTab.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TTab.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TTab.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TTab.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TTab.CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TTab.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TTab.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TTab.CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TTab.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TTab.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TTab.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TTab.CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TTab.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              const Url: WideString; const Label_: WideString; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TTab.CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TTab.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   const ID: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TTab.CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer; const ID: WideString; 
                                           const LicKey: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TTab.CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TTab.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TTab.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TTab.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TTab.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Vertical: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TTab.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TTab.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TTab.CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TTab.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TTab.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TTab.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TTab.Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TTab.RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TTab.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TTab.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TTab.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                  nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; 
                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TTab.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TTab.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; nXRadial1: Integer; 
                  nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TTab.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TTab.TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TTab.TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                       const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TTab.DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TTab.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TTab.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                    BevelWidth: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TTab.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TTab.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TTab.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

class function CoTabControl.Create: ITabControl;
begin
  Result := CreateComObject(CLASS_TabControl) as ITabControl;
end;

class function CoTabControl.CreateRemote(const MachineName: string): ITabControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TabControl) as ITabControl;
end;

procedure TTabControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ABCAF236-FA28-4A8A-B913-13E1BF8C8F54}';
    IntfIID:   '{80249C22-E39E-4BF1-A167-8599130D19BA}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTabControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ITabControl;
  end;
end;

procedure TTabControl.ConnectTo(svrIntf: ITabControl);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTabControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTabControl.GetDefaultInterface: ITabControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTabControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTabControl.Destroy;
begin
  inherited Destroy;
end;

procedure TTabControl.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TTabControl.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TTabControl.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTabControl.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTabControl.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TTabControl.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TTabControl.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TTabControl.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TTabControl.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TTabControl.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TTabControl.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TTabControl.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TTabControl.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TTabControl.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TTabControl.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TTabControl.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TTabControl.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TTabControl.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TTabControl.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TTabControl.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TTabControl.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TTabControl.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TTabControl.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TTabControl.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TTabControl.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TTabControl.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TTabControl.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TTabControl.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TTabControl.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TTabControl.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TTabControl.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TTabControl.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TTabControl.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TTabControl.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TTabControl.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TTabControl.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TTabControl.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TTabControl.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TTabControl.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TTabControl.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TTabControl.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TTabControl._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TTabControl.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TTabControl.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TTabControl.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TTabControl.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TTabControl._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TTabControl.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TTabControl.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TTabControl._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TTabControl.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TTabControl.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TTabControl._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TTabControl.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TTabControl.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TTabControl.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TTabControl.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TTabControl.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TTabControl.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TTabControl.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TTabControl.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TTabControl.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TTabControl.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TTabControl.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TTabControl.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TTabControl.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TTabControl.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TTabControl.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TTabControl.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TTabControl.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TTabControl.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TTabControl.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TTabControl.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TTabControl.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TTabControl.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TTabControl.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TTabControl.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TTabControl.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TTabControl.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TTabControl.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TTabControl.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TTabControl.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TTabControl.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TTabControl.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TTabControl.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TTabControl.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TTabControl.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TTabControl.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TTabControl.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TTabControl.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TTabControl.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TTabControl.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TTabControl.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TTabControl.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TTabControl.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TTabControl.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TTabControl.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TTabControl.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TTabControl.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TTabControl.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TTabControl.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TTabControl.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TTabControl.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TTabControl.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TTabControl.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TTabControl.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TTabControl.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TTabControl.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TTabControl.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TTabControl.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TTabControl.Get_ActiveControl(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ActiveControl(pVal);
end;

function TTabControl.Set_ActiveControl(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_ActiveControl(pVal);
end;

function TTabControl._Set_ActiveControl(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_ActiveControl(pVal);
end;

function TTabControl.Get_Buttons(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Buttons(pVal);
end;

function TTabControl.Set_Buttons(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Buttons(pVal);
end;

function TTabControl.Get_MultiLine(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MultiLine(pVal);
end;

function TTabControl.Set_MultiLine(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MultiLine(pVal);
end;

function TTabControl.Get_HotTrack(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HotTrack(pVal);
end;

function TTabControl.Set_HotTrack(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HotTrack(pVal);
end;

function TTabControl.Get_FlatButtons(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FlatButtons(pVal);
end;

function TTabControl.Set_FlatButtons(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FlatButtons(pVal);
end;

function TTabControl.Get_RaggedRight(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_RaggedRight(pVal);
end;

function TTabControl.Set_RaggedRight(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_RaggedRight(pVal);
end;

function TTabControl.Get_TabWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabWidth(pVal);
end;

function TTabControl.Set_TabWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabWidth(pVal);
end;

function TTabControl.Get_TabHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabHeight(pVal);
end;

function TTabControl.Set_TabHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabHeight(pVal);
end;

function TTabControl.Get_ItemIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ItemIndex(pVal);
end;

function TTabControl.Set_ItemIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ItemIndex(pVal);
end;

function TTabControl.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TTabControl.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TTabControl._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TTabControl.Get_TabsVisible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabsVisible(pVal);
end;

function TTabControl.Set_TabsVisible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabsVisible(pVal);
end;

function TTabControl.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TTabControl.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TTabControl.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TTabControl.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TTabControl.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TTabControl.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TTabControl.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TTabControl.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TTabControl.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TTabControl.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TTabControl.CreateTab(const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTab(Text, pControl);
end;

class function CoPageControl.Create: IPageControl;
begin
  Result := CreateComObject(CLASS_PageControl) as IPageControl;
end;

class function CoPageControl.CreateRemote(const MachineName: string): IPageControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageControl) as IPageControl;
end;

procedure TPageControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CD5D4E56-8FEE-46B4-B06A-504087A3353F}';
    IntfIID:   '{A58B708B-DDC5-40BF-AD62-D2B94731BBF3}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPageControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IPageControl;
  end;
end;

procedure TPageControl.ConnectTo(svrIntf: IPageControl);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TPageControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TPageControl.GetDefaultInterface: IPageControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPageControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPageControl.Destroy;
begin
  inherited Destroy;
end;

procedure TPageControl.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TPageControl.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TPageControl.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TPageControl.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TPageControl.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TPageControl.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TPageControl.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TPageControl.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TPageControl.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TPageControl.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TPageControl.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TPageControl.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TPageControl.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TPageControl.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TPageControl.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TPageControl.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TPageControl.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TPageControl.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TPageControl.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TPageControl.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TPageControl.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TPageControl.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TPageControl.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TPageControl.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TPageControl.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TPageControl.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TPageControl.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TPageControl.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TPageControl.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TPageControl.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TPageControl.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TPageControl.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TPageControl.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TPageControl.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TPageControl.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TPageControl.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TPageControl.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TPageControl.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TPageControl.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TPageControl.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TPageControl.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TPageControl._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TPageControl.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TPageControl.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TPageControl.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TPageControl.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TPageControl._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TPageControl.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TPageControl.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TPageControl._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TPageControl.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TPageControl.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TPageControl._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TPageControl.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TPageControl.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TPageControl.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TPageControl.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TPageControl.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TPageControl.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TPageControl.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TPageControl.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TPageControl.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TPageControl.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TPageControl.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TPageControl.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TPageControl.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TPageControl.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TPageControl.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TPageControl.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TPageControl.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TPageControl.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TPageControl.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TPageControl.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TPageControl.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TPageControl.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TPageControl.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TPageControl.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TPageControl.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TPageControl.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TPageControl.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TPageControl.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TPageControl.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TPageControl.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TPageControl.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TPageControl.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TPageControl.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TPageControl.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TPageControl.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TPageControl.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TPageControl.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TPageControl.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TPageControl.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TPageControl.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TPageControl.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TPageControl.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TPageControl.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TPageControl.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TPageControl.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TPageControl.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TPageControl.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TPageControl.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TPageControl.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TPageControl.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TPageControl.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TPageControl.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TPageControl.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TPageControl.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TPageControl.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TPageControl.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TPageControl.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TPageControl.Get_ActiveControl(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ActiveControl(pVal);
end;

function TPageControl.Set_ActiveControl(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_ActiveControl(pVal);
end;

function TPageControl._Set_ActiveControl(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_ActiveControl(pVal);
end;

function TPageControl.Get_Buttons(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Buttons(pVal);
end;

function TPageControl.Set_Buttons(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Buttons(pVal);
end;

function TPageControl.Get_MultiLine(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MultiLine(pVal);
end;

function TPageControl.Set_MultiLine(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MultiLine(pVal);
end;

function TPageControl.Get_HotTrack(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HotTrack(pVal);
end;

function TPageControl.Set_HotTrack(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HotTrack(pVal);
end;

function TPageControl.Get_FlatButtons(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FlatButtons(pVal);
end;

function TPageControl.Set_FlatButtons(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FlatButtons(pVal);
end;

function TPageControl.Get_RaggedRight(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_RaggedRight(pVal);
end;

function TPageControl.Set_RaggedRight(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_RaggedRight(pVal);
end;

function TPageControl.Get_TabWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabWidth(pVal);
end;

function TPageControl.Set_TabWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabWidth(pVal);
end;

function TPageControl.Get_TabHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabHeight(pVal);
end;

function TPageControl.Set_TabHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabHeight(pVal);
end;

function TPageControl.Get_ItemIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ItemIndex(pVal);
end;

function TPageControl.Set_ItemIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ItemIndex(pVal);
end;

function TPageControl.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TPageControl.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TPageControl._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TPageControl.Get_TabsVisible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabsVisible(pVal);
end;

function TPageControl.Set_TabsVisible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabsVisible(pVal);
end;

function TPageControl.Get_TabsAlign(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabsAlign(pVal);
end;

function TPageControl.Set_TabsAlign(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabsAlign(pVal);
end;

function TPageControl.Get_HeaderVisible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HeaderVisible(pVal);
end;

function TPageControl.Set_HeaderVisible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HeaderVisible(pVal);
end;

function TPageControl.Get_TabCloseButton(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabCloseButton(pVal);
end;

function TPageControl.Set_TabCloseButton(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabCloseButton(pVal);
end;

function TPageControl.Get_ShowSingleTab(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ShowSingleTab(pVal);
end;

function TPageControl.Set_ShowSingleTab(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ShowSingleTab(pVal);
end;

function TPageControl.Get_HideClippedTabs(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HideClippedTabs(pVal);
end;

function TPageControl.Set_HideClippedTabs(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HideClippedTabs(pVal);
end;

function TPageControl.Get_TabsDragDrop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabsDragDrop(pVal);
end;

function TPageControl.Set_TabsDragDrop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabsDragDrop(pVal);
end;

function TPageControl.Get_HeaderColors(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_HeaderColors(pVal);
end;

function TPageControl.Get_TabColors(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_TabColors(pVal);
end;

function TPageControl.Get_CloseButtonColors(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_CloseButtonColors(pVal);
end;

function TPageControl.Get_ChevronColors(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ChevronColors(pVal);
end;

function TPageControl.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TPageControl.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TPageControl.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TPageControl.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TPageControl.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TPageControl.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TPageControl.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TPageControl.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TPageControl.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TPageControl.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TPageControl.CreateTab(const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTab(Text, pControl);
end;

class function CoToolBar.Create: IToolBar;
begin
  Result := CreateComObject(CLASS_ToolBar) as IToolBar;
end;

class function CoToolBar.CreateRemote(const MachineName: string): IToolBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolBar) as IToolBar;
end;

procedure TToolBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FEC224BA-A59C-4FFA-A9B0-D082D574213E}';
    IntfIID:   '{EE439DC1-D255-41A8-94E4-0E2F5518562D}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IToolBar;
  end;
end;

procedure TToolBar.ConnectTo(svrIntf: IToolBar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TToolBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TToolBar.GetDefaultInterface: IToolBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TToolBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TToolBar.Destroy;
begin
  inherited Destroy;
end;

procedure TToolBar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TToolBar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TToolBar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TToolBar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TToolBar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TToolBar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TToolBar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TToolBar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TToolBar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TToolBar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TToolBar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TToolBar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TToolBar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TToolBar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TToolBar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TToolBar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TToolBar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TToolBar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TToolBar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TToolBar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TToolBar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TToolBar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TToolBar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TToolBar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TToolBar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TToolBar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TToolBar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TToolBar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TToolBar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TToolBar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TToolBar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TToolBar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TToolBar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TToolBar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TToolBar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TToolBar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TToolBar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TToolBar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TToolBar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TToolBar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TToolBar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TToolBar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TToolBar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TToolBar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TToolBar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TToolBar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TToolBar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TToolBar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TToolBar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TToolBar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TToolBar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TToolBar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TToolBar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TToolBar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TToolBar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TToolBar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TToolBar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TToolBar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TToolBar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TToolBar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TToolBar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TToolBar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TToolBar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TToolBar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TToolBar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TToolBar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TToolBar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TToolBar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TToolBar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TToolBar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TToolBar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TToolBar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TToolBar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TToolBar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TToolBar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TToolBar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TToolBar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TToolBar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TToolBar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TToolBar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TToolBar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TToolBar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TToolBar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TToolBar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TToolBar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TToolBar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TToolBar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TToolBar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TToolBar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TToolBar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TToolBar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TToolBar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TToolBar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TToolBar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TToolBar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TToolBar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TToolBar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TToolBar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TToolBar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TToolBar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TToolBar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TToolBar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TToolBar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TToolBar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TToolBar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TToolBar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TToolBar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TToolBar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TToolBar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TToolBar.Get_Buttons(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Buttons(pVal);
end;

function TToolBar.Set_Buttons(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Buttons(pVal);
end;

function TToolBar._Set_Buttons(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Buttons(pVal);
end;

function TToolBar.Get_Flat(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Flat(pVal);
end;

function TToolBar.Set_Flat(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Flat(pVal);
end;

function TToolBar.Get_ShowText(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ShowText(pVal);
end;

function TToolBar.Set_ShowText(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ShowText(pVal);
end;

function TToolBar.Get_ButtonWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ButtonWidth(pVal);
end;

function TToolBar.Set_ButtonWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ButtonWidth(pVal);
end;

function TToolBar.Get_ButtonHeight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ButtonHeight(pVal);
end;

function TToolBar.Set_ButtonHeight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ButtonHeight(pVal);
end;

function TToolBar.Get_AutoSizeButtons(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSizeButtons(pVal);
end;

function TToolBar.Set_AutoSizeButtons(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSizeButtons(pVal);
end;

function TToolBar.Get_List(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_List(pVal);
end;

function TToolBar.Set_List(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_List(pVal);
end;

function TToolBar.Get_Wrapable(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Wrapable(pVal);
end;

function TToolBar.Set_Wrapable(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Wrapable(pVal);
end;

function TToolBar.Get_AutoSize(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSize(pVal);
end;

function TToolBar.Set_AutoSize(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSize(pVal);
end;

function TToolBar.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TToolBar.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TToolBar.Get_MinButtonWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MinButtonWidth(pVal);
end;

function TToolBar.Set_MinButtonWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MinButtonWidth(pVal);
end;

function TToolBar.Get_MaxButtonWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MaxButtonWidth(pVal);
end;

function TToolBar.Set_MaxButtonWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MaxButtonWidth(pVal);
end;

function TToolBar.Get_MaxTextRows(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MaxTextRows(pVal);
end;

function TToolBar.Set_MaxTextRows(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MaxTextRows(pVal);
end;

function TToolBar.Get_PaddingX(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_PaddingX(pVal);
end;

function TToolBar.Set_PaddingX(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_PaddingX(pVal);
end;

function TToolBar.Get_PaddingY(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_PaddingY(pVal);
end;

function TToolBar.Set_PaddingY(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_PaddingY(pVal);
end;

function TToolBar.Get_ButtonSpacingX(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ButtonSpacingX(pVal);
end;

function TToolBar.Set_ButtonSpacingX(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ButtonSpacingX(pVal);
end;

function TToolBar.Get_ButtonSpacingY(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ButtonSpacingY(pVal);
end;

function TToolBar.Set_ButtonSpacingY(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ButtonSpacingY(pVal);
end;

function TToolBar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TToolBar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TToolBar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TToolBar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TToolBar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TToolBar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TToolBar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TToolBar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TToolBar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TToolBar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoMenuBar.Create: IMenuBar;
begin
  Result := CreateComObject(CLASS_MenuBar) as IMenuBar;
end;

class function CoMenuBar.CreateRemote(const MachineName: string): IMenuBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MenuBar) as IMenuBar;
end;

procedure TMenuBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EAF88191-E418-40A2-A620-E974C8C9FEBC}';
    IntfIID:   '{CD1140FE-95CD-4690-8DB9-48DF5989E8FA}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMenuBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IMenuBar;
  end;
end;

procedure TMenuBar.ConnectTo(svrIntf: IMenuBar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TMenuBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TMenuBar.GetDefaultInterface: IMenuBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TMenuBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TMenuBar.Destroy;
begin
  inherited Destroy;
end;

procedure TMenuBar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TMenuBar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TMenuBar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TMenuBar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TMenuBar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TMenuBar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TMenuBar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TMenuBar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TMenuBar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TMenuBar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TMenuBar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TMenuBar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TMenuBar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TMenuBar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TMenuBar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TMenuBar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TMenuBar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TMenuBar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TMenuBar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TMenuBar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TMenuBar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TMenuBar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TMenuBar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TMenuBar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TMenuBar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TMenuBar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TMenuBar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TMenuBar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TMenuBar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TMenuBar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TMenuBar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TMenuBar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TMenuBar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TMenuBar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TMenuBar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TMenuBar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TMenuBar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TMenuBar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TMenuBar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TMenuBar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TMenuBar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TMenuBar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TMenuBar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TMenuBar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TMenuBar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TMenuBar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TMenuBar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TMenuBar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TMenuBar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TMenuBar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TMenuBar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TMenuBar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TMenuBar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TMenuBar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TMenuBar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TMenuBar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TMenuBar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TMenuBar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TMenuBar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TMenuBar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TMenuBar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TMenuBar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TMenuBar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TMenuBar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TMenuBar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TMenuBar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TMenuBar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TMenuBar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TMenuBar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TMenuBar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TMenuBar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TMenuBar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TMenuBar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TMenuBar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TMenuBar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TMenuBar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TMenuBar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TMenuBar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TMenuBar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TMenuBar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TMenuBar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TMenuBar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TMenuBar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TMenuBar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TMenuBar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TMenuBar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TMenuBar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TMenuBar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TMenuBar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TMenuBar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TMenuBar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TMenuBar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TMenuBar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TMenuBar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TMenuBar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TMenuBar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TMenuBar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TMenuBar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TMenuBar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TMenuBar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TMenuBar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TMenuBar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TMenuBar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TMenuBar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TMenuBar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TMenuBar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TMenuBar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TMenuBar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TMenuBar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TMenuBar.Get_Menu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Menu(pVal);
end;

function TMenuBar.Set_Menu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Menu(pVal);
end;

function TMenuBar._Set_Menu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Menu(pVal);
end;

function TMenuBar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TMenuBar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TMenuBar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TMenuBar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TMenuBar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TMenuBar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TMenuBar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TMenuBar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TMenuBar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TMenuBar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoReBarBand.Create: IReBarBand;
begin
  Result := CreateComObject(CLASS_ReBarBand) as IReBarBand;
end;

class function CoReBarBand.CreateRemote(const MachineName: string): IReBarBand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReBarBand) as IReBarBand;
end;

procedure TReBarBand.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0E865642-DC75-4050-AAAB-C22334DA5D8E}';
    IntfIID:   '{5FFD779C-DF3C-4B7C-BA33-53ED4BE00360}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TReBarBand.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IReBarBand;
  end;
end;

procedure TReBarBand.ConnectTo(svrIntf: IReBarBand);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TReBarBand.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TReBarBand.GetDefaultInterface: IReBarBand;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TReBarBand.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TReBarBand.Destroy;
begin
  inherited Destroy;
end;

function TReBarBand.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TReBarBand.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TReBarBand.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TReBarBand.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TReBarBand.Get_Color(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TReBarBand.Set_Color(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TReBarBand.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TReBarBand.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TReBarBand.Set_Image(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Image(Param1);
end;

function TReBarBand.Get_ParentImage(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentImage(pVal);
end;

function TReBarBand.Set_ParentImage(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentImage(pVal);
end;

function TReBarBand.Get_FixedImage(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FixedImage(pVal);
end;

function TReBarBand.Set_FixedImage(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FixedImage(pVal);
end;

function TReBarBand.Get_FixedSize(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FixedSize(pVal);
end;

function TReBarBand.Set_FixedSize(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FixedSize(pVal);
end;

function TReBarBand.Get_Break(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Break(pVal);
end;

function TReBarBand.Set_Break(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Break(pVal);
end;

function TReBarBand.Get_GripperAlways(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GripperAlways(pVal);
end;

function TReBarBand.Set_GripperAlways(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GripperAlways(pVal);
end;

function TReBarBand.Get_Locked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Locked(pVal);
end;

function TReBarBand.Set_Locked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Locked(pVal);
end;

function TReBarBand.Get_Chevron(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Chevron(pVal);
end;

function TReBarBand.Set_Chevron(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Chevron(pVal);
end;

function TReBarBand.Get_MinWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TReBarBand.Set_MinWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TReBarBand.Get_IdealWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_IdealWidth(pVal);
end;

function TReBarBand.Set_IdealWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_IdealWidth(pVal);
end;

function TReBarBand.Get_Width(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TReBarBand.Set_Width(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TReBarBand.Maximize: HResult;
begin
  Result := DefaultInterface.Maximize;
end;

function TReBarBand.Minimize: HResult;
begin
  Result := DefaultInterface.Minimize;
end;

class function CoReBar.Create: IReBar;
begin
  Result := CreateComObject(CLASS_ReBar) as IReBar;
end;

class function CoReBar.CreateRemote(const MachineName: string): IReBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReBar) as IReBar;
end;

procedure TReBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CB4121D1-C3A2-4B6F-B1C8-A7DD6D56768C}';
    IntfIID:   '{DBD8984A-5CB5-4B3B-94DE-62AF0C20F75F}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TReBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IReBar;
  end;
end;

procedure TReBar.ConnectTo(svrIntf: IReBar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TReBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TReBar.GetDefaultInterface: IReBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TReBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TReBar.Destroy;
begin
  inherited Destroy;
end;

procedure TReBar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TReBar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TReBar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TReBar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TReBar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TReBar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TReBar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TReBar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TReBar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TReBar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TReBar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TReBar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TReBar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TReBar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TReBar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TReBar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TReBar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TReBar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TReBar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TReBar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TReBar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TReBar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TReBar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TReBar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TReBar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TReBar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TReBar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TReBar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TReBar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TReBar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TReBar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TReBar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TReBar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TReBar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TReBar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TReBar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TReBar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TReBar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TReBar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TReBar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TReBar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TReBar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TReBar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TReBar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TReBar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TReBar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TReBar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TReBar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TReBar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TReBar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TReBar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TReBar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TReBar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TReBar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TReBar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TReBar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TReBar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TReBar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TReBar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TReBar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TReBar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TReBar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TReBar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TReBar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TReBar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TReBar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TReBar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TReBar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TReBar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TReBar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TReBar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TReBar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TReBar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TReBar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TReBar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TReBar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TReBar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TReBar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TReBar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TReBar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TReBar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TReBar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TReBar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TReBar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TReBar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TReBar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TReBar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TReBar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TReBar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TReBar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TReBar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TReBar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TReBar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TReBar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TReBar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TReBar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TReBar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TReBar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TReBar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TReBar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TReBar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TReBar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TReBar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TReBar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TReBar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TReBar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TReBar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TReBar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TReBar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TReBar.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TReBar.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TReBar.Set_BorderWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BorderWidth(pVal);
end;

function TReBar.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TReBar.Set_BevelWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BevelWidth(pVal);
end;

function TReBar.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TReBar.Set_BevelOuter(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelOuter(pVal);
end;

function TReBar.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TReBar.Set_BevelInner(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelInner(pVal);
end;

function TReBar.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TReBar.Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GraphFont(pVal);
end;

function TReBar._Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GraphFont(pVal);
end;

function TReBar.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TReBar.Set_AutoScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoScroll(pVal);
end;

function TReBar.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TReBar.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TReBar.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TReBar.Set_CaptureMouse(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_CaptureMouse(pVal);
end;

function TReBar.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TReBar.Set_ParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentBackground(pVal);
end;

function TReBar.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TReBar.Set_BorderParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderParentBackground(pVal);
end;

function TReBar.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TReBar.Set_AutoSplit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSplit(pVal);
end;

function TReBar.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TReBar.Set_GroupBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GroupBox(pVal);
end;

function TReBar.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TReBar.Set_Margin(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Margin(pVal);
end;

function TReBar.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TReBar.Set_MarginLeft(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginLeft(pVal);
end;

function TReBar.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TReBar.Set_MarginTop(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginTop(pVal);
end;

function TReBar.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TReBar.Set_MarginRight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginRight(pVal);
end;

function TReBar.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TReBar.Set_MarginBottom(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginBottom(pVal);
end;

function TReBar.Get_Locked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Locked(pVal);
end;

function TReBar.Set_Locked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Locked(pVal);
end;

function TReBar.Get_InsertNewRow(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_InsertNewRow(pVal);
end;

function TReBar.Set_InsertNewRow(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_InsertNewRow(pVal);
end;

function TReBar.Get_Band(const Control: IDispatch; out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Band(Control, pVal);
end;

function TReBar.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TReBar.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TReBar._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TReBar.Set_Image(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Image(Param1);
end;

function TReBar.Get_FixedOrder(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FixedOrder(pVal);
end;

function TReBar.Set_FixedOrder(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FixedOrder(pVal);
end;

function TReBar.Get_VarHeight(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_VarHeight(pVal);
end;

function TReBar.Set_VarHeight(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_VarHeight(pVal);
end;

function TReBar.Get_BandBorders(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BandBorders(pVal);
end;

function TReBar.Set_BandBorders(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BandBorders(pVal);
end;

function TReBar.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TReBar.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TReBar.Get_DblClkToggle(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DblClkToggle(pVal);
end;

function TReBar.Set_DblClkToggle(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DblClkToggle(pVal);
end;

function TReBar.Get_VerticalGripper(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_VerticalGripper(pVal);
end;

function TReBar.Set_VerticalGripper(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_VerticalGripper(pVal);
end;

function TReBar.Get_AutoLayout(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoLayout(pVal);
end;

function TReBar.Set_AutoLayout(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoLayout(pVal);
end;

function TReBar.Get_RowCount(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_RowCount(pVal);
end;

function TReBar.Get_RowHeight(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_RowHeight(Index, pVal);
end;

function TReBar.Get_BandCount(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BandCount(pVal);
end;

function TReBar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TReBar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TReBar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TReBar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TReBar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TReBar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TReBar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TReBar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TReBar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TReBar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TReBar.CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TReBar.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TReBar.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TReBar.CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TReBar.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                const Url: WideString; const Label_: WideString; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TReBar.CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     const ID: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TReBar.CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; const ID: WideString; 
                                             const LicKey: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TReBar.CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TReBar.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TReBar.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Vertical: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TReBar.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TReBar.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TReBar.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TReBar.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TReBar.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TReBar.Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TReBar.RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TReBar.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TReBar.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TReBar.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; 
                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TReBar.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                      nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TReBar.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TReBar.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TReBar.TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TReBar.TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TReBar.DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TReBar.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TReBar.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                      BevelWidth: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TReBar.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TReBar.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TReBar.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

class function CoHyperLink.Create: IHyperLink;
begin
  Result := CreateComObject(CLASS_HyperLink) as IHyperLink;
end;

class function CoHyperLink.CreateRemote(const MachineName: string): IHyperLink;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HyperLink) as IHyperLink;
end;

procedure THyperLink.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B12C9697-579C-4387-8118-E133CC95011E}';
    IntfIID:   '{ED777BB6-9999-4385-8647-8C72156DC3A1}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure THyperLink.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IHyperLink;
  end;
end;

procedure THyperLink.ConnectTo(svrIntf: IHyperLink);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure THyperLink.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function THyperLink.GetDefaultInterface: IHyperLink;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor THyperLink.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor THyperLink.Destroy;
begin
  inherited Destroy;
end;

procedure THyperLink.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function THyperLink.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function THyperLink.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function THyperLink.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function THyperLink.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function THyperLink.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function THyperLink.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function THyperLink.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function THyperLink.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function THyperLink.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function THyperLink.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function THyperLink.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function THyperLink.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function THyperLink.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function THyperLink.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function THyperLink.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function THyperLink.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function THyperLink.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function THyperLink.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function THyperLink.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function THyperLink.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function THyperLink.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function THyperLink.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function THyperLink.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function THyperLink.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function THyperLink.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function THyperLink.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function THyperLink.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function THyperLink.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function THyperLink.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function THyperLink.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function THyperLink.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function THyperLink.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function THyperLink.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function THyperLink.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function THyperLink.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function THyperLink.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function THyperLink.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function THyperLink.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function THyperLink.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function THyperLink.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function THyperLink._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function THyperLink.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function THyperLink.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function THyperLink.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function THyperLink.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function THyperLink._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function THyperLink.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function THyperLink.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function THyperLink._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function THyperLink.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function THyperLink.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function THyperLink._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function THyperLink.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function THyperLink.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function THyperLink.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function THyperLink.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function THyperLink.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function THyperLink.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function THyperLink.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function THyperLink.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function THyperLink.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function THyperLink.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function THyperLink.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function THyperLink.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function THyperLink.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function THyperLink.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function THyperLink.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function THyperLink.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function THyperLink.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function THyperLink.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function THyperLink.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function THyperLink.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function THyperLink.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function THyperLink.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function THyperLink.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function THyperLink.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function THyperLink.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function THyperLink.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function THyperLink.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function THyperLink.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function THyperLink.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function THyperLink.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function THyperLink.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function THyperLink.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function THyperLink.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function THyperLink.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function THyperLink.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function THyperLink.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function THyperLink.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function THyperLink.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function THyperLink.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function THyperLink.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function THyperLink.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function THyperLink.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function THyperLink.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function THyperLink.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function THyperLink.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function THyperLink.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function THyperLink.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function THyperLink.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function THyperLink.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function THyperLink.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function THyperLink.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function THyperLink.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function THyperLink.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function THyperLink.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function THyperLink.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function THyperLink.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function THyperLink.Get_Url(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Url(pVal);
end;

function THyperLink.Set_Url(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Url(pVal);
end;

function THyperLink.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function THyperLink.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function THyperLink.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function THyperLink.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function THyperLink.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function THyperLink.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function THyperLink.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function THyperLink.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function THyperLink.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function THyperLink.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoPager.Create: IPager;
begin
  Result := CreateComObject(CLASS_Pager) as IPager;
end;

class function CoPager.CreateRemote(const MachineName: string): IPager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Pager) as IPager;
end;

procedure TPager.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EC7D3614-5613-483C-940C-13587EEA9DC7}';
    IntfIID:   '{AD4463D6-4144-4D08-9A41-A296E6264F32}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPager.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IPager;
  end;
end;

procedure TPager.ConnectTo(svrIntf: IPager);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TPager.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TPager.GetDefaultInterface: IPager;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPager.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPager.Destroy;
begin
  inherited Destroy;
end;

procedure TPager.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TPager.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TPager.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TPager.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TPager.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TPager.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TPager.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TPager.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TPager.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TPager.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TPager.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TPager.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TPager.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TPager.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TPager.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TPager.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TPager.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TPager.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TPager.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TPager.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TPager.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TPager.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TPager.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TPager.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TPager.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TPager.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TPager.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TPager.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TPager.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TPager.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TPager.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TPager.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TPager.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TPager.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TPager.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TPager.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TPager.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TPager.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TPager.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TPager.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TPager.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TPager._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TPager.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TPager.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TPager.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TPager.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TPager._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TPager.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TPager.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TPager._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TPager.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TPager.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TPager._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TPager.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TPager.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TPager.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TPager.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TPager.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TPager.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TPager.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TPager.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TPager.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TPager.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TPager.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TPager.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TPager.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TPager.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TPager.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TPager.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TPager.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TPager.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TPager.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TPager.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TPager.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TPager.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TPager.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TPager.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TPager.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TPager.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TPager.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TPager.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TPager.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TPager.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TPager.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TPager.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TPager.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TPager.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TPager.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TPager.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TPager.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TPager.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TPager.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TPager.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TPager.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TPager.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TPager.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TPager.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TPager.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TPager.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TPager.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TPager.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TPager.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TPager.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TPager.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TPager.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TPager.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TPager.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TPager.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TPager.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TPager.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TPager.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TPager.Set_BorderWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BorderWidth(pVal);
end;

function TPager.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TPager.Set_BevelWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BevelWidth(pVal);
end;

function TPager.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TPager.Set_BevelOuter(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelOuter(pVal);
end;

function TPager.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TPager.Set_BevelInner(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelInner(pVal);
end;

function TPager.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TPager.Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GraphFont(pVal);
end;

function TPager._Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GraphFont(pVal);
end;

function TPager.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TPager.Set_AutoScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoScroll(pVal);
end;

function TPager.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TPager.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TPager.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TPager.Set_CaptureMouse(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_CaptureMouse(pVal);
end;

function TPager.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TPager.Set_ParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentBackground(pVal);
end;

function TPager.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TPager.Set_BorderParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderParentBackground(pVal);
end;

function TPager.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TPager.Set_AutoSplit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSplit(pVal);
end;

function TPager.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TPager.Set_GroupBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GroupBox(pVal);
end;

function TPager.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TPager.Set_Margin(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Margin(pVal);
end;

function TPager.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TPager.Set_MarginLeft(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginLeft(pVal);
end;

function TPager.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TPager.Set_MarginTop(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginTop(pVal);
end;

function TPager.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TPager.Set_MarginRight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginRight(pVal);
end;

function TPager.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TPager.Set_MarginBottom(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginBottom(pVal);
end;

function TPager.Get_Control(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Control(pVal);
end;

function TPager.Set_Control(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Control(pVal);
end;

function TPager._Set_Control(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Control(pVal);
end;

function TPager.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TPager.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TPager.Get_ButtonSize(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ButtonSize(pVal);
end;

function TPager.Set_ButtonSize(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ButtonSize(pVal);
end;

function TPager.Get_Position(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Position(pVal);
end;

function TPager.Set_Position(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Position(pVal);
end;

function TPager.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TPager.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TPager.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TPager.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TPager.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TPager.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TPager.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TPager.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TPager.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TPager.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TPager.CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TPager.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               const Text: WideString; Checked: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TPager.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TPager.CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TPager.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TPager.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TPager.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TPager.CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TPager.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                const Url: WideString; const Label_: WideString; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TPager.CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TPager.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     const ID: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TPager.CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; const ID: WideString; 
                                             const LicKey: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TPager.CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TPager.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TPager.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TPager.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TPager.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Vertical: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TPager.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TPager.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TPager.CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                            Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TPager.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TPager.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TPager.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TPager.Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TPager.RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TPager.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TPager.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TPager.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; nYEndArc: Integer; 
                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TPager.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                      nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TPager.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                    nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; nYRadial2: Integer; 
                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TPager.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TPager.TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TPager.TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TPager.DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                          Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TPager.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TPager.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                      BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                      BevelWidth: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TPager.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TPager.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TPager.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

class function CoCOMConnectionPoint.Create: ICOMConnectionPoint;
begin
  Result := CreateComObject(CLASS_COMConnectionPoint) as ICOMConnectionPoint;
end;

class function CoCOMConnectionPoint.CreateRemote(const MachineName: string): ICOMConnectionPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_COMConnectionPoint) as ICOMConnectionPoint;
end;

procedure TCOMConnectionPoint.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A51A9DF7-18C6-4542-90E4-792234E59F66}';
    IntfIID:   '{701F8D53-90B9-4D99-96A2-37C8BB960289}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCOMConnectionPoint.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICOMConnectionPoint;
  end;
end;

procedure TCOMConnectionPoint.ConnectTo(svrIntf: ICOMConnectionPoint);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCOMConnectionPoint.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCOMConnectionPoint.GetDefaultInterface: ICOMConnectionPoint;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCOMConnectionPoint.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TCOMConnectionPoint.Destroy;
begin
  inherited Destroy;
end;

function TCOMConnectionPoint.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TCOMConnectionPoint.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TCOMConnectionPoint.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TCOMConnectionPoint.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TCOMConnectionPoint.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TCOMConnectionPoint.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TCOMConnectionPoint.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TCOMConnectionPoint.RemoveEventHandler(const EventName: WideString; 
                                                EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

class function CoCOMEvents.Create: ICOMEvents;
begin
  Result := CreateComObject(CLASS_COMEvents) as ICOMEvents;
end;

class function CoCOMEvents.CreateRemote(const MachineName: string): ICOMEvents;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_COMEvents) as ICOMEvents;
end;

procedure TCOMEvents.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A038A32E-84D9-4487-A22F-2E214D726B8D}';
    IntfIID:   '{DC2EF81F-A8DF-488D-89C9-DCC67D7B0EE8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCOMEvents.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICOMEvents;
  end;
end;

procedure TCOMEvents.ConnectTo(svrIntf: ICOMEvents);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCOMEvents.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCOMEvents.GetDefaultInterface: ICOMEvents;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCOMEvents.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TCOMEvents.Destroy;
begin
  inherited Destroy;
end;

function TCOMEvents.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TCOMEvents.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TCOMEvents.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TCOMEvents.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TCOMEvents.Get_Item(Index: OleVariant; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TCOMEvents.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TCOMEvents.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TCOMEvents.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

class function CoActiveXControl.Create: IActiveXControl;
begin
  Result := CreateComObject(CLASS_ActiveXControl) as IActiveXControl;
end;

class function CoActiveXControl.CreateRemote(const MachineName: string): IActiveXControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ActiveXControl) as IActiveXControl;
end;

procedure TActiveXControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E797C88E-10F7-4533-8BCE-B21461E4C44E}';
    IntfIID:   '{FF57FCA7-3701-47A2-B309-3C0F5A581CB1}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TActiveXControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IActiveXControl;
  end;
end;

procedure TActiveXControl.ConnectTo(svrIntf: IActiveXControl);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TActiveXControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TActiveXControl.GetDefaultInterface: IActiveXControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TActiveXControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TActiveXControl.Destroy;
begin
  inherited Destroy;
end;

procedure TActiveXControl.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TActiveXControl.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TActiveXControl.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TActiveXControl.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TActiveXControl.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TActiveXControl.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TActiveXControl.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TActiveXControl.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TActiveXControl.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TActiveXControl.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TActiveXControl.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TActiveXControl.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TActiveXControl.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TActiveXControl.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TActiveXControl.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TActiveXControl.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TActiveXControl.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TActiveXControl.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TActiveXControl.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TActiveXControl.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TActiveXControl.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TActiveXControl.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TActiveXControl.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TActiveXControl.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TActiveXControl.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TActiveXControl.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TActiveXControl.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TActiveXControl.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TActiveXControl.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TActiveXControl.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TActiveXControl.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TActiveXControl.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TActiveXControl.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TActiveXControl.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TActiveXControl.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TActiveXControl.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TActiveXControl.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TActiveXControl.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TActiveXControl.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TActiveXControl.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TActiveXControl.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TActiveXControl._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TActiveXControl.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TActiveXControl.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TActiveXControl.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TActiveXControl.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TActiveXControl._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TActiveXControl.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TActiveXControl.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TActiveXControl._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TActiveXControl.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TActiveXControl.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TActiveXControl._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TActiveXControl.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TActiveXControl.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TActiveXControl.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TActiveXControl.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TActiveXControl.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TActiveXControl.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TActiveXControl.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TActiveXControl.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TActiveXControl.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TActiveXControl.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TActiveXControl.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TActiveXControl.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TActiveXControl.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TActiveXControl.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TActiveXControl.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TActiveXControl.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TActiveXControl.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TActiveXControl.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TActiveXControl.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TActiveXControl.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TActiveXControl.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TActiveXControl.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TActiveXControl.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TActiveXControl.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TActiveXControl.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TActiveXControl.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TActiveXControl.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TActiveXControl.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TActiveXControl.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TActiveXControl.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TActiveXControl.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TActiveXControl.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TActiveXControl.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TActiveXControl.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TActiveXControl.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TActiveXControl.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TActiveXControl.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TActiveXControl.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TActiveXControl.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TActiveXControl.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TActiveXControl.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TActiveXControl.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TActiveXControl.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TActiveXControl.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TActiveXControl.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TActiveXControl.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TActiveXControl.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TActiveXControl.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TActiveXControl.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TActiveXControl.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TActiveXControl.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TActiveXControl.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TActiveXControl.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TActiveXControl.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TActiveXControl.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TActiveXControl.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TActiveXControl.Get_Control(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Control(pVal);
end;

function TActiveXControl.Get_Events(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Events(pVal);
end;

function TActiveXControl.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TActiveXControl.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TActiveXControl.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TActiveXControl.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TActiveXControl.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TActiveXControl.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TActiveXControl.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TActiveXControl.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TActiveXControl.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TActiveXControl.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoHeaderItem.Create: IHeaderItem;
begin
  Result := CreateComObject(CLASS_HeaderItem) as IHeaderItem;
end;

class function CoHeaderItem.CreateRemote(const MachineName: string): IHeaderItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HeaderItem) as IHeaderItem;
end;

procedure THeaderItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ADADBEBD-A77F-4F1C-BB8C-3E135A4E7B24}';
    IntfIID:   '{76B856CD-223D-4728-BA49-DCB111DAAA9D}';
    EventIID:  '{A71BDEAC-05C9-4594-854D-671071B3C110}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure THeaderItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IHeaderItem;
  end;
end;

procedure THeaderItem.ConnectTo(svrIntf: IHeaderItem);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure THeaderItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function THeaderItem.GetDefaultInterface: IHeaderItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor THeaderItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor THeaderItem.Destroy;
begin
  inherited Destroy;
end;

procedure THeaderItem.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    3: if Assigned(FOnBeginTrack) then
         FOnBeginTrack(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {const IDispatch});
    4: if Assigned(FOnTrack) then
         FOnTrack(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer},
                  Params[3] {const IDispatch});
    5: if Assigned(FOnDividerDblClick) then
         FOnDividerDblClick(Self,
                            Params[0] {const IDispatch},
                            Params[1] {const IDispatch});
    6: if Assigned(FOnBeginDrag) then
         FOnBeginDrag(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {const IDispatch});
    7: if Assigned(FOnEndDrag) then
         FOnEndDrag(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {const IDispatch});
  end; {case DispID}
end;

function THeaderItem.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function THeaderItem.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function THeaderItem.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function THeaderItem.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function THeaderItem.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function THeaderItem.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function THeaderItem.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function THeaderItem.Get_TextAlign(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TextAlign(pVal);
end;

function THeaderItem.Set_TextAlign(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TextAlign(pVal);
end;

function THeaderItem.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function THeaderItem.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function THeaderItem.Get_DataType(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_DataType(pVal);
end;

function THeaderItem.Set_DataType(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_DataType(pVal);
end;

function THeaderItem.Get_SortType(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SortType(pVal);
end;

function THeaderItem.Set_SortType(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SortType(pVal);
end;

function THeaderItem.Get_Index(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Index(pVal);
end;

function THeaderItem.Get_Owner(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Owner(pVal);
end;

function THeaderItem.Get_Order(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Order(pVal);
end;

function THeaderItem.Set_Order(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Order(pVal);
end;

function THeaderItem.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function THeaderItem.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function THeaderItem.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function THeaderItem.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function THeaderItem.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function THeaderItem.Set_OnBeginTrack(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginTrack(Param1);
end;

function THeaderItem.Set_OnTrack(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnTrack(Param1);
end;

function THeaderItem.Set_OnDividerDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDividerDblClick(Param1);
end;

function THeaderItem.Set_OnBeginDrag(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDrag(Param1);
end;

function THeaderItem.Set_OnEndDrag(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEndDrag(Param1);
end;

function THeaderItem.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function THeaderItem.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

class function CoHeader.Create: IHeader;
begin
  Result := CreateComObject(CLASS_Header) as IHeader;
end;

class function CoHeader.CreateRemote(const MachineName: string): IHeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Header) as IHeader;
end;

procedure THeader.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{778F9702-8567-4F66-A4D8-0982A27DEEA4}';
    IntfIID:   '{F1901A02-8CA0-4446-AC10-D8E9B6A9E573}';
    EventIID:  '{09D9EF1F-9DA1-4E05-9557-B3F692E5775B}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure THeader.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IHeader;
  end;
end;

procedure THeader.ConnectTo(svrIntf: IHeader);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure THeader.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function THeader.GetDefaultInterface: IHeader;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor THeader.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor THeader.Destroy;
begin
  inherited Destroy;
end;

procedure THeader.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
    19: if Assigned(FOnColumnClick) then
         FOnColumnClick(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    20: if Assigned(FOnColumnResize) then
         FOnColumnResize(Self,
                         Params[0] {const IDispatch},
                         Params[1] {const IDispatch});
  end; {case DispID}
end;

function THeader.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function THeader.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function THeader.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function THeader.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function THeader.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function THeader.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function THeader.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function THeader.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function THeader.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function THeader.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function THeader.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function THeader.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function THeader.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function THeader.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function THeader.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function THeader.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function THeader.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function THeader.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function THeader.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function THeader.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function THeader.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function THeader.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function THeader.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function THeader.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function THeader.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function THeader.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function THeader.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function THeader.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function THeader.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function THeader.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function THeader.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function THeader.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function THeader.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function THeader.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function THeader.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function THeader.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function THeader.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function THeader.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function THeader.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function THeader.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function THeader._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function THeader.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function THeader.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function THeader.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function THeader.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function THeader._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function THeader.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function THeader.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function THeader._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function THeader.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function THeader.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function THeader._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function THeader.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function THeader.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function THeader.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function THeader.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function THeader.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function THeader.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function THeader.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function THeader.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function THeader.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function THeader.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function THeader.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function THeader.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function THeader.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function THeader.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function THeader.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function THeader.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function THeader.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function THeader.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function THeader.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function THeader.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function THeader.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function THeader.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function THeader.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function THeader.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function THeader.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function THeader.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function THeader.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function THeader.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function THeader.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function THeader.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function THeader.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function THeader.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function THeader.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function THeader.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function THeader.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function THeader.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function THeader.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function THeader.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function THeader.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function THeader.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function THeader.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function THeader.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function THeader.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function THeader.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function THeader.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function THeader.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function THeader.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function THeader.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function THeader.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function THeader.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function THeader.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function THeader.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function THeader.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function THeader.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function THeader.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function THeader.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function THeader.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function THeader.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function THeader.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function THeader.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function THeader.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function THeader._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function THeader.Get_HotTrack(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HotTrack(pVal);
end;

function THeader.Set_HotTrack(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HotTrack(pVal);
end;

function THeader.Get_Flat(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Flat(pVal);
end;

function THeader.Set_Flat(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Flat(pVal);
end;

function THeader.Get_DragDrop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DragDrop(pVal);
end;

function THeader.Set_DragDrop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DragDrop(pVal);
end;

function THeader.Set_OnColumnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnColumnClick(Param1);
end;

function THeader.Set_OnColumnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnColumnResize(Param1);
end;

function THeader.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function THeader.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function THeader.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function THeader.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function THeader.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function THeader.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function THeader.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function THeader.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function THeader.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function THeader.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function THeader.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function THeader.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function THeader.Add(const Text: WideString; Width: Integer; TextAlign: Integer; 
                     out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Text, Width, TextAlign, pItem);
end;

class function CoListSubItem.Create: IListSubItem;
begin
  Result := CreateComObject(CLASS_ListSubItem) as IListSubItem;
end;

class function CoListSubItem.CreateRemote(const MachineName: string): IListSubItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListSubItem) as IListSubItem;
end;

procedure TListSubItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AA4EF02B-E6A0-4B03-A5E1-845DC086F0F8}';
    IntfIID:   '{8BEFFC8D-A9E8-4699-8E02-64DB4DC78DA2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListSubItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IListSubItem;
  end;
end;

procedure TListSubItem.ConnectTo(svrIntf: IListSubItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TListSubItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TListSubItem.GetDefaultInterface: IListSubItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListSubItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListSubItem.Destroy;
begin
  inherited Destroy;
end;

function TListSubItem.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TListSubItem.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TListSubItem.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TListSubItem.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TListSubItem.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TListSubItem.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TListSubItem._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TListSubItem.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TListSubItem.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

class function CoListItem.Create: IListItem;
begin
  Result := CreateComObject(CLASS_ListItem) as IListItem;
end;

class function CoListItem.CreateRemote(const MachineName: string): IListItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListItem) as IListItem;
end;

procedure TListItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9D8A2B06-9809-4245-BA16-98E838E9851E}';
    IntfIID:   '{1FEE927E-CC8A-4DC0-9B40-E4113CDE5DA9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IListItem;
  end;
end;

procedure TListItem.ConnectTo(svrIntf: IListItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TListItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TListItem.GetDefaultInterface: IListItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListItem.Destroy;
begin
  inherited Destroy;
end;

function TListItem.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TListItem.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TListItem.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TListItem.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TListItem.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TListItem.Get_Selected(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Selected(pVal);
end;

function TListItem.Set_Selected(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Selected(pVal);
end;

function TListItem.Get_Checked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Checked(pVal);
end;

function TListItem.Set_Checked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Checked(pVal);
end;

function TListItem.Get_SubItems(Index: Integer; out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_SubItems(Index, pVal);
end;

function TListItem.Set_SubItems(Index: Integer; const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_SubItems(Index, pVal);
end;

function TListItem.Get_SubItemImage(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SubItemImage(Index, pVal);
end;

function TListItem.Set_SubItemImage(Index: Integer; pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SubItemImage(Index, pVal);
end;

function TListItem.Get_Index(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Index(pVal);
end;

function TListItem.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TListItem.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TListItem.Get_Hint(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TListItem.Set_Hint(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TListItem.Get_Group(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Group(pVal);
end;

function TListItem.Set_Group(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Group(pVal);
end;

function TListItem.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TListItem.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TListItem.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TListItem.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TListItem.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TListItem.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TListItem._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TListItem.Get_TextBkColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TextBkColor(pVal);
end;

function TListItem.Set_TextBkColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TextBkColor(pVal);
end;

function TListItem.Get_SubItemsEx(Index: Integer; out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SubItemsEx(Index, pVal);
end;

function TListItem.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TListItem.SetPosition(Left: LongWord; Top: LongWord): HResult;
begin
  Result := DefaultInterface.SetPosition(Left, Top);
end;

class function CoListViewColumns.Create: IListViewColumns;
begin
  Result := CreateComObject(CLASS_ListViewColumns) as IListViewColumns;
end;

class function CoListViewColumns.CreateRemote(const MachineName: string): IListViewColumns;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListViewColumns) as IListViewColumns;
end;

procedure TListViewColumns.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{796C31A4-0609-4366-BBB8-9D9180CD2F71}';
    IntfIID:   '{1A015BF1-FDE4-49FF-85AE-A142E1239B16}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListViewColumns.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IListViewColumns;
  end;
end;

procedure TListViewColumns.ConnectTo(svrIntf: IListViewColumns);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TListViewColumns.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TListViewColumns.GetDefaultInterface: IListViewColumns;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListViewColumns.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListViewColumns.Destroy;
begin
  inherited Destroy;
end;

function TListViewColumns.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TListViewColumns.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TListViewColumns.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TListViewColumns.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TListViewColumns.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TListViewColumns.Get_Flat(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Flat(pVal);
end;

function TListViewColumns.Set_Flat(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Flat(pVal);
end;

function TListViewColumns.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TListViewColumns.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TListViewColumns.Add(const Text: WideString; Width: Integer; TextAlign: Integer; 
                              out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Text, Width, TextAlign, pItem);
end;

class function CoWorkArea.Create: IWorkArea;
begin
  Result := CreateComObject(CLASS_WorkArea) as IWorkArea;
end;

class function CoWorkArea.CreateRemote(const MachineName: string): IWorkArea;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WorkArea) as IWorkArea;
end;

procedure TWorkArea.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{77927C0A-C35E-4C63-9B04-F911413C3DB5}';
    IntfIID:   '{91CFAE79-1DAB-4194-82FE-314EAF0106B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TWorkArea.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IWorkArea;
  end;
end;

procedure TWorkArea.ConnectTo(svrIntf: IWorkArea);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TWorkArea.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TWorkArea.GetDefaultInterface: IWorkArea;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TWorkArea.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TWorkArea.Destroy;
begin
  inherited Destroy;
end;

function TWorkArea.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TWorkArea.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TWorkArea.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TWorkArea.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TWorkArea.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TWorkArea.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TWorkArea.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TWorkArea.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

class function CoWorkAreas.Create: IWorkAreas;
begin
  Result := CreateComObject(CLASS_WorkAreas) as IWorkAreas;
end;

class function CoWorkAreas.CreateRemote(const MachineName: string): IWorkAreas;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WorkAreas) as IWorkAreas;
end;

procedure TWorkAreas.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5391E972-32C0-4F1C-9F76-7B616530C81C}';
    IntfIID:   '{9A68D6D1-40E8-49A1-8497-E1A93F03A34E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TWorkAreas.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IWorkAreas;
  end;
end;

procedure TWorkAreas.ConnectTo(svrIntf: IWorkAreas);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TWorkAreas.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TWorkAreas.GetDefaultInterface: IWorkAreas;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TWorkAreas.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TWorkAreas.Destroy;
begin
  inherited Destroy;
end;

function TWorkAreas.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TWorkAreas.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TWorkAreas.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TWorkAreas.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TWorkAreas.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TWorkAreas.Add(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                        out Item: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Left, Top, Width, Height, Item);
end;

class function CoListViewGroup.Create: IListViewGroup;
begin
  Result := CreateComObject(CLASS_ListViewGroup) as IListViewGroup;
end;

class function CoListViewGroup.CreateRemote(const MachineName: string): IListViewGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListViewGroup) as IListViewGroup;
end;

procedure TListViewGroup.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B01D41F3-A975-46AC-AC5E-492471995A72}';
    IntfIID:   '{9C37D97F-D003-4235-9284-091565709535}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListViewGroup.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IListViewGroup;
  end;
end;

procedure TListViewGroup.ConnectTo(svrIntf: IListViewGroup);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TListViewGroup.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TListViewGroup.GetDefaultInterface: IListViewGroup;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListViewGroup.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListViewGroup.Destroy;
begin
  inherited Destroy;
end;

function TListViewGroup.Get_Header(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Header(pVal);
end;

function TListViewGroup.Set_Header(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Header(pVal);
end;

function TListViewGroup.Get_SubTitle(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_SubTitle(pVal);
end;

function TListViewGroup.Set_SubTitle(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_SubTitle(pVal);
end;

function TListViewGroup.Get_Task(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Task(pVal);
end;

function TListViewGroup.Set_Task(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Task(pVal);
end;

function TListViewGroup.Get_DescriptionTop(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_DescriptionTop(pVal);
end;

function TListViewGroup.Set_DescriptionTop(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_DescriptionTop(pVal);
end;

function TListViewGroup.Get_DescriptionBottom(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_DescriptionBottom(pVal);
end;

function TListViewGroup.Set_DescriptionBottom(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_DescriptionBottom(pVal);
end;

function TListViewGroup.Get_SubsetTitle(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_SubsetTitle(pVal);
end;

function TListViewGroup.Set_SubsetTitle(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_SubsetTitle(pVal);
end;

function TListViewGroup.Get_Subseted(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Subseted(pVal);
end;

function TListViewGroup.Set_Subseted(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Subseted(pVal);
end;

function TListViewGroup.Get_NoHeader(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoHeader(pVal);
end;

function TListViewGroup.Set_NoHeader(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoHeader(pVal);
end;

function TListViewGroup.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TListViewGroup.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TListViewGroup.Get_Expanded(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Expanded(pVal);
end;

function TListViewGroup.Set_Expanded(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Expanded(pVal);
end;

function TListViewGroup.Get_Collapsible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Collapsible(pVal);
end;

function TListViewGroup.Set_Collapsible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Collapsible(pVal);
end;

function TListViewGroup.Get_HeaderAlign(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_HeaderAlign(pVal);
end;

function TListViewGroup.Set_HeaderAlign(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_HeaderAlign(pVal);
end;

function TListViewGroup.Get_TitleImage(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TitleImage(pVal);
end;

function TListViewGroup.Set_TitleImage(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TitleImage(pVal);
end;

function TListViewGroup.Get_ExtendedImage(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ExtendedImage(pVal);
end;

function TListViewGroup.Set_ExtendedImage(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ExtendedImage(pVal);
end;

function TListViewGroup.Get_Footer(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Footer(pVal);
end;

function TListViewGroup.Set_Footer(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Footer(pVal);
end;

function TListViewGroup.Get_FooterAlign(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_FooterAlign(pVal);
end;

function TListViewGroup.Set_FooterAlign(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_FooterAlign(pVal);
end;

class function CoListViewGroups.Create: IListViewGroups;
begin
  Result := CreateComObject(CLASS_ListViewGroups) as IListViewGroups;
end;

class function CoListViewGroups.CreateRemote(const MachineName: string): IListViewGroups;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListViewGroups) as IListViewGroups;
end;

procedure TListViewGroups.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EA3FDF5E-72FB-458D-AB7D-BFC54F4E9E9E}';
    IntfIID:   '{C1B38DA4-7DE0-4CEC-AFB5-A25980DB88CF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListViewGroups.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IListViewGroups;
  end;
end;

procedure TListViewGroups.ConnectTo(svrIntf: IListViewGroups);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TListViewGroups.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TListViewGroups.GetDefaultInterface: IListViewGroups;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListViewGroups.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListViewGroups.Destroy;
begin
  inherited Destroy;
end;

function TListViewGroups.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TListViewGroups.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TListViewGroups.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TListViewGroups.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TListViewGroups.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TListViewGroups.Add(const Name: WideString; out Item: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Name, Item);
end;

class function CoListView.Create: IListView;
begin
  Result := CreateComObject(CLASS_ListView) as IListView;
end;

class function CoListView.CreateRemote(const MachineName: string): IListView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ListView) as IListView;
end;

procedure TListView.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F10B642B-0248-47AB-98BE-064679369341}';
    IntfIID:   '{98763204-A34A-4206-9151-8DDF2445F52B}';
    EventIID:  '{A55B1FD3-30D4-479B-8F33-3978EB403A0B}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TListView.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IListView;
  end;
end;

procedure TListView.ConnectTo(svrIntf: IListView);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TListView.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TListView.GetDefaultInterface: IListView;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TListView.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TListView.Destroy;
begin
  inherited Destroy;
end;

procedure TListView.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
    19: if Assigned(FOnColumnClick) then
         FOnColumnClick(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    20: if Assigned(FOnColumnResize) then
         FOnColumnResize(Self,
                         Params[0] {const IDispatch},
                         Params[1] {const IDispatch});
    21: if Assigned(FOnData) then
         FOnData(Self,
                 Params[0] {const IDispatch},
                 Params[1] {const IDispatch});
    22: if Assigned(FOnItemCheck) then
         FOnItemCheck(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch});
    23: if Assigned(FOnEdited) then
         FOnEdited(Self,
                   Params[0] {const IDispatch},
                   Params[1] {const IDispatch},
                   IUnknown(TVarData(Params[2]).VPointer) as IResult {const IResult});
    24: if Assigned(FOnBeginEdit) then
         FOnBeginEdit(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      IUnknown(TVarData(Params[2]).VPointer) as IResult {const IResult});
    25: if Assigned(FOnGroupLinkClick) then
         FOnGroupLinkClick(Self,
                           Params[0] {const IDispatch},
                           Params[1] {const IDispatch});
    26: if Assigned(FOnDrawItem) then
         FOnDrawItem(Self,
                     Params[0] {const IDispatch},
                     Params[1] {const IDispatch});
    27: if Assigned(FOnSubItemEdited) then
         FOnSubItemEdited(Self,
                          Params[0] {const IDispatch},
                          Params[1] {const IDispatch},
                          Params[2] {Integer},
                          IUnknown(TVarData(Params[3]).VPointer) as IResult {const IResult});
    28: if Assigned(FOnBeginSubItemEdit) then
         FOnBeginSubItemEdit(Self,
                             Params[0] {const IDispatch},
                             Params[1] {const IDispatch},
                             Params[2] {Integer},
                             IUnknown(TVarData(Params[3]).VPointer) as IResult {const IResult});
  end; {case DispID}
end;

function TListView.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TListView.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TListView.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TListView.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TListView.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TListView.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TListView.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TListView.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TListView.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TListView.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TListView.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TListView.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TListView.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TListView.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TListView.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TListView.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TListView.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TListView.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TListView.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TListView.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TListView.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TListView.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TListView.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TListView.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TListView.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TListView.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TListView.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TListView.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TListView.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TListView.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TListView.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TListView.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TListView.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TListView.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TListView.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TListView.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TListView.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TListView.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TListView.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TListView.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TListView._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TListView.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TListView.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TListView.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TListView.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TListView._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TListView.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TListView.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TListView._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TListView.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TListView.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TListView._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TListView.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TListView.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TListView.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TListView.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TListView.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TListView.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TListView.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TListView.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TListView.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TListView.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TListView.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TListView.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TListView.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TListView.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TListView.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TListView.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TListView.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TListView.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TListView.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TListView.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TListView.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TListView.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TListView.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TListView.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TListView.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TListView.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TListView.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TListView.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TListView.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TListView.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TListView.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TListView.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TListView.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TListView.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TListView.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TListView.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TListView.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TListView.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TListView.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TListView.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TListView.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TListView.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TListView.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TListView.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TListView.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TListView.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TListView.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TListView.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TListView.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TListView.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TListView.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TListView.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TListView.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TListView.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TListView.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TListView.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TListView.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TListView.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TListView.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TListView.Set_Count(pcount: Integer): HResult;
begin
  Result := DefaultInterface.Set_Count(pcount);
end;

function TListView.Get_LargeImages(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_LargeImages(pVal);
end;

function TListView.Set_LargeImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_LargeImages(pVal);
end;

function TListView._Set_LargeImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_LargeImages(pVal);
end;

function TListView.Get_SmallImages(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SmallImages(pVal);
end;

function TListView.Set_SmallImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_SmallImages(pVal);
end;

function TListView._Set_SmallImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_SmallImages(pVal);
end;

function TListView.Get_StateImages(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_StateImages(pVal);
end;

function TListView.Set_StateImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_StateImages(pVal);
end;

function TListView._Set_StateImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_StateImages(pVal);
end;

function TListView.Get_Style(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Style(pVal);
end;

function TListView.Set_Style(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Style(pVal);
end;

function TListView.Get_TextBkColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TextBkColor(pVal);
end;

function TListView.Set_TextBkColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TextBkColor(pVal);
end;

function TListView.Get_MultiSelect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MultiSelect(pVal);
end;

function TListView.Set_MultiSelect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MultiSelect(pVal);
end;

function TListView.Get_HideSelection(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HideSelection(pVal);
end;

function TListView.Set_HideSelection(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HideSelection(pVal);
end;

function TListView.Get_SelCount(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelCount(pVal);
end;

function TListView.Get_ItemIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ItemIndex(pVal);
end;

function TListView.Set_ItemIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ItemIndex(pVal);
end;

function TListView.Get_Columns(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Columns(pVal);
end;

function TListView.Get_CheckBoxes(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CheckBoxes(pVal);
end;

function TListView.Set_CheckBoxes(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CheckBoxes(pVal);
end;

function TListView.Get_GridLines(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GridLines(pVal);
end;

function TListView.Set_GridLines(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GridLines(pVal);
end;

function TListView.Get_HotTrack(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HotTrack(pVal);
end;

function TListView.Set_HotTrack(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HotTrack(pVal);
end;

function TListView.Get_RowSelect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_RowSelect(pVal);
end;

function TListView.Set_RowSelect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_RowSelect(pVal);
end;

function TListView.Get_BorderSelect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderSelect(pVal);
end;

function TListView.Set_BorderSelect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderSelect(pVal);
end;

function TListView.Get_FlatScrollBars(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FlatScrollBars(pVal);
end;

function TListView.Set_FlatScrollBars(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FlatScrollBars(pVal);
end;

function TListView.Get_OwnerData(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_OwnerData(pVal);
end;

function TListView.Set_OwnerData(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_OwnerData(pVal);
end;

function TListView.Get_ReadOnly(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ReadOnly(pVal);
end;

function TListView.Set_ReadOnly(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ReadOnly(pVal);
end;

function TListView.Get_WrapText(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_WrapText(pVal);
end;

function TListView.Set_WrapText(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_WrapText(pVal);
end;

function TListView.Get_Arrangement(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Arrangement(pVal);
end;

function TListView.Set_Arrangement(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Arrangement(pVal);
end;

function TListView.Get_HeaderDragDrop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HeaderDragDrop(pVal);
end;

function TListView.Set_HeaderDragDrop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HeaderDragDrop(pVal);
end;

function TListView.Get_InfoTip(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_InfoTip(pVal);
end;

function TListView.Set_InfoTip(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_InfoTip(pVal);
end;

function TListView.Set_BackgroundImage(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_BackgroundImage(Param1);
end;

function TListView.Get_WorkAreas(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_WorkAreas(pVal);
end;

function TListView.Get_Groups(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Groups(pVal);
end;

function TListView.Get_TileLines(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TileLines(pVal);
end;

function TListView.Set_TileLines(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TileLines(pVal);
end;

function TListView.Get_TileWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TileWidth(pVal);
end;

function TListView.Set_TileWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TileWidth(pVal);
end;

function TListView.Get_TileHeight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TileHeight(pVal);
end;

function TListView.Set_TileHeight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TileHeight(pVal);
end;

function TListView.Get_DoubleBuffering(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DoubleBuffering(pVal);
end;

function TListView.Set_DoubleBuffering(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DoubleBuffering(pVal);
end;

function TListView.Get_TransparentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TransparentBackground(pVal);
end;

function TListView.Set_TransparentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TransparentBackground(pVal);
end;

function TListView.Get_GroupHeaderImages(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GroupHeaderImages(pVal);
end;

function TListView.Set_GroupHeaderImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GroupHeaderImages(pVal);
end;

function TListView._Set_GroupHeaderImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GroupHeaderImages(pVal);
end;

function TListView.Get_IconSpacingWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_IconSpacingWidth(pVal);
end;

function TListView.Set_IconSpacingWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_IconSpacingWidth(pVal);
end;

function TListView.Get_IconSpacingHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_IconSpacingHeight(pVal);
end;

function TListView.Set_IconSpacingHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_IconSpacingHeight(pVal);
end;

function TListView.Get_CustomDraw(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CustomDraw(pVal);
end;

function TListView.Set_CustomDraw(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CustomDraw(pVal);
end;

function TListView.Get_ReadOnlySubItems(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ReadOnlySubItems(pVal);
end;

function TListView.Set_ReadOnlySubItems(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ReadOnlySubItems(pVal);
end;

function TListView.Get_QuickEdit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_QuickEdit(pVal);
end;

function TListView.Set_QuickEdit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_QuickEdit(pVal);
end;

function TListView.Get_CheckByMouse(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CheckByMouse(pVal);
end;

function TListView.Set_CheckByMouse(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CheckByMouse(pVal);
end;

function TListView.Set_OnColumnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnColumnClick(Param1);
end;

function TListView.Set_OnColumnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnColumnResize(Param1);
end;

function TListView.Set_OnData(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnData(Param1);
end;

function TListView.Set_OnItemCheck(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnItemCheck(Param1);
end;

function TListView.Set_OnEdited(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEdited(Param1);
end;

function TListView.Set_OnBeginEdit(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginEdit(Param1);
end;

function TListView.Set_OnGroupLinkClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnGroupLinkClick(Param1);
end;

function TListView.Set_OnDrawItem(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDrawItem(Param1);
end;

function TListView.Set_OnSubItemEdited(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSubItemEdited(Param1);
end;

function TListView.Set_OnBeginSubItemEdit(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginSubItemEdit(Param1);
end;

function TListView.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TListView.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TListView.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TListView.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TListView.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TListView.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TListView.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TListView.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TListView.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TListView.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TListView.Add(const Text: WideString; out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Text, pItem);
end;

function TListView.Insert(Index: Integer; const Text: WideString; out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Insert(Index, Text, pItem);
end;

function TListView.Remove(Index: Integer): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TListView.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TListView.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TListView.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TListView.SelectAll: HResult;
begin
  Result := DefaultInterface.SelectAll;
end;

function TListView.ClearSelection: HResult;
begin
  Result := DefaultInterface.ClearSelection;
end;

function TListView.EditItem(Index: Integer): HResult;
begin
  Result := DefaultInterface.EditItem(Index);
end;

function TListView.Sort(DataType: Integer; Reverse: WordBool; Column: LongWord): HResult;
begin
  Result := DefaultInterface.Sort(DataType, Reverse, Column);
end;

function TListView.Arrange: HResult;
begin
  Result := DefaultInterface.Arrange;
end;

class function CoTreeItem.Create: ITreeItem;
begin
  Result := CreateComObject(CLASS_TreeItem) as ITreeItem;
end;

class function CoTreeItem.CreateRemote(const MachineName: string): ITreeItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TreeItem) as ITreeItem;
end;

procedure TTreeItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7E418404-66BE-4BAD-BF58-5FF5C2EC6461}';
    IntfIID:   '{FFFF9989-481D-4921-949C-B283BD06CB44}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTreeItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ITreeItem;
  end;
end;

procedure TTreeItem.ConnectTo(svrIntf: ITreeItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTreeItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTreeItem.GetDefaultInterface: ITreeItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTreeItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTreeItem.Destroy;
begin
  inherited Destroy;
end;

function TTreeItem.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TTreeItem.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TTreeItem.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TTreeItem.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TTreeItem.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TTreeItem.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TTreeItem.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TTreeItem.Get_SelectedImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelectedImageIndex(pVal);
end;

function TTreeItem.Set_SelectedImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelectedImageIndex(pVal);
end;

function TTreeItem.Get_Selected(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Selected(pVal);
end;

function TTreeItem.Set_Selected(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Selected(pVal);
end;

function TTreeItem.Get_Expanded(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Expanded(pVal);
end;

function TTreeItem.Set_Expanded(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Expanded(pVal);
end;

function TTreeItem.Get_Bold(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Bold(pVal);
end;

function TTreeItem.Set_Bold(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Bold(pVal);
end;

function TTreeItem.Get_Checked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Checked(pVal);
end;

function TTreeItem.Set_Checked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Checked(pVal);
end;

function TTreeItem.Get_HasChildren(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HasChildren(pVal);
end;

function TTreeItem.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TTreeItem.Get_NextSibling(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_NextSibling(pVal);
end;

function TTreeItem.Get_PrevSibling(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PrevSibling(pVal);
end;

function TTreeItem.Get_FirstChild(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_FirstChild(pVal);
end;

function TTreeItem.Get_LastChild(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_LastChild(pVal);
end;

function TTreeItem.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTreeItem.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTreeItem.Get_Hint(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TTreeItem.Set_Hint(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TTreeItem.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TTreeItem.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TTreeItem._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TTreeItem.Get_TextBkColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TextBkColor(pVal);
end;

function TTreeItem.Set_TextBkColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TextBkColor(pVal);
end;

function TTreeItem.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TTreeItem.Add(const Text: WideString; ImageIndex: Integer; SelectedImageIndex: Integer; 
                       out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Text, ImageIndex, SelectedImageIndex, pItem);
end;

function TTreeItem.Insert(Index: Integer; const Text: WideString; ImageIndex: Integer; 
                          SelectedImageIndex: Integer; out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Insert(Index, Text, ImageIndex, SelectedImageIndex, pItem);
end;

function TTreeItem.Remove(Index: Integer): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TTreeItem.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TTreeItem.Expand(Recurse: WordBool): HResult;
begin
  Result := DefaultInterface.Expand(Recurse);
end;

function TTreeItem.Collapse: HResult;
begin
  Result := DefaultInterface.Collapse;
end;

function TTreeItem.EditLabel: HResult;
begin
  Result := DefaultInterface.EditLabel;
end;

function TTreeItem.Sort(Recurse: WordBool): HResult;
begin
  Result := DefaultInterface.Sort(Recurse);
end;

function TTreeItem.MakeVisible: HResult;
begin
  Result := DefaultInterface.MakeVisible;
end;

function TTreeItem.ShowHint: HResult;
begin
  Result := DefaultInterface.ShowHint;
end;

class function CoTreeView.Create: ITreeView;
begin
  Result := CreateComObject(CLASS_TreeView) as ITreeView;
end;

class function CoTreeView.CreateRemote(const MachineName: string): ITreeView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TreeView) as ITreeView;
end;

procedure TTreeView.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EC4E51B8-FD99-4567-B7AF-35923BA873D3}';
    IntfIID:   '{A6034589-820F-4165-9EEE-AE1E97BFB9B1}';
    EventIID:  '{FFC21772-F6D8-4AFC-A2F4-362C11DF0019}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTreeView.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ITreeView;
  end;
end;

procedure TTreeView.ConnectTo(svrIntf: ITreeView);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTreeView.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTreeView.GetDefaultInterface: ITreeView;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTreeView.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTreeView.Destroy;
begin
  inherited Destroy;
end;

procedure TTreeView.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
    19: if Assigned(FOnEdited) then
         FOnEdited(Self,
                   Params[0] {const IDispatch},
                   Params[1] {const IDispatch},
                   IUnknown(TVarData(Params[2]).VPointer) as IResult {const IResult});
    20: if Assigned(FOnExpanding) then
         FOnExpanding(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch});
    21: if Assigned(FOnExpanded) then
         FOnExpanded(Self,
                     Params[0] {const IDispatch},
                     Params[1] {const IDispatch});
    22: if Assigned(FOnCollapsing) then
         FOnCollapsing(Self,
                       Params[0] {const IDispatch},
                       Params[1] {const IDispatch});
    23: if Assigned(FOnCollapsed) then
         FOnCollapsed(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch});
    24: if Assigned(FOnItemCheck) then
         FOnItemCheck(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch});
    25: if Assigned(FOnBeginEdit) then
         FOnBeginEdit(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      IUnknown(TVarData(Params[2]).VPointer) as IResult {const IResult});
    26: if Assigned(FOnDrawItem) then
         FOnDrawItem(Self,
                     Params[0] {const IDispatch},
                     Params[1] {const IDispatch});
  end; {case DispID}
end;

function TTreeView.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TTreeView.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTreeView.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTreeView.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TTreeView.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TTreeView.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TTreeView.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TTreeView.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TTreeView.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TTreeView.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TTreeView.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TTreeView.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TTreeView.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TTreeView.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TTreeView.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TTreeView.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TTreeView.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TTreeView.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TTreeView.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TTreeView.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TTreeView.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TTreeView.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TTreeView.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TTreeView.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TTreeView.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TTreeView.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TTreeView.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TTreeView.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TTreeView.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TTreeView.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TTreeView.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TTreeView.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TTreeView.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TTreeView.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TTreeView.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TTreeView.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TTreeView.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TTreeView.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TTreeView.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TTreeView.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TTreeView._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TTreeView.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TTreeView.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TTreeView.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TTreeView.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TTreeView._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TTreeView.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TTreeView.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TTreeView._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TTreeView.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TTreeView.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TTreeView._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TTreeView.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TTreeView.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TTreeView.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TTreeView.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TTreeView.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TTreeView.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TTreeView.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TTreeView.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TTreeView.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TTreeView.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TTreeView.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TTreeView.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TTreeView.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TTreeView.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TTreeView.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TTreeView.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TTreeView.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TTreeView.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TTreeView.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TTreeView.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TTreeView.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TTreeView.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TTreeView.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TTreeView.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TTreeView.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TTreeView.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TTreeView.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TTreeView.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TTreeView.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TTreeView.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TTreeView.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TTreeView.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TTreeView.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TTreeView.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TTreeView.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TTreeView.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TTreeView.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TTreeView.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TTreeView.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TTreeView.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TTreeView.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TTreeView.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TTreeView.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TTreeView.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TTreeView.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TTreeView.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TTreeView.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TTreeView.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TTreeView.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TTreeView.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TTreeView.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TTreeView.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TTreeView.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TTreeView.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TTreeView.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TTreeView.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TTreeView.Get_Items(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Items(pVal);
end;

function TTreeView.Get_SelectedItem(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SelectedItem(pVal);
end;

function TTreeView.Get_TopItem(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_TopItem(pVal);
end;

function TTreeView.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TTreeView.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TTreeView.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TTreeView._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TTreeView.Get_StateImages(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_StateImages(pVal);
end;

function TTreeView.Set_StateImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_StateImages(pVal);
end;

function TTreeView._Set_StateImages(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_StateImages(pVal);
end;

function TTreeView.Get_HasButtons(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HasButtons(pVal);
end;

function TTreeView.Set_HasButtons(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HasButtons(pVal);
end;

function TTreeView.Get_HasLines(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HasLines(pVal);
end;

function TTreeView.Set_HasLines(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HasLines(pVal);
end;

function TTreeView.Get_LinesAtRoot(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_LinesAtRoot(pVal);
end;

function TTreeView.Set_LinesAtRoot(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_LinesAtRoot(pVal);
end;

function TTreeView.Get_ReadOnly(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ReadOnly(pVal);
end;

function TTreeView.Set_ReadOnly(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ReadOnly(pVal);
end;

function TTreeView.Get_CheckBoxes(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CheckBoxes(pVal);
end;

function TTreeView.Set_CheckBoxes(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CheckBoxes(pVal);
end;

function TTreeView.Get_HotTrack(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HotTrack(pVal);
end;

function TTreeView.Set_HotTrack(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HotTrack(pVal);
end;

function TTreeView.Get_RowSelect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_RowSelect(pVal);
end;

function TTreeView.Set_RowSelect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_RowSelect(pVal);
end;

function TTreeView.Get_HideSelection(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HideSelection(pVal);
end;

function TTreeView.Set_HideSelection(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HideSelection(pVal);
end;

function TTreeView.Get_AutoExpand(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoExpand(pVal);
end;

function TTreeView.Set_AutoExpand(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoExpand(pVal);
end;

function TTreeView.Get_InfoTip(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_InfoTip(pVal);
end;

function TTreeView.Set_InfoTip(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_InfoTip(pVal);
end;

function TTreeView.Get_CustomDraw(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CustomDraw(pVal);
end;

function TTreeView.Set_CustomDraw(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CustomDraw(pVal);
end;

function TTreeView.Get_DoubleBuffering(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DoubleBuffering(pVal);
end;

function TTreeView.Set_DoubleBuffering(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DoubleBuffering(pVal);
end;

function TTreeView.Get_NoIndentState(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoIndentState(pVal);
end;

function TTreeView.Set_NoIndentState(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoIndentState(pVal);
end;

function TTreeView.Get_AutoHScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoHScroll(pVal);
end;

function TTreeView.Set_AutoHScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoHScroll(pVal);
end;

function TTreeView.Set_OnEdited(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEdited(Param1);
end;

function TTreeView.Set_OnExpanding(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnExpanding(Param1);
end;

function TTreeView.Set_OnExpanded(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnExpanded(Param1);
end;

function TTreeView.Set_OnCollapsing(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnCollapsing(Param1);
end;

function TTreeView.Set_OnCollapsed(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnCollapsed(Param1);
end;

function TTreeView.Set_OnItemCheck(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnItemCheck(Param1);
end;

function TTreeView.Set_OnBeginEdit(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginEdit(Param1);
end;

function TTreeView.Set_OnDrawItem(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDrawItem(Param1);
end;

function TTreeView.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TTreeView.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TTreeView.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TTreeView.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TTreeView.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TTreeView.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TTreeView.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TTreeView.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TTreeView.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TTreeView.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TTreeView.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TTreeView.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

class function CoParagraph.Create: IParagraph;
begin
  Result := CreateComObject(CLASS_Paragraph) as IParagraph;
end;

class function CoParagraph.CreateRemote(const MachineName: string): IParagraph;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Paragraph) as IParagraph;
end;

procedure TParagraph.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{011C3F5F-B0DE-43C1-AB98-E39A866581F8}';
    IntfIID:   '{C15C0ABE-967F-4A17-9EA9-BC68A2855C0D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TParagraph.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IParagraph;
  end;
end;

procedure TParagraph.ConnectTo(svrIntf: IParagraph);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TParagraph.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TParagraph.GetDefaultInterface: IParagraph;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TParagraph.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TParagraph.Destroy;
begin
  inherited Destroy;
end;

function TParagraph.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TParagraph.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TParagraph.Get_Numbering(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Numbering(pVal);
end;

function TParagraph.Set_Numbering(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Numbering(pVal);
end;

function TParagraph.Get_StartIndent(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_StartIndent(pVal);
end;

function TParagraph.Set_StartIndent(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_StartIndent(pVal);
end;

function TParagraph.Get_LeftIndent(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_LeftIndent(pVal);
end;

function TParagraph.Set_LeftIndent(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_LeftIndent(pVal);
end;

function TParagraph.Get_RightIndent(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_RightIndent(pVal);
end;

function TParagraph.Set_RightIndent(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_RightIndent(pVal);
end;

class function CoRichEdit.Create: IRichEdit;
begin
  Result := CreateComObject(CLASS_RichEdit) as IRichEdit;
end;

class function CoRichEdit.CreateRemote(const MachineName: string): IRichEdit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RichEdit) as IRichEdit;
end;

procedure TRichEdit.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A7E24C6A-70FD-49EC-88C1-9CB154A5694A}';
    IntfIID:   '{C775712D-FA95-49EE-971D-6DD3BE4FE703}';
    EventIID:  '{B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRichEdit.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IRichEdit;
  end;
end;

procedure TRichEdit.ConnectTo(svrIntf: IRichEdit);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TRichEdit.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TRichEdit.GetDefaultInterface: IRichEdit;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TRichEdit.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TRichEdit.Destroy;
begin
  inherited Destroy;
end;

procedure TRichEdit.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
    19: if Assigned(FOnSelChange) then
         FOnSelChange(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TRichEdit.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TRichEdit.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TRichEdit.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TRichEdit.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TRichEdit.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TRichEdit.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TRichEdit.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TRichEdit.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TRichEdit.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TRichEdit.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TRichEdit.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TRichEdit.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TRichEdit.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TRichEdit.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TRichEdit.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TRichEdit.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TRichEdit.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TRichEdit.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TRichEdit.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TRichEdit.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TRichEdit.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TRichEdit.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TRichEdit.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TRichEdit.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TRichEdit.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TRichEdit.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TRichEdit.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TRichEdit.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TRichEdit.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TRichEdit.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TRichEdit.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TRichEdit.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TRichEdit.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TRichEdit.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TRichEdit.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TRichEdit.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TRichEdit.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TRichEdit.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TRichEdit.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TRichEdit.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TRichEdit._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TRichEdit.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TRichEdit.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TRichEdit.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TRichEdit.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TRichEdit._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TRichEdit.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TRichEdit.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TRichEdit._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TRichEdit.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TRichEdit.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TRichEdit._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TRichEdit.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TRichEdit.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TRichEdit.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TRichEdit.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TRichEdit.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TRichEdit.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TRichEdit.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TRichEdit.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TRichEdit.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TRichEdit.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TRichEdit.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TRichEdit.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TRichEdit.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TRichEdit.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TRichEdit.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TRichEdit.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TRichEdit.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TRichEdit.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TRichEdit.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TRichEdit.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TRichEdit.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TRichEdit.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TRichEdit.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TRichEdit.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TRichEdit.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TRichEdit.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TRichEdit.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TRichEdit.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TRichEdit.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TRichEdit.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TRichEdit.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TRichEdit.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TRichEdit.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TRichEdit.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TRichEdit.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TRichEdit.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TRichEdit.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TRichEdit.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TRichEdit.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TRichEdit.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TRichEdit.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TRichEdit.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TRichEdit.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TRichEdit.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TRichEdit.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TRichEdit.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TRichEdit.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TRichEdit.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TRichEdit.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TRichEdit.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TRichEdit.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TRichEdit.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TRichEdit.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TRichEdit.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TRichEdit.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TRichEdit.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TRichEdit.Get_TopIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TopIndex(pVal);
end;

function TRichEdit.Set_TopIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TopIndex(pVal);
end;

function TRichEdit.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TRichEdit.Get_Item(Index: Integer; out pvar: WideString): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TRichEdit.Set_Item(Index: Integer; const pvar: WideString): HResult;
begin
  Result := DefaultInterface.Set_Item(Index, pvar);
end;

function TRichEdit.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TRichEdit.Get_ReadOnly(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ReadOnly(pVal);
end;

function TRichEdit.Set_ReadOnly(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ReadOnly(pVal);
end;

function TRichEdit.Get_MaxLength(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_MaxLength(pVal);
end;

function TRichEdit.Set_MaxLength(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_MaxLength(pVal);
end;

function TRichEdit.Get_CharCase(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_CharCase(pVal);
end;

function TRichEdit.Set_CharCase(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_CharCase(pVal);
end;

function TRichEdit.Get_PasswordChar(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_PasswordChar(pVal);
end;

function TRichEdit.Set_PasswordChar(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_PasswordChar(pVal);
end;

function TRichEdit.Get_HideSelection(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HideSelection(pVal);
end;

function TRichEdit.Set_HideSelection(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HideSelection(pVal);
end;

function TRichEdit.Get_MultiLine(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MultiLine(pVal);
end;

function TRichEdit.Set_MultiLine(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MultiLine(pVal);
end;

function TRichEdit.Get_ScrollBars(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ScrollBars(pVal);
end;

function TRichEdit.Set_ScrollBars(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ScrollBars(pVal);
end;

function TRichEdit.Get_AutoSize(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSize(pVal);
end;

function TRichEdit.Set_AutoSize(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSize(pVal);
end;

function TRichEdit.Get_Modified(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Modified(pVal);
end;

function TRichEdit.Set_Modified(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Modified(pVal);
end;

function TRichEdit.Get_SelStart(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelStart(pVal);
end;

function TRichEdit.Set_SelStart(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelStart(pVal);
end;

function TRichEdit.Get_SelEnd(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelEnd(pVal);
end;

function TRichEdit.Set_SelEnd(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelEnd(pVal);
end;

function TRichEdit.Get_SelLength(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelLength(pVal);
end;

function TRichEdit.Set_SelLength(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelLength(pVal);
end;

function TRichEdit.Get_LeftMargin(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_LeftMargin(pVal);
end;

function TRichEdit.Set_LeftMargin(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_LeftMargin(pVal);
end;

function TRichEdit.Get_RightMargin(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_RightMargin(pVal);
end;

function TRichEdit.Set_RightMargin(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_RightMargin(pVal);
end;

function TRichEdit.Get_WordWrap(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_WordWrap(pVal);
end;

function TRichEdit.Set_WordWrap(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_WordWrap(pVal);
end;

function TRichEdit.Get_TextAlign(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_TextAlign(pVal);
end;

function TRichEdit.Set_TextAlign(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_TextAlign(pVal);
end;

function TRichEdit.Get_CanUndo(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanUndo(pVal);
end;

function TRichEdit.Set_CanUndo(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CanUndo(pVal);
end;

function TRichEdit.Get_CanPaste(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanPaste(pVal);
end;

function TRichEdit.Get_DataType(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_DataType(pVal);
end;

function TRichEdit.Set_DataType(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_DataType(pVal);
end;

function TRichEdit.Get_Min(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TRichEdit.Set_Min(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Min(pVal);
end;

function TRichEdit.Get_Max(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TRichEdit.Set_Max(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Max(pVal);
end;

function TRichEdit.Get_LineFromChar(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_LineFromChar(Index, pVal);
end;

function TRichEdit.Get_AcceptsReturn(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AcceptsReturn(pVal);
end;

function TRichEdit.Set_AcceptsReturn(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AcceptsReturn(pVal);
end;

function TRichEdit.Get_AcceptsTab(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AcceptsTab(pVal);
end;

function TRichEdit.Set_AcceptsTab(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AcceptsTab(pVal);
end;

function TRichEdit.Get_AutoHeight(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoHeight(pVal);
end;

function TRichEdit.Set_AutoHeight(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoHeight(pVal);
end;

function TRichEdit.Get_CueBanner(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_CueBanner(pVal);
end;

function TRichEdit.Set_CueBanner(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_CueBanner(pVal);
end;

function TRichEdit.Get_CueBannerAlwaysVisible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CueBannerAlwaysVisible(pVal);
end;

function TRichEdit.Set_CueBannerAlwaysVisible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CueBannerAlwaysVisible(pVal);
end;

function TRichEdit.Get_BalloonTip(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_BalloonTip(pVal);
end;

function TRichEdit.Get_SelFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SelFont(pVal);
end;

function TRichEdit.Set_SelFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_SelFont(pVal);
end;

function TRichEdit._Set_SelFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_SelFont(pVal);
end;

function TRichEdit.Get_Paragraph(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Paragraph(pVal);
end;

function TRichEdit.Get_AutoURLDetect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoURLDetect(pVal);
end;

function TRichEdit.Set_AutoURLDetect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoURLDetect(pVal);
end;

function TRichEdit.Get_CanRedo(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanRedo(pVal);
end;

function TRichEdit.Get_UndoLimit(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_UndoLimit(pVal);
end;

function TRichEdit.Set_UndoLimit(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_UndoLimit(pVal);
end;

function TRichEdit.Set_OnSelChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSelChange(Param1);
end;

function TRichEdit.Get_PageRotate(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_PageRotate(pVal);
end;

function TRichEdit.Set_PageRotate(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_PageRotate(pVal);
end;

function TRichEdit.Get_UndoName(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_UndoName(pVal);
end;

function TRichEdit.Get_UndoNameString(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_UndoNameString(pVal);
end;

function TRichEdit.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TRichEdit.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TRichEdit.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TRichEdit.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TRichEdit.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TRichEdit.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TRichEdit.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TRichEdit.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TRichEdit.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TRichEdit.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TRichEdit.Add(const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Add(Item, pItemIndex);
end;

function TRichEdit.Remove(Index: Integer): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TRichEdit.Insert(Index: Integer; const Item: WideString; out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Insert(Index, Item, pItemIndex);
end;

function TRichEdit.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TRichEdit.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TRichEdit.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TRichEdit.ExChange(A: Integer; B: Integer): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TRichEdit.Sort(DataType: Integer; Reverse: WordBool): HResult;
begin
  Result := DefaultInterface.Sort(DataType, Reverse);
end;

function TRichEdit.Find(const Text: WideString; Start: Integer; IgnoreCase: WordBool; 
                        out pItemIndex: Integer): HResult;
begin
  Result := DefaultInterface.Find(Text, Start, IgnoreCase, pItemIndex);
end;

function TRichEdit.SelectAll: HResult;
begin
  Result := DefaultInterface.SelectAll;
end;

function TRichEdit.ClearSelection: HResult;
begin
  Result := DefaultInterface.ClearSelection;
end;

function TRichEdit.ReplaceSelection(const NewText: WideString; CanUndo: WordBool): HResult;
begin
  Result := DefaultInterface.ReplaceSelection(NewText, CanUndo);
end;

function TRichEdit.Undo: HResult;
begin
  Result := DefaultInterface.Undo;
end;

function TRichEdit.Cut: HResult;
begin
  Result := DefaultInterface.Cut;
end;

function TRichEdit.Copy: HResult;
begin
  Result := DefaultInterface.Copy;
end;

function TRichEdit.Paste: HResult;
begin
  Result := DefaultInterface.Paste;
end;

function TRichEdit.FindText(const Text: WideString; Flags: LongWord; MinPos: Integer; 
                            MaxPos: Integer; out pResult: Integer): HResult;
begin
  Result := DefaultInterface.FindText(Text, Flags, MinPos, MaxPos, pResult);
end;

function TRichEdit.Load(Stream: OleVariant; Flags: LongWord; out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.Load(Stream, Flags, pResult);
end;

function TRichEdit.Save(Stream: OleVariant; Flags: LongWord; out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.Save(Stream, Flags, pResult);
end;

function TRichEdit.Redo: HResult;
begin
  Result := DefaultInterface.Redo;
end;

function TRichEdit.Print(const Driver: WideString; const Device: WideString; 
                         const PrintInfo: IDispatch; Selection: WordBool): HResult;
begin
  Result := DefaultInterface.Print(Driver, Device, PrintInfo, Selection);
end;

class function CoUpDown.Create: IUpDown;
begin
  Result := CreateComObject(CLASS_UpDown) as IUpDown;
end;

class function CoUpDown.CreateRemote(const MachineName: string): IUpDown;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UpDown) as IUpDown;
end;

procedure TUpDown.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CF0349E6-1D95-407F-AB16-A7E7655A4E29}';
    IntfIID:   '{F09EE7EC-728F-4D8B-AE8E-0F5A113FD36E}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUpDown.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IUpDown;
  end;
end;

procedure TUpDown.ConnectTo(svrIntf: IUpDown);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TUpDown.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TUpDown.GetDefaultInterface: IUpDown;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUpDown.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUpDown.Destroy;
begin
  inherited Destroy;
end;

procedure TUpDown.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TUpDown.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TUpDown.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TUpDown.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TUpDown.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TUpDown.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TUpDown.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TUpDown.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TUpDown.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TUpDown.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TUpDown.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TUpDown.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TUpDown.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TUpDown.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TUpDown.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TUpDown.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TUpDown.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TUpDown.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TUpDown.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TUpDown.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TUpDown.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TUpDown.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TUpDown.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TUpDown.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TUpDown.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TUpDown.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TUpDown.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TUpDown.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TUpDown.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TUpDown.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TUpDown.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TUpDown.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TUpDown.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TUpDown.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TUpDown.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TUpDown.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TUpDown.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TUpDown.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TUpDown.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TUpDown.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TUpDown.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TUpDown._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TUpDown.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TUpDown.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TUpDown.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TUpDown.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TUpDown._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TUpDown.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TUpDown.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TUpDown._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TUpDown.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TUpDown.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TUpDown._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TUpDown.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TUpDown.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TUpDown.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TUpDown.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TUpDown.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TUpDown.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TUpDown.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TUpDown.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TUpDown.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TUpDown.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TUpDown.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TUpDown.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TUpDown.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TUpDown.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TUpDown.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TUpDown.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TUpDown.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TUpDown.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TUpDown.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TUpDown.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TUpDown.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TUpDown.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TUpDown.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TUpDown.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TUpDown.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TUpDown.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TUpDown.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TUpDown.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TUpDown.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TUpDown.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TUpDown.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TUpDown.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TUpDown.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TUpDown.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TUpDown.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TUpDown.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TUpDown.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TUpDown.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TUpDown.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TUpDown.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TUpDown.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TUpDown.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TUpDown.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TUpDown.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TUpDown.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TUpDown.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TUpDown.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TUpDown.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TUpDown.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TUpDown.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TUpDown.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TUpDown.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TUpDown.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TUpDown.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TUpDown.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TUpDown.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TUpDown.Get_Min(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TUpDown.Set_Min(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Min(pVal);
end;

function TUpDown.Get_Max(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TUpDown.Set_Max(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Max(pVal);
end;

function TUpDown.Get_Position(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Position(pVal);
end;

function TUpDown.Set_Position(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Position(pVal);
end;

function TUpDown.Get_Step(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Step(pVal);
end;

function TUpDown.Set_Step(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Step(pVal);
end;

function TUpDown.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TUpDown.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TUpDown.Get_HotTrack(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HotTrack(pVal);
end;

function TUpDown.Set_HotTrack(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HotTrack(pVal);
end;

function TUpDown.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TUpDown.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TUpDown.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TUpDown.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TUpDown.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TUpDown.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TUpDown.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TUpDown.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TUpDown.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TUpDown.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TUpDown.StepIt: HResult;
begin
  Result := DefaultInterface.StepIt;
end;

function TUpDown.StepBy(Delta: Integer): HResult;
begin
  Result := DefaultInterface.StepBy(Delta);
end;

class function CoTrackBar.Create: ITrackBar;
begin
  Result := CreateComObject(CLASS_TrackBar) as ITrackBar;
end;

class function CoTrackBar.CreateRemote(const MachineName: string): ITrackBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TrackBar) as ITrackBar;
end;

procedure TTrackBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A8C81557-CFD6-44B0-9052-7796F14C8BC8}';
    IntfIID:   '{D47DC012-3D4E-4412-8A06-E747160435E0}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTrackBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ITrackBar;
  end;
end;

procedure TTrackBar.ConnectTo(svrIntf: ITrackBar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTrackBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTrackBar.GetDefaultInterface: ITrackBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTrackBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTrackBar.Destroy;
begin
  inherited Destroy;
end;

procedure TTrackBar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TTrackBar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TTrackBar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTrackBar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTrackBar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TTrackBar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TTrackBar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TTrackBar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TTrackBar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TTrackBar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TTrackBar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TTrackBar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TTrackBar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TTrackBar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TTrackBar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TTrackBar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TTrackBar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TTrackBar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TTrackBar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TTrackBar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TTrackBar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TTrackBar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TTrackBar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TTrackBar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TTrackBar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TTrackBar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TTrackBar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TTrackBar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TTrackBar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TTrackBar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TTrackBar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TTrackBar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TTrackBar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TTrackBar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TTrackBar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TTrackBar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TTrackBar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TTrackBar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TTrackBar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TTrackBar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TTrackBar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TTrackBar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TTrackBar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TTrackBar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TTrackBar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TTrackBar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TTrackBar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TTrackBar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TTrackBar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TTrackBar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TTrackBar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TTrackBar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TTrackBar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TTrackBar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TTrackBar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TTrackBar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TTrackBar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TTrackBar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TTrackBar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TTrackBar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TTrackBar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TTrackBar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TTrackBar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TTrackBar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TTrackBar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TTrackBar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TTrackBar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TTrackBar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TTrackBar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TTrackBar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TTrackBar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TTrackBar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TTrackBar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TTrackBar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TTrackBar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TTrackBar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TTrackBar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TTrackBar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TTrackBar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TTrackBar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TTrackBar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TTrackBar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TTrackBar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TTrackBar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TTrackBar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TTrackBar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TTrackBar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TTrackBar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TTrackBar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TTrackBar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TTrackBar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TTrackBar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TTrackBar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TTrackBar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TTrackBar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TTrackBar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TTrackBar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TTrackBar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TTrackBar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TTrackBar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TTrackBar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TTrackBar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TTrackBar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TTrackBar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TTrackBar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TTrackBar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TTrackBar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TTrackBar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TTrackBar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TTrackBar.Get_Min(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TTrackBar.Set_Min(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Min(pVal);
end;

function TTrackBar.Get_Max(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TTrackBar.Set_Max(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Max(pVal);
end;

function TTrackBar.Get_Position(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Position(pVal);
end;

function TTrackBar.Set_Position(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Position(pVal);
end;

function TTrackBar.Get_Step(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Step(pVal);
end;

function TTrackBar.Set_Step(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Step(pVal);
end;

function TTrackBar.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TTrackBar.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TTrackBar.Get_TickMarks(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TickMarks(pVal);
end;

function TTrackBar.Set_TickMarks(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TickMarks(pVal);
end;

function TTrackBar.Get_SmallChange(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_SmallChange(pVal);
end;

function TTrackBar.Set_SmallChange(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_SmallChange(pVal);
end;

function TTrackBar.Get_LargeChange(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_LargeChange(pVal);
end;

function TTrackBar.Set_LargeChange(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_LargeChange(pVal);
end;

function TTrackBar.Get_ThumbLength(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ThumbLength(pVal);
end;

function TTrackBar.Set_ThumbLength(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ThumbLength(pVal);
end;

function TTrackBar.Get_TickFrequency(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TickFrequency(pVal);
end;

function TTrackBar.Set_TickFrequency(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TickFrequency(pVal);
end;

function TTrackBar.Get_EnableSelRange(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_EnableSelRange(pVal);
end;

function TTrackBar.Set_EnableSelRange(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_EnableSelRange(pVal);
end;

function TTrackBar.Get_SelStart(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelStart(pVal);
end;

function TTrackBar.Set_SelStart(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelStart(pVal);
end;

function TTrackBar.Get_SelEnd(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelEnd(pVal);
end;

function TTrackBar.Set_SelEnd(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelEnd(pVal);
end;

function TTrackBar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TTrackBar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TTrackBar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TTrackBar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TTrackBar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TTrackBar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TTrackBar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TTrackBar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TTrackBar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TTrackBar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TTrackBar.StepIt: HResult;
begin
  Result := DefaultInterface.StepIt;
end;

function TTrackBar.StepBy(Delta: Integer): HResult;
begin
  Result := DefaultInterface.StepBy(Delta);
end;

function TTrackBar.SelectAll: HResult;
begin
  Result := DefaultInterface.SelectAll;
end;

function TTrackBar.ClearSelection: HResult;
begin
  Result := DefaultInterface.ClearSelection;
end;

class function CoHotKey.Create: IHotKey;
begin
  Result := CreateComObject(CLASS_HotKey) as IHotKey;
end;

class function CoHotKey.CreateRemote(const MachineName: string): IHotKey;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HotKey) as IHotKey;
end;

procedure THotKey.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A1D64491-07E0-495A-9D75-A70E9CB74660}';
    IntfIID:   '{E9013635-B5D5-48D7-81A4-41D3AFF5A717}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure THotKey.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IHotKey;
  end;
end;

procedure THotKey.ConnectTo(svrIntf: IHotKey);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure THotKey.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function THotKey.GetDefaultInterface: IHotKey;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor THotKey.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor THotKey.Destroy;
begin
  inherited Destroy;
end;

procedure THotKey.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function THotKey.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function THotKey.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function THotKey.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function THotKey.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function THotKey.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function THotKey.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function THotKey.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function THotKey.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function THotKey.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function THotKey.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function THotKey.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function THotKey.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function THotKey.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function THotKey.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function THotKey.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function THotKey.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function THotKey.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function THotKey.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function THotKey.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function THotKey.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function THotKey.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function THotKey.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function THotKey.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function THotKey.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function THotKey.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function THotKey.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function THotKey.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function THotKey.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function THotKey.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function THotKey.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function THotKey.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function THotKey.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function THotKey.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function THotKey.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function THotKey.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function THotKey.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function THotKey.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function THotKey.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function THotKey.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function THotKey.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function THotKey._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function THotKey.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function THotKey.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function THotKey.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function THotKey.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function THotKey._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function THotKey.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function THotKey.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function THotKey._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function THotKey.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function THotKey.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function THotKey._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function THotKey.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function THotKey.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function THotKey.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function THotKey.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function THotKey.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function THotKey.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function THotKey.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function THotKey.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function THotKey.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function THotKey.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function THotKey.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function THotKey.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function THotKey.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function THotKey.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function THotKey.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function THotKey.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function THotKey.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function THotKey.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function THotKey.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function THotKey.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function THotKey.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function THotKey.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function THotKey.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function THotKey.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function THotKey.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function THotKey.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function THotKey.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function THotKey.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function THotKey.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function THotKey.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function THotKey.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function THotKey.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function THotKey.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function THotKey.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function THotKey.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function THotKey.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function THotKey.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function THotKey.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function THotKey.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function THotKey.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function THotKey.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function THotKey.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function THotKey.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function THotKey.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function THotKey.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function THotKey.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function THotKey.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function THotKey.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function THotKey.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function THotKey.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function THotKey.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function THotKey.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function THotKey.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function THotKey.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function THotKey.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function THotKey.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function THotKey.Get_Key(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Key(pVal);
end;

function THotKey.Set_Key(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Key(pVal);
end;

function THotKey.Get_InvalidKeys(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_InvalidKeys(pVal);
end;

function THotKey.Set_InvalidKeys(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_InvalidKeys(pVal);
end;

function THotKey.Get_DefaultKey(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_DefaultKey(pVal);
end;

function THotKey.Set_DefaultKey(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_DefaultKey(pVal);
end;

function THotKey.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function THotKey.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function THotKey.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function THotKey.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function THotKey.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function THotKey.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function THotKey.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function THotKey.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function THotKey.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function THotKey.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoAnimate.Create: IAnimate;
begin
  Result := CreateComObject(CLASS_Animate) as IAnimate;
end;

class function CoAnimate.CreateRemote(const MachineName: string): IAnimate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Animate) as IAnimate;
end;

procedure TAnimate.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AA404E97-A554-477B-A43B-89E52A39A857}';
    IntfIID:   '{CD27766E-91BF-4D27-BA1E-CBFE3CB55BD1}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAnimate.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IAnimate;
  end;
end;

procedure TAnimate.ConnectTo(svrIntf: IAnimate);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAnimate.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAnimate.GetDefaultInterface: IAnimate;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TAnimate.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TAnimate.Destroy;
begin
  inherited Destroy;
end;

procedure TAnimate.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TAnimate.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TAnimate.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TAnimate.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TAnimate.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TAnimate.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TAnimate.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TAnimate.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TAnimate.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TAnimate.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TAnimate.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TAnimate.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TAnimate.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TAnimate.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TAnimate.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TAnimate.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TAnimate.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TAnimate.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TAnimate.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TAnimate.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TAnimate.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TAnimate.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TAnimate.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TAnimate.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TAnimate.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TAnimate.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TAnimate.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TAnimate.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TAnimate.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TAnimate.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TAnimate.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TAnimate.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TAnimate.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TAnimate.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TAnimate.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TAnimate.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TAnimate.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TAnimate.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TAnimate.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TAnimate.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TAnimate.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TAnimate._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TAnimate.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TAnimate.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TAnimate.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TAnimate.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TAnimate._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TAnimate.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TAnimate.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TAnimate._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TAnimate.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TAnimate.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TAnimate._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TAnimate.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TAnimate.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TAnimate.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TAnimate.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TAnimate.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TAnimate.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TAnimate.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TAnimate.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TAnimate.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TAnimate.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TAnimate.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TAnimate.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TAnimate.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TAnimate.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TAnimate.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TAnimate.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TAnimate.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TAnimate.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TAnimate.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TAnimate.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TAnimate.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TAnimate.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TAnimate.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TAnimate.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TAnimate.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TAnimate.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TAnimate.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TAnimate.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TAnimate.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TAnimate.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TAnimate.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TAnimate.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TAnimate.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TAnimate.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TAnimate.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TAnimate.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TAnimate.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TAnimate.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TAnimate.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TAnimate.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TAnimate.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TAnimate.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TAnimate.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TAnimate.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TAnimate.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TAnimate.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TAnimate.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TAnimate.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TAnimate.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TAnimate.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TAnimate.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TAnimate.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TAnimate.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TAnimate.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TAnimate.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TAnimate.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TAnimate.Get_AutoRepeat(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoRepeat(pVal);
end;

function TAnimate.Set_AutoRepeat(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoRepeat(pVal);
end;

function TAnimate.Get_Transparent(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Transparent(pVal);
end;

function TAnimate.Set_Transparent(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Transparent(pVal);
end;

function TAnimate.Get_Center(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Center(pVal);
end;

function TAnimate.Set_Center(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Center(pVal);
end;

function TAnimate.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TAnimate.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TAnimate.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TAnimate.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TAnimate.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TAnimate.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TAnimate.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TAnimate.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TAnimate.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TAnimate.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TAnimate.Open(newVal: OleVariant; StartPlay: WordBool; out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.Open(newVal, StartPlay, pResult);
end;

function TAnimate.Play: HResult;
begin
  Result := DefaultInterface.Play;
end;

function TAnimate.Stop: HResult;
begin
  Result := DefaultInterface.Stop;
end;

function TAnimate.Close: HResult;
begin
  Result := DefaultInterface.Close;
end;

function TAnimate.Seek(Position: Integer): HResult;
begin
  Result := DefaultInterface.Seek(Position);
end;

class function CoIPAddress.Create: IIPAddress;
begin
  Result := CreateComObject(CLASS_IPAddress) as IIPAddress;
end;

class function CoIPAddress.CreateRemote(const MachineName: string): IIPAddress;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_IPAddress) as IIPAddress;
end;

procedure TIPAddress.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0BFAA6C7-85DB-4604-B347-D22BBF1ED539}';
    IntfIID:   '{CCC32DB0-A7E0-4947-A757-9534AB58027F}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TIPAddress.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IIPAddress;
  end;
end;

procedure TIPAddress.ConnectTo(svrIntf: IIPAddress);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TIPAddress.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TIPAddress.GetDefaultInterface: IIPAddress;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TIPAddress.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TIPAddress.Destroy;
begin
  inherited Destroy;
end;

procedure TIPAddress.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TIPAddress.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TIPAddress.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TIPAddress.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TIPAddress.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TIPAddress.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TIPAddress.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TIPAddress.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TIPAddress.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TIPAddress.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TIPAddress.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TIPAddress.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TIPAddress.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TIPAddress.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TIPAddress.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TIPAddress.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TIPAddress.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TIPAddress.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TIPAddress.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TIPAddress.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TIPAddress.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TIPAddress.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TIPAddress.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TIPAddress.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TIPAddress.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TIPAddress.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TIPAddress.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TIPAddress.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TIPAddress.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TIPAddress.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TIPAddress.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TIPAddress.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TIPAddress.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TIPAddress.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TIPAddress.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TIPAddress.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TIPAddress.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TIPAddress.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TIPAddress.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TIPAddress.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TIPAddress.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TIPAddress._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TIPAddress.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TIPAddress.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TIPAddress.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TIPAddress.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TIPAddress._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TIPAddress.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TIPAddress.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TIPAddress._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TIPAddress.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TIPAddress.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TIPAddress._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TIPAddress.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TIPAddress.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TIPAddress.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TIPAddress.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TIPAddress.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TIPAddress.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TIPAddress.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TIPAddress.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TIPAddress.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TIPAddress.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TIPAddress.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TIPAddress.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TIPAddress.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TIPAddress.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TIPAddress.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TIPAddress.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TIPAddress.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TIPAddress.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TIPAddress.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TIPAddress.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TIPAddress.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TIPAddress.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TIPAddress.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TIPAddress.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TIPAddress.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TIPAddress.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TIPAddress.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TIPAddress.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TIPAddress.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TIPAddress.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TIPAddress.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TIPAddress.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TIPAddress.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TIPAddress.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TIPAddress.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TIPAddress.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TIPAddress.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TIPAddress.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TIPAddress.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TIPAddress.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TIPAddress.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TIPAddress.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TIPAddress.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TIPAddress.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TIPAddress.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TIPAddress.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TIPAddress.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TIPAddress.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TIPAddress.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TIPAddress.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TIPAddress.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TIPAddress.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TIPAddress.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TIPAddress.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TIPAddress.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TIPAddress.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TIPAddress.Get_Value(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TIPAddress.Set_Value(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Value(pVal);
end;

function TIPAddress.Get_IsBlank(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IsBlank(pVal);
end;

function TIPAddress.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TIPAddress.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TIPAddress.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TIPAddress.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TIPAddress.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TIPAddress.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TIPAddress.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TIPAddress.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TIPAddress.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TIPAddress.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TIPAddress.SetRange(Index: Integer; Min: Byte; Max: Byte): HResult;
begin
  Result := DefaultInterface.SetRange(Index, Min, Max);
end;

class function CoDateTime.Create: IDateTime;
begin
  Result := CreateComObject(CLASS_DateTime) as IDateTime;
end;

class function CoDateTime.CreateRemote(const MachineName: string): IDateTime;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DateTime) as IDateTime;
end;

procedure TDateTime.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C7D11662-B228-4F86-B3CE-BF46105C11DE}';
    IntfIID:   '{E5197962-B022-4902-B92C-B46F2CCC8875}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDateTime.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDateTime;
  end;
end;

procedure TDateTime.ConnectTo(svrIntf: IDateTime);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDateTime.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDateTime.GetDefaultInterface: IDateTime;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TDateTime.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TDateTime.Destroy;
begin
  inherited Destroy;
end;

function TDateTime.Get_Value(out pVal: TDateTime): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TDateTime.Set_Value(pVal: TDateTime): HResult;
begin
  Result := DefaultInterface.Set_Value(pVal);
end;

function TDateTime.Get_Year(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Year(pVal);
end;

function TDateTime.Set_Year(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Year(pVal);
end;

function TDateTime.Get_Month(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Month(pVal);
end;

function TDateTime.Set_Month(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Month(pVal);
end;

function TDateTime.Get_Day(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Day(pVal);
end;

function TDateTime.Set_Day(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Day(pVal);
end;

function TDateTime.Get_Hour(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Hour(pVal);
end;

function TDateTime.Set_Hour(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Hour(pVal);
end;

function TDateTime.Get_Minute(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Minute(pVal);
end;

function TDateTime.Set_Minute(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Minute(pVal);
end;

function TDateTime.Get_Second(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Second(pVal);
end;

function TDateTime.Set_Second(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Second(pVal);
end;

function TDateTime.Get_Milliseconds(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Milliseconds(pVal);
end;

function TDateTime.Set_Milliseconds(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Milliseconds(pVal);
end;

class function CoDateTimePicker.Create: IDateTimePicker;
begin
  Result := CreateComObject(CLASS_DateTimePicker) as IDateTimePicker;
end;

class function CoDateTimePicker.CreateRemote(const MachineName: string): IDateTimePicker;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DateTimePicker) as IDateTimePicker;
end;

procedure TDateTimePicker.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BF5ABFD2-861D-46C5-8D8B-71CEEF71C304}';
    IntfIID:   '{7FCABADD-F460-4049-ABBC-79821C613284}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDateTimePicker.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IDateTimePicker;
  end;
end;

procedure TDateTimePicker.ConnectTo(svrIntf: IDateTimePicker);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TDateTimePicker.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TDateTimePicker.GetDefaultInterface: IDateTimePicker;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TDateTimePicker.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TDateTimePicker.Destroy;
begin
  inherited Destroy;
end;

procedure TDateTimePicker.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TDateTimePicker.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TDateTimePicker.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TDateTimePicker.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TDateTimePicker.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TDateTimePicker.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TDateTimePicker.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TDateTimePicker.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TDateTimePicker.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TDateTimePicker.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TDateTimePicker.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TDateTimePicker.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TDateTimePicker.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TDateTimePicker.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TDateTimePicker.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TDateTimePicker.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TDateTimePicker.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TDateTimePicker.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TDateTimePicker.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TDateTimePicker.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TDateTimePicker.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TDateTimePicker.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TDateTimePicker.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TDateTimePicker.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TDateTimePicker.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TDateTimePicker.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TDateTimePicker.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TDateTimePicker.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TDateTimePicker.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TDateTimePicker.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TDateTimePicker.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TDateTimePicker.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TDateTimePicker.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TDateTimePicker.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TDateTimePicker.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TDateTimePicker.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TDateTimePicker.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TDateTimePicker.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TDateTimePicker.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TDateTimePicker.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TDateTimePicker.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TDateTimePicker._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TDateTimePicker.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TDateTimePicker.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TDateTimePicker.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TDateTimePicker.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TDateTimePicker._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TDateTimePicker.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TDateTimePicker.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TDateTimePicker._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TDateTimePicker.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TDateTimePicker.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TDateTimePicker._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TDateTimePicker.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TDateTimePicker.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TDateTimePicker.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TDateTimePicker.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TDateTimePicker.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TDateTimePicker.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TDateTimePicker.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TDateTimePicker.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TDateTimePicker.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TDateTimePicker.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TDateTimePicker.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TDateTimePicker.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TDateTimePicker.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TDateTimePicker.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TDateTimePicker.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TDateTimePicker.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TDateTimePicker.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TDateTimePicker.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TDateTimePicker.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TDateTimePicker.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TDateTimePicker.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TDateTimePicker.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TDateTimePicker.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TDateTimePicker.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TDateTimePicker.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TDateTimePicker.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TDateTimePicker.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TDateTimePicker.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TDateTimePicker.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TDateTimePicker.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TDateTimePicker.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TDateTimePicker.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TDateTimePicker.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TDateTimePicker.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TDateTimePicker.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TDateTimePicker.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TDateTimePicker.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TDateTimePicker.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TDateTimePicker.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TDateTimePicker.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TDateTimePicker.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TDateTimePicker.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TDateTimePicker.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TDateTimePicker.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TDateTimePicker.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TDateTimePicker.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TDateTimePicker.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TDateTimePicker.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TDateTimePicker.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TDateTimePicker.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TDateTimePicker.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TDateTimePicker.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TDateTimePicker.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TDateTimePicker.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TDateTimePicker.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TDateTimePicker.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TDateTimePicker.Get_Value(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TDateTimePicker.Get_Min(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TDateTimePicker.Get_Max(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TDateTimePicker.Get_Style(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Style(pVal);
end;

function TDateTimePicker.Set_Style(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Style(pVal);
end;

function TDateTimePicker.Get_ShowCheckBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ShowCheckBox(pVal);
end;

function TDateTimePicker.Set_ShowCheckBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ShowCheckBox(pVal);
end;

function TDateTimePicker.Get_ShowUpDown(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ShowUpDown(pVal);
end;

function TDateTimePicker.Set_ShowUpDown(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ShowUpDown(pVal);
end;

function TDateTimePicker.Get_DropDownRightAlign(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DropDownRightAlign(pVal);
end;

function TDateTimePicker.Set_DropDownRightAlign(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DropDownRightAlign(pVal);
end;

function TDateTimePicker.Get_CustomFormat(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_CustomFormat(pVal);
end;

function TDateTimePicker.Set_CustomFormat(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_CustomFormat(pVal);
end;

function TDateTimePicker.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TDateTimePicker.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TDateTimePicker.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TDateTimePicker.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TDateTimePicker.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TDateTimePicker.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TDateTimePicker.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TDateTimePicker.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TDateTimePicker.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TDateTimePicker.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoCalendar.Create: ICalendar;
begin
  Result := CreateComObject(CLASS_Calendar) as ICalendar;
end;

class function CoCalendar.CreateRemote(const MachineName: string): ICalendar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Calendar) as ICalendar;
end;

procedure TCalendar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AF05FB0E-2821-42AA-A82E-700CDE44DED9}';
    IntfIID:   '{EE27A882-AD8E-4723-AAA9-E10CFD472F75}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCalendar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ICalendar;
  end;
end;

procedure TCalendar.ConnectTo(svrIntf: ICalendar);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TCalendar.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TCalendar.GetDefaultInterface: ICalendar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCalendar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TCalendar.Destroy;
begin
  inherited Destroy;
end;

procedure TCalendar.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TCalendar.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TCalendar.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TCalendar.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TCalendar.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TCalendar.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TCalendar.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TCalendar.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TCalendar.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TCalendar.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TCalendar.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TCalendar.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TCalendar.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TCalendar.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TCalendar.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TCalendar.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TCalendar.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TCalendar.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TCalendar.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TCalendar.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TCalendar.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TCalendar.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TCalendar.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TCalendar.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TCalendar.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TCalendar.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TCalendar.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TCalendar.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TCalendar.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TCalendar.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TCalendar.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TCalendar.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TCalendar.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TCalendar.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TCalendar.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TCalendar.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TCalendar.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TCalendar.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TCalendar.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TCalendar.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TCalendar.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TCalendar._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TCalendar.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TCalendar.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TCalendar.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TCalendar.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TCalendar._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TCalendar.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TCalendar.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TCalendar._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TCalendar.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TCalendar.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TCalendar._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TCalendar.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TCalendar.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TCalendar.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TCalendar.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TCalendar.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TCalendar.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TCalendar.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TCalendar.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TCalendar.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TCalendar.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TCalendar.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TCalendar.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TCalendar.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TCalendar.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TCalendar.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TCalendar.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TCalendar.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TCalendar.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TCalendar.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TCalendar.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TCalendar.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TCalendar.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TCalendar.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TCalendar.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TCalendar.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TCalendar.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TCalendar.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TCalendar.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TCalendar.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TCalendar.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TCalendar.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TCalendar.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TCalendar.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TCalendar.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TCalendar.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TCalendar.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TCalendar.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TCalendar.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TCalendar.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TCalendar.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TCalendar.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TCalendar.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TCalendar.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TCalendar.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TCalendar.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TCalendar.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TCalendar.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TCalendar.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TCalendar.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TCalendar.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TCalendar.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TCalendar.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TCalendar.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TCalendar.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TCalendar.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TCalendar.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TCalendar.Get_Value(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TCalendar.Get_Min(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TCalendar.Get_Max(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TCalendar.Get_MultiSelect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MultiSelect(pVal);
end;

function TCalendar.Set_MultiSelect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MultiSelect(pVal);
end;

function TCalendar.Get_SelEnd(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SelEnd(pVal);
end;

function TCalendar.Get_SelStart(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SelStart(pVal);
end;

function TCalendar.Get_Today(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Today(pVal);
end;

function TCalendar.Get_MonthDelta(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MonthDelta(pVal);
end;

function TCalendar.Set_MonthDelta(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MonthDelta(pVal);
end;

function TCalendar.Get_MaxSelCount(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MaxSelCount(pVal);
end;

function TCalendar.Set_MaxSelCount(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MaxSelCount(pVal);
end;

function TCalendar.Get_TodayText(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TodayText(pVal);
end;

function TCalendar.Set_TodayText(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TodayText(pVal);
end;

function TCalendar.Get_TodayCircle(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TodayCircle(pVal);
end;

function TCalendar.Set_TodayCircle(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TodayCircle(pVal);
end;

function TCalendar.Get_WeekNumbers(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_WeekNumbers(pVal);
end;

function TCalendar.Set_WeekNumbers(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_WeekNumbers(pVal);
end;

function TCalendar.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TCalendar.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TCalendar.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TCalendar.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TCalendar.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TCalendar.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TCalendar.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TCalendar.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TCalendar.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TCalendar.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoSplitter.Create: ISplitter;
begin
  Result := CreateComObject(CLASS_Splitter) as ISplitter;
end;

class function CoSplitter.CreateRemote(const MachineName: string): ISplitter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Splitter) as ISplitter;
end;

procedure TSplitter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7D0A06A9-4E80-4EE9-BAB2-E0DD01977C83}';
    IntfIID:   '{76A49C6D-284D-45F0-856E-6E9714281AC5}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSplitter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ISplitter;
  end;
end;

procedure TSplitter.ConnectTo(svrIntf: ISplitter);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TSplitter.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TSplitter.GetDefaultInterface: ISplitter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TSplitter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TSplitter.Destroy;
begin
  inherited Destroy;
end;

procedure TSplitter.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TSplitter.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TSplitter.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TSplitter.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TSplitter.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TSplitter.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TSplitter.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TSplitter.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TSplitter.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TSplitter.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TSplitter.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TSplitter.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TSplitter.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TSplitter.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TSplitter.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TSplitter.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TSplitter.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TSplitter.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TSplitter.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TSplitter.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TSplitter.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TSplitter.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TSplitter.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TSplitter.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TSplitter.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TSplitter.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TSplitter.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TSplitter.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TSplitter.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TSplitter.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TSplitter.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TSplitter.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TSplitter.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TSplitter.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TSplitter.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TSplitter.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TSplitter.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TSplitter.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TSplitter.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TSplitter.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TSplitter.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TSplitter._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TSplitter.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TSplitter.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TSplitter.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TSplitter.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TSplitter._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TSplitter.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TSplitter.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TSplitter._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TSplitter.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TSplitter.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TSplitter._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TSplitter.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TSplitter.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TSplitter.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TSplitter.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TSplitter.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TSplitter.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TSplitter.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TSplitter.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TSplitter.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TSplitter.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TSplitter.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TSplitter.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TSplitter.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TSplitter.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TSplitter.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TSplitter.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TSplitter.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TSplitter.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TSplitter.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TSplitter.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TSplitter.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TSplitter.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TSplitter.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TSplitter.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TSplitter.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TSplitter.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TSplitter.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TSplitter.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TSplitter.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TSplitter.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TSplitter.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TSplitter.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TSplitter.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TSplitter.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TSplitter.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TSplitter.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TSplitter.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TSplitter.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TSplitter.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TSplitter.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TSplitter.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TSplitter.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TSplitter.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TSplitter.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TSplitter.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TSplitter.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TSplitter.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TSplitter.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TSplitter.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TSplitter.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TSplitter.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TSplitter.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TSplitter.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TSplitter.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TSplitter.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TSplitter.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TSplitter.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TSplitter.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TSplitter.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TSplitter.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TSplitter.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TSplitter.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TSplitter.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TSplitter.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TSplitter.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TSplitter.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoSplitPanel.Create: ISplitPanel;
begin
  Result := CreateComObject(CLASS_SplitPanel) as ISplitPanel;
end;

class function CoSplitPanel.CreateRemote(const MachineName: string): ISplitPanel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SplitPanel) as ISplitPanel;
end;

procedure TSplitPanel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DB86A3A1-87F4-4A14-9365-6C34389A4399}';
    IntfIID:   '{7BB7C6EB-B2E7-4472-94C0-B22CC0457E80}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSplitPanel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ISplitPanel;
  end;
end;

procedure TSplitPanel.ConnectTo(svrIntf: ISplitPanel);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TSplitPanel.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TSplitPanel.GetDefaultInterface: ISplitPanel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TSplitPanel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TSplitPanel.Destroy;
begin
  inherited Destroy;
end;

procedure TSplitPanel.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TSplitPanel.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TSplitPanel.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TSplitPanel.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TSplitPanel.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TSplitPanel.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TSplitPanel.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TSplitPanel.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TSplitPanel.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TSplitPanel.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TSplitPanel.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TSplitPanel.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TSplitPanel.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TSplitPanel.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TSplitPanel.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TSplitPanel.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TSplitPanel.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TSplitPanel.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TSplitPanel.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TSplitPanel.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TSplitPanel.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TSplitPanel.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TSplitPanel.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TSplitPanel.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TSplitPanel.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TSplitPanel.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TSplitPanel.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TSplitPanel.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TSplitPanel.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TSplitPanel.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TSplitPanel.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TSplitPanel.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TSplitPanel.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TSplitPanel.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TSplitPanel.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TSplitPanel.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TSplitPanel.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TSplitPanel.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TSplitPanel.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TSplitPanel.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TSplitPanel.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TSplitPanel._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TSplitPanel.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TSplitPanel.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TSplitPanel.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TSplitPanel.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TSplitPanel._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TSplitPanel.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TSplitPanel.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TSplitPanel._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TSplitPanel.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TSplitPanel.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TSplitPanel._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TSplitPanel.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TSplitPanel.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TSplitPanel.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TSplitPanel.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TSplitPanel.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TSplitPanel.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TSplitPanel.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TSplitPanel.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TSplitPanel.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TSplitPanel.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TSplitPanel.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TSplitPanel.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TSplitPanel.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TSplitPanel.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TSplitPanel.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TSplitPanel.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TSplitPanel.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TSplitPanel.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TSplitPanel.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TSplitPanel.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TSplitPanel.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TSplitPanel.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TSplitPanel.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TSplitPanel.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TSplitPanel.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TSplitPanel.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TSplitPanel.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TSplitPanel.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TSplitPanel.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TSplitPanel.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TSplitPanel.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TSplitPanel.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TSplitPanel.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TSplitPanel.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TSplitPanel.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TSplitPanel.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TSplitPanel.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TSplitPanel.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TSplitPanel.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TSplitPanel.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TSplitPanel.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TSplitPanel.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TSplitPanel.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TSplitPanel.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TSplitPanel.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TSplitPanel.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TSplitPanel.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TSplitPanel.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TSplitPanel.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TSplitPanel.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TSplitPanel.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TSplitPanel.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TSplitPanel.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TSplitPanel.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TSplitPanel.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TSplitPanel.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TSplitPanel.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TSplitPanel.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TSplitPanel.Set_BorderWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BorderWidth(pVal);
end;

function TSplitPanel.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TSplitPanel.Set_BevelWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BevelWidth(pVal);
end;

function TSplitPanel.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TSplitPanel.Set_BevelOuter(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelOuter(pVal);
end;

function TSplitPanel.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TSplitPanel.Set_BevelInner(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelInner(pVal);
end;

function TSplitPanel.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TSplitPanel.Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GraphFont(pVal);
end;

function TSplitPanel._Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GraphFont(pVal);
end;

function TSplitPanel.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TSplitPanel.Set_AutoScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoScroll(pVal);
end;

function TSplitPanel.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TSplitPanel.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TSplitPanel.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TSplitPanel.Set_CaptureMouse(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_CaptureMouse(pVal);
end;

function TSplitPanel.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TSplitPanel.Set_ParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentBackground(pVal);
end;

function TSplitPanel.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TSplitPanel.Set_BorderParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderParentBackground(pVal);
end;

function TSplitPanel.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TSplitPanel.Set_AutoSplit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSplit(pVal);
end;

function TSplitPanel.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TSplitPanel.Set_GroupBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GroupBox(pVal);
end;

function TSplitPanel.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TSplitPanel.Set_Margin(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Margin(pVal);
end;

function TSplitPanel.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TSplitPanel.Set_MarginLeft(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginLeft(pVal);
end;

function TSplitPanel.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TSplitPanel.Set_MarginTop(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginTop(pVal);
end;

function TSplitPanel.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TSplitPanel.Set_MarginRight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginRight(pVal);
end;

function TSplitPanel.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TSplitPanel.Set_MarginBottom(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginBottom(pVal);
end;

function TSplitPanel.Get_DefaultSplit(out pVal: Double): HResult;
begin
  Result := DefaultInterface.Get_DefaultSplit(pVal);
end;

function TSplitPanel.Set_DefaultSplit(pVal: Double): HResult;
begin
  Result := DefaultInterface.Set_DefaultSplit(pVal);
end;

function TSplitPanel.Get_Live(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Live(pVal);
end;

function TSplitPanel.Set_Live(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Live(pVal);
end;

function TSplitPanel.Get_Vertical(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Vertical(pVal);
end;

function TSplitPanel.Set_Vertical(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Vertical(pVal);
end;

function TSplitPanel.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TSplitPanel.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TSplitPanel.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TSplitPanel.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TSplitPanel.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TSplitPanel.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TSplitPanel.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TSplitPanel.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TSplitPanel.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TSplitPanel.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TSplitPanel.CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TSplitPanel.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    const Text: WideString; Checked: WordBool; 
                                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TSplitPanel.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; const Text: WideString; 
                                       out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TSplitPanel.CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TSplitPanel.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     const Url: WideString; const Label_: WideString; 
                                     out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TSplitPanel.CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; const ID: WideString; 
                                          out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TSplitPanel.CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                                  Height: Integer; const ID: WideString; 
                                                  const LicKey: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TSplitPanel.CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TSplitPanel.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TSplitPanel.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Vertical: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TSplitPanel.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                              Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TSplitPanel.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; 
                          out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TSplitPanel.Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TSplitPanel.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TSplitPanel.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TSplitPanel.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; 
                         nYEndArc: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TSplitPanel.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                           nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TSplitPanel.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                         nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                         nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TSplitPanel.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TSplitPanel.TextOut(x: Integer; y: Integer; const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TSplitPanel.TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                              const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TSplitPanel.DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TSplitPanel.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; 
                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TSplitPanel.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                           BevelWidth: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TSplitPanel.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TSplitPanel.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TSplitPanel.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

class function CoPolygonGraphic.Create: IPolygon;
begin
  Result := CreateComObject(CLASS_PolygonGraphic) as IPolygon;
end;

class function CoPolygonGraphic.CreateRemote(const MachineName: string): IPolygon;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PolygonGraphic) as IPolygon;
end;

procedure TPolygonGraphic.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AC10C8A0-0594-4037-B2C9-B1BFEDE24095}';
    IntfIID:   '{01F209D7-27B9-41CD-8DAE-0DAF2875A8FA}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPolygonGraphic.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IPolygon;
  end;
end;

procedure TPolygonGraphic.ConnectTo(svrIntf: IPolygon);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TPolygonGraphic.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TPolygonGraphic.GetDefaultInterface: IPolygon;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPolygonGraphic.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPolygonGraphic.Destroy;
begin
  inherited Destroy;
end;

procedure TPolygonGraphic.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TPolygonGraphic.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TPolygonGraphic.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TPolygonGraphic.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TPolygonGraphic.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TPolygonGraphic.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TPolygonGraphic.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TPolygonGraphic.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TPolygonGraphic.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TPolygonGraphic.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TPolygonGraphic.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TPolygonGraphic.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TPolygonGraphic.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TPolygonGraphic.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TPolygonGraphic.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TPolygonGraphic.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TPolygonGraphic.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TPolygonGraphic.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TPolygonGraphic.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TPolygonGraphic.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TPolygonGraphic.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TPolygonGraphic.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TPolygonGraphic.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TPolygonGraphic.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TPolygonGraphic.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TPolygonGraphic.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TPolygonGraphic.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TPolygonGraphic.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TPolygonGraphic.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TPolygonGraphic.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TPolygonGraphic.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TPolygonGraphic.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TPolygonGraphic.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TPolygonGraphic.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TPolygonGraphic.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TPolygonGraphic.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TPolygonGraphic.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TPolygonGraphic.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TPolygonGraphic.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TPolygonGraphic.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TPolygonGraphic.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TPolygonGraphic._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TPolygonGraphic.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TPolygonGraphic.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TPolygonGraphic.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TPolygonGraphic.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TPolygonGraphic._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TPolygonGraphic.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TPolygonGraphic.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TPolygonGraphic._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TPolygonGraphic.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TPolygonGraphic.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TPolygonGraphic._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TPolygonGraphic.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TPolygonGraphic.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TPolygonGraphic.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TPolygonGraphic.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TPolygonGraphic.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TPolygonGraphic.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TPolygonGraphic.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TPolygonGraphic.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TPolygonGraphic.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TPolygonGraphic.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TPolygonGraphic.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TPolygonGraphic.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TPolygonGraphic.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TPolygonGraphic.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TPolygonGraphic.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TPolygonGraphic.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TPolygonGraphic.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TPolygonGraphic.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TPolygonGraphic.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TPolygonGraphic.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TPolygonGraphic.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TPolygonGraphic.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TPolygonGraphic.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TPolygonGraphic.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TPolygonGraphic.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TPolygonGraphic.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TPolygonGraphic.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TPolygonGraphic.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TPolygonGraphic.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TPolygonGraphic.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TPolygonGraphic.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TPolygonGraphic.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TPolygonGraphic.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TPolygonGraphic.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TPolygonGraphic.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TPolygonGraphic.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TPolygonGraphic.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TPolygonGraphic.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TPolygonGraphic.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TPolygonGraphic.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TPolygonGraphic.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TPolygonGraphic.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TPolygonGraphic.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TPolygonGraphic.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TPolygonGraphic.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TPolygonGraphic.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TPolygonGraphic.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TPolygonGraphic.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TPolygonGraphic.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TPolygonGraphic.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TPolygonGraphic.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TPolygonGraphic.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TPolygonGraphic.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TPolygonGraphic.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TPolygonGraphic.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TPolygonGraphic.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TPolygonGraphic.Get_FillAll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FillAll(pVal);
end;

function TPolygonGraphic.Set_FillAll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FillAll(pVal);
end;

function TPolygonGraphic.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TPolygonGraphic.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TPolygonGraphic.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TPolygonGraphic.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TPolygonGraphic.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TPolygonGraphic.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TPolygonGraphic.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TPolygonGraphic.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TPolygonGraphic.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TPolygonGraphic.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoImageGraphic.Create: IImage;
begin
  Result := CreateComObject(CLASS_ImageGraphic) as IImage;
end;

class function CoImageGraphic.CreateRemote(const MachineName: string): IImage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ImageGraphic) as IImage;
end;

procedure TImageGraphic.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{01D29721-73ED-4ADB-8962-C01A1AF8B3E2}';
    IntfIID:   '{DAF6D7B8-1AB3-4DAC-8BDA-4E5234AD8731}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TImageGraphic.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IImage;
  end;
end;

procedure TImageGraphic.ConnectTo(svrIntf: IImage);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TImageGraphic.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TImageGraphic.GetDefaultInterface: IImage;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TImageGraphic.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TImageGraphic.Destroy;
begin
  inherited Destroy;
end;

procedure TImageGraphic.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TImageGraphic.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TImageGraphic.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TImageGraphic.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TImageGraphic.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TImageGraphic.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TImageGraphic.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TImageGraphic.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TImageGraphic.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TImageGraphic.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TImageGraphic.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TImageGraphic.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TImageGraphic.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TImageGraphic.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TImageGraphic.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TImageGraphic.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TImageGraphic.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TImageGraphic.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TImageGraphic.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TImageGraphic.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TImageGraphic.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TImageGraphic.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TImageGraphic.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TImageGraphic.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TImageGraphic.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TImageGraphic.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TImageGraphic.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TImageGraphic.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TImageGraphic.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TImageGraphic.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TImageGraphic.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TImageGraphic.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TImageGraphic.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TImageGraphic.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TImageGraphic.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TImageGraphic.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TImageGraphic.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TImageGraphic.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TImageGraphic.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TImageGraphic.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TImageGraphic.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TImageGraphic._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TImageGraphic.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TImageGraphic.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TImageGraphic.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TImageGraphic.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TImageGraphic._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TImageGraphic.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TImageGraphic.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TImageGraphic._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TImageGraphic.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TImageGraphic.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TImageGraphic._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TImageGraphic.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TImageGraphic.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TImageGraphic.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TImageGraphic.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TImageGraphic.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TImageGraphic.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TImageGraphic.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TImageGraphic.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TImageGraphic.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TImageGraphic.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TImageGraphic.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TImageGraphic.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TImageGraphic.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TImageGraphic.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TImageGraphic.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TImageGraphic.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TImageGraphic.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TImageGraphic.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TImageGraphic.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TImageGraphic.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TImageGraphic.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TImageGraphic.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TImageGraphic.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TImageGraphic.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TImageGraphic.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TImageGraphic.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TImageGraphic.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TImageGraphic.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TImageGraphic.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TImageGraphic.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TImageGraphic.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TImageGraphic.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TImageGraphic.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TImageGraphic.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TImageGraphic.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TImageGraphic.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TImageGraphic.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TImageGraphic.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TImageGraphic.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TImageGraphic.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TImageGraphic.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TImageGraphic.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TImageGraphic.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TImageGraphic.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TImageGraphic.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TImageGraphic.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TImageGraphic.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TImageGraphic.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TImageGraphic.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TImageGraphic.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TImageGraphic.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TImageGraphic.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TImageGraphic.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TImageGraphic.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TImageGraphic.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TImageGraphic.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TImageGraphic.Get_DrawType(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_DrawType(pVal);
end;

function TImageGraphic.Set_DrawType(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_DrawType(pVal);
end;

function TImageGraphic.Get_CopyMode(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_CopyMode(pVal);
end;

function TImageGraphic.Set_CopyMode(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_CopyMode(pVal);
end;

function TImageGraphic.Get_ImageWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ImageWidth(pVal);
end;

function TImageGraphic.Get_ImageHeight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ImageHeight(pVal);
end;

function TImageGraphic.Get_AlphaBlend(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_AlphaBlend(pVal);
end;

function TImageGraphic.Set_AlphaBlend(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_AlphaBlend(pVal);
end;

function TImageGraphic.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TImageGraphic.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TImageGraphic.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TImageGraphic.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TImageGraphic.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TImageGraphic.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TImageGraphic.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TImageGraphic.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TImageGraphic.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TImageGraphic.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoLineGraphic.Create: ILine;
begin
  Result := CreateComObject(CLASS_LineGraphic) as ILine;
end;

class function CoLineGraphic.CreateRemote(const MachineName: string): ILine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LineGraphic) as ILine;
end;

procedure TLineGraphic.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CB36D4EE-1658-4B65-8007-2FB541CF28A5}';
    IntfIID:   '{D6D9AAA2-739F-4807-814E-0E7692E18E62}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLineGraphic.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ILine;
  end;
end;

procedure TLineGraphic.ConnectTo(svrIntf: ILine);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TLineGraphic.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TLineGraphic.GetDefaultInterface: ILine;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TLineGraphic.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TLineGraphic.Destroy;
begin
  inherited Destroy;
end;

procedure TLineGraphic.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TLineGraphic.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TLineGraphic.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TLineGraphic.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TLineGraphic.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TLineGraphic.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TLineGraphic.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TLineGraphic.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TLineGraphic.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TLineGraphic.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TLineGraphic.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TLineGraphic.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TLineGraphic.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TLineGraphic.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TLineGraphic.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TLineGraphic.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TLineGraphic.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TLineGraphic.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TLineGraphic.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TLineGraphic.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TLineGraphic.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TLineGraphic.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TLineGraphic.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TLineGraphic.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TLineGraphic.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TLineGraphic.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TLineGraphic.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TLineGraphic.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TLineGraphic.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TLineGraphic.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TLineGraphic.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TLineGraphic.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TLineGraphic.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TLineGraphic.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TLineGraphic.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TLineGraphic.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TLineGraphic.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TLineGraphic.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TLineGraphic.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TLineGraphic.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TLineGraphic.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TLineGraphic._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TLineGraphic.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TLineGraphic.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TLineGraphic.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TLineGraphic.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TLineGraphic._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TLineGraphic.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TLineGraphic.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TLineGraphic._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TLineGraphic.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TLineGraphic.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TLineGraphic._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TLineGraphic.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TLineGraphic.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TLineGraphic.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TLineGraphic.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TLineGraphic.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TLineGraphic.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TLineGraphic.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TLineGraphic.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TLineGraphic.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TLineGraphic.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TLineGraphic.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TLineGraphic.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TLineGraphic.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TLineGraphic.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TLineGraphic.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TLineGraphic.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TLineGraphic.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TLineGraphic.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TLineGraphic.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TLineGraphic.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TLineGraphic.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TLineGraphic.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TLineGraphic.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TLineGraphic.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TLineGraphic.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TLineGraphic.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TLineGraphic.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TLineGraphic.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TLineGraphic.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TLineGraphic.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TLineGraphic.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TLineGraphic.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TLineGraphic.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TLineGraphic.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TLineGraphic.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TLineGraphic.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TLineGraphic.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TLineGraphic.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TLineGraphic.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TLineGraphic.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TLineGraphic.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TLineGraphic.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TLineGraphic.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TLineGraphic.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TLineGraphic.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TLineGraphic.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TLineGraphic.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TLineGraphic.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TLineGraphic.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TLineGraphic.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TLineGraphic.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TLineGraphic.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TLineGraphic.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TLineGraphic.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TLineGraphic.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TLineGraphic.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TLineGraphic.Get_x(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_x(Index, pVal);
end;

function TLineGraphic.Set_x(Index: Integer; pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_x(Index, pVal);
end;

function TLineGraphic.Get_y(Index: Integer; out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_y(Index, pVal);
end;

function TLineGraphic.Set_y(Index: Integer; pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_y(Index, pVal);
end;

function TLineGraphic.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TLineGraphic.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TLineGraphic.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TLineGraphic.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TLineGraphic.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TLineGraphic.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TLineGraphic.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TLineGraphic.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TLineGraphic.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TLineGraphic.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

class function CoPrintDialogBase.Create: IPrintDialogBase;
begin
  Result := CreateComObject(CLASS_PrintDialogBase) as IPrintDialogBase;
end;

class function CoPrintDialogBase.CreateRemote(const MachineName: string): IPrintDialogBase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintDialogBase) as IPrintDialogBase;
end;

procedure TPrintDialogBase.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{754676B2-A48B-4544-A305-E478C118F452}';
    IntfIID:   '{0E609193-AF42-4ECC-9897-4F279B659D1F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPrintDialogBase.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPrintDialogBase;
  end;
end;

procedure TPrintDialogBase.ConnectTo(svrIntf: IPrintDialogBase);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPrintDialogBase.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPrintDialogBase.GetDefaultInterface: IPrintDialogBase;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPrintDialogBase.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPrintDialogBase.Destroy;
begin
  inherited Destroy;
end;

function TPrintDialogBase.Get_Driver(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Driver(pVal);
end;

function TPrintDialogBase.Get_Device(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Device(pVal);
end;

function TPrintDialogBase.Get_Port(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Port(pVal);
end;

class function CoPrintDialog.Create: IPrintDialog;
begin
  Result := CreateComObject(CLASS_PrintDialog) as IPrintDialog;
end;

class function CoPrintDialog.CreateRemote(const MachineName: string): IPrintDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintDialog) as IPrintDialog;
end;

procedure TPrintDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{71AA2D61-1A6B-4E41-B5DC-5F915505D06D}';
    IntfIID:   '{A48A739A-BAAF-4693-B8AE-B594065B8D17}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPrintDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPrintDialog;
  end;
end;

procedure TPrintDialog.ConnectTo(svrIntf: IPrintDialog);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPrintDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPrintDialog.GetDefaultInterface: IPrintDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPrintDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPrintDialog.Destroy;
begin
  inherited Destroy;
end;

function TPrintDialog.Get_Driver(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Driver(pVal);
end;

function TPrintDialog.Get_Device(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Device(pVal);
end;

function TPrintDialog.Get_Port(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Port(pVal);
end;

function TPrintDialog.Get_Copies(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Copies(pVal);
end;

function TPrintDialog.Get_Collate(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Collate(pVal);
end;

function TPrintDialog.Get_Selection(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Selection(pVal);
end;

function TPrintDialog.Get_All(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_All(pVal);
end;

function TPrintDialog.Get_Range(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Range(pVal);
end;

function TPrintDialog.Get_ToFile(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ToFile(pVal);
end;

function TPrintDialog.Get_FromPage(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_FromPage(pVal);
end;

function TPrintDialog.Get_ToPage(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ToPage(pVal);
end;

class function CoPageSetupDialog.Create: IPageSetupDialog;
begin
  Result := CreateComObject(CLASS_PageSetupDialog) as IPageSetupDialog;
end;

class function CoPageSetupDialog.CreateRemote(const MachineName: string): IPageSetupDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageSetupDialog) as IPageSetupDialog;
end;

procedure TPageSetupDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EFABB2AB-2E73-4258-8867-0A3F6B83FA9D}';
    IntfIID:   '{740AE358-3778-4F25-89E8-CAE218F9F14C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPageSetupDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPageSetupDialog;
  end;
end;

procedure TPageSetupDialog.ConnectTo(svrIntf: IPageSetupDialog);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPageSetupDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPageSetupDialog.GetDefaultInterface: IPageSetupDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPageSetupDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPageSetupDialog.Destroy;
begin
  inherited Destroy;
end;

function TPageSetupDialog.Get_Driver(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Driver(pVal);
end;

function TPageSetupDialog.Get_Device(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Device(pVal);
end;

function TPageSetupDialog.Get_Port(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Port(pVal);
end;

function TPageSetupDialog.Get_PaperWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_PaperWidth(pVal);
end;

function TPageSetupDialog.Get_PaperHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_PaperHeight(pVal);
end;

function TPageSetupDialog.Get_LeftMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_LeftMargin(pVal);
end;

function TPageSetupDialog.Get_RightMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_RightMargin(pVal);
end;

function TPageSetupDialog.Get_TopMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TopMargin(pVal);
end;

function TPageSetupDialog.Get_BottomMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BottomMargin(pVal);
end;

class function CoFindReplaceDialog.Create: IFindReplaceDialog;
begin
  Result := CreateComObject(CLASS_FindReplaceDialog) as IFindReplaceDialog;
end;

class function CoFindReplaceDialog.CreateRemote(const MachineName: string): IFindReplaceDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FindReplaceDialog) as IFindReplaceDialog;
end;

procedure TFindReplaceDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{07FCB37E-7674-4C5B-B629-0594E7C0C86B}';
    IntfIID:   '{A156794D-9CF8-4AC9-84B8-D657F8ECCAF1}';
    EventIID:  '{5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFindReplaceDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IFindReplaceDialog;
  end;
end;

procedure TFindReplaceDialog.ConnectTo(svrIntf: IFindReplaceDialog);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TFindReplaceDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TFindReplaceDialog.GetDefaultInterface: IFindReplaceDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TFindReplaceDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TFindReplaceDialog.Destroy;
begin
  inherited Destroy;
end;

procedure TFindReplaceDialog.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnFind) then
         FOnFind(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnReplace) then
         FOnReplace(Self, Params[0] {const IDispatch});
    3: if Assigned(FOnReplaceAll) then
         FOnReplaceAll(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnClose) then
         FOnClose(Self, Params[0] {const IDispatch});
    5: if Assigned(FOnHelp) then
         FOnHelp(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TFindReplaceDialog.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TFindReplaceDialog.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TFindReplaceDialog.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TFindReplaceDialog.Get_FindText(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_FindText(pVal);
end;

function TFindReplaceDialog.Get_ReplaceText(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ReplaceText(pVal);
end;

function TFindReplaceDialog.Get_SearchDown(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_SearchDown(pVal);
end;

function TFindReplaceDialog.Get_MatchCase(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MatchCase(pVal);
end;

function TFindReplaceDialog.Get_WholeWord(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_WholeWord(pVal);
end;

function TFindReplaceDialog.Set_OnFind(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnFind(Param1);
end;

function TFindReplaceDialog.Set_OnReplace(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnReplace(Param1);
end;

function TFindReplaceDialog.Set_OnReplaceAll(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnReplaceAll(Param1);
end;

function TFindReplaceDialog.Set_OnClose(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClose(Param1);
end;

function TFindReplaceDialog.Set_OnHelp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHelp(Param1);
end;

function TFindReplaceDialog.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TFindReplaceDialog.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TFindReplaceDialog.Close: HResult;
begin
  Result := DefaultInterface.Close;
end;

class function CoFontDialog.Create: IFontDialog;
begin
  Result := CreateComObject(CLASS_FontDialog) as IFontDialog;
end;

class function CoFontDialog.CreateRemote(const MachineName: string): IFontDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FontDialog) as IFontDialog;
end;

procedure TFontDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0B39FC7B-C4DB-4274-985D-85B3E9C3807B}';
    IntfIID:   '{7C57CB6F-E98B-4E58-9813-DD46E590B79B}';
    EventIID:  '{57ACC027-05B0-48A5-ACC3-AB2E31C34D28}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFontDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IFontDialog;
  end;
end;

procedure TFontDialog.ConnectTo(svrIntf: IFontDialog);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TFontDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TFontDialog.GetDefaultInterface: IFontDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TFontDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TFontDialog.Destroy;
begin
  inherited Destroy;
end;

procedure TFontDialog.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnHelp) then
         FOnHelp(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnApply) then
         FOnApply(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TFontDialog.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TFontDialog.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TFontDialog.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TFontDialog.Get_Flags(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Flags(pVal);
end;

function TFontDialog.Set_Flags(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Flags(pVal);
end;

function TFontDialog.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TFontDialog.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TFontDialog._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TFontDialog.Set_OnHelp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHelp(Param1);
end;

function TFontDialog.Set_OnApply(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnApply(Param1);
end;

function TFontDialog.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TFontDialog.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TFontDialog.Execute(out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.Execute(pResult);
end;

class function CoColorDialog.Create: IColorDialog;
begin
  Result := CreateComObject(CLASS_ColorDialog) as IColorDialog;
end;

class function CoColorDialog.CreateRemote(const MachineName: string): IColorDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ColorDialog) as IColorDialog;
end;

procedure TColorDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F8E020E6-C2D9-4A32-A2D6-EA546FC10142}';
    IntfIID:   '{5A8CE32D-69D3-45F1-BE74-531AEBA638DB}';
    EventIID:  '{F3B57D51-7823-4E4F-907D-70E73A2C9E72}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TColorDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IColorDialog;
  end;
end;

procedure TColorDialog.ConnectTo(svrIntf: IColorDialog);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TColorDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TColorDialog.GetDefaultInterface: IColorDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TColorDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TColorDialog.Destroy;
begin
  inherited Destroy;
end;

procedure TColorDialog.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnHelp) then
         FOnHelp(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TColorDialog.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TColorDialog.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TColorDialog.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TColorDialog.Get_Flags(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Flags(pVal);
end;

function TColorDialog.Set_Flags(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Flags(pVal);
end;

function TColorDialog.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TColorDialog.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TColorDialog.Set_OnHelp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHelp(Param1);
end;

function TColorDialog.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TColorDialog.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TColorDialog.Execute(out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.Execute(pResult);
end;

class function CoFileOpenSaveDialog.Create: IFileOpenSaveDialog;
begin
  Result := CreateComObject(CLASS_FileOpenSaveDialog) as IFileOpenSaveDialog;
end;

class function CoFileOpenSaveDialog.CreateRemote(const MachineName: string): IFileOpenSaveDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FileOpenSaveDialog) as IFileOpenSaveDialog;
end;

procedure TFileOpenSaveDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EA4D8731-DBB6-44E1-8DA1-AF2C5C7B0FA7}';
    IntfIID:   '{B7ED6BDC-9791-4B8F-979E-990CD76A394A}';
    EventIID:  '{BAE2B02E-9BD5-4D6D-824E-197CC72CF040}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFileOpenSaveDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IFileOpenSaveDialog;
  end;
end;

procedure TFileOpenSaveDialog.ConnectTo(svrIntf: IFileOpenSaveDialog);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TFileOpenSaveDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TFileOpenSaveDialog.GetDefaultInterface: IFileOpenSaveDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TFileOpenSaveDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TFileOpenSaveDialog.Destroy;
begin
  inherited Destroy;
end;

procedure TFileOpenSaveDialog.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnCloseQuery) then
         FOnCloseQuery(Self,
                       Params[0] {const IDispatch},
                       Params[1] {const IDispatch});
    2: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    3: if Assigned(FOnFolderChange) then
         FOnFolderChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnTypeChange) then
         FOnTypeChange(Self, Params[0] {const IDispatch});
    5: if Assigned(FOnHelp) then
         FOnHelp(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TFileOpenSaveDialog.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TFileOpenSaveDialog.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TFileOpenSaveDialog.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TFileOpenSaveDialog.Get_DefaultExt(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_DefaultExt(pVal);
end;

function TFileOpenSaveDialog.Set_DefaultExt(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_DefaultExt(pVal);
end;

function TFileOpenSaveDialog.Get_Filter(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Filter(pVal);
end;

function TFileOpenSaveDialog.Set_Filter(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Filter(pVal);
end;

function TFileOpenSaveDialog.Get_FileName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_FileName(pVal);
end;

function TFileOpenSaveDialog.Set_FileName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_FileName(pVal);
end;

function TFileOpenSaveDialog.Get_Flags(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Flags(pVal);
end;

function TFileOpenSaveDialog.Set_Flags(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Flags(pVal);
end;

function TFileOpenSaveDialog.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TFileOpenSaveDialog.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TFileOpenSaveDialog.Get_FilterIndex(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_FilterIndex(pVal);
end;

function TFileOpenSaveDialog.Set_FilterIndex(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_FilterIndex(pVal);
end;

function TFileOpenSaveDialog.Get_Directory(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Directory(pVal);
end;

function TFileOpenSaveDialog.Set_Directory(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Directory(pVal);
end;

function TFileOpenSaveDialog.Get_OverwritePrompt(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_OverwritePrompt(pVal);
end;

function TFileOpenSaveDialog.Set_OverwritePrompt(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_OverwritePrompt(pVal);
end;

function TFileOpenSaveDialog.Get_AllowMultiselect(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowMultiselect(pVal);
end;

function TFileOpenSaveDialog.Set_AllowMultiselect(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowMultiselect(pVal);
end;

function TFileOpenSaveDialog.Get_PathMustExist(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_PathMustExist(pVal);
end;

function TFileOpenSaveDialog.Set_PathMustExist(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_PathMustExist(pVal);
end;

function TFileOpenSaveDialog.Get_FileMustExist(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_FileMustExist(pVal);
end;

function TFileOpenSaveDialog.Set_FileMustExist(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_FileMustExist(pVal);
end;

function TFileOpenSaveDialog.Get_CreatePrompt(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CreatePrompt(pVal);
end;

function TFileOpenSaveDialog.Set_CreatePrompt(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CreatePrompt(pVal);
end;

function TFileOpenSaveDialog.Get_NoReadOnlyReturn(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoReadOnlyReturn(pVal);
end;

function TFileOpenSaveDialog.Set_NoReadOnlyReturn(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoReadOnlyReturn(pVal);
end;

function TFileOpenSaveDialog.Get_NoTestFileCreate(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoTestFileCreate(pVal);
end;

function TFileOpenSaveDialog.Set_NoTestFileCreate(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoTestFileCreate(pVal);
end;

function TFileOpenSaveDialog.Get_NoDereferenceLinks(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoDereferenceLinks(pVal);
end;

function TFileOpenSaveDialog.Set_NoDereferenceLinks(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoDereferenceLinks(pVal);
end;

function TFileOpenSaveDialog.Get_DontAddToRecent(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DontAddToRecent(pVal);
end;

function TFileOpenSaveDialog.Set_DontAddToRecent(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DontAddToRecent(pVal);
end;

function TFileOpenSaveDialog.Get_ForceShowHidden(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ForceShowHidden(pVal);
end;

function TFileOpenSaveDialog.Set_ForceShowHidden(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ForceShowHidden(pVal);
end;

function TFileOpenSaveDialog.Get_NoPlacesBar(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoPlacesBar(pVal);
end;

function TFileOpenSaveDialog.Set_NoPlacesBar(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoPlacesBar(pVal);
end;

function TFileOpenSaveDialog.Get_ForceFileSystem(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ForceFileSystem(pVal);
end;

function TFileOpenSaveDialog.Set_ForceFileSystem(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ForceFileSystem(pVal);
end;

function TFileOpenSaveDialog.Get_AllNonStorageItems(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllNonStorageItems(pVal);
end;

function TFileOpenSaveDialog.Set_AllNonStorageItems(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllNonStorageItems(pVal);
end;

function TFileOpenSaveDialog.Get_HideMRUPlaces(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HideMRUPlaces(pVal);
end;

function TFileOpenSaveDialog.Set_HideMRUPlaces(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HideMRUPlaces(pVal);
end;

function TFileOpenSaveDialog.Get_HidePinnedPlaces(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_HidePinnedPlaces(pVal);
end;

function TFileOpenSaveDialog.Set_HidePinnedPlaces(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_HidePinnedPlaces(pVal);
end;

function TFileOpenSaveDialog.Get_DefaultNoMiniMode(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DefaultNoMiniMode(pVal);
end;

function TFileOpenSaveDialog.Set_DefaultNoMiniMode(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DefaultNoMiniMode(pVal);
end;

function TFileOpenSaveDialog.Get_ForcePreviewPaneOn(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ForcePreviewPaneOn(pVal);
end;

function TFileOpenSaveDialog.Set_ForcePreviewPaneOn(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ForcePreviewPaneOn(pVal);
end;

function TFileOpenSaveDialog.Get_FileNames(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_FileNames(pVal);
end;

function TFileOpenSaveDialog.Get_ClientGuid(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ClientGuid(pVal);
end;

function TFileOpenSaveDialog.Set_ClientGuid(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ClientGuid(pVal);
end;

function TFileOpenSaveDialog.Set_OnCloseQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnCloseQuery(Param1);
end;

function TFileOpenSaveDialog.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TFileOpenSaveDialog.Set_OnFolderChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnFolderChange(Param1);
end;

function TFileOpenSaveDialog.Set_OnTypeChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnTypeChange(Param1);
end;

function TFileOpenSaveDialog.Set_OnHelp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHelp(Param1);
end;

function TFileOpenSaveDialog.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TFileOpenSaveDialog.RemoveEventHandler(const EventName: WideString; 
                                                EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TFileOpenSaveDialog.Execute(out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.Execute(pResult);
end;

function TFileOpenSaveDialog.AddPlace(const Value: WideString; const Name: WideString; 
                                      Placement: Integer): HResult;
begin
  Result := DefaultInterface.AddPlace(Value, Name, Placement);
end;

class function CoSelectFolderDialog.Create: ISelectFolderDialog;
begin
  Result := CreateComObject(CLASS_SelectFolderDialog) as ISelectFolderDialog;
end;

class function CoSelectFolderDialog.CreateRemote(const MachineName: string): ISelectFolderDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectFolderDialog) as ISelectFolderDialog;
end;

procedure TSelectFolderDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A7A1BE6F-CBCC-42FB-9B22-42C9FA301CA6}';
    IntfIID:   '{6F63CD78-C21E-4A64-90EC-90FCE7789897}';
    EventIID:  '{C5A781AE-2868-4470-972D-39BEAE4721FC}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSelectFolderDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ISelectFolderDialog;
  end;
end;

procedure TSelectFolderDialog.ConnectTo(svrIntf: ISelectFolderDialog);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TSelectFolderDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TSelectFolderDialog.GetDefaultInterface: ISelectFolderDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TSelectFolderDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TSelectFolderDialog.Destroy;
begin
  inherited Destroy;
end;

procedure TSelectFolderDialog.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TSelectFolderDialog.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TSelectFolderDialog.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TSelectFolderDialog.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TSelectFolderDialog.Get_Flags(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Flags(pVal);
end;

function TSelectFolderDialog.Set_Flags(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Flags(pVal);
end;

function TSelectFolderDialog.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TSelectFolderDialog.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TSelectFolderDialog.Get_Value(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TSelectFolderDialog.Set_Value(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Value(pVal);
end;

function TSelectFolderDialog.Get_Root(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TSelectFolderDialog.Set_Root(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Root(pVal);
end;

function TSelectFolderDialog.Get_StatusText(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_StatusText(pVal);
end;

function TSelectFolderDialog.Set_StatusText(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_StatusText(pVal);
end;

function TSelectFolderDialog.Get_Title(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Title(pVal);
end;

function TSelectFolderDialog.Set_Title(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Title(pVal);
end;

function TSelectFolderDialog.Get_EnableOK(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_EnableOK(pVal);
end;

function TSelectFolderDialog.Set_EnableOK(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_EnableOK(pVal);
end;

function TSelectFolderDialog.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TSelectFolderDialog.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TSelectFolderDialog.RemoveEventHandler(const EventName: WideString; 
                                                EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TSelectFolderDialog.Execute(out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.Execute(pResult);
end;

function TSelectFolderDialog.Close: HResult;
begin
  Result := DefaultInterface.Close;
end;

class function CoTimer.Create: ITimer;
begin
  Result := CreateComObject(CLASS_Timer) as ITimer;
end;

class function CoTimer.CreateRemote(const MachineName: string): ITimer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Timer) as ITimer;
end;

procedure TTimer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0AC27C50-69E5-42BE-B898-71643BDC1452}';
    IntfIID:   '{A70DBA20-F39F-4B55-BC04-7E5FE2C495B7}';
    EventIID:  '{E00E8E3D-8933-4679-B250-257A46743389}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTimer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ITimer;
  end;
end;

procedure TTimer.ConnectTo(svrIntf: ITimer);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTimer.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTimer.GetDefaultInterface: ITimer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTimer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTimer.Destroy;
begin
  inherited Destroy;
end;

procedure TTimer.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnExecute) then
         FOnExecute(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TTimer.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TTimer.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTimer.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTimer.Get_Active(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Active(pVal);
end;

function TTimer.Set_Active(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Active(pVal);
end;

function TTimer.Get_Interval(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Interval(pVal);
end;

function TTimer.Set_Interval(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Interval(pVal);
end;

function TTimer.Set_OnExecute(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnExecute(Param1);
end;

function TTimer.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TTimer.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

procedure TWindowSystemControl.InitControlData;
const
  CEventDispIDs: array [0..41] of DWORD = (
    $60000000, $60000001, $60000002, $60010000, $60010001, $60010002,
    $60010003, $00000001, $00000002, $00000003, $00000004, $00000005,
    $00000006, $00000007, $00000008, $00000009, $0000000A, $0000000B,
    $0000000C, $0000000D, $0000000E, $0000000F, $00000010, $00000011,
    $00000012, $00000064, $00000065, $00000066, $00000067, $00000068,
    $00000013, $00000014, $00000015, $00000016, $00000017, $00000018,
    $00000019, $0000001A, $0000001B, $0000001C, $0000001D, $0000001E);
  CControlData: TControlData2 = (
    ClassID:      '{8E57EFA4-E91E-44FC-B69E-7A3BC1F5AB8D}';
    EventIID:     '{E83611E0-B0CD-4087-887B-4A0454176AA9}';
    EventCount:   42;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnClick) - UIntPtr(Self);
end;

procedure TWindowSystemControl.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IForm;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TWindowSystemControl.GetControlInterface: IForm;
begin
  CreateControl;
  Result := FIntf;
end;

function TWindowSystemControl.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TWindowSystemControl.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TWindowSystemControl.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TWindowSystemControl.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TWindowSystemControl.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TWindowSystemControl.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TWindowSystemControl.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TWindowSystemControl.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TWindowSystemControl.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TWindowSystemControl.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TWindowSystemControl.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TWindowSystemControl.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TWindowSystemControl.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TWindowSystemControl.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TWindowSystemControl.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TWindowSystemControl.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TWindowSystemControl.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TWindowSystemControl.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TWindowSystemControl.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TWindowSystemControl.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TWindowSystemControl.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TWindowSystemControl.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TWindowSystemControl.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TWindowSystemControl.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TWindowSystemControl.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TWindowSystemControl.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TWindowSystemControl.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TWindowSystemControl.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TWindowSystemControl.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TWindowSystemControl.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TWindowSystemControl.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TWindowSystemControl.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TWindowSystemControl.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TWindowSystemControl.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TWindowSystemControl.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TWindowSystemControl.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TWindowSystemControl.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TWindowSystemControl.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TWindowSystemControl.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TWindowSystemControl.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TWindowSystemControl.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TWindowSystemControl.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TWindowSystemControl.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TWindowSystemControl.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TWindowSystemControl.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TWindowSystemControl.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TWindowSystemControl.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TWindowSystemControl.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TWindowSystemControl.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TWindowSystemControl.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TWindowSystemControl.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TWindowSystemControl.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TWindowSystemControl.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TWindowSystemControl.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TWindowSystemControl.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TWindowSystemControl.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TWindowSystemControl.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TWindowSystemControl.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TWindowSystemControl.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TWindowSystemControl.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TWindowSystemControl.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TWindowSystemControl.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TWindowSystemControl.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TWindowSystemControl.Get_Menu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Menu(pVal);
end;

function TWindowSystemControl.Get_KeyPreview(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_KeyPreview(pVal);
end;

function TWindowSystemControl.Get_MaximizeBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaximizeBox(pVal);
end;

function TWindowSystemControl.Get_MinimizeBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MinimizeBox(pVal);
end;

function TWindowSystemControl.Get_ControlBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ControlBox(pVal);
end;

function TWindowSystemControl.Get_SizeGrip(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_SizeGrip(pVal);
end;

function TWindowSystemControl.Get_TopMost(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TopMost(pVal);
end;

function TWindowSystemControl.Get_ToolWindow(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ToolWindow(pVal);
end;

function TWindowSystemControl.Get_Caption(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Caption(pVal);
end;

function TWindowSystemControl.Get_AcceptButton(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_AcceptButton(pVal);
end;

function TWindowSystemControl.Get_CancelButton(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_CancelButton(pVal);
end;

function TWindowSystemControl.Get_HelpButton(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_HelpButton(pVal);
end;

function TWindowSystemControl.Get_ActiveControl(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ActiveControl(pVal);
end;

function TWindowSystemControl.Get_CanClose(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanClose(pVal);
end;

function TWindowSystemControl.Get_TaskBar(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_TaskBar(pVal);
end;

function TWindowSystemControl.Get_Active(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Active(pVal);
end;

function TWindowSystemControl.Get_Foreground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Foreground(pVal);
end;

function TWindowSystemControl.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TWindowSystemControl.RemoveEventHandler(const EventName: WideString; 
                                                 EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TWindowSystemControl.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TWindowSystemControl.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TWindowSystemControl.Destroy: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TWindowSystemControl.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TWindowSystemControl.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TWindowSystemControl.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TWindowSystemControl.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TWindowSystemControl.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TWindowSystemControl.CreateButton(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer; const Text: WideString; 
                                           out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TWindowSystemControl.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; const Text: WideString; 
                                             Checked: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TWindowSystemControl.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; 
                                                Height: Integer; const Text: WideString; 
                                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TWindowSystemControl.CreateEdit(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateListBox(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; Style: Integer; 
                                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateFrame(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; 
                                                Height: Integer; Style: Integer; 
                                                out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; 
                                               Height: Integer; Style: Integer; 
                                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateReBar(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TWindowSystemControl.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; 
                                              Height: Integer; const Url: WideString; 
                                              const Label_: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TWindowSystemControl.CreatePager(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; 
                                              Height: Integer; Style: Integer; 
                                              out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; 
                                                   Height: Integer; const ID: WideString; 
                                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TWindowSystemControl.CreateActiveXControlLicensed(Left: Integer; Top: Integer; 
                                                           Width: Integer; Height: Integer; 
                                                           const ID: WideString; 
                                                           const LicKey: WideString; 
                                                           out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TWindowSystemControl.CreateHeader(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateListView(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; Style: Integer; 
                                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; Style: Integer; 
                                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; Style: Integer; Version: Integer; 
                                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TWindowSystemControl.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; Style: Integer; 
                                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; 
                                                   Height: Integer; Style: Integer; 
                                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; 
                                             Height: Integer; Style: Integer; 
                                             out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; 
                                              Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TWindowSystemControl.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; 
                                               Height: Integer; Vertical: WordBool; 
                                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TWindowSystemControl.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                                       Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; 
                                                 Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateLabel(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; 
                                                Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; 
                                                   Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TWindowSystemControl.Rectangle(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.RoundRect(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; nWidth: Integer; nHeight: Integer; 
                                        out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TWindowSystemControl.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TWindowSystemControl.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TWindowSystemControl.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; 
                                  nYEndArc: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TWindowSystemControl.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                                    nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TWindowSystemControl.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                                  nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TWindowSystemControl.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TWindowSystemControl.TextOut(x: Integer; y: Integer; const Text: WideString; 
                                      out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TWindowSystemControl.TextRect(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; const Text: WideString; Flags: LongWord; 
                                       out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TWindowSystemControl.DrawImage(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TWindowSystemControl.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; 
                                         out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TWindowSystemControl.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    BevelOuter: Integer; BevelInner: Integer; 
                                    BorderWidth: LongWord; BevelWidth: LongWord; 
                                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TWindowSystemControl.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TWindowSystemControl.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TWindowSystemControl.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

function TWindowSystemControl.Minimize: HResult;
begin
  Result := DefaultInterface.Minimize;
end;

function TWindowSystemControl.Restore: HResult;
begin
  Result := DefaultInterface.Restore;
end;

function TWindowSystemControl.Maximize: HResult;
begin
  Result := DefaultInterface.Maximize;
end;

function TWindowSystemControl.Close: HResult;
begin
  Result := DefaultInterface.Close;
end;

function TWindowSystemControl.ShowModal: HResult;
begin
  Result := DefaultInterface.ShowModal;
end;

function TWindowSystemControl.MessageBox(const Text: WideString; const Caption: WideString; 
                                         Flags: Integer; out pResult: Integer): HResult;
begin
  Result := DefaultInterface.MessageBox(Text, Caption, Flags, pResult);
end;

function TWindowSystemControl.ColorDialog(StartColor: LongWord; Flags: LongWord; 
                                          out pColor: LongWord): HResult;
begin
  Result := DefaultInterface.ColorDialog(StartColor, Flags, pColor);
end;

function TWindowSystemControl.FontDialog(const StartValue: IDispatch; Flags: LongWord; 
                                         out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.FontDialog(StartValue, Flags, pResult);
end;

function TWindowSystemControl.OpenDialog(const DefaultExt: WideString; const Filter: WideString; 
                                         const StartFile: WideString; Flags: LongWord; 
                                         out pFileName: WideString): HResult;
begin
  Result := DefaultInterface.OpenDialog(DefaultExt, Filter, StartFile, Flags, pFileName);
end;

function TWindowSystemControl.SaveDialog(const DefaultExt: WideString; const Filter: WideString; 
                                         const StartFile: WideString; Flags: LongWord; 
                                         out pFileName: WideString): HResult;
begin
  Result := DefaultInterface.SaveDialog(DefaultExt, Filter, StartFile, Flags, pFileName);
end;

function TWindowSystemControl.SelectFolderDialog(const Title: WideString; Flags: LongWord; 
                                                 out pFolder: WideString): HResult;
begin
  Result := DefaultInterface.SelectFolderDialog(Title, Flags, pFolder);
end;

function TWindowSystemControl.PrintDialog(Flags: LongWord; MinPage: Word; MaxPage: Word; 
                                          out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.PrintDialog(Flags, MinPage, MaxPage, pResult);
end;

function TWindowSystemControl.PrinterSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.PrinterSetupDialog(Flags, pResult);
end;

function TWindowSystemControl.PageSetupDialog(Flags: LongWord; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.PageSetupDialog(Flags, pResult);
end;

function TWindowSystemControl.CreateFindDialog(const FindText: WideString; Flags: LongWord; 
                                               out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFindDialog(FindText, Flags, pResult);
end;

function TWindowSystemControl.CreateReplaceDialog(const FindText: WideString; 
                                                  const ReplaceText: WideString; Flags: LongWord; 
                                                  out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReplaceDialog(FindText, ReplaceText, Flags, pResult);
end;

function TWindowSystemControl.CreateFontDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFontDialog(pResult);
end;

function TWindowSystemControl.CreateColorDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateColorDialog(pResult);
end;

function TWindowSystemControl.CreateOpenDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateOpenDialog(pResult);
end;

function TWindowSystemControl.CreateSaveDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSaveDialog(pResult);
end;

function TWindowSystemControl.CreateSelectFolderDialog(out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSelectFolderDialog(pResult);
end;

function TWindowSystemControl.CreateForm(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateForm(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateDialogForm(Left: Integer; Top: Integer; Width: Integer; 
                                               Height: Integer; Style: Integer; 
                                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDialogForm(Left, Top, Width, Height, Style, pControl);
end;

function TWindowSystemControl.CreateMessageDialog(const Text: WideString; 
                                                  const Caption: WideString; out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMessageDialog(Text, Caption, pResult);
end;

function TWindowSystemControl.CreateTaskDialog(const Text: WideString; const Caption: WideString; 
                                               out pResult: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTaskDialog(Text, Caption, pResult);
end;

class function CoResult.Create: IResult;
begin
  Result := CreateComObject(CLASS_Result) as IResult;
end;

class function CoResult.CreateRemote(const MachineName: string): IResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Result) as IResult;
end;

procedure TResult.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AC548905-86D6-4CCE-BEE2-971293959F64}';
    IntfIID:   '{50B60E8E-E889-46DB-88D8-09A416726824}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TResult.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IResult;
  end;
end;

procedure TResult.ConnectTo(svrIntf: IResult);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TResult.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TResult.GetDefaultInterface: IResult;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TResult.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TResult.Destroy;
begin
  inherited Destroy;
end;

function TResult.Get_Value(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TResult.Set_Value(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Value(pVal);
end;

function TResult.Put(newVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Put(newVal);
end;

class function CoTrayIcon.Create: ITrayIcon;
begin
  Result := CreateComObject(CLASS_TrayIcon) as ITrayIcon;
end;

class function CoTrayIcon.CreateRemote(const MachineName: string): ITrayIcon;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TrayIcon) as ITrayIcon;
end;

procedure TTrayIcon.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{068282F2-0924-43C2-AA31-DA63DC197716}';
    IntfIID:   '{4AAC7C83-5BF6-44A6-AD8A-FD431D23DD79}';
    EventIID:  '{0EE395DB-AF4D-4493-861E-B0E1966FD5DB}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTrayIcon.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as ITrayIcon;
  end;
end;

procedure TTrayIcon.ConnectTo(svrIntf: ITrayIcon);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTrayIcon.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTrayIcon.GetDefaultInterface: ITrayIcon;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTrayIcon.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTrayIcon.Destroy;
begin
  inherited Destroy;
end;

procedure TTrayIcon.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    5: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
  end; {case DispID}
end;

function TTrayIcon.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TTrayIcon.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTrayIcon.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTrayIcon.Get_Active(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Active(pVal);
end;

function TTrayIcon.Set_Active(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Active(pVal);
end;

function TTrayIcon.Get_Images(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Images(pVal);
end;

function TTrayIcon.Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Images(pVal);
end;

function TTrayIcon._Set_Images(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Images(pVal);
end;

function TTrayIcon.Get_ImageIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ImageIndex(pVal);
end;

function TTrayIcon.Set_ImageIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ImageIndex(pVal);
end;

function TTrayIcon.Get_Hint(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TTrayIcon.Set_Hint(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TTrayIcon.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TTrayIcon.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TTrayIcon._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TTrayIcon.Get_BalloonTip(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_BalloonTip(pVal);
end;

function TTrayIcon.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TTrayIcon.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TTrayIcon.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TTrayIcon.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TTrayIcon.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TTrayIcon.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

class function CoRegions.Create: IRegions;
begin
  Result := CreateComObject(CLASS_Regions) as IRegions;
end;

class function CoRegions.CreateRemote(const MachineName: string): IRegions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Regions) as IRegions;
end;

procedure TRegions.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EE8A5452-8F4D-4174-8E30-45C82F702852}';
    IntfIID:   '{179741BD-E3DA-4A18-B9C1-039785089B03}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRegions.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRegions;
  end;
end;

procedure TRegions.ConnectTo(svrIntf: IRegions);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRegions.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRegions.GetDefaultInterface: IRegions;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TRegions.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TRegions.Destroy;
begin
  inherited Destroy;
end;

function TRegions.CombineRgn(hrgnSrc1: LongWord; hrgnSrc2: LongWord; fnCombineMode: Integer; 
                             out pRegion: IDispatch): HResult;
begin
  Result := DefaultInterface.CombineRgn(hrgnSrc1, hrgnSrc2, fnCombineMode, pRegion);
end;

function TRegions.CreateEllipticRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    out pRegion: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEllipticRgn(Left, Top, Width, Height, pRegion);
end;

function TRegions.CreatePolygonRgn(Data: PSafeArray; out pRegion: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePolygonRgn(Data, pRegion);
end;

function TRegions.CreateRectRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                out pRegion: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRectRgn(Left, Top, Width, Height, pRegion);
end;

function TRegions.CreateRoundRectRgn(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     nWidthEllipse: Integer; nHeightEllipse: Integer; 
                                     out pRegion: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRoundRectRgn(Left, Top, Width, Height, nWidthEllipse, 
                                                nHeightEllipse, pRegion);
end;

function TRegions.TransformRgn(ARegion: LongWord; eM11: Single; eM12: Single; eM21: Single; 
                               eM22: Single; eDx: Single; eDy: Single; out pRegion: IDispatch): HResult;
begin
  Result := DefaultInterface.TransformRgn(ARegion, eM11, eM12, eM21, eM22, eDx, eDy, pRegion);
end;

function TRegions.EqualRgn(hSrcRgn1: LongWord; hSrcRgn2: LongWord; out pResult: WordBool): HResult;
begin
  Result := DefaultInterface.EqualRgn(hSrcRgn1, hSrcRgn2, pResult);
end;

function TRegions.CreateRgnFromImage(Image: OleVariant; MaskColor: LongWord; out Region: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRgnFromImage(Image, MaskColor, Region);
end;

class function CoRegion.Create: IRegion;
begin
  Result := CreateComObject(CLASS_Region) as IRegion;
end;

class function CoRegion.CreateRemote(const MachineName: string): IRegion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Region) as IRegion;
end;

procedure TRegion.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2DCB8485-3B43-4669-BB37-06FD8264641A}';
    IntfIID:   '{BB9FCB6F-2C14-4568-BADF-E7C0B022A654}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRegion.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRegion;
  end;
end;

procedure TRegion.ConnectTo(svrIntf: IRegion);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRegion.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRegion.GetDefaultInterface: IRegion;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TRegion.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TRegion.Destroy;
begin
  inherited Destroy;
end;

function TRegion.Get_Value: LongWord;
begin
  Result := DefaultInterface.Value;
end;

class function CoScreen.Create: IScreen;
begin
  Result := CreateComObject(CLASS_Screen) as IScreen;
end;

class function CoScreen.CreateRemote(const MachineName: string): IScreen;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Screen) as IScreen;
end;

procedure TScreen.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8749AC27-4B1C-4CDE-9207-D178BB261191}';
    IntfIID:   '{D0D86627-9E34-438F-92E2-8EC9C1ABE8C5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TScreen.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IScreen;
  end;
end;

procedure TScreen.ConnectTo(svrIntf: IScreen);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TScreen.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TScreen.GetDefaultInterface: IScreen;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TScreen.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TScreen.Destroy;
begin
  inherited Destroy;
end;

function TScreen.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TScreen.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TScreen.Get_PixelsPerInchX(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_PixelsPerInchX(pVal);
end;

function TScreen.Get_PixelsPerInchY(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_PixelsPerInchY(pVal);
end;

class function CoHint.Create: IHint;
begin
  Result := CreateComObject(CLASS_Hint) as IHint;
end;

class function CoHint.CreateRemote(const MachineName: string): IHint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Hint) as IHint;
end;

procedure THint.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EBE2E3B5-3999-4939-BABC-6C365D510982}';
    IntfIID:   '{00017030-B197-4EBC-804F-748CF210108E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure THint.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IHint;
  end;
end;

procedure THint.ConnectTo(svrIntf: IHint);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure THint.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function THint.GetDefaultInterface: IHint;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor THint.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor THint.Destroy;
begin
  inherited Destroy;
end;

function THint.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function THint.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function THint.Get_Title(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Title(pVal);
end;

function THint.Set_Title(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Title(pVal);
end;

function THint.Get_Image(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Image(pVal);
end;

function THint.Set_Image(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Image(pVal);
end;

function THint.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function THint.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function THint.Get_Balloon(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Balloon(pVal);
end;

function THint.Set_Balloon(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Balloon(pVal);
end;

function THint.Get_AlwaysTip(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AlwaysTip(pVal);
end;

function THint.Set_AlwaysTip(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AlwaysTip(pVal);
end;

function THint.Get_NoPrefix(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoPrefix(pVal);
end;

function THint.Set_NoPrefix(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoPrefix(pVal);
end;

function THint.Get_MaxWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function THint.Set_MaxWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function THint.Get_ParentData(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentData(pVal);
end;

function THint.Set_ParentData(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentData(pVal);
end;

class function CoEventHandler.Create: IEventHandler;
begin
  Result := CreateComObject(CLASS_EventHandler) as IEventHandler;
end;

class function CoEventHandler.CreateRemote(const MachineName: string): IEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EventHandler) as IEventHandler;
end;

procedure TEventHandler.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{41D6E4B0-5B25-4CFD-8CCF-C6E48510B853}';
    IntfIID:   '{5273BA8F-609D-4959-9A72-92AD3EADA060}';
    EventIID:  '{A3BE55F5-A954-45E5-8419-CB249B836ABA}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEventHandler.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IEventHandler;
  end;
end;

procedure TEventHandler.ConnectTo(svrIntf: IEventHandler);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TEventHandler.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TEventHandler.GetDefaultInterface: IEventHandler;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEventHandler.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEventHandler.Destroy;
begin
  inherited Destroy;
end;

procedure TEventHandler.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnExecute) then
         FOnExecute(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TEventHandler.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TEventHandler.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TEventHandler.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TEventHandler.Set_OnExecute(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnExecute(Param1);
end;

function TEventHandler.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TEventHandler.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TEventHandler.Execute: HResult;
begin
  Result := DefaultInterface.Execute;
end;

class function CoWindowSystemObjectExtensions.Create: IWindowSystemObjectExtensions;
begin
  Result := CreateComObject(CLASS_WindowSystemObjectExtensions) as IWindowSystemObjectExtensions;
end;

class function CoWindowSystemObjectExtensions.CreateRemote(const MachineName: string): IWindowSystemObjectExtensions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WindowSystemObjectExtensions) as IWindowSystemObjectExtensions;
end;

procedure TWindowSystemObjectExtensions.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5D2DE0FD-53BC-4E93-8EB3-9EDC90E17DB6}';
    IntfIID:   '{1DD6DE1E-DB95-45FE-B2A8-655177B8E8DB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TWindowSystemObjectExtensions.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IWindowSystemObjectExtensions;
  end;
end;

procedure TWindowSystemObjectExtensions.ConnectTo(svrIntf: IWindowSystemObjectExtensions);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TWindowSystemObjectExtensions.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TWindowSystemObjectExtensions.GetDefaultInterface: IWindowSystemObjectExtensions;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TWindowSystemObjectExtensions.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TWindowSystemObjectExtensions.Destroy;
begin
  inherited Destroy;
end;

function TWindowSystemObjectExtensions.Get_SystemImageListSmall(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SystemImageListSmall(pVal);
end;

function TWindowSystemObjectExtensions.Get_SystemImageListLarge(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SystemImageListLarge(pVal);
end;

function TWindowSystemObjectExtensions.Get_IsWindowsXP(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IsWindowsXP(pVal);
end;

function TWindowSystemObjectExtensions.Get_IsWindowsVista(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IsWindowsVista(pVal);
end;

function TWindowSystemObjectExtensions.Get_IsWindows7(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IsWindows7(pVal);
end;

function TWindowSystemObjectExtensions.Get_IsWindows8(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IsWindows8(pVal);
end;

function TWindowSystemObjectExtensions.Get_IsThemeActive(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_IsThemeActive(pVal);
end;

function TWindowSystemObjectExtensions.SendMessage(Control: OleVariant; Message: Integer; 
                                                   wParam: Integer; lParam: OleVariant; 
                                                   out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.SendMessage(Control, Message, wParam, lParam, pVal);
end;

function TWindowSystemObjectExtensions.PostMessage(Control: OleVariant; Message: Integer; 
                                                   wParam: Integer; lParam: OleVariant; 
                                                   out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.PostMessage(Control, Message, wParam, lParam, pVal);
end;

function TWindowSystemObjectExtensions.AddMessageHandler(const Control: IDispatch; 
                                                         Message: Integer; 
                                                         MessageHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddMessageHandler(Control, Message, MessageHandler);
end;

function TWindowSystemObjectExtensions.RegisterWindowMessage(const Message: WideString; 
                                                             out MessageId: LongWord): HResult;
begin
  Result := DefaultInterface.RegisterWindowMessage(Message, MessageId);
end;

function TWindowSystemObjectExtensions.EnumWindows(out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.EnumWindows(Result);
end;

function TWindowSystemObjectExtensions.SendCopyData(Control: OleVariant; const Data: WideString; 
                                                    out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.SendCopyData(Control, Data, pVal);
end;

function TWindowSystemObjectExtensions.PostCopyData(Control: OleVariant; const Data: WideString; 
                                                    out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.PostCopyData(Control, Data, pVal);
end;

function TWindowSystemObjectExtensions.CreateClipboard(ClipboardViewer: WordBool; 
                                                       out Clipboard: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateClipboard(ClipboardViewer, Clipboard);
end;

function TWindowSystemObjectExtensions.GetFileSysIconIndexSmall(const pVal: WideString; 
                                                                FileAttributes: LongWord; 
                                                                out Result: LongWord): HResult;
begin
  Result := DefaultInterface.GetFileSysIconIndexSmall(pVal, FileAttributes, Result);
end;

function TWindowSystemObjectExtensions.GetFileSysIconIndexLarge(const pVal: WideString; 
                                                                FileAttributes: LongWord; 
                                                                out Result: LongWord): HResult;
begin
  Result := DefaultInterface.GetFileSysIconIndexLarge(pVal, FileAttributes, Result);
end;

function TWindowSystemObjectExtensions.UuidCreate(out Result: WideString): HResult;
begin
  Result := DefaultInterface.UuidCreate(Result);
end;

function TWindowSystemObjectExtensions.CreateIconBuilder(out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIconBuilder(Result);
end;

function TWindowSystemObjectExtensions.CreateExecutor(out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateExecutor(Result);
end;

function TWindowSystemObjectExtensions.CreateFileManager(out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFileManager(Result);
end;

class function CoPrintInfo.Create: IPrintInfo;
begin
  Result := CreateComObject(CLASS_PrintInfo) as IPrintInfo;
end;

class function CoPrintInfo.CreateRemote(const MachineName: string): IPrintInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintInfo) as IPrintInfo;
end;

procedure TPrintInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{98C54138-A5B8-41AC-BDA6-D404983C28C6}';
    IntfIID:   '{5C615F2E-9B71-4394-9C88-95EE52F97849}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPrintInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPrintInfo;
  end;
end;

procedure TPrintInfo.ConnectTo(svrIntf: IPrintInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPrintInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPrintInfo.GetDefaultInterface: IPrintInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPrintInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPrintInfo.Destroy;
begin
  inherited Destroy;
end;

function TPrintInfo.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TPrintInfo.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TPrintInfo.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TPrintInfo.Get_DocumentName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_DocumentName(pVal);
end;

function TPrintInfo.Set_DocumentName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_DocumentName(pVal);
end;

function TPrintInfo.Get_LeftMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_LeftMargin(pVal);
end;

function TPrintInfo.Set_LeftMargin(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_LeftMargin(pVal);
end;

function TPrintInfo.Get_RightMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_RightMargin(pVal);
end;

function TPrintInfo.Set_RightMargin(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_RightMargin(pVal);
end;

function TPrintInfo.Get_TopMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TopMargin(pVal);
end;

function TPrintInfo.Set_TopMargin(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TopMargin(pVal);
end;

function TPrintInfo.Get_BottomMargin(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BottomMargin(pVal);
end;

function TPrintInfo.Set_BottomMargin(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BottomMargin(pVal);
end;

function TPrintInfo.Get_MarginMeasurement(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_MarginMeasurement(pVal);
end;

function TPrintInfo.Set_MarginMeasurement(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_MarginMeasurement(pVal);
end;

function TPrintInfo.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TPrintInfo.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

class function CoStdDispatch.Create: IStdDispatch;
begin
  Result := CreateComObject(CLASS_StdDispatch) as IStdDispatch;
end;

class function CoStdDispatch.CreateRemote(const MachineName: string): IStdDispatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StdDispatch) as IStdDispatch;
end;

procedure TStdDispatch.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CBEEA14C-EA62-4D5B-9EAD-68D66DDEE5FB}';
    IntfIID:   '{C0615DB9-9C1D-42B0-8EB5-8CC8AF95B110}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStdDispatch.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStdDispatch;
  end;
end;

procedure TStdDispatch.ConnectTo(svrIntf: IStdDispatch);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStdDispatch.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStdDispatch.GetDefaultInterface: IStdDispatch;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TStdDispatch.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TStdDispatch.Destroy;
begin
  inherited Destroy;
end;

class function CoBalloonTip.Create: IBalloonTip;
begin
  Result := CreateComObject(CLASS_BalloonTip) as IBalloonTip;
end;

class function CoBalloonTip.CreateRemote(const MachineName: string): IBalloonTip;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BalloonTip) as IBalloonTip;
end;

procedure TBalloonTip.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8FC25BBF-06C3-44E5-8CE7-1ACB880AA2FD}';
    IntfIID:   '{A16801B1-8BA4-4F0D-A589-86443B09037C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBalloonTip.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IBalloonTip;
  end;
end;

procedure TBalloonTip.ConnectTo(svrIntf: IBalloonTip);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBalloonTip.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBalloonTip.GetDefaultInterface: IBalloonTip;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TBalloonTip.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TBalloonTip.Destroy;
begin
  inherited Destroy;
end;

function TBalloonTip.Get_Title(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Title(pVal);
end;

function TBalloonTip.Set_Title(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Title(pVal);
end;

function TBalloonTip.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TBalloonTip.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TBalloonTip.Get_Icon(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Icon(pVal);
end;

function TBalloonTip.Set_Icon(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Icon(pVal);
end;

function TBalloonTip.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TBalloonTip.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TBalloonTip.Get_Timeout(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Timeout(pVal);
end;

function TBalloonTip.Set_Timeout(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Timeout(pVal);
end;

class function CoWindow.Create: IWindow;
begin
  Result := CreateComObject(CLASS_Window) as IWindow;
end;

class function CoWindow.CreateRemote(const MachineName: string): IWindow;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Window) as IWindow;
end;

procedure TWindow.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8C57DD2E-6E39-4FC2-9553-A615CF101306}';
    IntfIID:   '{BEF454E2-AC05-40F6-BCFD-300B70CAD3FC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TWindow.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IWindow;
  end;
end;

procedure TWindow.ConnectTo(svrIntf: IWindow);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TWindow.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TWindow.GetDefaultInterface: IWindow;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TWindow.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TWindow.Destroy;
begin
  inherited Destroy;
end;

function TWindow.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TWindow.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TWindow.Get_ClassName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ClassName(pVal);
end;

class function CoClipboard.Create: IClipboard;
begin
  Result := CreateComObject(CLASS_Clipboard) as IClipboard;
end;

class function CoClipboard.CreateRemote(const MachineName: string): IClipboard;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Clipboard) as IClipboard;
end;

procedure TClipboard.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{28BF1809-98E1-48B7-9F7C-017D04E2D3D5}';
    IntfIID:   '{3CA40ACA-6385-4080-BFC9-82437A0FF90D}';
    EventIID:  '{FBAA7B25-99FF-4B15-832D-5A85EF97F814}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TClipboard.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IClipboard;
  end;
end;

procedure TClipboard.ConnectTo(svrIntf: IClipboard);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TClipboard.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TClipboard.GetDefaultInterface: IClipboard;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TClipboard.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TClipboard.Destroy;
begin
  inherited Destroy;
end;

procedure TClipboard.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TClipboard.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TClipboard.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TClipboard.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TClipboard.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TClipboard.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TClipboard.Get_ClipboardViewer(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ClipboardViewer(pVal);
end;

function TClipboard.Set_ClipboardViewer(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ClipboardViewer(pVal);
end;

function TClipboard.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TClipboard.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TClipboard.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TClipboard.Empty: HResult;
begin
  Result := DefaultInterface.Empty;
end;

class function CoTaskBar.Create: ITaskBar;
begin
  Result := CreateComObject(CLASS_TaskBar) as ITaskBar;
end;

class function CoTaskBar.CreateRemote(const MachineName: string): ITaskBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TaskBar) as ITaskBar;
end;

procedure TTaskBar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{928AB172-9BE8-4B27-B0F2-397EEC34A01B}';
    IntfIID:   '{805EF906-67A7-4A9D-B026-1F5AA4E9303C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTaskBar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ITaskBar;
  end;
end;

procedure TTaskBar.ConnectTo(svrIntf: ITaskBar);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTaskBar.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTaskBar.GetDefaultInterface: ITaskBar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTaskBar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTaskBar.Destroy;
begin
  inherited Destroy;
end;

function TTaskBar.Get_Buttons(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Buttons(pVal);
end;

function TTaskBar.Set_Buttons(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Buttons(pVal);
end;

function TTaskBar._Set_Buttons(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Buttons(pVal);
end;

function TTaskBar.Get_State(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_State(pVal);
end;

function TTaskBar.Set_State(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_State(pVal);
end;

function TTaskBar.Get_Max(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TTaskBar.Set_Max(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Max(pVal);
end;

function TTaskBar.Get_Position(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Position(pVal);
end;

function TTaskBar.Set_Position(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Position(pVal);
end;

function TTaskBar.AddImages(const newVal: IDispatch): HResult;
begin
  Result := DefaultInterface.AddImages(newVal);
end;

function TTaskBar.SetThumbnailClip(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetThumbnailClip(Left, Top, Width, Height);
end;

class function CoResourceUsageGraph.Create: IResourceUsageGraph;
begin
  Result := CreateComObject(CLASS_ResourceUsageGraph) as IResourceUsageGraph;
end;

class function CoResourceUsageGraph.CreateRemote(const MachineName: string): IResourceUsageGraph;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ResourceUsageGraph) as IResourceUsageGraph;
end;

procedure TResourceUsageGraph.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E0D914D3-A622-4649-A3CC-13FB8E6E8622}';
    IntfIID:   '{F61F2DE3-D729-4ADB-B1E2-6F4B496000F9}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TResourceUsageGraph.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IResourceUsageGraph;
  end;
end;

procedure TResourceUsageGraph.ConnectTo(svrIntf: IResourceUsageGraph);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TResourceUsageGraph.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TResourceUsageGraph.GetDefaultInterface: IResourceUsageGraph;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TResourceUsageGraph.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TResourceUsageGraph.Destroy;
begin
  inherited Destroy;
end;

procedure TResourceUsageGraph.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TResourceUsageGraph.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TResourceUsageGraph.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TResourceUsageGraph.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TResourceUsageGraph.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TResourceUsageGraph.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TResourceUsageGraph.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TResourceUsageGraph.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TResourceUsageGraph.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TResourceUsageGraph.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TResourceUsageGraph.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TResourceUsageGraph.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TResourceUsageGraph.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TResourceUsageGraph.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TResourceUsageGraph.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TResourceUsageGraph.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TResourceUsageGraph.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TResourceUsageGraph.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TResourceUsageGraph.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TResourceUsageGraph.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TResourceUsageGraph.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TResourceUsageGraph.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TResourceUsageGraph.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TResourceUsageGraph.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TResourceUsageGraph.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TResourceUsageGraph.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TResourceUsageGraph.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TResourceUsageGraph.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TResourceUsageGraph.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TResourceUsageGraph.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TResourceUsageGraph.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TResourceUsageGraph.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TResourceUsageGraph.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TResourceUsageGraph.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TResourceUsageGraph.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TResourceUsageGraph.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TResourceUsageGraph.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TResourceUsageGraph.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TResourceUsageGraph.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TResourceUsageGraph.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TResourceUsageGraph.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TResourceUsageGraph._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TResourceUsageGraph.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TResourceUsageGraph.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TResourceUsageGraph.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TResourceUsageGraph.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TResourceUsageGraph._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TResourceUsageGraph.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TResourceUsageGraph.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TResourceUsageGraph._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TResourceUsageGraph.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TResourceUsageGraph.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TResourceUsageGraph._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TResourceUsageGraph.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TResourceUsageGraph.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TResourceUsageGraph.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TResourceUsageGraph.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TResourceUsageGraph.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TResourceUsageGraph.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TResourceUsageGraph.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TResourceUsageGraph.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TResourceUsageGraph.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TResourceUsageGraph.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TResourceUsageGraph.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TResourceUsageGraph.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TResourceUsageGraph.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TResourceUsageGraph.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TResourceUsageGraph.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TResourceUsageGraph.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TResourceUsageGraph.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TResourceUsageGraph.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TResourceUsageGraph.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TResourceUsageGraph.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TResourceUsageGraph.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TResourceUsageGraph.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TResourceUsageGraph.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TResourceUsageGraph.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TResourceUsageGraph.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TResourceUsageGraph.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TResourceUsageGraph.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TResourceUsageGraph.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TResourceUsageGraph.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TResourceUsageGraph.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TResourceUsageGraph.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TResourceUsageGraph.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TResourceUsageGraph.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TResourceUsageGraph.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TResourceUsageGraph.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TResourceUsageGraph.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TResourceUsageGraph.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TResourceUsageGraph.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TResourceUsageGraph.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TResourceUsageGraph.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TResourceUsageGraph.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TResourceUsageGraph.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TResourceUsageGraph.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TResourceUsageGraph.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TResourceUsageGraph.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TResourceUsageGraph.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TResourceUsageGraph.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TResourceUsageGraph.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TResourceUsageGraph.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TResourceUsageGraph.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TResourceUsageGraph.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TResourceUsageGraph.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TResourceUsageGraph.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TResourceUsageGraph.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TResourceUsageGraph.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TResourceUsageGraph.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TResourceUsageGraph.Get_Value(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TResourceUsageGraph.Get_Min(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Min(pVal);
end;

function TResourceUsageGraph.Get_Max(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Max(pVal);
end;

function TResourceUsageGraph.Get_Page(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Page(pVal);
end;

function TResourceUsageGraph.Set_Page(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Page(pVal);
end;

function TResourceUsageGraph.Get_MinYValue(out pVal: Double): HResult;
begin
  Result := DefaultInterface.Get_MinYValue(pVal);
end;

function TResourceUsageGraph.Set_MinYValue(pVal: Double): HResult;
begin
  Result := DefaultInterface.Set_MinYValue(pVal);
end;

function TResourceUsageGraph.Get_MaxYValue(out pVal: Double): HResult;
begin
  Result := DefaultInterface.Get_MaxYValue(pVal);
end;

function TResourceUsageGraph.Set_MaxYValue(pVal: Double): HResult;
begin
  Result := DefaultInterface.Set_MaxYValue(pVal);
end;

function TResourceUsageGraph.Get_BackgroundBrush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_BackgroundBrush(pVal);
end;

function TResourceUsageGraph.Set_BackgroundBrush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_BackgroundBrush(pVal);
end;

function TResourceUsageGraph._Set_BackgroundBrush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_BackgroundBrush(pVal);
end;

function TResourceUsageGraph.Get_PageControlWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_PageControlWidth(pVal);
end;

function TResourceUsageGraph.Set_PageControlWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_PageControlWidth(pVal);
end;

function TResourceUsageGraph.Get_SelectedValue(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_SelectedValue(pVal);
end;

function TResourceUsageGraph.Set_SelectedValue(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_SelectedValue(pVal);
end;

function TResourceUsageGraph.Get_SelectedYValue(out pVal: Double): HResult;
begin
  Result := DefaultInterface.Get_SelectedYValue(pVal);
end;

function TResourceUsageGraph.Get_SelectedIndex(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_SelectedIndex(pVal);
end;

function TResourceUsageGraph.Set_SelectedIndex(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_SelectedIndex(pVal);
end;

function TResourceUsageGraph.Get_Approximation(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Approximation(pVal);
end;

function TResourceUsageGraph.Set_Approximation(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Approximation(pVal);
end;

function TResourceUsageGraph.Get_AlwaysFillWindow(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AlwaysFillWindow(pVal);
end;

function TResourceUsageGraph.Set_AlwaysFillWindow(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AlwaysFillWindow(pVal);
end;

function TResourceUsageGraph.Get_AutoRemove(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoRemove(pVal);
end;

function TResourceUsageGraph.Set_AutoRemove(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoRemove(pVal);
end;

function TResourceUsageGraph.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TResourceUsageGraph.RemoveEventHandler(const EventName: WideString; 
                                                EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TResourceUsageGraph.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TResourceUsageGraph.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TResourceUsageGraph.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TResourceUsageGraph.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TResourceUsageGraph.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TResourceUsageGraph.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TResourceUsageGraph.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TResourceUsageGraph.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TResourceUsageGraph.Add(Offset: LongWord; Value: Double): HResult;
begin
  Result := DefaultInterface.Add(Offset, Value);
end;

function TResourceUsageGraph.AddEx(Offset: LongWord; Value: Double; const Text: WideString): HResult;
begin
  Result := DefaultInterface.AddEx(Offset, Value, Text);
end;

function TResourceUsageGraph.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TResourceUsageGraph.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TResourceUsageGraph.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

class function CoProperty_.Create: IProperty;
begin
  Result := CreateComObject(CLASS_Property_) as IProperty;
end;

class function CoProperty_.CreateRemote(const MachineName: string): IProperty;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Property_) as IProperty;
end;

procedure TProperty_.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2ADF1BFC-FCC0-4745-8E39-3C77CAB64AA5}';
    IntfIID:   '{0C78AFD5-6C85-4D18-971A-B3BDC0FD0FFE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TProperty_.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IProperty;
  end;
end;

procedure TProperty_.ConnectTo(svrIntf: IProperty);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TProperty_.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TProperty_.GetDefaultInterface: IProperty;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TProperty_.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TProperty_.Destroy;
begin
  inherited Destroy;
end;

function TProperty_.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TProperty_.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TProperty_.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TProperty_.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TProperty_.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TProperty_.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TProperty_.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TProperty_.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TProperty_.Get_Expanded(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Expanded(pVal);
end;

function TProperty_.Set_Expanded(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Expanded(pVal);
end;

function TProperty_.Get_Value(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TProperty_.Set_Value(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Value(pVal);
end;

function TProperty_.Get_Control(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Control(pVal);
end;

function TProperty_.Get_Height(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TProperty_.Set_Height(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TProperty_.Get_Selected(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Selected(pVal);
end;

function TProperty_.Set_Selected(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Selected(pVal);
end;

function TProperty_.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TProperty_.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TProperty_.Add(const Text: WideString; out pItem: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Text, pItem);
end;

function TProperty_.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TProperty_.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

class function CoPropertyGrid.Create: IPropertyGrid;
begin
  Result := CreateComObject(CLASS_PropertyGrid) as IPropertyGrid;
end;

class function CoPropertyGrid.CreateRemote(const MachineName: string): IPropertyGrid;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyGrid) as IPropertyGrid;
end;

procedure TPropertyGrid.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ADBC97EA-F49D-4202-BB1E-A74171F96D70}';
    IntfIID:   '{A10865D8-EEF9-412E-AD54-36B52F1F5D3F}';
    EventIID:  '{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPropertyGrid.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IPropertyGrid;
  end;
end;

procedure TPropertyGrid.ConnectTo(svrIntf: IPropertyGrid);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TPropertyGrid.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TPropertyGrid.GetDefaultInterface: IPropertyGrid;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPropertyGrid.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPropertyGrid.Destroy;
begin
  inherited Destroy;
end;

procedure TPropertyGrid.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1: if Assigned(FOnClick) then
         FOnClick(Self, Params[0] {const IDispatch});
    2: if Assigned(FOnDblClick) then
         FOnDblClick(Self,
                     Params[0] {const IDispatch},
                     Params[1] {Integer},
                     Params[2] {Integer},
                     Params[3] {Integer},
                     Params[4] {Integer});
    3: if Assigned(FOnChange) then
         FOnChange(Self, Params[0] {const IDispatch});
    4: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer});
    5: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Params[0] {const IDispatch},
                  Params[1] {Integer},
                  Params[2] {Integer});
    6: if Assigned(FOnMouseEnter) then
         FOnMouseEnter(Self, Params[0] {const IDispatch});
    7: if Assigned(FOnMouseLeave) then
         FOnMouseLeave(Self, Params[0] {const IDispatch});
    8: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer},
                      Params[4] {Integer});
    9: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Params[0] {const IDispatch},
                      Params[1] {Integer},
                      Params[2] {Integer},
                      Params[3] {Integer});
    10: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Params[0] {const IDispatch},
                    Params[1] {Integer},
                    Params[2] {Integer},
                    Params[3] {Integer},
                    Params[4] {Integer});
    11: if Assigned(FOnResize) then
         FOnResize(Self, Params[0] {const IDispatch});
    12: if Assigned(FOnMove) then
         FOnMove(Self, Params[0] {const IDispatch});
    13: if Assigned(FOnDestroy) then
         FOnDestroy(Self, Params[0] {const IDispatch});
    14: if Assigned(FOnShow) then
         FOnShow(Self, Params[0] {const IDispatch});
    15: if Assigned(FOnHide) then
         FOnHide(Self, Params[0] {const IDispatch});
    16: if Assigned(FOnEnabledChange) then
         FOnEnabledChange(Self, Params[0] {const IDispatch});
    17: if Assigned(FOnSetFocus) then
         FOnSetFocus(Self, Params[0] {const IDispatch});
    18: if Assigned(FOnKillFocus) then
         FOnKillFocus(Self, Params[0] {const IDispatch});
    100: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {const IDispatch},
                       Params[1] {Integer},
                       Params[2] {Integer},
                       Params[3] {Integer},
                       Params[4] {Integer});
    101: if Assigned(FOnBeginDock) then
         FOnBeginDock(Self,
                      Params[0] {const IDispatch},
                      Params[1] {const IDispatch},
                      Params[2] {const IDispatch});
    102: if Assigned(FOnDockControlCreate) then
         FOnDockControlCreate(Self,
                              Params[0] {const IDispatch},
                              Params[1] {const IDispatch},
                              Params[2] {const IDispatch},
                              Params[3] {const IDispatch});
    103: if Assigned(FOnUndockQuery) then
         FOnUndockQuery(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    104: if Assigned(FOnUndock) then
         FOnUndock(Self, Params[0] {const IDispatch});
  end; {case DispID}
end;

function TPropertyGrid.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TPropertyGrid.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TPropertyGrid.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TPropertyGrid.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TPropertyGrid.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TPropertyGrid.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TPropertyGrid.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TPropertyGrid.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TPropertyGrid.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TPropertyGrid.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TPropertyGrid.Get_Root(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Root(pVal);
end;

function TPropertyGrid.Get_Form(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Form(pVal);
end;

function TPropertyGrid.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TPropertyGrid.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TPropertyGrid.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TPropertyGrid.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TPropertyGrid.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TPropertyGrid.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TPropertyGrid.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TPropertyGrid.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TPropertyGrid.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TPropertyGrid.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TPropertyGrid.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TPropertyGrid.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

function TPropertyGrid.Get_MinWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinWidth(pVal);
end;

function TPropertyGrid.Set_MinWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinWidth(pVal);
end;

function TPropertyGrid.Get_MinHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MinHeight(pVal);
end;

function TPropertyGrid.Set_MinHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MinHeight(pVal);
end;

function TPropertyGrid.Get_MaxWidth(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxWidth(pVal);
end;

function TPropertyGrid.Set_MaxWidth(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxWidth(pVal);
end;

function TPropertyGrid.Get_MaxHeight(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_MaxHeight(pVal);
end;

function TPropertyGrid.Set_MaxHeight(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_MaxHeight(pVal);
end;

function TPropertyGrid.Get_Align(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_Align(pVal);
end;

function TPropertyGrid.Set_Align(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_Align(pVal);
end;

function TPropertyGrid.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TPropertyGrid.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TPropertyGrid.Get_ParentColor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentColor(pVal);
end;

function TPropertyGrid.Set_ParentColor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentColor(pVal);
end;

function TPropertyGrid.Get_Font(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Font(pVal);
end;

function TPropertyGrid.Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Font(pVal);
end;

function TPropertyGrid._Set_Font(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Font(pVal);
end;

function TPropertyGrid.Get_ParentFont(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentFont(pVal);
end;

function TPropertyGrid.Set_ParentFont(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentFont(pVal);
end;

function TPropertyGrid.Get_Pen(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Pen(pVal);
end;

function TPropertyGrid.Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Pen(pVal);
end;

function TPropertyGrid._Set_Pen(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Pen(pVal);
end;

function TPropertyGrid.Get_Brush(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Brush(pVal);
end;

function TPropertyGrid.Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Brush(pVal);
end;

function TPropertyGrid._Set_Brush(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_Brush(pVal);
end;

function TPropertyGrid.Get_PopupMenu(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_PopupMenu(pVal);
end;

function TPropertyGrid.Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_PopupMenu(pVal);
end;

function TPropertyGrid._Set_PopupMenu(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_PopupMenu(pVal);
end;

function TPropertyGrid.Get_Border(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Border(pVal);
end;

function TPropertyGrid.Set_Border(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Border(pVal);
end;

function TPropertyGrid.Get_Focused(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Focused(pVal);
end;

function TPropertyGrid.Get_TabOrder(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_TabOrder(pVal);
end;

function TPropertyGrid.Set_TabOrder(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_TabOrder(pVal);
end;

function TPropertyGrid.Get_TabStop(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_TabStop(pVal);
end;

function TPropertyGrid.Set_TabStop(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_TabStop(pVal);
end;

function TPropertyGrid.Get_Name(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Name(pVal);
end;

function TPropertyGrid.Set_Name(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Name(pVal);
end;

function TPropertyGrid.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TPropertyGrid.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TPropertyGrid.Get_ClientWidth(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientWidth(pVal);
end;

function TPropertyGrid.Set_ClientWidth(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientWidth(pVal);
end;

function TPropertyGrid.Get_ClientHeight(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_ClientHeight(pVal);
end;

function TPropertyGrid.Set_ClientHeight(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_ClientHeight(pVal);
end;

function TPropertyGrid.Get_Cursor(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TPropertyGrid.Set_Cursor(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TPropertyGrid.Get_Hint(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Hint(pVal);
end;

function TPropertyGrid.Set_Hint(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Hint(pVal);
end;

function TPropertyGrid.Get_ThemeApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ThemeApplicationName(pVal);
end;

function TPropertyGrid.Set_ThemeApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ThemeApplicationName(pVal);
end;

function TPropertyGrid.Get_Docking(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Docking(pVal);
end;

function TPropertyGrid.Get_Layering(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Layering(pVal);
end;

function TPropertyGrid.Set_OnClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnClick(Param1);
end;

function TPropertyGrid.Set_OnDblClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDblClick(Param1);
end;

function TPropertyGrid.Set_OnChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnChange(Param1);
end;

function TPropertyGrid.Set_OnKeyDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyDown(Param1);
end;

function TPropertyGrid.Set_OnKeyUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKeyUp(Param1);
end;

function TPropertyGrid.Set_OnMouseEnter(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseEnter(Param1);
end;

function TPropertyGrid.Set_OnMouseLeave(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseLeave(Param1);
end;

function TPropertyGrid.Set_OnMouseUp(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseUp(Param1);
end;

function TPropertyGrid.Set_OnMouseMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseMove(Param1);
end;

function TPropertyGrid.Set_OnMouseDown(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseDown(Param1);
end;

function TPropertyGrid.Set_OnResize(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnResize(Param1);
end;

function TPropertyGrid.Set_OnMove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMove(Param1);
end;

function TPropertyGrid.Set_OnDestroy(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDestroy(Param1);
end;

function TPropertyGrid.Set_OnShow(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnShow(Param1);
end;

function TPropertyGrid.Set_OnHide(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnHide(Param1);
end;

function TPropertyGrid.Set_OnEnabledChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnEnabledChange(Param1);
end;

function TPropertyGrid.Set_OnSetFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnSetFocus(Param1);
end;

function TPropertyGrid.Set_OnKillFocus(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnKillFocus(Param1);
end;

function TPropertyGrid.Set_OnMouseWheel(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnMouseWheel(Param1);
end;

function TPropertyGrid.Set_OnBeginDock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnBeginDock(Param1);
end;

function TPropertyGrid.Set_OnDockControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDockControlCreate(Param1);
end;

function TPropertyGrid.Set_OnUndockQuery(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndockQuery(Param1);
end;

function TPropertyGrid.Set_OnUndock(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnUndock(Param1);
end;

function TPropertyGrid.Get_Debug(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Debug(pVal);
end;

function TPropertyGrid.Set_Debug(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Debug(pVal);
end;

function TPropertyGrid.Get_ParentMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentMouseWheel(pVal);
end;

function TPropertyGrid.Set_ParentMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentMouseWheel(pVal);
end;

function TPropertyGrid.Get_StopMouseWheel(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_StopMouseWheel(pVal);
end;

function TPropertyGrid.Set_StopMouseWheel(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_StopMouseWheel(pVal);
end;

function TPropertyGrid.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TPropertyGrid.Get_ExtendedProperties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ExtendedProperties(pVal);
end;

function TPropertyGrid.Get_MaskEvents(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_MaskEvents(pVal);
end;

function TPropertyGrid.Set_MaskEvents(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_MaskEvents(pVal);
end;

function TPropertyGrid.Get_Controls(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Controls(pVal);
end;

function TPropertyGrid.Get_BorderWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BorderWidth(pVal);
end;

function TPropertyGrid.Set_BorderWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BorderWidth(pVal);
end;

function TPropertyGrid.Get_BevelWidth(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_BevelWidth(pVal);
end;

function TPropertyGrid.Set_BevelWidth(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_BevelWidth(pVal);
end;

function TPropertyGrid.Get_BevelOuter(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelOuter(pVal);
end;

function TPropertyGrid.Set_BevelOuter(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelOuter(pVal);
end;

function TPropertyGrid.Get_BevelInner(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_BevelInner(pVal);
end;

function TPropertyGrid.Set_BevelInner(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_BevelInner(pVal);
end;

function TPropertyGrid.Get_GraphFont(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_GraphFont(pVal);
end;

function TPropertyGrid.Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_GraphFont(pVal);
end;

function TPropertyGrid._Set_GraphFont(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface._Set_GraphFont(pVal);
end;

function TPropertyGrid.Get_AutoScroll(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoScroll(pVal);
end;

function TPropertyGrid.Set_AutoScroll(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoScroll(pVal);
end;

function TPropertyGrid.Get_Tracking(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Tracking(pVal);
end;

function TPropertyGrid.Set_Tracking(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Tracking(pVal);
end;

function TPropertyGrid.Get_CaptureMouse(out pVal: Word): HResult;
begin
  Result := DefaultInterface.Get_CaptureMouse(pVal);
end;

function TPropertyGrid.Set_CaptureMouse(pVal: Word): HResult;
begin
  Result := DefaultInterface.Set_CaptureMouse(pVal);
end;

function TPropertyGrid.Get_ParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ParentBackground(pVal);
end;

function TPropertyGrid.Set_ParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ParentBackground(pVal);
end;

function TPropertyGrid.Get_BorderParentBackground(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_BorderParentBackground(pVal);
end;

function TPropertyGrid.Set_BorderParentBackground(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_BorderParentBackground(pVal);
end;

function TPropertyGrid.Get_AutoSplit(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoSplit(pVal);
end;

function TPropertyGrid.Set_AutoSplit(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoSplit(pVal);
end;

function TPropertyGrid.Get_GroupBox(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_GroupBox(pVal);
end;

function TPropertyGrid.Set_GroupBox(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_GroupBox(pVal);
end;

function TPropertyGrid.Get_Margin(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Margin(pVal);
end;

function TPropertyGrid.Set_Margin(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Margin(pVal);
end;

function TPropertyGrid.Get_MarginLeft(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginLeft(pVal);
end;

function TPropertyGrid.Set_MarginLeft(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginLeft(pVal);
end;

function TPropertyGrid.Get_MarginTop(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginTop(pVal);
end;

function TPropertyGrid.Set_MarginTop(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginTop(pVal);
end;

function TPropertyGrid.Get_MarginRight(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginRight(pVal);
end;

function TPropertyGrid.Set_MarginRight(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginRight(pVal);
end;

function TPropertyGrid.Get_MarginBottom(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_MarginBottom(pVal);
end;

function TPropertyGrid.Set_MarginBottom(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_MarginBottom(pVal);
end;

function TPropertyGrid.Get_Items(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Items(pVal);
end;

function TPropertyGrid.Get_ValueColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ValueColor(pVal);
end;

function TPropertyGrid.Set_ValueColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ValueColor(pVal);
end;

function TPropertyGrid.Get_Property_(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Property_(pVal);
end;

function TPropertyGrid.Set_Property_(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_Property_(pVal);
end;

function TPropertyGrid.Get_SelectedItem(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SelectedItem(pVal);
end;

function TPropertyGrid.Set_SelectedItem(const pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Set_SelectedItem(pVal);
end;

function TPropertyGrid.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TPropertyGrid.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TPropertyGrid.Show: HResult;
begin
  Result := DefaultInterface.Show;
end;

function TPropertyGrid.Hide: HResult;
begin
  Result := DefaultInterface.Hide;
end;

function TPropertyGrid.Destroy1: HResult;
begin
  Result := DefaultInterface.Destroy;
end;

function TPropertyGrid.SetBounds(Left: Integer; Top: Integer; Width: Integer; Height: Integer): HResult;
begin
  Result := DefaultInterface.SetBounds(Left, Top, Width, Height);
end;

function TPropertyGrid.CenterControl: HResult;
begin
  Result := DefaultInterface.CenterControl;
end;

function TPropertyGrid.SetFocus: HResult;
begin
  Result := DefaultInterface.SetFocus;
end;

function TPropertyGrid.Repaint: HResult;
begin
  Result := DefaultInterface.Repaint;
end;

function TPropertyGrid.PropertyHasValue(const PropertyName: WideString; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.PropertyHasValue(PropertyName, Result);
end;

function TPropertyGrid.CreateButton(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    const Text: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateButton(Left, Top, Width, Height, Text, pControl);
end;

function TPropertyGrid.CreateCheckBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      const Text: WideString; Checked: WordBool; 
                                      out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCheckBox(Left, Top, Width, Height, Text, Checked, pControl);
end;

function TPropertyGrid.CreateRadioButton(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; const Text: WideString; 
                                         out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRadioButton(Left, Top, Width, Height, Text, pControl);
end;

function TPropertyGrid.CreateEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                  Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateEdit(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateListBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListBox(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateComboBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateComboBox(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateFrame(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateFrame(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateGroupBox(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateGroupBox(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateProgressBar(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateProgressBar(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateTabControl(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTabControl(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateToolBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateToolBar(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateMenuBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateMenuBar(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateReBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateReBar(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateStatusBar(out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateStatusBar(pControl);
end;

function TPropertyGrid.CreateHyperLink(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; const Url: WideString; 
                                       const Label_: WideString; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHyperLink(Left, Top, Width, Height, Url, Label_, pControl);
end;

function TPropertyGrid.CreatePager(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePager(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateScrollBar(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateScrollBar(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateActiveXControl(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; const ID: WideString; 
                                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControl(Left, Top, Width, Height, ID, pControl);
end;

function TPropertyGrid.CreateActiveXControlLicensed(Left: Integer; Top: Integer; Width: Integer; 
                                                    Height: Integer; const ID: WideString; 
                                                    const LicKey: WideString; 
                                                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, 
                                                          pControl);
end;

function TPropertyGrid.CreateHeader(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHeader(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateListView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateListView(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateTreeView(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTreeView(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateRichEdit(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Style: Integer; Version: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateRichEdit(Left, Top, Width, Height, Style, Version, pControl);
end;

function TPropertyGrid.CreateAnimate(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                     Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAnimate(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateHotKey(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateHotKey(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateTrackBar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateTrackBar(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateUpDown(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                    Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateUpDown(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateDateTimePicker(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateDateTimePicker(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateCalendar(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                      Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateCalendar(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreateIPAddress(Left: Integer; Top: Integer; Width: Integer; 
                                       Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateIPAddress(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateSplitter(Align: Word; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitter(Align, pControl);
end;

function TPropertyGrid.CreateSplitPanel(Left: Integer; Top: Integer; Width: Integer; 
                                        Height: Integer; Vertical: WordBool; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateSplitPanel(Left, Top, Width, Height, Vertical, pControl);
end;

function TPropertyGrid.CreateResourceUsageGraph(Left: Integer; Top: Integer; Width: Integer; 
                                                Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateResourceUsageGraph(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreatePropertyGrid(Left: Integer; Top: Integer; Width: Integer; 
                                          Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePropertyGrid(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateLabel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                   Style: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateLabel(Left, Top, Width, Height, Style, pControl);
end;

function TPropertyGrid.CreatePageControl(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreatePageControl(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.CreateAutoSplitFrame(Left: Integer; Top: Integer; Width: Integer; 
                                            Height: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.CreateAutoSplitFrame(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.Line(Ax: Integer; Ay: Integer; Bx: Integer; By: Integer; 
                            out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Line(Ax, Ay, Bx, By, pControl);
end;

function TPropertyGrid.Rectangle(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Rectangle(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.RoundRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 nWidth: Integer; nHeight: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.RoundRect(Left, Top, Width, Height, nWidth, nHeight, pControl);
end;

function TPropertyGrid.Circle(x: Integer; y: Integer; r: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Circle(x, y, r, pControl);
end;

function TPropertyGrid.Ellipse(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Ellipse(Left, Top, Width, Height, pControl);
end;

function TPropertyGrid.Arc(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           nXStartArc: Integer; nYStartArc: Integer; nXEndArc: Integer; 
                           nYEndArc: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                 nYEndArc, pControl);
end;

function TPropertyGrid.Chord(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                             nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                   nYRadial2, pControl);
end;

function TPropertyGrid.Pie(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                           nXRadial1: Integer; nYRadial1: Integer; nXRadial2: Integer; 
                           nYRadial2: Integer; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                 nYRadial2, pControl);
end;

function TPropertyGrid.Polygon(Data: PSafeArray; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Polygon(Data, pControl);
end;

function TPropertyGrid.TextOut(x: Integer; y: Integer; const Text: WideString; 
                               out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextOut(x, y, Text, pControl);
end;

function TPropertyGrid.TextRect(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                const Text: WideString; Flags: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.TextRect(Left, Top, Width, Height, Text, Flags, pControl);
end;

function TPropertyGrid.DrawImage(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                                 Image: OleVariant; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawImage(Left, Top, Width, Height, Image, pControl);
end;

function TPropertyGrid.DrawRegion(Left: Integer; Top: Integer; Region: LongWord; 
                                  out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.DrawRegion(Left, Top, Region, pControl);
end;

function TPropertyGrid.Bevel(Left: Integer; Top: Integer; Width: Integer; Height: Integer; 
                             BevelOuter: Integer; BevelInner: Integer; BorderWidth: LongWord; 
                             BevelWidth: LongWord; out pControl: IDispatch): HResult;
begin
  Result := DefaultInterface.Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, BorderWidth, 
                                   BevelWidth, pControl);
end;

function TPropertyGrid.BeginUpdate: HResult;
begin
  Result := DefaultInterface.BeginUpdate;
end;

function TPropertyGrid.EndUpdate: HResult;
begin
  Result := DefaultInterface.EndUpdate;
end;

function TPropertyGrid.Get(const Name: WideString; out Control: IDispatch): HResult;
begin
  Result := DefaultInterface.Get(Name, Control);
end;

function TPropertyGrid.Lookup(Value: OleVariant; out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Lookup(Value, pVal);
end;

class function CoConsole.Create: IConsole;
begin
  Result := CreateComObject(CLASS_Console) as IConsole;
end;

class function CoConsole.CreateRemote(const MachineName: string): IConsole;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Console) as IConsole;
end;

procedure TConsole.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{226BEEBC-76FC-4F75-A8A8-49A616F53E72}';
    IntfIID:   '{501853C5-0B67-4372-866C-9D082B219BFE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TConsole.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IConsole;
  end;
end;

procedure TConsole.ConnectTo(svrIntf: IConsole);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TConsole.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TConsole.GetDefaultInterface: IConsole;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TConsole.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TConsole.Destroy;
begin
  inherited Destroy;
end;

function TConsole.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TConsole.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TConsole.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TConsole.Get_Visible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Visible(pVal);
end;

function TConsole.Set_Visible(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Visible(pVal);
end;

function TConsole.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TConsole.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TConsole.WriteLine(const Text: WideString): HResult;
begin
  Result := DefaultInterface.WriteLine(Text);
end;

function TConsole.Write(const Text: WideString): HResult;
begin
  Result := DefaultInterface.Write(Text);
end;

class function CoDocking.Create: IDocking;
begin
  Result := CreateComObject(CLASS_Docking) as IDocking;
end;

class function CoDocking.CreateRemote(const MachineName: string): IDocking;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Docking) as IDocking;
end;

procedure TDocking.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D5714DD5-762C-47AD-9307-BAD6E4943740}';
    IntfIID:   '{7C323E2F-57F2-46DB-BAD5-CBCFD7CCE9C8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDocking.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDocking;
  end;
end;

procedure TDocking.ConnectTo(svrIntf: IDocking);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDocking.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDocking.GetDefaultInterface: IDocking;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TDocking.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TDocking.Destroy;
begin
  inherited Destroy;
end;

function TDocking.Get_UniqueId(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_UniqueId(pVal);
end;

function TDocking.Set_UniqueId(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_UniqueId(pVal);
end;

function TDocking.Get_AllowDockAsChild(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowDockAsChild(pVal);
end;

function TDocking.Set_AllowDockAsChild(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowDockAsChild(pVal);
end;

function TDocking.Get_AllowDockAsNeighbour(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowDockAsNeighbour(pVal);
end;

function TDocking.Set_AllowDockAsNeighbour(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowDockAsNeighbour(pVal);
end;

function TDocking.Get_DropTarget(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DropTarget(pVal);
end;

function TDocking.Set_DropTarget(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DropTarget(pVal);
end;

function TDocking.Get_AlwaysDockTab(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AlwaysDockTab(pVal);
end;

function TDocking.Set_AlwaysDockTab(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AlwaysDockTab(pVal);
end;

function TDocking.Get_AlwaysDockPage(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AlwaysDockPage(pVal);
end;

function TDocking.Set_AlwaysDockPage(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AlwaysDockPage(pVal);
end;

function TDocking.Get_DockToolWindow(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DockToolWindow(pVal);
end;

function TDocking.Set_DockToolWindow(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_DockToolWindow(pVal);
end;

function TDocking.Get_AutoCreated(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AutoCreated(pVal);
end;

function TDocking.Set_AutoCreated(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AutoCreated(pVal);
end;

function TDocking.Get_PageControlTag(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_PageControlTag(pVal);
end;

function TDocking.Set_PageControlTag(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_PageControlTag(pVal);
end;

function TDocking.DockAsChild(const Control: IDispatch; ControlAlign: Word): HResult;
begin
  Result := DefaultInterface.DockAsChild(Control, ControlAlign);
end;

function TDocking.DockAsNeighbour(const Control: IDispatch; ControlAlign: Word): HResult;
begin
  Result := DefaultInterface.DockAsNeighbour(Control, ControlAlign);
end;

function TDocking.UnDock(ControlVisible: WordBool): HResult;
begin
  Result := DefaultInterface.UnDock(ControlVisible);
end;

class function CoGraphicElement.Create: IGraphicElement;
begin
  Result := CreateComObject(CLASS_GraphicElement) as IGraphicElement;
end;

class function CoGraphicElement.CreateRemote(const MachineName: string): IGraphicElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GraphicElement) as IGraphicElement;
end;

procedure TGraphicElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F9AB6C8E-63BB-4387-996A-5863E57448C8}';
    IntfIID:   '{73A618A4-D771-4BE2-BFE6-4ADB0B0C3703}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGraphicElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IGraphicElement;
  end;
end;

procedure TGraphicElement.ConnectTo(svrIntf: IGraphicElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGraphicElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGraphicElement.GetDefaultInterface: IGraphicElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TGraphicElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TGraphicElement.Destroy;
begin
  inherited Destroy;
end;

function TGraphicElement.Get_Color(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Color(pVal);
end;

function TGraphicElement.Set_Color(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Color(pVal);
end;

function TGraphicElement.Get_FontColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_FontColor(pVal);
end;

function TGraphicElement.Set_FontColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_FontColor(pVal);
end;

function TGraphicElement.Get_Normal(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Normal(pVal);
end;

function TGraphicElement.Get_Selected(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Selected(pVal);
end;

function TGraphicElement.Get_Hot(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Hot(pVal);
end;

function TGraphicElement.Get_ControlFocused(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_ControlFocused(pVal);
end;

class function CoBeginDockContext.Create: IBeginDockContext;
begin
  Result := CreateComObject(CLASS_BeginDockContext) as IBeginDockContext;
end;

class function CoBeginDockContext.CreateRemote(const MachineName: string): IBeginDockContext;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeginDockContext) as IBeginDockContext;
end;

procedure TBeginDockContext.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FEDE1EF2-35E4-43FA-8CDF-70237464A5F7}';
    IntfIID:   '{A93F1DA9-1F87-41F2-93F7-56F33DE002D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBeginDockContext.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IBeginDockContext;
  end;
end;

procedure TBeginDockContext.ConnectTo(svrIntf: IBeginDockContext);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBeginDockContext.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBeginDockContext.GetDefaultInterface: IBeginDockContext;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TBeginDockContext.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TBeginDockContext.Destroy;
begin
  inherited Destroy;
end;

function TBeginDockContext.Get_AllowDropTargetPageControlType(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowDropTargetPageControlType(pVal);
end;

function TBeginDockContext.Set_AllowDropTargetPageControlType(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowDropTargetPageControlType(pVal);
end;

class function CoDockControlCreateContext.Create: IDockControlCreateContext;
begin
  Result := CreateComObject(CLASS_DockControlCreateContext) as IDockControlCreateContext;
end;

class function CoDockControlCreateContext.CreateRemote(const MachineName: string): IDockControlCreateContext;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DockControlCreateContext) as IDockControlCreateContext;
end;

procedure TDockControlCreateContext.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{51E740C2-1E0C-4210-9166-B415D576ECCD}';
    IntfIID:   '{AE0D893C-7F42-466A-8F50-3D2216828B4C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDockControlCreateContext.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDockControlCreateContext;
  end;
end;

procedure TDockControlCreateContext.ConnectTo(svrIntf: IDockControlCreateContext);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDockControlCreateContext.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDockControlCreateContext.GetDefaultInterface: IDockControlCreateContext;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TDockControlCreateContext.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TDockControlCreateContext.Destroy;
begin
  inherited Destroy;
end;

function TDockControlCreateContext.Get_UseDropTargetPageControlType(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_UseDropTargetPageControlType(pVal);
end;

function TDockControlCreateContext.Set_UseDropTargetPageControlType(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_UseDropTargetPageControlType(pVal);
end;

function TDockControlCreateContext.Get_Target(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Target(pVal);
end;

class function CoUndockContext.Create: IUndockContext;
begin
  Result := CreateComObject(CLASS_UndockContext) as IUndockContext;
end;

class function CoUndockContext.CreateRemote(const MachineName: string): IUndockContext;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UndockContext) as IUndockContext;
end;

procedure TUndockContext.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8B1E5C0F-AD5A-4190-AA06-46F80739EE0E}';
    IntfIID:   '{92FAA2DB-8F11-4A1F-8B05-CCD1A97098E3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUndockContext.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IUndockContext;
  end;
end;

procedure TUndockContext.ConnectTo(svrIntf: IUndockContext);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUndockContext.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUndockContext.GetDefaultInterface: IUndockContext;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUndockContext.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUndockContext.Destroy;
begin
  inherited Destroy;
end;

function TUndockContext.Get_Value(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Value(pVal);
end;

function TUndockContext.Set_Value(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_Value(pVal);
end;

function TUndockContext.Get_ControlVisible(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ControlVisible(pVal);
end;

function TUndockContext.Put(newVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Put(newVal);
end;

class function CoColor.Create: IColor;
begin
  Result := CreateComObject(CLASS_Color) as IColor;
end;

class function CoColor.CreateRemote(const MachineName: string): IColor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Color) as IColor;
end;

procedure TColor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{586E9139-E5FC-42F2-A8E7-FB1A08D48722}';
    IntfIID:   '{C5EE68E8-EB57-491A-B7A9-50AC5EA07B79}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TColor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IColor;
  end;
end;

procedure TColor.ConnectTo(svrIntf: IColor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TColor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TColor.GetDefaultInterface: IColor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TColor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TColor.Destroy;
begin
  inherited Destroy;
end;

function TColor.Light(Color: LongWord; Shift: Double; out Result: LongWord): HResult;
begin
  Result := DefaultInterface.Light(Color, Shift, Result);
end;

function TColor.Dark(Color: LongWord; Shift: Double; out Result: LongWord): HResult;
begin
  Result := DefaultInterface.Dark(Color, Shift, Result);
end;

function TColor.Invert(Color: LongWord; out Result: LongWord): HResult;
begin
  Result := DefaultInterface.Invert(Color, Result);
end;

class function CoLayering.Create: ILayering;
begin
  Result := CreateComObject(CLASS_Layering) as ILayering;
end;

class function CoLayering.CreateRemote(const MachineName: string): ILayering;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Layering) as ILayering;
end;

procedure TLayering.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0452D4D7-59A2-47F1-B1E4-88D990218CD9}';
    IntfIID:   '{B23A2C07-3A36-4ADC-B695-94B8814AAF80}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLayering.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ILayering;
  end;
end;

procedure TLayering.ConnectTo(svrIntf: ILayering);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLayering.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLayering.GetDefaultInterface: ILayering;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TLayering.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TLayering.Destroy;
begin
  inherited Destroy;
end;

function TLayering.Get_Layered(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Layered(pVal);
end;

function TLayering.Set_Layered(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Layered(pVal);
end;

function TLayering.Get_Alpha(out pVal: Byte): HResult;
begin
  Result := DefaultInterface.Get_Alpha(pVal);
end;

function TLayering.Set_Alpha(pVal: Byte): HResult;
begin
  Result := DefaultInterface.Set_Alpha(pVal);
end;

function TLayering.Get_TransparentColor(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_TransparentColor(pVal);
end;

function TLayering.Set_TransparentColor(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_TransparentColor(pVal);
end;

function TLayering.Get_Flags(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Flags(pVal);
end;

function TLayering.Set_Flags(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Flags(pVal);
end;

class function CoMessageDialog.Create: IMessageDialog;
begin
  Result := CreateComObject(CLASS_MessageDialog) as IMessageDialog;
end;

class function CoMessageDialog.CreateRemote(const MachineName: string): IMessageDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MessageDialog) as IMessageDialog;
end;

procedure TMessageDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E5667C71-281A-4BEB-8AA8-D5A6E37B3887}';
    IntfIID:   '{FA9F97C8-A273-412E-A708-285BEB3CABC5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMessageDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMessageDialog;
  end;
end;

procedure TMessageDialog.ConnectTo(svrIntf: IMessageDialog);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMessageDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMessageDialog.GetDefaultInterface: IMessageDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TMessageDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TMessageDialog.Destroy;
begin
  inherited Destroy;
end;

function TMessageDialog.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TMessageDialog.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TMessageDialog.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TMessageDialog.Get_DefaultButton(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_DefaultButton(pVal);
end;

function TMessageDialog.Set_DefaultButton(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_DefaultButton(pVal);
end;

function TMessageDialog.Get_CancelButton(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_CancelButton(pVal);
end;

function TMessageDialog.Set_CancelButton(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_CancelButton(pVal);
end;

function TMessageDialog.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TMessageDialog.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TMessageDialog.AddButton(ID: Integer; const Text: WideString): HResult;
begin
  Result := DefaultInterface.AddButton(ID, Text);
end;

function TMessageDialog.AddIcon(ID: LongWord): HResult;
begin
  Result := DefaultInterface.AddIcon(ID);
end;

function TMessageDialog.Execute(out Result: Integer): HResult;
begin
  Result := DefaultInterface.Execute(Result);
end;

class function CoTaskDialog.Create: ITaskDialog;
begin
  Result := CreateComObject(CLASS_TaskDialog) as ITaskDialog;
end;

class function CoTaskDialog.CreateRemote(const MachineName: string): ITaskDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TaskDialog) as ITaskDialog;
end;

procedure TTaskDialog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B07BBF12-ADD3-450B-9275-57E3C3FED8E6}';
    IntfIID:   '{AE2631CE-2F75-4936-92D2-F2FD0097954C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTaskDialog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ITaskDialog;
  end;
end;

procedure TTaskDialog.ConnectTo(svrIntf: ITaskDialog);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTaskDialog.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTaskDialog.GetDefaultInterface: ITaskDialog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TTaskDialog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TTaskDialog.Destroy;
begin
  inherited Destroy;
end;

function TTaskDialog.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TTaskDialog.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TTaskDialog.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TTaskDialog.Get_Icon(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Icon(pVal);
end;

function TTaskDialog.Set_Icon(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_Icon(pVal);
end;

function TTaskDialog.Get_MainInstruction(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_MainInstruction(pVal);
end;

function TTaskDialog.Set_MainInstruction(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_MainInstruction(pVal);
end;

function TTaskDialog.Get_ExpandedInformation(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ExpandedInformation(pVal);
end;

function TTaskDialog.Set_ExpandedInformation(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ExpandedInformation(pVal);
end;

function TTaskDialog.Get_Footer(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Footer(pVal);
end;

function TTaskDialog.Set_Footer(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Footer(pVal);
end;

function TTaskDialog.Get_ExpandedControlText(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ExpandedControlText(pVal);
end;

function TTaskDialog.Set_ExpandedControlText(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ExpandedControlText(pVal);
end;

function TTaskDialog.Get_CollapsedControlText(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_CollapsedControlText(pVal);
end;

function TTaskDialog.Set_CollapsedControlText(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_CollapsedControlText(pVal);
end;

function TTaskDialog.Get_VerificationText(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_VerificationText(pVal);
end;

function TTaskDialog.Set_VerificationText(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_VerificationText(pVal);
end;

function TTaskDialog.Get_FooterIcon(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_FooterIcon(pVal);
end;

function TTaskDialog.Set_FooterIcon(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_FooterIcon(pVal);
end;

function TTaskDialog.Get_RadioButton(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_RadioButton(pVal);
end;

function TTaskDialog.Set_RadioButton(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_RadioButton(pVal);
end;

function TTaskDialog.Get_AllowDialogCancellation(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowDialogCancellation(pVal);
end;

function TTaskDialog.Set_AllowDialogCancellation(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowDialogCancellation(pVal);
end;

function TTaskDialog.Get_UseCommandLinks(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_UseCommandLinks(pVal);
end;

function TTaskDialog.Set_UseCommandLinks(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_UseCommandLinks(pVal);
end;

function TTaskDialog.Get_UseCommandLinksNoIcon(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_UseCommandLinksNoIcon(pVal);
end;

function TTaskDialog.Set_UseCommandLinksNoIcon(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_UseCommandLinksNoIcon(pVal);
end;

function TTaskDialog.Get_ExpandFooterArea(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ExpandFooterArea(pVal);
end;

function TTaskDialog.Set_ExpandFooterArea(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ExpandFooterArea(pVal);
end;

function TTaskDialog.Get_ExpandedByDefault(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ExpandedByDefault(pVal);
end;

function TTaskDialog.Set_ExpandedByDefault(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ExpandedByDefault(pVal);
end;

function TTaskDialog.Get_VerificationFlagChecked(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_VerificationFlagChecked(pVal);
end;

function TTaskDialog.Set_VerificationFlagChecked(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_VerificationFlagChecked(pVal);
end;

function TTaskDialog.Get_ShowProgressBar(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ShowProgressBar(pVal);
end;

function TTaskDialog.Set_ShowProgressBar(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ShowProgressBar(pVal);
end;

function TTaskDialog.Get_ShowMarqueeProgressBar(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ShowMarqueeProgressBar(pVal);
end;

function TTaskDialog.Set_ShowMarqueeProgressBar(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ShowMarqueeProgressBar(pVal);
end;

function TTaskDialog.Get_CallbackTimer(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CallbackTimer(pVal);
end;

function TTaskDialog.Set_CallbackTimer(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CallbackTimer(pVal);
end;

function TTaskDialog.Get_PositionRelativeToWindow(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_PositionRelativeToWindow(pVal);
end;

function TTaskDialog.Set_PositionRelativeToWindow(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_PositionRelativeToWindow(pVal);
end;

function TTaskDialog.Get_NoDefaultRadioButton(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_NoDefaultRadioButton(pVal);
end;

function TTaskDialog.Set_NoDefaultRadioButton(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_NoDefaultRadioButton(pVal);
end;

function TTaskDialog.Get_CanBeMinimized(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_CanBeMinimized(pVal);
end;

function TTaskDialog.Set_CanBeMinimized(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_CanBeMinimized(pVal);
end;

function TTaskDialog.Get_DefaultButton(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_DefaultButton(pVal);
end;

function TTaskDialog.Set_DefaultButton(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_DefaultButton(pVal);
end;

function TTaskDialog.Get_Position(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Position(pVal);
end;

function TTaskDialog.Set_Position(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Position(pVal);
end;

function TTaskDialog.Set_OnTimer(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnTimer(Param1);
end;

function TTaskDialog.Set_OnButtonClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnButtonClick(Param1);
end;

function TTaskDialog.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TTaskDialog.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TTaskDialog.AddButton(ID: Integer; const Text: WideString): HResult;
begin
  Result := DefaultInterface.AddButton(ID, Text);
end;

function TTaskDialog.AddCommandLinkButton(ID: Integer; const Text: WideString): HResult;
begin
  Result := DefaultInterface.AddCommandLinkButton(ID, Text);
end;

function TTaskDialog.AddRadioButton(ID: Integer; const Text: WideString): HResult;
begin
  Result := DefaultInterface.AddRadioButton(ID, Text);
end;

function TTaskDialog.Execute(out Result: Integer): HResult;
begin
  Result := DefaultInterface.Execute(Result);
end;

class function CoIcon.Create: IIcon;
begin
  Result := CreateComObject(CLASS_Icon) as IIcon;
end;

class function CoIcon.CreateRemote(const MachineName: string): IIcon;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Icon) as IIcon;
end;

procedure TIcon.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0FE54E05-7C4F-41B1-B3D0-B3A47DF39664}';
    IntfIID:   '{8EF324A3-C801-49E1-B07C-D32A0589746F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TIcon.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IIcon;
  end;
end;

procedure TIcon.ConnectTo(svrIntf: IIcon);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TIcon.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TIcon.GetDefaultInterface: IIcon;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TIcon.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TIcon.Destroy;
begin
  inherited Destroy;
end;

class function CoRect.Create: IRect;
begin
  Result := CreateComObject(CLASS_Rect) as IRect;
end;

class function CoRect.CreateRemote(const MachineName: string): IRect;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Rect) as IRect;
end;

procedure TRect.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CDCA72CB-FCFC-4665-8E80-6D11DC40001C}';
    IntfIID:   '{85BCA1CF-0215-432E-B290-13947A00DA8F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRect.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRect;
  end;
end;

procedure TRect.ConnectTo(svrIntf: IRect);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRect.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRect.GetDefaultInterface: IRect;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TRect.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TRect.Destroy;
begin
  inherited Destroy;
end;

function TRect.Get_Left(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Left(pVal);
end;

function TRect.Set_Left(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Left(pVal);
end;

function TRect.Get_Top(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Top(pVal);
end;

function TRect.Set_Top(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Top(pVal);
end;

function TRect.Get_Width(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Width(pVal);
end;

function TRect.Set_Width(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Width(pVal);
end;

function TRect.Get_Height(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Height(pVal);
end;

function TRect.Set_Height(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Height(pVal);
end;

function TRect.Get_Right(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Right(pVal);
end;

function TRect.Set_Right(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Right(pVal);
end;

function TRect.Get_Bottom(out pVal: Integer): HResult;
begin
  Result := DefaultInterface.Get_Bottom(pVal);
end;

function TRect.Set_Bottom(pVal: Integer): HResult;
begin
  Result := DefaultInterface.Set_Bottom(pVal);
end;

class function CoIconBuilder.Create: IIconBuilder;
begin
  Result := CreateComObject(CLASS_IconBuilder) as IIconBuilder;
end;

class function CoIconBuilder.CreateRemote(const MachineName: string): IIconBuilder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_IconBuilder) as IIconBuilder;
end;

procedure TIconBuilder.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7D63C657-FE7F-407F-816F-B69DD9F9C7B3}';
    IntfIID:   '{362DA7FC-F126-4E3B-BB58-14C126CEB063}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TIconBuilder.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IIconBuilder;
  end;
end;

procedure TIconBuilder.ConnectTo(svrIntf: IIconBuilder);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TIconBuilder.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TIconBuilder.GetDefaultInterface: IIconBuilder;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TIconBuilder.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TIconBuilder.Destroy;
begin
  inherited Destroy;
end;

function TIconBuilder.Get_Cursor(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Cursor(pVal);
end;

function TIconBuilder.Set_Cursor(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Cursor(pVal);
end;

function TIconBuilder.Add(Image: OleVariant; Transparent: WordBool; x: LongWord; y: LongWord): HResult;
begin
  Result := DefaultInterface.Add(Image, Transparent, x, y);
end;

function TIconBuilder.Save(const FileName: WideString): HResult;
begin
  Result := DefaultInterface.Save(FileName);
end;

function TIconBuilder.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

class function CoDesignReference.Create: IDesignReference;
begin
  Result := CreateComObject(CLASS_DesignReference) as IDesignReference;
end;

class function CoDesignReference.CreateRemote(const MachineName: string): IDesignReference;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DesignReference) as IDesignReference;
end;

procedure TDesignReference.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6A0CCB51-748A-4BB4-8C8D-B53AA4E6331A}';
    IntfIID:   '{7C5DD379-4C1A-4F52-B04B-6D0972964779}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDesignReference.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDesignReference;
  end;
end;

procedure TDesignReference.ConnectTo(svrIntf: IDesignReference);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDesignReference.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDesignReference.GetDefaultInterface: IDesignReference;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TDesignReference.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TDesignReference.Destroy;
begin
  inherited Destroy;
end;

function TDesignReference.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TDesignReference.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TDesignReference.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TDesignReference.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TDesignReference.Set_Text(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_Text(pVal);
end;

function TDesignReference.Get_ReferenceType(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ReferenceType(pVal);
end;

function TDesignReference.Set_ReferenceType(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_ReferenceType(pVal);
end;

function TDesignReference.Get_Main(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Main(pVal);
end;

function TDesignReference.Set_Main(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Main(pVal);
end;

function TDesignReference.Get_Design(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Design(pVal);
end;

function TDesignReference.Get_Parent(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Parent(pVal);
end;

function TDesignReference.Get_ID(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ID(pVal);
end;

function TDesignReference.Set_ID(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ID(pVal);
end;

function TDesignReference.Get_FileName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_FileName(pVal);
end;

function TDesignReference.Set_FileName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_FileName(pVal);
end;

function TDesignReference.Remove(Index: OleVariant): HResult;
begin
  Result := DefaultInterface.Remove(Index);
end;

function TDesignReference.Clear: HResult;
begin
  Result := DefaultInterface.Clear;
end;

function TDesignReference.ExChange(A: OleVariant; B: OleVariant): HResult;
begin
  Result := DefaultInterface.ExChange(A, B);
end;

function TDesignReference.Add(const Text: WideString; const CurrentAbsoluteFileName: WideString; 
                              out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.Add(Text, CurrentAbsoluteFileName, Result);
end;

function TDesignReference.Find(const Text: WideString; out Result: IDispatch): HResult;
begin
  Result := DefaultInterface.Find(Text, Result);
end;

function TDesignReference.Lookup(const Value: WideString; out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Lookup(Value, pVal);
end;

class function CoDesign.Create: IDesign;
begin
  Result := CreateComObject(CLASS_Design) as IDesign;
end;

class function CoDesign.CreateRemote(const MachineName: string): IDesign;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Design) as IDesign;
end;

procedure TDesign.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8E2F23C0-FD7F-4F83-B1C1-D5DF18883172}';
    IntfIID:   '{FBE98002-0D8F-4AC8-808C-22DEDE52BF1F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDesign.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDesign;
  end;
end;

procedure TDesign.ConnectTo(svrIntf: IDesign);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDesign.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDesign.GetDefaultInterface: IDesign;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TDesign.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TDesign.Destroy;
begin
  inherited Destroy;
end;

function TDesign.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TDesign.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TDesign.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TDesign.Get_Enabled(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Enabled(pVal);
end;

function TDesign.Set_Enabled(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_Enabled(pVal);
end;

function TDesign.Get_NewControlType(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_NewControlType(pVal);
end;

function TDesign.Set_NewControlType(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_NewControlType(pVal);
end;

function TDesign.Get_NewControlCreationFlags(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_NewControlCreationFlags(pVal);
end;

function TDesign.Set_NewControlCreationFlags(pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Set_NewControlCreationFlags(pVal);
end;

function TDesign.Get_Properties(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Properties(pVal);
end;

function TDesign.Get_ShowDetailsButton(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_ShowDetailsButton(pVal);
end;

function TDesign.Set_ShowDetailsButton(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_ShowDetailsButton(pVal);
end;

function TDesign.Get_References(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_References(pVal);
end;

function TDesign.Set_OnActiveControlChange(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnActiveControlChange(Param1);
end;

function TDesign.Set_OnControlCreate(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnControlCreate(Param1);
end;

function TDesign.Set_OnDetailsButtonClick(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDetailsButtonClick(Param1);
end;

function TDesign.Set_OnDesignerAdd(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDesignerAdd(Param1);
end;

function TDesign.Set_OnDesignerRemove(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnDesignerRemove(Param1);
end;

function TDesign.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TDesign.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TDesign.Save(out Layout: WideString): HResult;
begin
  Result := DefaultInterface.Save(Layout);
end;

function TDesign.Load(const Layout: WideString; Flags: LongWord): HResult;
var
  EmptyParam: OleVariant;
begin
  EmptyParam := System.Variants.EmptyParam;
  Result := DefaultInterface.Load(Layout, Flags, EmptyParam);
end;

function TDesign.Load(const Layout: WideString; Flags: LongWord; Resources: OleVariant): HResult;
begin
  Result := DefaultInterface.Load(Layout, Flags, Resources);
end;

function TDesign.Open(const FileName: WideString; Flags: LongWord): HResult;
begin
  Result := DefaultInterface.Open(FileName, Flags);
end;

class function CoExecutor.Create: IExecutor;
begin
  Result := CreateComObject(CLASS_Executor) as IExecutor;
end;

class function CoExecutor.CreateRemote(const MachineName: string): IExecutor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Executor) as IExecutor;
end;

procedure TExecutor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8ED75ACC-F9E8-417C-9329-38165D0109E9}';
    IntfIID:   '{F17D5798-9B71-46B9-B6D3-3FA3AA87C423}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TExecutor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IExecutor;
  end;
end;

procedure TExecutor.ConnectTo(svrIntf: IExecutor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TExecutor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TExecutor.GetDefaultInterface: IExecutor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TExecutor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TExecutor.Destroy;
begin
  inherited Destroy;
end;

function TExecutor.Get_Type_(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TExecutor.Get_UserData(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_UserData(pVal);
end;

function TExecutor.Set_UserData(pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_UserData(pVal);
end;

function TExecutor.Get_ApplicationName(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_ApplicationName(pVal);
end;

function TExecutor.Set_ApplicationName(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_ApplicationName(pVal);
end;

function TExecutor.Get_CommandLine(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_CommandLine(pVal);
end;

function TExecutor.Set_CommandLine(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_CommandLine(pVal);
end;

function TExecutor.Get_ExitCode(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ExitCode(pVal);
end;

function TExecutor.Get_IntegrityLevel(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_IntegrityLevel(pVal);
end;

function TExecutor.Set_IntegrityLevel(const pVal: WideString): HResult;
begin
  Result := DefaultInterface.Set_IntegrityLevel(pVal);
end;

function TExecutor.Get_Error(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Error(pVal);
end;

function TExecutor.Set_OnComplete(Param1: OleVariant): HResult;
begin
  Result := DefaultInterface.Set_OnComplete(Param1);
end;

function TExecutor.AddEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.AddEventHandler(EventName, EventHandler);
end;

function TExecutor.RemoveEventHandler(const EventName: WideString; EventHandler: OleVariant): HResult;
begin
  Result := DefaultInterface.RemoveEventHandler(EventName, EventHandler);
end;

function TExecutor.Execute(out Result: WordBool): HResult;
begin
  Result := DefaultInterface.Execute(Result);
end;

function TExecutor.Wait(Timeout: LongWord; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.Wait(Timeout, Result);
end;

function TExecutor.Terminate(ProcessExitCode: LongWord; out Result: WordBool): HResult;
begin
  Result := DefaultInterface.Terminate(ProcessExitCode, Result);
end;

class function CoControlExtendedProperties.Create: IControlExtendedProperties;
begin
  Result := CreateComObject(CLASS_ControlExtendedProperties) as IControlExtendedProperties;
end;

class function CoControlExtendedProperties.CreateRemote(const MachineName: string): IControlExtendedProperties;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlExtendedProperties) as IControlExtendedProperties;
end;

procedure TControlExtendedProperties.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ACDFD97B-7FEB-4EB4-B4E0-4878D7FC4845}';
    IntfIID:   '{EEB664B4-E288-4CC3-B9C2-ACAB3EFA0ECA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TControlExtendedProperties.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IControlExtendedProperties;
  end;
end;

procedure TControlExtendedProperties.ConnectTo(svrIntf: IControlExtendedProperties);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TControlExtendedProperties.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TControlExtendedProperties.GetDefaultInterface: IControlExtendedProperties;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TControlExtendedProperties.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TControlExtendedProperties.Destroy;
begin
  inherited Destroy;
end;

function TControlExtendedProperties.Get_AllowLeftButtonDown(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowLeftButtonDown(pVal);
end;

function TControlExtendedProperties.Set_AllowLeftButtonDown(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowLeftButtonDown(pVal);
end;

function TControlExtendedProperties.Get_AllowRightButtonDown(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowRightButtonDown(pVal);
end;

function TControlExtendedProperties.Set_AllowRightButtonDown(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowRightButtonDown(pVal);
end;

function TControlExtendedProperties.Get_AllowMiddleButtonDown(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowMiddleButtonDown(pVal);
end;

function TControlExtendedProperties.Set_AllowMiddleButtonDown(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowMiddleButtonDown(pVal);
end;

function TControlExtendedProperties.Get_AllowLeftButtonDoubleClick(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowLeftButtonDoubleClick(pVal);
end;

function TControlExtendedProperties.Set_AllowLeftButtonDoubleClick(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowLeftButtonDoubleClick(pVal);
end;

function TControlExtendedProperties.Get_AllowRightButtonDoubleClick(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowRightButtonDoubleClick(pVal);
end;

function TControlExtendedProperties.Set_AllowRightButtonDoubleClick(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowRightButtonDoubleClick(pVal);
end;

function TControlExtendedProperties.Get_AllowMiddleButtonDoubleClick(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_AllowMiddleButtonDoubleClick(pVal);
end;

function TControlExtendedProperties.Set_AllowMiddleButtonDoubleClick(pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Set_AllowMiddleButtonDoubleClick(pVal);
end;

class function CoError.Create: IError;
begin
  Result := CreateComObject(CLASS_Error) as IError;
end;

class function CoError.CreateRemote(const MachineName: string): IError;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Error) as IError;
end;

procedure TError.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FDD4908E-F653-4775-B747-8CDCCA595566}';
    IntfIID:   '{7190AE34-CBEA-432A-8044-D9B496B7778E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TError.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IError;
  end;
end;

procedure TError.ConnectTo(svrIntf: IError);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TError.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TError.GetDefaultInterface: IError;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TError.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TError.Destroy;
begin
  inherited Destroy;
end;

function TError.Get_Number(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Number(pVal);
end;

function TError.Get_Description(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Description(pVal);
end;

function TError.Get_Comment(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Comment(pVal);
end;

class function CoPropertyInformation.Create: IPropertyInformation;
begin
  Result := CreateComObject(CLASS_PropertyInformation) as IPropertyInformation;
end;

class function CoPropertyInformation.CreateRemote(const MachineName: string): IPropertyInformation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyInformation) as IPropertyInformation;
end;

procedure TPropertyInformation.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C2FE69B5-FFD4-4777-A648-EE33D19E1253}';
    IntfIID:   '{EC6D466C-E844-4FD0-8521-6AE08E452DCA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPropertyInformation.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPropertyInformation;
  end;
end;

procedure TPropertyInformation.ConnectTo(svrIntf: IPropertyInformation);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPropertyInformation.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPropertyInformation.GetDefaultInterface: IPropertyInformation;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPropertyInformation.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPropertyInformation.Destroy;
begin
  inherited Destroy;
end;

function TPropertyInformation.Get__NewEnum(out pUnk: IUnknown): HResult;
begin
  Result := DefaultInterface.Get__NewEnum(pUnk);
end;

function TPropertyInformation.Get_Item(Index: Integer; out pvar: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_Item(Index, pvar);
end;

function TPropertyInformation.Get_Count(out pcount: Integer): HResult;
begin
  Result := DefaultInterface.Get_Count(pcount);
end;

function TPropertyInformation.Get_Text(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_Text(pVal);
end;

function TPropertyInformation.Get_Type_(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Type_(pVal);
end;

function TPropertyInformation.Get_ExType(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_ExType(pVal);
end;

function TPropertyInformation.Get_DesignDefault(out pVal: OleVariant): HResult;
begin
  Result := DefaultInterface.Get_DesignDefault(pVal);
end;

function TPropertyInformation.Get_SymbolicValues(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_SymbolicValues(pVal);
end;

function TPropertyInformation.Get_Combination(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_Combination(pVal);
end;

function TPropertyInformation.Get_Priority(out pVal: LongWord): HResult;
begin
  Result := DefaultInterface.Get_Priority(pVal);
end;

function TPropertyInformation.Get_DefaultValueAsString(out pVal: WideString): HResult;
begin
  Result := DefaultInterface.Get_DefaultValueAsString(pVal);
end;

function TPropertyInformation.Get_DesignReadOnly(out pVal: WordBool): HResult;
begin
  Result := DefaultInterface.Get_DesignReadOnly(pVal);
end;

function TPropertyInformation.Get_Options(out pVal: IDispatch): HResult;
begin
  Result := DefaultInterface.Get_Options(pVal);
end;

class function CoFileManager.Create: IFileManager;
begin
  Result := CreateComObject(CLASS_FileManager) as IFileManager;
end;

class function CoFileManager.CreateRemote(const MachineName: string): IFileManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FileManager) as IFileManager;
end;

procedure TFileManager.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{68FCDD27-B049-428F-8C63-D8CF8717E539}';
    IntfIID:   '{FEA423F8-BE89-4285-9279-194AC034221A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFileManager.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFileManager;
  end;
end;

procedure TFileManager.ConnectTo(svrIntf: IFileManager);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFileManager.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFileManager.GetDefaultInterface: IFileManager;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TFileManager.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TFileManager.Destroy;
begin
  inherited Destroy;
end;

function TFileManager.GetRelativeFileName(const BaseAbsolutePath: WideString; 
                                          const Path: WideString; out Result: WideString): HResult;
begin
  Result := DefaultInterface.GetRelativeFileName(BaseAbsolutePath, Path, Result);
end;

function TFileManager.GetCanonicalFileName(const Path: WideString; ShortNames: WordBool; 
                                           out Result: WideString): HResult;
begin
  Result := DefaultInterface.GetCanonicalFileName(Path, ShortNames, Result);
end;

function TFileManager.GetCurrentDirectory(out Result: WideString): HResult;
begin
  Result := DefaultInterface.GetCurrentDirectory(Result);
end;

function TFileManager.NPath(const Path: WideString; out Result: WideString): HResult;
begin
  Result := DefaultInterface.NPath(Path, Result);
end;

function TFileManager.DPath(const Path: WideString; out Result: WideString): HResult;
begin
  Result := DefaultInterface.DPath(Path, Result);
end;

procedure Register;
begin
  RegisterComponents(dtlOcxPage, [TWindowSystemControl]);
  RegisterComponents(dtlServerPage, [TWindowSystemObject, TVersion, TControl, TFrame, 
    TForm, TCollection, TStringCollection, TImageList, TPen, 
    TBrush, TFont, TAction, TListControlItem, TListBox, 
    TComboBox, TEdit, TButton, TCheckBox, TRadioButton, 
    TStatusItem, TStatusBar, TProgressBar, TScrollBar, TTab, 
    TTabControl, TPageControl, TToolBar, TMenuBar, TReBarBand, 
    TReBar, THyperLink, TPager, TCOMConnectionPoint, TCOMEvents, 
    TActiveXControl, THeaderItem, THeader, TListSubItem, TListItem, 
    TListViewColumns, TWorkArea, TWorkAreas, TListViewGroup, TListViewGroups, 
    TListView, TTreeItem, TTreeView, TParagraph, TRichEdit, 
    TUpDown, TTrackBar, THotKey, TAnimate, TIPAddress, 
    TDateTime, TDateTimePicker, TCalendar, TSplitter, TSplitPanel, 
    TPolygonGraphic, TImageGraphic, TLineGraphic, TPrintDialogBase, TPrintDialog, 
    TPageSetupDialog, TFindReplaceDialog, TFontDialog, TColorDialog, TFileOpenSaveDialog, 
    TSelectFolderDialog, TTimer, TResult, TTrayIcon, TRegions, 
    TRegion, TScreen, THint, TEventHandler, TWindowSystemObjectExtensions, 
    TPrintInfo, TStdDispatch, TBalloonTip, TWindow, TClipboard, 
    TTaskBar, TResourceUsageGraph, TProperty_, TPropertyGrid, TConsole, 
    TDocking, TGraphicElement, TBeginDockContext, TDockControlCreateContext, TUndockContext, 
    TColor, TLayering, TMessageDialog, TTaskDialog, TIcon, 
    TRect, TIconBuilder, TDesignReference, TDesign, TExecutor, 
    TControlExtendedProperties, TError, TPropertyInformation, TFileManager]);
end;

end.
