// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 87174 $
// File generated on 1/10/2019 3:45:49 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: wso.dll (1)
// LIBID: {40CC9252-A25A-4D28-A906-9BD3F752934A}
// LCID: 0
// Helpfile: 
// HelpString: WSO 1.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWow64\stdole2.tlb)
// SYS_KIND: SYS_WIN64
// Cmdline:
//   tlibimp  -C wso.dll
// ************************************************************************ //
#ifndef   WSOLib_TLBH
#define   WSOLib_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Wsolib_tlb
{

// *********************************************************************//
// HelpString: WSO 1.0 Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_WSOLib;
extern __declspec (package) const GUID DIID_IControlEvents;
extern __declspec (package) const GUID IID_ControlEvents;
extern __declspec (package) const GUID DIID_IFormEvents;
extern __declspec (package) const GUID IID_FormEvents;
extern __declspec (package) const GUID DIID_IActionEvents;
extern __declspec (package) const GUID IID_ActionEvents;
extern __declspec (package) const GUID DIID_ITimerEvents;
extern __declspec (package) const GUID IID_TimerEvents;
extern __declspec (package) const GUID DIID_IHeaderItemEvents;
extern __declspec (package) const GUID IID_HeaderItemEvents;
extern __declspec (package) const GUID DIID_IHeaderEvents;
extern __declspec (package) const GUID IID_HeaderEvents;
extern __declspec (package) const GUID DIID_IListViewEvents;
extern __declspec (package) const GUID IID_ListViewEvents;
extern __declspec (package) const GUID IID_IResult;
extern __declspec (package) const GUID DIID_ITreeViewEvents;
extern __declspec (package) const GUID IID_TreeViewEvents;
extern __declspec (package) const GUID DIID_IRichEditEvents;
extern __declspec (package) const GUID IID_RichEditEvents;
extern __declspec (package) const GUID DIID_IComboBoxEvents;
extern __declspec (package) const GUID IID_ListControlEvents;
extern __declspec (package) const GUID IID_ComboBoxEvents;
extern __declspec (package) const GUID DIID_IFindReplaceDialogEvents;
extern __declspec (package) const GUID IID_FindReplaceDialogEvents;
extern __declspec (package) const GUID DIID_IFileOpenSaveDialogEvents;
extern __declspec (package) const GUID IID_FileOpenSaveDialogEvents;
extern __declspec (package) const GUID DIID_ISelectFolderDialogEvents;
extern __declspec (package) const GUID IID_SelectFolderDialogEvents;
extern __declspec (package) const GUID DIID_ITrayIconEvents;
extern __declspec (package) const GUID IID_TrayIconEvents;
extern __declspec (package) const GUID DIID_IEventHandlerEvents;
extern __declspec (package) const GUID IID_EventHandlerEvents;
extern __declspec (package) const GUID DIID_IFontDialogEvents;
extern __declspec (package) const GUID IID_FontDialogEvents;
extern __declspec (package) const GUID DIID_IColorDialogEvents;
extern __declspec (package) const GUID IID_ColorDialogEvents;
extern __declspec (package) const GUID DIID_IListControlEvents;
extern __declspec (package) const GUID IID_IWindowSystemObject;
extern __declspec (package) const GUID CLSID_WindowSystemObject;
extern __declspec (package) const GUID IID_IVersion;
extern __declspec (package) const GUID CLSID_Version;
extern __declspec (package) const GUID IID_IObject;
extern __declspec (package) const GUID IID_IControl;
extern __declspec (package) const GUID CLSID_Control;
extern __declspec (package) const GUID IID_IFrame;
extern __declspec (package) const GUID CLSID_Frame;
extern __declspec (package) const GUID IID_IForm;
extern __declspec (package) const GUID CLSID_Form;
extern __declspec (package) const GUID IID_ICollection;
extern __declspec (package) const GUID CLSID_Collection;
extern __declspec (package) const GUID IID_IStringCollection;
extern __declspec (package) const GUID CLSID_StringCollection;
extern __declspec (package) const GUID IID_IImageList;
extern __declspec (package) const GUID CLSID_ImageList;
extern __declspec (package) const GUID IID_IGraphicObject;
extern __declspec (package) const GUID IID_IPen;
extern __declspec (package) const GUID CLSID_Pen;
extern __declspec (package) const GUID IID_IBrush;
extern __declspec (package) const GUID CLSID_Brush;
extern __declspec (package) const GUID IID_IFontEx;
extern __declspec (package) const GUID CLSID_Font;
extern __declspec (package) const GUID IID_IAction;
extern __declspec (package) const GUID CLSID_Action;
extern __declspec (package) const GUID IID_IListControlItem;
extern __declspec (package) const GUID CLSID_ListControlItem;
extern __declspec (package) const GUID IID_IStringsControl;
extern __declspec (package) const GUID IID_IListControl;
extern __declspec (package) const GUID IID_IListBox;
extern __declspec (package) const GUID CLSID_ListBox;
extern __declspec (package) const GUID IID_IComboBox;
extern __declspec (package) const GUID CLSID_ComboBox;
extern __declspec (package) const GUID IID_IEdit;
extern __declspec (package) const GUID CLSID_Edit;
extern __declspec (package) const GUID IID_IButtonControl;
extern __declspec (package) const GUID IID_IButton;
extern __declspec (package) const GUID CLSID_Button;
extern __declspec (package) const GUID IID_ICheckBox;
extern __declspec (package) const GUID CLSID_CheckBox;
extern __declspec (package) const GUID IID_IRadioButton;
extern __declspec (package) const GUID CLSID_RadioButton;
extern __declspec (package) const GUID IID_IStatusItem;
extern __declspec (package) const GUID CLSID_StatusItem;
extern __declspec (package) const GUID IID_IStatusBar;
extern __declspec (package) const GUID CLSID_StatusBar;
extern __declspec (package) const GUID IID_IStatusControl;
extern __declspec (package) const GUID IID_IProgressBar;
extern __declspec (package) const GUID CLSID_ProgressBar;
extern __declspec (package) const GUID IID_IScrollBar;
extern __declspec (package) const GUID CLSID_ScrollBar;
extern __declspec (package) const GUID IID_ITab;
extern __declspec (package) const GUID CLSID_Tab;
extern __declspec (package) const GUID IID_ITabControl;
extern __declspec (package) const GUID CLSID_TabControl;
extern __declspec (package) const GUID IID_IPageControl;
extern __declspec (package) const GUID CLSID_PageControl;
extern __declspec (package) const GUID IID_IToolBar;
extern __declspec (package) const GUID CLSID_ToolBar;
extern __declspec (package) const GUID IID_IMenuBar;
extern __declspec (package) const GUID CLSID_MenuBar;
extern __declspec (package) const GUID IID_IReBarBand;
extern __declspec (package) const GUID CLSID_ReBarBand;
extern __declspec (package) const GUID IID_IReBar;
extern __declspec (package) const GUID CLSID_ReBar;
extern __declspec (package) const GUID IID_IHyperLink;
extern __declspec (package) const GUID CLSID_HyperLink;
extern __declspec (package) const GUID IID_IPager;
extern __declspec (package) const GUID CLSID_Pager;
extern __declspec (package) const GUID IID_ICOMConnectionPoint;
extern __declspec (package) const GUID CLSID_COMConnectionPoint;
extern __declspec (package) const GUID IID_ICOMEvents;
extern __declspec (package) const GUID CLSID_COMEvents;
extern __declspec (package) const GUID IID_IActiveXControl;
extern __declspec (package) const GUID CLSID_ActiveXControl;
extern __declspec (package) const GUID IID_IHeaderItem;
extern __declspec (package) const GUID CLSID_HeaderItem;
extern __declspec (package) const GUID IID_IHeader;
extern __declspec (package) const GUID CLSID_Header;
extern __declspec (package) const GUID IID_IListSubItem;
extern __declspec (package) const GUID CLSID_ListSubItem;
extern __declspec (package) const GUID IID_IListItem;
extern __declspec (package) const GUID CLSID_ListItem;
extern __declspec (package) const GUID IID_IListViewColumns;
extern __declspec (package) const GUID CLSID_ListViewColumns;
extern __declspec (package) const GUID IID_IWorkArea;
extern __declspec (package) const GUID CLSID_WorkArea;
extern __declspec (package) const GUID IID_IWorkAreas;
extern __declspec (package) const GUID CLSID_WorkAreas;
extern __declspec (package) const GUID IID_IListViewGroup;
extern __declspec (package) const GUID CLSID_ListViewGroup;
extern __declspec (package) const GUID IID_IListViewGroups;
extern __declspec (package) const GUID CLSID_ListViewGroups;
extern __declspec (package) const GUID IID_IListView;
extern __declspec (package) const GUID CLSID_ListView;
extern __declspec (package) const GUID IID_ITreeItem;
extern __declspec (package) const GUID CLSID_TreeItem;
extern __declspec (package) const GUID IID_ITreeView;
extern __declspec (package) const GUID CLSID_TreeView;
extern __declspec (package) const GUID IID_IParagraph;
extern __declspec (package) const GUID CLSID_Paragraph;
extern __declspec (package) const GUID IID_IRichEdit;
extern __declspec (package) const GUID CLSID_RichEdit;
extern __declspec (package) const GUID IID_IUpDown;
extern __declspec (package) const GUID CLSID_UpDown;
extern __declspec (package) const GUID IID_ITrackBar;
extern __declspec (package) const GUID CLSID_TrackBar;
extern __declspec (package) const GUID IID_IHotKey;
extern __declspec (package) const GUID CLSID_HotKey;
extern __declspec (package) const GUID IID_IAnimate;
extern __declspec (package) const GUID CLSID_Animate;
extern __declspec (package) const GUID IID_IIPAddress;
extern __declspec (package) const GUID CLSID_IPAddress;
extern __declspec (package) const GUID IID_IDateTime;
extern __declspec (package) const GUID CLSID_DateTime;
extern __declspec (package) const GUID IID_IDateTimeControl;
extern __declspec (package) const GUID IID_IDateTimePicker;
extern __declspec (package) const GUID CLSID_DateTimePicker;
extern __declspec (package) const GUID IID_ICalendar;
extern __declspec (package) const GUID CLSID_Calendar;
extern __declspec (package) const GUID IID_ISplitter;
extern __declspec (package) const GUID CLSID_Splitter;
extern __declspec (package) const GUID IID_ISplitPanel;
extern __declspec (package) const GUID CLSID_SplitPanel;
extern __declspec (package) const GUID IID_IPolygon;
extern __declspec (package) const GUID CLSID_PolygonGraphic;
extern __declspec (package) const GUID IID_IImage;
extern __declspec (package) const GUID CLSID_ImageGraphic;
extern __declspec (package) const GUID IID_ILine;
extern __declspec (package) const GUID CLSID_LineGraphic;
extern __declspec (package) const GUID IID_IPrintDialogBase;
extern __declspec (package) const GUID CLSID_PrintDialogBase;
extern __declspec (package) const GUID IID_IPrintDialog;
extern __declspec (package) const GUID CLSID_PrintDialog;
extern __declspec (package) const GUID IID_IPageSetupDialog;
extern __declspec (package) const GUID CLSID_PageSetupDialog;
extern __declspec (package) const GUID IID_IFindReplaceDialog;
extern __declspec (package) const GUID CLSID_FindReplaceDialog;
extern __declspec (package) const GUID IID_IFontDialog;
extern __declspec (package) const GUID CLSID_FontDialog;
extern __declspec (package) const GUID IID_IColorDialog;
extern __declspec (package) const GUID CLSID_ColorDialog;
extern __declspec (package) const GUID IID_IFileOpenSaveDialog;
extern __declspec (package) const GUID CLSID_FileOpenSaveDialog;
extern __declspec (package) const GUID IID_ISelectFolderDialog;
extern __declspec (package) const GUID CLSID_SelectFolderDialog;
extern __declspec (package) const GUID IID_ITimer;
extern __declspec (package) const GUID CLSID_Timer;
extern __declspec (package) const GUID CLSID_WindowSystemControl;
extern __declspec (package) const GUID CLSID_Result;
extern __declspec (package) const GUID IID_ITrayIcon;
extern __declspec (package) const GUID CLSID_TrayIcon;
extern __declspec (package) const GUID IID_IRegions;
extern __declspec (package) const GUID CLSID_Regions;
extern __declspec (package) const GUID IID_IRegion;
extern __declspec (package) const GUID CLSID_Region;
extern __declspec (package) const GUID IID_IScreen;
extern __declspec (package) const GUID CLSID_Screen;
extern __declspec (package) const GUID IID_IHint;
extern __declspec (package) const GUID CLSID_Hint;
extern __declspec (package) const GUID IID_IEventHandler;
extern __declspec (package) const GUID CLSID_EventHandler;
extern __declspec (package) const GUID IID_IWindowSystemObjectExtensions;
extern __declspec (package) const GUID CLSID_WindowSystemObjectExtensions;
extern __declspec (package) const GUID IID_IPrintInfo;
extern __declspec (package) const GUID CLSID_PrintInfo;
extern __declspec (package) const GUID IID_IStdDispatch;
extern __declspec (package) const GUID CLSID_StdDispatch;
extern __declspec (package) const GUID IID_IBalloonTip;
extern __declspec (package) const GUID CLSID_BalloonTip;
extern __declspec (package) const GUID IID_IWindow;
extern __declspec (package) const GUID CLSID_Window;
extern __declspec (package) const GUID DIID_IClipboardEvents;
extern __declspec (package) const GUID IID_ClipboardEvents;
extern __declspec (package) const GUID IID_IClipboard;
extern __declspec (package) const GUID CLSID_Clipboard;
extern __declspec (package) const GUID IID_ITaskBar;
extern __declspec (package) const GUID CLSID_TaskBar;
extern __declspec (package) const GUID IID_IResourceUsageGraph;
extern __declspec (package) const GUID CLSID_ResourceUsageGraph;
extern __declspec (package) const GUID IID_IProperty;
extern __declspec (package) const GUID CLSID_Property;
extern __declspec (package) const GUID IID_IPropertyGrid;
extern __declspec (package) const GUID CLSID_PropertyGrid;
extern __declspec (package) const GUID IID_IConsole;
extern __declspec (package) const GUID CLSID_Console;
extern __declspec (package) const GUID IID_IDocking;
extern __declspec (package) const GUID CLSID_Docking;
extern __declspec (package) const GUID IID_IGraphicElement;
extern __declspec (package) const GUID CLSID_GraphicElement;
extern __declspec (package) const GUID IID_IBeginDockContext;
extern __declspec (package) const GUID CLSID_BeginDockContext;
extern __declspec (package) const GUID IID_IDockControlCreateContext;
extern __declspec (package) const GUID CLSID_DockControlCreateContext;
extern __declspec (package) const GUID IID_IUndockContext;
extern __declspec (package) const GUID CLSID_UndockContext;
extern __declspec (package) const GUID IID_IColor;
extern __declspec (package) const GUID CLSID_Color;
extern __declspec (package) const GUID IID_ILayering;
extern __declspec (package) const GUID CLSID_Layering;
extern __declspec (package) const GUID IID_IMessageDialog;
extern __declspec (package) const GUID CLSID_MessageDialog;
extern __declspec (package) const GUID IID_ITaskDialog;
extern __declspec (package) const GUID CLSID_TaskDialog;
extern __declspec (package) const GUID DIID_ITaskDialogEvents;
extern __declspec (package) const GUID IID_TaskDialogEvents;
extern __declspec (package) const GUID IID_IIcon;
extern __declspec (package) const GUID CLSID_Icon;
extern __declspec (package) const GUID IID_IRect;
extern __declspec (package) const GUID CLSID_Rect;
extern __declspec (package) const GUID IID_IIconBuilder;
extern __declspec (package) const GUID CLSID_IconBuilder;
extern __declspec (package) const GUID IID_IDesignReference;
extern __declspec (package) const GUID CLSID_DesignReference;
extern __declspec (package) const GUID IID_IDesign;
extern __declspec (package) const GUID CLSID_Design;
extern __declspec (package) const GUID DIID_IDesignEvents;
extern __declspec (package) const GUID IID_DesignEvents;
extern __declspec (package) const GUID IID_IExecutor;
extern __declspec (package) const GUID CLSID_Executor;
extern __declspec (package) const GUID DIID_IExecutorEvents;
extern __declspec (package) const GUID IID_ExecutorEvents;
extern __declspec (package) const GUID IID_IControlExtendedProperties;
extern __declspec (package) const GUID CLSID_ControlExtendedProperties;
extern __declspec (package) const GUID IID_IError;
extern __declspec (package) const GUID CLSID_Error;
extern __declspec (package) const GUID IID_IPropertyInformation;
extern __declspec (package) const GUID CLSID_PropertyInformation;
extern __declspec (package) const GUID IID_IFileManager;
extern __declspec (package) const GUID CLSID_FileManager;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{EE85ACDD-7499-4719-A173-FCC56CE6FA1D}") IControlEvents;
typedef TComInterface<IControlEvents, &DIID_IControlEvents> IControlEventsPtr;

interface DECLSPEC_UUID("{CCF521F3-D5AA-4CE2-BD3D-1B4D05A8BE1A}") ControlEvents;
typedef TComInterface<ControlEvents, &IID_ControlEvents> ControlEventsPtr;

interface DECLSPEC_UUID("{E83611E0-B0CD-4087-887B-4A0454176AA9}") IFormEvents;
typedef TComInterface<IFormEvents, &DIID_IFormEvents> IFormEventsPtr;

interface DECLSPEC_UUID("{1198D8CE-DCE6-4C9E-8CFF-CF0E3AB7DE87}") FormEvents;
typedef TComInterface<FormEvents, &IID_FormEvents> FormEventsPtr;

interface DECLSPEC_UUID("{EFCC7766-9D3D-48CE-94B0-F0EAC186B763}") IActionEvents;
typedef TComInterface<IActionEvents, &DIID_IActionEvents> IActionEventsPtr;

interface DECLSPEC_UUID("{F2C5B01B-E77C-411A-A958-7E77A8DA912F}") ActionEvents;
typedef TComInterface<ActionEvents, &IID_ActionEvents> ActionEventsPtr;

interface DECLSPEC_UUID("{E00E8E3D-8933-4679-B250-257A46743389}") ITimerEvents;
typedef TComInterface<ITimerEvents, &DIID_ITimerEvents> ITimerEventsPtr;

interface DECLSPEC_UUID("{076A1D13-7601-477A-98BB-45E6328360DE}") TimerEvents;
typedef TComInterface<TimerEvents, &IID_TimerEvents> TimerEventsPtr;

interface DECLSPEC_UUID("{A71BDEAC-05C9-4594-854D-671071B3C110}") IHeaderItemEvents;
typedef TComInterface<IHeaderItemEvents, &DIID_IHeaderItemEvents> IHeaderItemEventsPtr;

interface DECLSPEC_UUID("{AF9F723A-C078-431B-8723-AAB704905048}") HeaderItemEvents;
typedef TComInterface<HeaderItemEvents, &IID_HeaderItemEvents> HeaderItemEventsPtr;

interface DECLSPEC_UUID("{09D9EF1F-9DA1-4E05-9557-B3F692E5775B}") IHeaderEvents;
typedef TComInterface<IHeaderEvents, &DIID_IHeaderEvents> IHeaderEventsPtr;

interface DECLSPEC_UUID("{0CEF5413-315F-4FA8-B961-F7F04F8393A8}") HeaderEvents;
typedef TComInterface<HeaderEvents, &IID_HeaderEvents> HeaderEventsPtr;

interface DECLSPEC_UUID("{A55B1FD3-30D4-479B-8F33-3978EB403A0B}") IListViewEvents;
typedef TComInterface<IListViewEvents, &DIID_IListViewEvents> IListViewEventsPtr;

interface DECLSPEC_UUID("{F8233D5A-7BE6-48C7-8B44-E61345BBDF5A}") ListViewEvents;
typedef TComInterface<ListViewEvents, &IID_ListViewEvents> ListViewEventsPtr;

interface DECLSPEC_UUID("{50B60E8E-E889-46DB-88D8-09A416726824}") IResult;
typedef TComInterface<IResult, &IID_IResult> IResultPtr;

interface DECLSPEC_UUID("{FFC21772-F6D8-4AFC-A2F4-362C11DF0019}") ITreeViewEvents;
typedef TComInterface<ITreeViewEvents, &DIID_ITreeViewEvents> ITreeViewEventsPtr;

interface DECLSPEC_UUID("{555949AA-0922-4BF3-926A-9DAA912861A2}") TreeViewEvents;
typedef TComInterface<TreeViewEvents, &IID_TreeViewEvents> TreeViewEventsPtr;

interface DECLSPEC_UUID("{B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}") IRichEditEvents;
typedef TComInterface<IRichEditEvents, &DIID_IRichEditEvents> IRichEditEventsPtr;

interface DECLSPEC_UUID("{5B691737-293F-421D-87DA-E810555C8459}") RichEditEvents;
typedef TComInterface<RichEditEvents, &IID_RichEditEvents> RichEditEventsPtr;

interface DECLSPEC_UUID("{B8A6F3A3-EE81-4472-938E-F1B42513B7D2}") IComboBoxEvents;
typedef TComInterface<IComboBoxEvents, &DIID_IComboBoxEvents> IComboBoxEventsPtr;

interface DECLSPEC_UUID("{C3B3B3A5-DD01-4E17-900A-724AE1028B20}") ListControlEvents;
typedef TComInterface<ListControlEvents, &IID_ListControlEvents> ListControlEventsPtr;

interface DECLSPEC_UUID("{BDC47F49-9597-4CD8-BFBE-A5A317B940F8}") ComboBoxEvents;
typedef TComInterface<ComboBoxEvents, &IID_ComboBoxEvents> ComboBoxEventsPtr;

interface DECLSPEC_UUID("{5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}") IFindReplaceDialogEvents;
typedef TComInterface<IFindReplaceDialogEvents, &DIID_IFindReplaceDialogEvents> IFindReplaceDialogEventsPtr;

interface DECLSPEC_UUID("{0FBA8E33-6938-4E38-97ED-DD9DF0248306}") FindReplaceDialogEvents;
typedef TComInterface<FindReplaceDialogEvents, &IID_FindReplaceDialogEvents> FindReplaceDialogEventsPtr;

interface DECLSPEC_UUID("{BAE2B02E-9BD5-4D6D-824E-197CC72CF040}") IFileOpenSaveDialogEvents;
typedef TComInterface<IFileOpenSaveDialogEvents, &DIID_IFileOpenSaveDialogEvents> IFileOpenSaveDialogEventsPtr;

interface DECLSPEC_UUID("{ED303EB3-B7F9-493B-BE0E-265D20F80E38}") FileOpenSaveDialogEvents;
typedef TComInterface<FileOpenSaveDialogEvents, &IID_FileOpenSaveDialogEvents> FileOpenSaveDialogEventsPtr;

interface DECLSPEC_UUID("{C5A781AE-2868-4470-972D-39BEAE4721FC}") ISelectFolderDialogEvents;
typedef TComInterface<ISelectFolderDialogEvents, &DIID_ISelectFolderDialogEvents> ISelectFolderDialogEventsPtr;

interface DECLSPEC_UUID("{1B47003E-14C2-4459-8280-40BCE5C8CA90}") SelectFolderDialogEvents;
typedef TComInterface<SelectFolderDialogEvents, &IID_SelectFolderDialogEvents> SelectFolderDialogEventsPtr;

interface DECLSPEC_UUID("{0EE395DB-AF4D-4493-861E-B0E1966FD5DB}") ITrayIconEvents;
typedef TComInterface<ITrayIconEvents, &DIID_ITrayIconEvents> ITrayIconEventsPtr;

interface DECLSPEC_UUID("{C191A5DF-072B-4331-9A83-3E985716730A}") TrayIconEvents;
typedef TComInterface<TrayIconEvents, &IID_TrayIconEvents> TrayIconEventsPtr;

interface DECLSPEC_UUID("{A3BE55F5-A954-45E5-8419-CB249B836ABA}") IEventHandlerEvents;
typedef TComInterface<IEventHandlerEvents, &DIID_IEventHandlerEvents> IEventHandlerEventsPtr;

interface DECLSPEC_UUID("{7E144038-C33F-4F65-8CE2-B833F4773101}") EventHandlerEvents;
typedef TComInterface<EventHandlerEvents, &IID_EventHandlerEvents> EventHandlerEventsPtr;

interface DECLSPEC_UUID("{57ACC027-05B0-48A5-ACC3-AB2E31C34D28}") IFontDialogEvents;
typedef TComInterface<IFontDialogEvents, &DIID_IFontDialogEvents> IFontDialogEventsPtr;

interface DECLSPEC_UUID("{9C2C742B-33B5-4BCF-AEB9-640DF4D94374}") FontDialogEvents;
typedef TComInterface<FontDialogEvents, &IID_FontDialogEvents> FontDialogEventsPtr;

interface DECLSPEC_UUID("{F3B57D51-7823-4E4F-907D-70E73A2C9E72}") IColorDialogEvents;
typedef TComInterface<IColorDialogEvents, &DIID_IColorDialogEvents> IColorDialogEventsPtr;

interface DECLSPEC_UUID("{B7B784F7-A097-4D24-BE47-E9842A532192}") ColorDialogEvents;
typedef TComInterface<ColorDialogEvents, &IID_ColorDialogEvents> ColorDialogEventsPtr;

interface DECLSPEC_UUID("{DDB41E4E-78C4-4E80-9065-0D20B278E837}") IListControlEvents;
typedef TComInterface<IListControlEvents, &DIID_IListControlEvents> IListControlEventsPtr;

interface DECLSPEC_UUID("{06983696-F0BE-40C1-992E-76172C1CA324}") IWindowSystemObject;
typedef TComInterface<IWindowSystemObject, &IID_IWindowSystemObject> IWindowSystemObjectPtr;

interface DECLSPEC_UUID("{AC444C04-F889-47E1-B56E-9F648D8AB009}") IVersion;
typedef TComInterface<IVersion, &IID_IVersion> IVersionPtr;

interface DECLSPEC_UUID("{AADDFAA1-E50D-4C66-8955-DFE8CF54FABB}") IObject;
typedef TComInterface<IObject, &IID_IObject> IObjectPtr;

interface DECLSPEC_UUID("{4397A1F9-F35F-4234-AF6A-F6327B0F784E}") IControl;
typedef TComInterface<IControl, &IID_IControl> IControlPtr;

interface DECLSPEC_UUID("{92337C2C-1C7D-4848-8AD2-B9D33E4EB242}") IFrame;
typedef TComInterface<IFrame, &IID_IFrame> IFramePtr;

interface DECLSPEC_UUID("{044B381D-C581-4B9E-9C95-08B66B38468F}") IForm;
typedef TComInterface<IForm, &IID_IForm> IFormPtr;

interface DECLSPEC_UUID("{92BEFD16-E781-484B-BC2D-F3B5E5DA2CC5}") ICollection;
typedef TComInterface<ICollection, &IID_ICollection> ICollectionPtr;

interface DECLSPEC_UUID("{A68CF60C-30F0-4A23-B592-3CB23708733A}") IStringCollection;
typedef TComInterface<IStringCollection, &IID_IStringCollection> IStringCollectionPtr;

interface DECLSPEC_UUID("{68343C86-0240-44FD-A24F-5CD611E0A33F}") IImageList;
typedef TComInterface<IImageList, &IID_IImageList> IImageListPtr;

interface DECLSPEC_UUID("{09866D76-9782-4FD2-BA16-C469A06499C1}") IGraphicObject;
typedef TComInterface<IGraphicObject, &IID_IGraphicObject> IGraphicObjectPtr;

interface DECLSPEC_UUID("{A6BFFF0E-7526-495A-AEA9-7BE6005184D7}") IPen;
typedef TComInterface<IPen, &IID_IPen> IPenPtr;

interface DECLSPEC_UUID("{68FA42FE-34AC-40E9-857D-F94846E91B0A}") IBrush;
typedef TComInterface<IBrush, &IID_IBrush> IBrushPtr;

interface DECLSPEC_UUID("{FAE1D3D9-57B5-42D7-AF14-AC9ED6B31EA8}") IFontEx;
typedef TComInterface<IFontEx, &IID_IFontEx> IFontExPtr;

interface DECLSPEC_UUID("{752D00E4-9EBE-4A1A-82D8-5D62F66CB4ED}") IAction;
typedef TComInterface<IAction, &IID_IAction> IActionPtr;

interface DECLSPEC_UUID("{D5F460EE-3010-4A7A-AAD2-FA3F768BAC57}") IListControlItem;
typedef TComInterface<IListControlItem, &IID_IListControlItem> IListControlItemPtr;

interface DECLSPEC_UUID("{A1E967E4-0CEB-436B-91C0-F6A42F8D8733}") IStringsControl;
typedef TComInterface<IStringsControl, &IID_IStringsControl> IStringsControlPtr;

interface DECLSPEC_UUID("{B61BDF00-553F-401B-948C-2F7A5FDCBBBB}") IListControl;
typedef TComInterface<IListControl, &IID_IListControl> IListControlPtr;

interface DECLSPEC_UUID("{A33F2256-EF4D-409B-B1FD-0BE23F8F8C2D}") IListBox;
typedef TComInterface<IListBox, &IID_IListBox> IListBoxPtr;

interface DECLSPEC_UUID("{AA09373F-278A-49DF-9F40-74C5B92ABB6F}") IComboBox;
typedef TComInterface<IComboBox, &IID_IComboBox> IComboBoxPtr;

interface DECLSPEC_UUID("{1D2D9535-7884-49AB-90C2-49955A388137}") IEdit;
typedef TComInterface<IEdit, &IID_IEdit> IEditPtr;

interface DECLSPEC_UUID("{CE6D21C9-132F-4990-ACB2-4C68A1D46BA2}") IButtonControl;
typedef TComInterface<IButtonControl, &IID_IButtonControl> IButtonControlPtr;

interface DECLSPEC_UUID("{31DC6745-8E8E-4F4A-9F17-36651B160FE9}") IButton;
typedef TComInterface<IButton, &IID_IButton> IButtonPtr;

interface DECLSPEC_UUID("{A924A1F1-1896-462D-98E9-873E721811CE}") ICheckBox;
typedef TComInterface<ICheckBox, &IID_ICheckBox> ICheckBoxPtr;

interface DECLSPEC_UUID("{E4D0E174-9AB6-4BDF-9186-8905F5B54AAA}") IRadioButton;
typedef TComInterface<IRadioButton, &IID_IRadioButton> IRadioButtonPtr;

interface DECLSPEC_UUID("{80508CDF-06EA-43C5-B41E-F2F97D516151}") IStatusItem;
typedef TComInterface<IStatusItem, &IID_IStatusItem> IStatusItemPtr;

interface DECLSPEC_UUID("{F61D55A1-ECC9-484B-A635-F0C5E71A8C29}") IStatusBar;
typedef TComInterface<IStatusBar, &IID_IStatusBar> IStatusBarPtr;

interface DECLSPEC_UUID("{7ADA76A6-13E2-455D-8DF1-E2C980D21BF9}") IStatusControl;
typedef TComInterface<IStatusControl, &IID_IStatusControl> IStatusControlPtr;

interface DECLSPEC_UUID("{16271F21-45E5-4632-BC36-E3E429B49AD8}") IProgressBar;
typedef TComInterface<IProgressBar, &IID_IProgressBar> IProgressBarPtr;

interface DECLSPEC_UUID("{FC140361-F789-48AD-AE2B-A4B5A2643FB0}") IScrollBar;
typedef TComInterface<IScrollBar, &IID_IScrollBar> IScrollBarPtr;

interface DECLSPEC_UUID("{F8019994-24F1-475D-8AC4-5A1BCFF213D0}") ITab;
typedef TComInterface<ITab, &IID_ITab> ITabPtr;

interface DECLSPEC_UUID("{80249C22-E39E-4BF1-A167-8599130D19BA}") ITabControl;
typedef TComInterface<ITabControl, &IID_ITabControl> ITabControlPtr;

interface DECLSPEC_UUID("{A58B708B-DDC5-40BF-AD62-D2B94731BBF3}") IPageControl;
typedef TComInterface<IPageControl, &IID_IPageControl> IPageControlPtr;

interface DECLSPEC_UUID("{EE439DC1-D255-41A8-94E4-0E2F5518562D}") IToolBar;
typedef TComInterface<IToolBar, &IID_IToolBar> IToolBarPtr;

interface DECLSPEC_UUID("{CD1140FE-95CD-4690-8DB9-48DF5989E8FA}") IMenuBar;
typedef TComInterface<IMenuBar, &IID_IMenuBar> IMenuBarPtr;

interface DECLSPEC_UUID("{5FFD779C-DF3C-4B7C-BA33-53ED4BE00360}") IReBarBand;
typedef TComInterface<IReBarBand, &IID_IReBarBand> IReBarBandPtr;

interface DECLSPEC_UUID("{DBD8984A-5CB5-4B3B-94DE-62AF0C20F75F}") IReBar;
typedef TComInterface<IReBar, &IID_IReBar> IReBarPtr;

interface DECLSPEC_UUID("{ED777BB6-9999-4385-8647-8C72156DC3A1}") IHyperLink;
typedef TComInterface<IHyperLink, &IID_IHyperLink> IHyperLinkPtr;

interface DECLSPEC_UUID("{AD4463D6-4144-4D08-9A41-A296E6264F32}") IPager;
typedef TComInterface<IPager, &IID_IPager> IPagerPtr;

interface DECLSPEC_UUID("{701F8D53-90B9-4D99-96A2-37C8BB960289}") ICOMConnectionPoint;
typedef TComInterface<ICOMConnectionPoint, &IID_ICOMConnectionPoint> ICOMConnectionPointPtr;

interface DECLSPEC_UUID("{DC2EF81F-A8DF-488D-89C9-DCC67D7B0EE8}") ICOMEvents;
typedef TComInterface<ICOMEvents, &IID_ICOMEvents> ICOMEventsPtr;

interface DECLSPEC_UUID("{FF57FCA7-3701-47A2-B309-3C0F5A581CB1}") IActiveXControl;
typedef TComInterface<IActiveXControl, &IID_IActiveXControl> IActiveXControlPtr;

interface DECLSPEC_UUID("{76B856CD-223D-4728-BA49-DCB111DAAA9D}") IHeaderItem;
typedef TComInterface<IHeaderItem, &IID_IHeaderItem> IHeaderItemPtr;

interface DECLSPEC_UUID("{F1901A02-8CA0-4446-AC10-D8E9B6A9E573}") IHeader;
typedef TComInterface<IHeader, &IID_IHeader> IHeaderPtr;

interface DECLSPEC_UUID("{8BEFFC8D-A9E8-4699-8E02-64DB4DC78DA2}") IListSubItem;
typedef TComInterface<IListSubItem, &IID_IListSubItem> IListSubItemPtr;

interface DECLSPEC_UUID("{1FEE927E-CC8A-4DC0-9B40-E4113CDE5DA9}") IListItem;
typedef TComInterface<IListItem, &IID_IListItem> IListItemPtr;

interface DECLSPEC_UUID("{1A015BF1-FDE4-49FF-85AE-A142E1239B16}") IListViewColumns;
typedef TComInterface<IListViewColumns, &IID_IListViewColumns> IListViewColumnsPtr;

interface DECLSPEC_UUID("{91CFAE79-1DAB-4194-82FE-314EAF0106B7}") IWorkArea;
typedef TComInterface<IWorkArea, &IID_IWorkArea> IWorkAreaPtr;

interface DECLSPEC_UUID("{9A68D6D1-40E8-49A1-8497-E1A93F03A34E}") IWorkAreas;
typedef TComInterface<IWorkAreas, &IID_IWorkAreas> IWorkAreasPtr;

interface DECLSPEC_UUID("{9C37D97F-D003-4235-9284-091565709535}") IListViewGroup;
typedef TComInterface<IListViewGroup, &IID_IListViewGroup> IListViewGroupPtr;

interface DECLSPEC_UUID("{C1B38DA4-7DE0-4CEC-AFB5-A25980DB88CF}") IListViewGroups;
typedef TComInterface<IListViewGroups, &IID_IListViewGroups> IListViewGroupsPtr;

interface DECLSPEC_UUID("{98763204-A34A-4206-9151-8DDF2445F52B}") IListView;
typedef TComInterface<IListView, &IID_IListView> IListViewPtr;

interface DECLSPEC_UUID("{FFFF9989-481D-4921-949C-B283BD06CB44}") ITreeItem;
typedef TComInterface<ITreeItem, &IID_ITreeItem> ITreeItemPtr;

interface DECLSPEC_UUID("{A6034589-820F-4165-9EEE-AE1E97BFB9B1}") ITreeView;
typedef TComInterface<ITreeView, &IID_ITreeView> ITreeViewPtr;

interface DECLSPEC_UUID("{C15C0ABE-967F-4A17-9EA9-BC68A2855C0D}") IParagraph;
typedef TComInterface<IParagraph, &IID_IParagraph> IParagraphPtr;

interface DECLSPEC_UUID("{C775712D-FA95-49EE-971D-6DD3BE4FE703}") IRichEdit;
typedef TComInterface<IRichEdit, &IID_IRichEdit> IRichEditPtr;

interface DECLSPEC_UUID("{F09EE7EC-728F-4D8B-AE8E-0F5A113FD36E}") IUpDown;
typedef TComInterface<IUpDown, &IID_IUpDown> IUpDownPtr;

interface DECLSPEC_UUID("{D47DC012-3D4E-4412-8A06-E747160435E0}") ITrackBar;
typedef TComInterface<ITrackBar, &IID_ITrackBar> ITrackBarPtr;

interface DECLSPEC_UUID("{E9013635-B5D5-48D7-81A4-41D3AFF5A717}") IHotKey;
typedef TComInterface<IHotKey, &IID_IHotKey> IHotKeyPtr;

interface DECLSPEC_UUID("{CD27766E-91BF-4D27-BA1E-CBFE3CB55BD1}") IAnimate;
typedef TComInterface<IAnimate, &IID_IAnimate> IAnimatePtr;

interface DECLSPEC_UUID("{CCC32DB0-A7E0-4947-A757-9534AB58027F}") IIPAddress;
typedef TComInterface<IIPAddress, &IID_IIPAddress> IIPAddressPtr;

interface DECLSPEC_UUID("{E5197962-B022-4902-B92C-B46F2CCC8875}") IDateTime;
typedef TComInterface<IDateTime, &IID_IDateTime> IDateTimePtr;

interface DECLSPEC_UUID("{0E53C57C-CAC1-4290-8C57-559AD095F9F3}") IDateTimeControl;
typedef TComInterface<IDateTimeControl, &IID_IDateTimeControl> IDateTimeControlPtr;

interface DECLSPEC_UUID("{7FCABADD-F460-4049-ABBC-79821C613284}") IDateTimePicker;
typedef TComInterface<IDateTimePicker, &IID_IDateTimePicker> IDateTimePickerPtr;

interface DECLSPEC_UUID("{EE27A882-AD8E-4723-AAA9-E10CFD472F75}") ICalendar;
typedef TComInterface<ICalendar, &IID_ICalendar> ICalendarPtr;

interface DECLSPEC_UUID("{76A49C6D-284D-45F0-856E-6E9714281AC5}") ISplitter;
typedef TComInterface<ISplitter, &IID_ISplitter> ISplitterPtr;

interface DECLSPEC_UUID("{7BB7C6EB-B2E7-4472-94C0-B22CC0457E80}") ISplitPanel;
typedef TComInterface<ISplitPanel, &IID_ISplitPanel> ISplitPanelPtr;

interface DECLSPEC_UUID("{01F209D7-27B9-41CD-8DAE-0DAF2875A8FA}") IPolygon;
typedef TComInterface<IPolygon, &IID_IPolygon> IPolygonPtr;

interface DECLSPEC_UUID("{DAF6D7B8-1AB3-4DAC-8BDA-4E5234AD8731}") IImage;
typedef TComInterface<IImage, &IID_IImage> IImagePtr;

interface DECLSPEC_UUID("{D6D9AAA2-739F-4807-814E-0E7692E18E62}") ILine;
typedef TComInterface<ILine, &IID_ILine> ILinePtr;

interface DECLSPEC_UUID("{0E609193-AF42-4ECC-9897-4F279B659D1F}") IPrintDialogBase;
typedef TComInterface<IPrintDialogBase, &IID_IPrintDialogBase> IPrintDialogBasePtr;

interface DECLSPEC_UUID("{A48A739A-BAAF-4693-B8AE-B594065B8D17}") IPrintDialog;
typedef TComInterface<IPrintDialog, &IID_IPrintDialog> IPrintDialogPtr;

interface DECLSPEC_UUID("{740AE358-3778-4F25-89E8-CAE218F9F14C}") IPageSetupDialog;
typedef TComInterface<IPageSetupDialog, &IID_IPageSetupDialog> IPageSetupDialogPtr;

interface DECLSPEC_UUID("{A156794D-9CF8-4AC9-84B8-D657F8ECCAF1}") IFindReplaceDialog;
typedef TComInterface<IFindReplaceDialog, &IID_IFindReplaceDialog> IFindReplaceDialogPtr;

interface DECLSPEC_UUID("{7C57CB6F-E98B-4E58-9813-DD46E590B79B}") IFontDialog;
typedef TComInterface<IFontDialog, &IID_IFontDialog> IFontDialogPtr;

interface DECLSPEC_UUID("{5A8CE32D-69D3-45F1-BE74-531AEBA638DB}") IColorDialog;
typedef TComInterface<IColorDialog, &IID_IColorDialog> IColorDialogPtr;

interface DECLSPEC_UUID("{B7ED6BDC-9791-4B8F-979E-990CD76A394A}") IFileOpenSaveDialog;
typedef TComInterface<IFileOpenSaveDialog, &IID_IFileOpenSaveDialog> IFileOpenSaveDialogPtr;

interface DECLSPEC_UUID("{6F63CD78-C21E-4A64-90EC-90FCE7789897}") ISelectFolderDialog;
typedef TComInterface<ISelectFolderDialog, &IID_ISelectFolderDialog> ISelectFolderDialogPtr;

interface DECLSPEC_UUID("{A70DBA20-F39F-4B55-BC04-7E5FE2C495B7}") ITimer;
typedef TComInterface<ITimer, &IID_ITimer> ITimerPtr;

interface DECLSPEC_UUID("{4AAC7C83-5BF6-44A6-AD8A-FD431D23DD79}") ITrayIcon;
typedef TComInterface<ITrayIcon, &IID_ITrayIcon> ITrayIconPtr;

interface DECLSPEC_UUID("{179741BD-E3DA-4A18-B9C1-039785089B03}") IRegions;
typedef TComInterface<IRegions, &IID_IRegions> IRegionsPtr;

interface DECLSPEC_UUID("{BB9FCB6F-2C14-4568-BADF-E7C0B022A654}") IRegion;
typedef TComInterface<IRegion, &IID_IRegion> IRegionPtr;

interface DECLSPEC_UUID("{D0D86627-9E34-438F-92E2-8EC9C1ABE8C5}") IScreen;
typedef TComInterface<IScreen, &IID_IScreen> IScreenPtr;

interface DECLSPEC_UUID("{00017030-B197-4EBC-804F-748CF210108E}") IHint;
typedef TComInterface<IHint, &IID_IHint> IHintPtr;

interface DECLSPEC_UUID("{5273BA8F-609D-4959-9A72-92AD3EADA060}") IEventHandler;
typedef TComInterface<IEventHandler, &IID_IEventHandler> IEventHandlerPtr;

interface DECLSPEC_UUID("{1DD6DE1E-DB95-45FE-B2A8-655177B8E8DB}") IWindowSystemObjectExtensions;
typedef TComInterface<IWindowSystemObjectExtensions, &IID_IWindowSystemObjectExtensions> IWindowSystemObjectExtensionsPtr;

interface DECLSPEC_UUID("{5C615F2E-9B71-4394-9C88-95EE52F97849}") IPrintInfo;
typedef TComInterface<IPrintInfo, &IID_IPrintInfo> IPrintInfoPtr;

interface DECLSPEC_UUID("{C0615DB9-9C1D-42B0-8EB5-8CC8AF95B110}") IStdDispatch;
typedef TComInterface<IStdDispatch, &IID_IStdDispatch> IStdDispatchPtr;

interface DECLSPEC_UUID("{A16801B1-8BA4-4F0D-A589-86443B09037C}") IBalloonTip;
typedef TComInterface<IBalloonTip, &IID_IBalloonTip> IBalloonTipPtr;

interface DECLSPEC_UUID("{BEF454E2-AC05-40F6-BCFD-300B70CAD3FC}") IWindow;
typedef TComInterface<IWindow, &IID_IWindow> IWindowPtr;

interface DECLSPEC_UUID("{FBAA7B25-99FF-4B15-832D-5A85EF97F814}") IClipboardEvents;
typedef TComInterface<IClipboardEvents, &DIID_IClipboardEvents> IClipboardEventsPtr;

interface DECLSPEC_UUID("{1CD8E952-7F59-4429-81FB-CADDDD77AE72}") ClipboardEvents;
typedef TComInterface<ClipboardEvents, &IID_ClipboardEvents> ClipboardEventsPtr;

interface DECLSPEC_UUID("{3CA40ACA-6385-4080-BFC9-82437A0FF90D}") IClipboard;
typedef TComInterface<IClipboard, &IID_IClipboard> IClipboardPtr;

interface DECLSPEC_UUID("{805EF906-67A7-4A9D-B026-1F5AA4E9303C}") ITaskBar;
typedef TComInterface<ITaskBar, &IID_ITaskBar> ITaskBarPtr;

interface DECLSPEC_UUID("{F61F2DE3-D729-4ADB-B1E2-6F4B496000F9}") IResourceUsageGraph;
typedef TComInterface<IResourceUsageGraph, &IID_IResourceUsageGraph> IResourceUsageGraphPtr;

interface DECLSPEC_UUID("{0C78AFD5-6C85-4D18-971A-B3BDC0FD0FFE}") IProperty;
typedef TComInterface<IProperty, &IID_IProperty> IPropertyPtr;

interface DECLSPEC_UUID("{A10865D8-EEF9-412E-AD54-36B52F1F5D3F}") IPropertyGrid;
typedef TComInterface<IPropertyGrid, &IID_IPropertyGrid> IPropertyGridPtr;

interface DECLSPEC_UUID("{501853C5-0B67-4372-866C-9D082B219BFE}") IConsole;
typedef TComInterface<IConsole, &IID_IConsole> IConsolePtr;

interface DECLSPEC_UUID("{7C323E2F-57F2-46DB-BAD5-CBCFD7CCE9C8}") IDocking;
typedef TComInterface<IDocking, &IID_IDocking> IDockingPtr;

interface DECLSPEC_UUID("{73A618A4-D771-4BE2-BFE6-4ADB0B0C3703}") IGraphicElement;
typedef TComInterface<IGraphicElement, &IID_IGraphicElement> IGraphicElementPtr;

interface DECLSPEC_UUID("{A93F1DA9-1F87-41F2-93F7-56F33DE002D5}") IBeginDockContext;
typedef TComInterface<IBeginDockContext, &IID_IBeginDockContext> IBeginDockContextPtr;

interface DECLSPEC_UUID("{AE0D893C-7F42-466A-8F50-3D2216828B4C}") IDockControlCreateContext;
typedef TComInterface<IDockControlCreateContext, &IID_IDockControlCreateContext> IDockControlCreateContextPtr;

interface DECLSPEC_UUID("{92FAA2DB-8F11-4A1F-8B05-CCD1A97098E3}") IUndockContext;
typedef TComInterface<IUndockContext, &IID_IUndockContext> IUndockContextPtr;

interface DECLSPEC_UUID("{C5EE68E8-EB57-491A-B7A9-50AC5EA07B79}") IColor;
typedef TComInterface<IColor, &IID_IColor> IColorPtr;

interface DECLSPEC_UUID("{B23A2C07-3A36-4ADC-B695-94B8814AAF80}") ILayering;
typedef TComInterface<ILayering, &IID_ILayering> ILayeringPtr;

interface DECLSPEC_UUID("{FA9F97C8-A273-412E-A708-285BEB3CABC5}") IMessageDialog;
typedef TComInterface<IMessageDialog, &IID_IMessageDialog> IMessageDialogPtr;

interface DECLSPEC_UUID("{AE2631CE-2F75-4936-92D2-F2FD0097954C}") ITaskDialog;
typedef TComInterface<ITaskDialog, &IID_ITaskDialog> ITaskDialogPtr;

interface DECLSPEC_UUID("{58A2A29A-ABEB-4AAB-ABD4-03CC83B59915}") ITaskDialogEvents;
typedef TComInterface<ITaskDialogEvents, &DIID_ITaskDialogEvents> ITaskDialogEventsPtr;

interface DECLSPEC_UUID("{FEA1F5D3-2AF5-41A3-B732-59BB92E999AA}") TaskDialogEvents;
typedef TComInterface<TaskDialogEvents, &IID_TaskDialogEvents> TaskDialogEventsPtr;

interface DECLSPEC_UUID("{8EF324A3-C801-49E1-B07C-D32A0589746F}") IIcon;
typedef TComInterface<IIcon, &IID_IIcon> IIconPtr;

interface DECLSPEC_UUID("{85BCA1CF-0215-432E-B290-13947A00DA8F}") IRect;
typedef TComInterface<IRect, &IID_IRect> IRectPtr;

interface DECLSPEC_UUID("{362DA7FC-F126-4E3B-BB58-14C126CEB063}") IIconBuilder;
typedef TComInterface<IIconBuilder, &IID_IIconBuilder> IIconBuilderPtr;

interface DECLSPEC_UUID("{7C5DD379-4C1A-4F52-B04B-6D0972964779}") IDesignReference;
typedef TComInterface<IDesignReference, &IID_IDesignReference> IDesignReferencePtr;

interface DECLSPEC_UUID("{FBE98002-0D8F-4AC8-808C-22DEDE52BF1F}") IDesign;
typedef TComInterface<IDesign, &IID_IDesign> IDesignPtr;

interface DECLSPEC_UUID("{8C46AC3B-00A3-42F5-B82F-E292FD49F53D}") IDesignEvents;
typedef TComInterface<IDesignEvents, &DIID_IDesignEvents> IDesignEventsPtr;

interface DECLSPEC_UUID("{FAE90BDF-6BDD-4C3C-8433-5C0DFEC216DC}") DesignEvents;
typedef TComInterface<DesignEvents, &IID_DesignEvents> DesignEventsPtr;

interface DECLSPEC_UUID("{F17D5798-9B71-46B9-B6D3-3FA3AA87C423}") IExecutor;
typedef TComInterface<IExecutor, &IID_IExecutor> IExecutorPtr;

interface DECLSPEC_UUID("{885A7D58-B7A1-4CA6-BC6F-7C58C09C7812}") IExecutorEvents;
typedef TComInterface<IExecutorEvents, &DIID_IExecutorEvents> IExecutorEventsPtr;

interface DECLSPEC_UUID("{9D263BBD-9C2D-4825-B6AF-12110F16D8BB}") ExecutorEvents;
typedef TComInterface<ExecutorEvents, &IID_ExecutorEvents> ExecutorEventsPtr;

interface DECLSPEC_UUID("{EEB664B4-E288-4CC3-B9C2-ACAB3EFA0ECA}") IControlExtendedProperties;
typedef TComInterface<IControlExtendedProperties, &IID_IControlExtendedProperties> IControlExtendedPropertiesPtr;

interface DECLSPEC_UUID("{7190AE34-CBEA-432A-8044-D9B496B7778E}") IError;
typedef TComInterface<IError, &IID_IError> IErrorPtr;

interface DECLSPEC_UUID("{EC6D466C-E844-4FD0-8521-6AE08E452DCA}") IPropertyInformation;
typedef TComInterface<IPropertyInformation, &IID_IPropertyInformation> IPropertyInformationPtr;

interface DECLSPEC_UUID("{FEA423F8-BE89-4285-9279-194AC034221A}") IFileManager;
typedef TComInterface<IFileManager, &IID_IFileManager> IFileManagerPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IWindowSystemObject WindowSystemObject;
typedef IWindowSystemObjectPtr WindowSystemObjectPtr;
typedef IVersion Version;
typedef IVersionPtr VersionPtr;
typedef IControl Control;
typedef IControlPtr ControlPtr;
typedef IFrame Frame;
typedef IFramePtr FramePtr;
typedef IForm Form;
typedef IFormPtr FormPtr;
typedef ICollection Collection;
typedef ICollectionPtr CollectionPtr;
typedef IStringCollection StringCollection;
typedef IStringCollectionPtr StringCollectionPtr;
typedef IImageList ImageList;
typedef IImageListPtr ImageListPtr;
typedef IPen Pen;
typedef IPenPtr PenPtr;
typedef IBrush Brush;
typedef IBrushPtr BrushPtr;
typedef IFontEx Font;
typedef IFontExPtr FontPtr;
typedef IAction Action;
typedef IActionPtr ActionPtr;
typedef IListControlItem ListControlItem;
typedef IListControlItemPtr ListControlItemPtr;
typedef IListBox ListBox;
typedef IListBoxPtr ListBoxPtr;
typedef IComboBox ComboBox;
typedef IComboBoxPtr ComboBoxPtr;
typedef IEdit Edit;
typedef IEditPtr EditPtr;
typedef IButton Button;
typedef IButtonPtr ButtonPtr;
typedef ICheckBox CheckBox;
typedef ICheckBoxPtr CheckBoxPtr;
typedef IRadioButton RadioButton;
typedef IRadioButtonPtr RadioButtonPtr;
typedef IStatusItem StatusItem;
typedef IStatusItemPtr StatusItemPtr;
typedef IStatusBar StatusBar;
typedef IStatusBarPtr StatusBarPtr;
typedef IProgressBar ProgressBar;
typedef IProgressBarPtr ProgressBarPtr;
typedef IScrollBar ScrollBar;
typedef IScrollBarPtr ScrollBarPtr;
typedef ITab Tab;
typedef ITabPtr TabPtr;
typedef ITabControl TabControl;
typedef ITabControlPtr TabControlPtr;
typedef IPageControl PageControl;
typedef IPageControlPtr PageControlPtr;
typedef IToolBar ToolBar;
typedef IToolBarPtr ToolBarPtr;
typedef IMenuBar MenuBar;
typedef IMenuBarPtr MenuBarPtr;
typedef IReBarBand ReBarBand;
typedef IReBarBandPtr ReBarBandPtr;
typedef IReBar ReBar;
typedef IReBarPtr ReBarPtr;
typedef IHyperLink HyperLink;
typedef IHyperLinkPtr HyperLinkPtr;
typedef IPager Pager;
typedef IPagerPtr PagerPtr;
typedef ICOMConnectionPoint COMConnectionPoint;
typedef ICOMConnectionPointPtr COMConnectionPointPtr;
typedef ICOMEvents COMEvents;
typedef ICOMEventsPtr COMEventsPtr;
typedef IActiveXControl ActiveXControl;
typedef IActiveXControlPtr ActiveXControlPtr;
typedef IHeaderItem HeaderItem;
typedef IHeaderItemPtr HeaderItemPtr;
typedef IHeader Header;
typedef IHeaderPtr HeaderPtr;
typedef IListSubItem ListSubItem;
typedef IListSubItemPtr ListSubItemPtr;
typedef IListItem ListItem;
typedef IListItemPtr ListItemPtr;
typedef IListViewColumns ListViewColumns;
typedef IListViewColumnsPtr ListViewColumnsPtr;
typedef IWorkArea WorkArea;
typedef IWorkAreaPtr WorkAreaPtr;
typedef IWorkAreas WorkAreas;
typedef IWorkAreasPtr WorkAreasPtr;
typedef IListViewGroup ListViewGroup;
typedef IListViewGroupPtr ListViewGroupPtr;
typedef IListViewGroups ListViewGroups;
typedef IListViewGroupsPtr ListViewGroupsPtr;
typedef IListView ListView;
typedef IListViewPtr ListViewPtr;
typedef ITreeItem TreeItem;
typedef ITreeItemPtr TreeItemPtr;
typedef ITreeView TreeView;
typedef ITreeViewPtr TreeViewPtr;
typedef IParagraph Paragraph;
typedef IParagraphPtr ParagraphPtr;
typedef IRichEdit RichEdit;
typedef IRichEditPtr RichEditPtr;
typedef IUpDown UpDown;
typedef IUpDownPtr UpDownPtr;
typedef ITrackBar TrackBar;
typedef ITrackBarPtr TrackBarPtr;
typedef IHotKey HotKey;
typedef IHotKeyPtr HotKeyPtr;
typedef IAnimate Animate;
typedef IAnimatePtr AnimatePtr;
typedef IIPAddress IPAddress;
typedef IIPAddressPtr IPAddressPtr;
typedef IDateTime DateTime;
typedef IDateTimePtr DateTimePtr;
typedef IDateTimePicker DateTimePicker;
typedef IDateTimePickerPtr DateTimePickerPtr;
typedef ICalendar Calendar;
typedef ICalendarPtr CalendarPtr;
typedef ISplitter Splitter;
typedef ISplitterPtr SplitterPtr;
typedef ISplitPanel SplitPanel;
typedef ISplitPanelPtr SplitPanelPtr;
typedef IPolygon PolygonGraphic;
typedef IPolygonPtr PolygonGraphicPtr;
typedef IImage ImageGraphic;
typedef IImagePtr ImageGraphicPtr;
typedef ILine LineGraphic;
typedef ILinePtr LineGraphicPtr;
typedef IPrintDialogBase PrintDialogBase;
typedef IPrintDialogBasePtr PrintDialogBasePtr;
typedef IPrintDialog PrintDialog;
typedef IPrintDialogPtr PrintDialogPtr;
typedef IPageSetupDialog PageSetupDialog;
typedef IPageSetupDialogPtr PageSetupDialogPtr;
typedef IFindReplaceDialog FindReplaceDialog;
typedef IFindReplaceDialogPtr FindReplaceDialogPtr;
typedef IFontDialog FontDialog;
typedef IFontDialogPtr FontDialogPtr;
typedef IColorDialog ColorDialog;
typedef IColorDialogPtr ColorDialogPtr;
typedef IFileOpenSaveDialog FileOpenSaveDialog;
typedef IFileOpenSaveDialogPtr FileOpenSaveDialogPtr;
typedef ISelectFolderDialog SelectFolderDialog;
typedef ISelectFolderDialogPtr SelectFolderDialogPtr;
typedef ITimer Timer;
typedef ITimerPtr TimerPtr;
typedef IForm WindowSystemControl;
typedef IFormPtr WindowSystemControlPtr;
typedef IResult Result;
typedef IResultPtr ResultPtr;
typedef ITrayIcon TrayIcon;
typedef ITrayIconPtr TrayIconPtr;
typedef IRegions Regions;
typedef IRegionsPtr RegionsPtr;
typedef IRegion Region;
typedef IRegionPtr RegionPtr;
typedef IScreen Screen;
typedef IScreenPtr ScreenPtr;
typedef IHint Hint;
typedef IHintPtr HintPtr;
typedef IEventHandler EventHandler;
typedef IEventHandlerPtr EventHandlerPtr;
typedef IWindowSystemObjectExtensions WindowSystemObjectExtensions;
typedef IWindowSystemObjectExtensionsPtr WindowSystemObjectExtensionsPtr;
typedef IPrintInfo PrintInfo;
typedef IPrintInfoPtr PrintInfoPtr;
typedef IStdDispatch StdDispatch;
typedef IStdDispatchPtr StdDispatchPtr;
typedef IBalloonTip BalloonTip;
typedef IBalloonTipPtr BalloonTipPtr;
typedef IWindow Window;
typedef IWindowPtr WindowPtr;
typedef IClipboard Clipboard;
typedef IClipboardPtr ClipboardPtr;
typedef ITaskBar TaskBar;
typedef ITaskBarPtr TaskBarPtr;
typedef IResourceUsageGraph ResourceUsageGraph;
typedef IResourceUsageGraphPtr ResourceUsageGraphPtr;
typedef IProperty Property;
typedef IPropertyPtr PropertyPtr;
typedef IPropertyGrid PropertyGrid;
typedef IPropertyGridPtr PropertyGridPtr;
typedef IConsole Console;
typedef IConsolePtr ConsolePtr;
typedef IDocking Docking;
typedef IDockingPtr DockingPtr;
typedef IGraphicElement GraphicElement;
typedef IGraphicElementPtr GraphicElementPtr;
typedef IBeginDockContext BeginDockContext;
typedef IBeginDockContextPtr BeginDockContextPtr;
typedef IDockControlCreateContext DockControlCreateContext;
typedef IDockControlCreateContextPtr DockControlCreateContextPtr;
typedef IUndockContext UndockContext;
typedef IUndockContextPtr UndockContextPtr;
typedef IColor Color;
typedef IColorPtr ColorPtr;
typedef ILayering Layering;
typedef ILayeringPtr LayeringPtr;
typedef IMessageDialog MessageDialog;
typedef IMessageDialogPtr MessageDialogPtr;
typedef ITaskDialog TaskDialog;
typedef ITaskDialogPtr TaskDialogPtr;
typedef IIcon Icon;
typedef IIconPtr IconPtr;
typedef IRect Rect;
typedef IRectPtr RectPtr;
typedef IIconBuilder IconBuilder;
typedef IIconBuilderPtr IconBuilderPtr;
typedef IDesignReference DesignReference;
typedef IDesignReferencePtr DesignReferencePtr;
typedef IDesign Design;
typedef IDesignPtr DesignPtr;
typedef IExecutor Executor;
typedef IExecutorPtr ExecutorPtr;
typedef IControlExtendedProperties ControlExtendedProperties;
typedef IControlExtendedPropertiesPtr ControlExtendedPropertiesPtr;
typedef IError Error;
typedef IErrorPtr ErrorPtr;
typedef IPropertyInformation PropertyInformation;
typedef IPropertyInformationPtr PropertyInformationPtr;
typedef IFileManager FileManager;
typedef IFileManagerPtr FileManagerPtr;

#define LIBID_OF_WindowSystemObject (&LIBID_WSOLib)
#define LIBID_OF_Version (&LIBID_WSOLib)
#define LIBID_OF_Control (&LIBID_WSOLib)
#define LIBID_OF_Frame (&LIBID_WSOLib)
#define LIBID_OF_Form (&LIBID_WSOLib)
#define LIBID_OF_Collection (&LIBID_WSOLib)
#define LIBID_OF_StringCollection (&LIBID_WSOLib)
#define LIBID_OF_ImageList (&LIBID_WSOLib)
#define LIBID_OF_Pen (&LIBID_WSOLib)
#define LIBID_OF_Brush (&LIBID_WSOLib)
#define LIBID_OF_Font (&LIBID_WSOLib)
#define LIBID_OF_Action (&LIBID_WSOLib)
#define LIBID_OF_ListControlItem (&LIBID_WSOLib)
#define LIBID_OF_ListBox (&LIBID_WSOLib)
#define LIBID_OF_ComboBox (&LIBID_WSOLib)
#define LIBID_OF_Edit (&LIBID_WSOLib)
#define LIBID_OF_Button (&LIBID_WSOLib)
#define LIBID_OF_CheckBox (&LIBID_WSOLib)
#define LIBID_OF_RadioButton (&LIBID_WSOLib)
#define LIBID_OF_StatusItem (&LIBID_WSOLib)
#define LIBID_OF_StatusBar (&LIBID_WSOLib)
#define LIBID_OF_ProgressBar (&LIBID_WSOLib)
#define LIBID_OF_ScrollBar (&LIBID_WSOLib)
#define LIBID_OF_Tab (&LIBID_WSOLib)
#define LIBID_OF_TabControl (&LIBID_WSOLib)
#define LIBID_OF_PageControl (&LIBID_WSOLib)
#define LIBID_OF_ToolBar (&LIBID_WSOLib)
#define LIBID_OF_MenuBar (&LIBID_WSOLib)
#define LIBID_OF_ReBarBand (&LIBID_WSOLib)
#define LIBID_OF_ReBar (&LIBID_WSOLib)
#define LIBID_OF_HyperLink (&LIBID_WSOLib)
#define LIBID_OF_Pager (&LIBID_WSOLib)
#define LIBID_OF_COMConnectionPoint (&LIBID_WSOLib)
#define LIBID_OF_COMEvents (&LIBID_WSOLib)
#define LIBID_OF_ActiveXControl (&LIBID_WSOLib)
#define LIBID_OF_HeaderItem (&LIBID_WSOLib)
#define LIBID_OF_Header (&LIBID_WSOLib)
#define LIBID_OF_ListSubItem (&LIBID_WSOLib)
#define LIBID_OF_ListItem (&LIBID_WSOLib)
#define LIBID_OF_ListViewColumns (&LIBID_WSOLib)
#define LIBID_OF_WorkArea (&LIBID_WSOLib)
#define LIBID_OF_WorkAreas (&LIBID_WSOLib)
#define LIBID_OF_ListViewGroup (&LIBID_WSOLib)
#define LIBID_OF_ListViewGroups (&LIBID_WSOLib)
#define LIBID_OF_ListView (&LIBID_WSOLib)
#define LIBID_OF_TreeItem (&LIBID_WSOLib)
#define LIBID_OF_TreeView (&LIBID_WSOLib)
#define LIBID_OF_Paragraph (&LIBID_WSOLib)
#define LIBID_OF_RichEdit (&LIBID_WSOLib)
#define LIBID_OF_UpDown (&LIBID_WSOLib)
#define LIBID_OF_TrackBar (&LIBID_WSOLib)
#define LIBID_OF_HotKey (&LIBID_WSOLib)
#define LIBID_OF_Animate (&LIBID_WSOLib)
#define LIBID_OF_IPAddress (&LIBID_WSOLib)
#define LIBID_OF_DateTime (&LIBID_WSOLib)
#define LIBID_OF_DateTimePicker (&LIBID_WSOLib)
#define LIBID_OF_Calendar (&LIBID_WSOLib)
#define LIBID_OF_Splitter (&LIBID_WSOLib)
#define LIBID_OF_SplitPanel (&LIBID_WSOLib)
#define LIBID_OF_PolygonGraphic (&LIBID_WSOLib)
#define LIBID_OF_ImageGraphic (&LIBID_WSOLib)
#define LIBID_OF_LineGraphic (&LIBID_WSOLib)
#define LIBID_OF_PrintDialogBase (&LIBID_WSOLib)
#define LIBID_OF_PrintDialog (&LIBID_WSOLib)
#define LIBID_OF_PageSetupDialog (&LIBID_WSOLib)
#define LIBID_OF_FindReplaceDialog (&LIBID_WSOLib)
#define LIBID_OF_FontDialog (&LIBID_WSOLib)
#define LIBID_OF_ColorDialog (&LIBID_WSOLib)
#define LIBID_OF_FileOpenSaveDialog (&LIBID_WSOLib)
#define LIBID_OF_SelectFolderDialog (&LIBID_WSOLib)
#define LIBID_OF_Timer (&LIBID_WSOLib)
#define LIBID_OF_WindowSystemControl (&LIBID_WSOLib)
#define LIBID_OF_Result (&LIBID_WSOLib)
#define LIBID_OF_TrayIcon (&LIBID_WSOLib)
#define LIBID_OF_Regions (&LIBID_WSOLib)
#define LIBID_OF_Region (&LIBID_WSOLib)
#define LIBID_OF_Screen (&LIBID_WSOLib)
#define LIBID_OF_Hint (&LIBID_WSOLib)
#define LIBID_OF_EventHandler (&LIBID_WSOLib)
#define LIBID_OF_WindowSystemObjectExtensions (&LIBID_WSOLib)
#define LIBID_OF_PrintInfo (&LIBID_WSOLib)
#define LIBID_OF_StdDispatch (&LIBID_WSOLib)
#define LIBID_OF_BalloonTip (&LIBID_WSOLib)
#define LIBID_OF_Window (&LIBID_WSOLib)
#define LIBID_OF_Clipboard (&LIBID_WSOLib)
#define LIBID_OF_TaskBar (&LIBID_WSOLib)
#define LIBID_OF_ResourceUsageGraph (&LIBID_WSOLib)
#define LIBID_OF_Property (&LIBID_WSOLib)
#define LIBID_OF_PropertyGrid (&LIBID_WSOLib)
#define LIBID_OF_Console (&LIBID_WSOLib)
#define LIBID_OF_Docking (&LIBID_WSOLib)
#define LIBID_OF_GraphicElement (&LIBID_WSOLib)
#define LIBID_OF_BeginDockContext (&LIBID_WSOLib)
#define LIBID_OF_DockControlCreateContext (&LIBID_WSOLib)
#define LIBID_OF_UndockContext (&LIBID_WSOLib)
#define LIBID_OF_Color (&LIBID_WSOLib)
#define LIBID_OF_Layering (&LIBID_WSOLib)
#define LIBID_OF_MessageDialog (&LIBID_WSOLib)
#define LIBID_OF_TaskDialog (&LIBID_WSOLib)
#define LIBID_OF_Icon (&LIBID_WSOLib)
#define LIBID_OF_Rect (&LIBID_WSOLib)
#define LIBID_OF_IconBuilder (&LIBID_WSOLib)
#define LIBID_OF_DesignReference (&LIBID_WSOLib)
#define LIBID_OF_Design (&LIBID_WSOLib)
#define LIBID_OF_Executor (&LIBID_WSOLib)
#define LIBID_OF_ControlExtendedProperties (&LIBID_WSOLib)
#define LIBID_OF_Error (&LIBID_WSOLib)
#define LIBID_OF_PropertyInformation (&LIBID_WSOLib)
#define LIBID_OF_FileManager (&LIBID_WSOLib)
// *********************************************************************//
// Interface: IControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {EE85ACDD-7499-4719-A173-FCC56CE6FA1D}
// *********************************************************************//
interface IControlEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {CCF521F3-D5AA-4CE2-BD3D-1B4D05A8BE1A}
// *********************************************************************//
interface ControlEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnClick(LPDISPATCH Sender/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE OnChange(LPDISPATCH Sender/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE OnMouseEnter(LPDISPATCH Sender/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE OnMouseLeave(LPDISPATCH Sender/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE OnResize(LPDISPATCH Sender/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE OnMove(LPDISPATCH Sender/*[in]*/); // [12]
   HRESULT STDMETHODCALLTYPE OnDestroy(LPDISPATCH Sender/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE OnShow(LPDISPATCH Sender/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE OnHide(LPDISPATCH Sender/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE OnEnabledChange(LPDISPATCH Sender/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE OnSetFocus(LPDISPATCH Sender/*[in]*/); // [17]
   HRESULT STDMETHODCALLTYPE OnKillFocus(LPDISPATCH Sender/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE OnUndock(LPDISPATCH Sender/*[in]*/); // [104]
};

// *********************************************************************//
// Interface: IFormEvents
// Flags:     (4096) Dispatchable
// GUID:      {E83611E0-B0CD-4087-887B-4A0454176AA9}
// *********************************************************************//
interface IFormEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnCloseQuery */ DISPID(19));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnClose(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClose */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnActiveControlChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnActiveControlChange */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHitTest(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnHitTest */ DISPID(22));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHint(LPDISPATCH Sender/*[in]*/, LPDISPATCH Object/*[in]*/)
  {
    _TDispID _dispid(/* OnHint */ DISPID(23));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Object /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMinimize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnMinimize */ DISPID(24));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMaximize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnMaximize */ DISPID(25));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnRestore(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnRestore */ DISPID(26));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnCopyData(LPDISPATCH Sender/*[in]*/, BSTR Data/*[in]*/)
  {
    _TDispID _dispid(/* OnCopyData */ DISPID(27));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Data /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnActivate(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnActivate */ DISPID(28));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnterSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnEnterSizeMove */ DISPID(29));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnExitSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnExitSizeMove */ DISPID(30));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: FormEvents
// Flags:     (4096) Dispatchable
// GUID:      {1198D8CE-DCE6-4C9E-8CFF-CF0E3AB7DE87}
// *********************************************************************//
interface FormEvents  : public Wsolib_tlb::ControlEvents
{
public:
   HRESULT STDMETHODCALLTYPE OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE OnClose(LPDISPATCH Sender/*[in]*/); // [20]
   HRESULT STDMETHODCALLTYPE OnActiveControlChange(LPDISPATCH Sender/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE OnHitTest(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       LPDISPATCH ResultPtr/*[in]*/); // [22]
   HRESULT STDMETHODCALLTYPE OnHint(LPDISPATCH Sender/*[in]*/, LPDISPATCH Object/*[in]*/); // [23]
   HRESULT STDMETHODCALLTYPE OnMinimize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE OnMaximize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE OnRestore(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE OnCopyData(LPDISPATCH Sender/*[in]*/, BSTR Data/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE OnActivate(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/); // [28]
   HRESULT STDMETHODCALLTYPE OnEnterSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE OnExitSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/); // [30]
};

// *********************************************************************//
// Interface: IActionEvents
// Flags:     (4096) Dispatchable
// GUID:      {EFCC7766-9D3D-48CE-94B0-F0EAC186B763}
// *********************************************************************//
interface IActionEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnExecute(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnExecute */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUpdate(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUpdate */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ActionEvents
// Flags:     (4096) Dispatchable
// GUID:      {F2C5B01B-E77C-411A-A958-7E77A8DA912F}
// *********************************************************************//
interface ActionEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnExecute(LPDISPATCH Sender/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnUpdate(LPDISPATCH Sender/*[in]*/); // [2]
};

// *********************************************************************//
// Interface: ITimerEvents
// Flags:     (4096) Dispatchable
// GUID:      {E00E8E3D-8933-4679-B250-257A46743389}
// *********************************************************************//
interface ITimerEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnExecute(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnExecute */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: TimerEvents
// Flags:     (4096) Dispatchable
// GUID:      {076A1D13-7601-477A-98BB-45E6328360DE}
// *********************************************************************//
interface TimerEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnExecute(LPDISPATCH Sender/*[in]*/); // [1]
};

// *********************************************************************//
// Interface: IHeaderItemEvents
// Flags:     (4096) Dispatchable
// GUID:      {A71BDEAC-05C9-4594-854D-671071B3C110}
// *********************************************************************//
interface IHeaderItemEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginTrack(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                               LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginTrack */ DISPID(3));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Button /*[VT_I4:0]*/;
    _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnTrack(LPDISPATCH Sender/*[in]*/, long Width/*[in]*/, long Button/*[in]*/, 
                          LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnTrack */ DISPID(4));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Width /*[VT_I4:0]*/;
    _args[3] = Button /*[VT_I4:0]*/;
    _args[4] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDividerDblClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnDividerDblClick */ DISPID(5));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                              LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDrag */ DISPID(6));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Button /*[VT_I4:0]*/;
    _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEndDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                            LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnEndDrag */ DISPID(7));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Button /*[VT_I4:0]*/;
    _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: HeaderItemEvents
// Flags:     (4096) Dispatchable
// GUID:      {AF9F723A-C078-431B-8723-AAB704905048}
// *********************************************************************//
interface HeaderItemEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnClick(LPDISPATCH Sender/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnResize(LPDISPATCH Sender/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE OnBeginTrack(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                          LPDISPATCH ResultPtr/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE OnTrack(LPDISPATCH Sender/*[in]*/, long Width/*[in]*/, 
                                     long Button/*[in]*/, LPDISPATCH ResultPtr/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE OnDividerDblClick(LPDISPATCH Sender/*[in]*/, 
                                               LPDISPATCH ResultPtr/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE OnBeginDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                         LPDISPATCH ResultPtr/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE OnEndDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                       LPDISPATCH ResultPtr/*[in]*/); // [7]
};

// *********************************************************************//
// Interface: IHeaderEvents
// Flags:     (4096) Dispatchable
// GUID:      {09D9EF1F-9DA1-4E05-9557-B3F692E5775B}
// *********************************************************************//
interface IHeaderEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnColumnClick */ DISPID(19));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnColumnResize */ DISPID(20));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: HeaderEvents
// Flags:     (4096) Dispatchable
// GUID:      {0CEF5413-315F-4FA8-B961-F7F04F8393A8}
// *********************************************************************//
interface HeaderEvents  : public Wsolib_tlb::ControlEvents
{
public:
   HRESULT STDMETHODCALLTYPE OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [20]
};

// *********************************************************************//
// Interface: IListViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {A55B1FD3-30D4-479B-8F33-3978EB403A0B}
// *********************************************************************//
interface IListViewEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnColumnClick */ DISPID(19));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnColumnResize */ DISPID(20));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnData(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnData */ DISPID(21));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnItemCheck */ DISPID(22));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                           Wsolib_tlb::IResult* NewText/*[in]*/)
  {
    _TDispID _dispid(/* OnEdited */ DISPID(23));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)NewText /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                              Wsolib_tlb::IResult* ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginEdit */ DISPID(24));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)ResultPtr /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnGroupLinkClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Group/*[in]*/)
  {
    _TDispID _dispid(/* OnGroupLinkClick */ DISPID(25));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Group /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnDrawItem */ DISPID(26));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSubItemEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                  long SubItem/*[in]*/, Wsolib_tlb::IResult* NewText/*[in]*/)
  {
    _TDispID _dispid(/* OnSubItemEdited */ DISPID(27));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    _args[3] = SubItem /*[VT_I4:0]*/;
    _args[4] = (LPDISPATCH)(Wsolib_tlb::IResult*)NewText /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginSubItemEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                     long SubItem/*[in]*/, Wsolib_tlb::IResult* ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginSubItemEdit */ DISPID(28));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    _args[3] = SubItem /*[VT_I4:0]*/;
    _args[4] = (LPDISPATCH)(Wsolib_tlb::IResult*)ResultPtr /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ListViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {F8233D5A-7BE6-48C7-8B44-E61345BBDF5A}
// *********************************************************************//
interface ListViewEvents  : public Wsolib_tlb::HeaderEvents
{
public:
   HRESULT STDMETHODCALLTYPE OnData(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [22]
   HRESULT STDMETHODCALLTYPE OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                      Wsolib_tlb::IResult* NewText/*[in]*/); // [23]
   HRESULT STDMETHODCALLTYPE OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                         Wsolib_tlb::IResult* ResultPtr/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE OnGroupLinkClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Group/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE OnSubItemEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                             long SubItem/*[in]*/, 
                                             Wsolib_tlb::IResult* NewText/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE OnBeginSubItemEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                                long SubItem/*[in]*/, 
                                                Wsolib_tlb::IResult* ResultPtr/*[in]*/); // [28]
};

// *********************************************************************//
// Interface: IResult
// Flags:     (4096) Dispatchable
// GUID:      {50B60E8E-E889-46DB-88D8-09A416726824}
// *********************************************************************//
interface IResult  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE Put(VARIANT newVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Value(VARIANT* pVal/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Value(VARIANT pVal/*[in]*/); // [0]
};

// *********************************************************************//
// Interface: ITreeViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {FFC21772-F6D8-4AFC-A2F4-362C11DF0019}
// *********************************************************************//
interface ITreeViewEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                           Wsolib_tlb::IResult* NewText/*[in]*/)
  {
    _TDispID _dispid(/* OnEdited */ DISPID(19));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)NewText /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnExpanding(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnExpanding */ DISPID(20));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnExpanded(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnExpanded */ DISPID(21));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnCollapsing(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnCollapsing */ DISPID(22));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnCollapsed(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnCollapsed */ DISPID(23));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnItemCheck */ DISPID(24));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                              Wsolib_tlb::IResult* ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginEdit */ DISPID(25));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)ResultPtr /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnDrawItem */ DISPID(26));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: TreeViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {555949AA-0922-4BF3-926A-9DAA912861A2}
// *********************************************************************//
interface TreeViewEvents  : public Wsolib_tlb::ControlEvents
{
public:
   HRESULT STDMETHODCALLTYPE OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                      Wsolib_tlb::IResult* NewText/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE OnExpanding(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [20]
   HRESULT STDMETHODCALLTYPE OnExpanded(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE OnCollapsing(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [22]
   HRESULT STDMETHODCALLTYPE OnCollapsed(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [23]
   HRESULT STDMETHODCALLTYPE OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                         Wsolib_tlb::IResult* ResultPtr/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [26]
};

// *********************************************************************//
// Interface: IRichEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}
// *********************************************************************//
interface IRichEditEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSelChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSelChange */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: RichEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {5B691737-293F-421D-87DA-E810555C8459}
// *********************************************************************//
interface RichEditEvents  : public Wsolib_tlb::ControlEvents
{
public:
   HRESULT STDMETHODCALLTYPE OnSelChange(LPDISPATCH Sender/*[in]*/); // [19]
};

// *********************************************************************//
// Interface: IComboBoxEvents
// Flags:     (4096) Dispatchable
// GUID:      {B8A6F3A3-EE81-4472-938E-F1B42513B7D2}
// *********************************************************************//
interface IComboBoxEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnDrawItem */ DISPID(19));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDropDown(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDropDown */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ListControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {C3B3B3A5-DD01-4E17-900A-724AE1028B20}
// *********************************************************************//
interface ListControlEvents  : public Wsolib_tlb::ControlEvents
{
public:
   HRESULT STDMETHODCALLTYPE OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/); // [19]
};

// *********************************************************************//
// Interface: ComboBoxEvents
// Flags:     (4096) Dispatchable
// GUID:      {BDC47F49-9597-4CD8-BFBE-A5A317B940F8}
// *********************************************************************//
interface ComboBoxEvents  : public Wsolib_tlb::ListControlEvents
{
public:
   HRESULT STDMETHODCALLTYPE OnDropDown(LPDISPATCH Sender/*[in]*/); // [20]
};

// *********************************************************************//
// Interface: IFindReplaceDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}
// *********************************************************************//
interface IFindReplaceDialogEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnFind(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnFind */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReplace(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnReplace */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReplaceAll(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnReplaceAll */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnClose(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClose */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHelp(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHelp */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: FindReplaceDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {0FBA8E33-6938-4E38-97ED-DD9DF0248306}
// *********************************************************************//
interface FindReplaceDialogEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnFind(LPDISPATCH Sender/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnReplace(LPDISPATCH Sender/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE OnReplaceAll(LPDISPATCH Sender/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE OnClose(LPDISPATCH Sender/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE OnHelp(LPDISPATCH Sender/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: IFileOpenSaveDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {BAE2B02E-9BD5-4D6D-824E-197CC72CF040}
// *********************************************************************//
interface IFileOpenSaveDialogEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnCloseQuery */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnFolderChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnFolderChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnTypeChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnTypeChange */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHelp(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHelp */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: FileOpenSaveDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {ED303EB3-B7F9-493B-BE0E-265D20F80E38}
// *********************************************************************//
interface FileOpenSaveDialogEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnChange(LPDISPATCH Sender/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE OnFolderChange(LPDISPATCH Sender/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE OnTypeChange(LPDISPATCH Sender/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE OnHelp(LPDISPATCH Sender/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: ISelectFolderDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {C5A781AE-2868-4470-972D-39BEAE4721FC}
// *********************************************************************//
interface ISelectFolderDialogEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: SelectFolderDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {1B47003E-14C2-4459-8280-40BCE5C8CA90}
// *********************************************************************//
interface SelectFolderDialogEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnChange(LPDISPATCH Sender/*[in]*/); // [1]
};

// *********************************************************************//
// Interface: ITrayIconEvents
// Flags:     (4096) Dispatchable
// GUID:      {0EE395DB-AF4D-4493-861E-B0E1966FD5DB}
// *********************************************************************//
interface ITrayIconEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(3));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(5));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: TrayIconEvents
// Flags:     (4096) Dispatchable
// GUID:      {C191A5DF-072B-4331-9A83-3E985716730A}
// *********************************************************************//
interface TrayIconEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnClick(LPDISPATCH Sender/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: IEventHandlerEvents
// Flags:     (4096) Dispatchable
// GUID:      {A3BE55F5-A954-45E5-8419-CB249B836ABA}
// *********************************************************************//
interface IEventHandlerEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnExecute(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnExecute */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: EventHandlerEvents
// Flags:     (4096) Dispatchable
// GUID:      {7E144038-C33F-4F65-8CE2-B833F4773101}
// *********************************************************************//
interface EventHandlerEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnExecute(LPDISPATCH Sender/*[in]*/); // [1]
};

// *********************************************************************//
// Interface: IFontDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {57ACC027-05B0-48A5-ACC3-AB2E31C34D28}
// *********************************************************************//
interface IFontDialogEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnHelp(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHelp */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnApply(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnApply */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: FontDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {9C2C742B-33B5-4BCF-AEB9-640DF4D94374}
// *********************************************************************//
interface FontDialogEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnHelp(LPDISPATCH Sender/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnApply(LPDISPATCH Sender/*[in]*/); // [2]
};

// *********************************************************************//
// Interface: IColorDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {F3B57D51-7823-4E4F-907D-70E73A2C9E72}
// *********************************************************************//
interface IColorDialogEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnHelp(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHelp */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ColorDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {B7B784F7-A097-4D24-BE47-E9842A532192}
// *********************************************************************//
interface ColorDialogEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnHelp(LPDISPATCH Sender/*[in]*/); // [1]
};

// *********************************************************************//
// Interface: IListControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {DDB41E4E-78C4-4E80-9065-0D20B278E837}
// *********************************************************************//
interface IListControlEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                             long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(2));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyUp */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Key /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                              long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                            long Button/*[in]*/, long Flags/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = x /*[VT_I4:0]*/;
    _args[3] = y /*[VT_I4:0]*/;
    _args[4] = Button /*[VT_I4:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnResize(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnResize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMove(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnMove */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnShow(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnShow */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnHide(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnHide */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnSetFocus */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnKillFocus */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                               long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
    TAutoArgs<5> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Keys /*[VT_I4:0]*/;
    _args[3] = Delta /*[VT_I4:0]*/;
    _args[4] = x /*[VT_I4:0]*/;
    _args[5] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                              LPDISPATCH BeginDockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnBeginDock */ DISPID(101));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                      LPDISPATCH DockTarget/*[in]*/, 
                                      LPDISPATCH DockControlCreateContext/*[in]*/)
  {
    _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
    TAutoArgs<4> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
    _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
  {
    _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUndock(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnUndock */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* OnDrawItem */ DISPID(19));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IWindowSystemObject
// Flags:     (4096) Dispatchable
// GUID:      {06983696-F0BE-40C1-992E-76172C1CA324}
// *********************************************************************//
interface IWindowSystemObject  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE CreateForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE CreateDialogForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE CreateImageList(LPDISPATCH* pControl/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE CreateTimer(LPDISPATCH* pControl/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE CreateCOMEvents(LPDISPATCH COMObject/*[in]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                              unsigned_long Flags/*[in,def,opt]*/, 
                                              LPDISPATCH* pResult/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                 BSTR ReplaceText/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/, 
                                                 LPDISPATCH* pResult/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE CreateTrayIcon(LPDISPATCH* pControl/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE Run(void); // [9]
   HRESULT STDMETHODCALLTYPE Stop(void); // [10]
   HRESULT STDMETHODCALLTYPE get_Controls(LPDISPATCH* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE Translate(BSTR Text/*[in]*/, VARIANT* pResult/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE LoadImage(BSTR Path/*[in]*/, LPDISPATCH* pResult/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_Version(LPDISPATCH* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Debug(VARIANT_BOOL* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Debug(VARIANT_BOOL pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE About(void); // [16]
   HRESULT STDMETHODCALLTYPE get_Regions(LPDISPATCH* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE get_PixelsPerInch(long* pVal/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE set_PixelsPerInch(long pVal/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE get_Screen(LPDISPATCH* pVal/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE CreateEventHandler(LPDISPATCH* pControl/*[out,retval]*/); // [20]
   HRESULT STDMETHODCALLTYPE get_EnableVisualStyles(VARIANT_BOOL* pVal/*[out,retval]*/); // [21]
   HRESULT STDMETHODCALLTYPE set_EnableVisualStyles(VARIANT_BOOL pVal/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE CreatePrintInfo(LPDISPATCH* pControl/*[out,retval]*/); // [22]
   HRESULT STDMETHODCALLTYPE CreateStdDispatch(BSTR TypeLibrary/*[in]*/, long Major/*[in]*/, 
                                               long Minor/*[in]*/, BSTR Guid/*[in]*/, 
                                               LPUNKNOWN Object/*[in]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/); // [23]
   HRESULT STDMETHODCALLTYPE get_Console(LPDISPATCH* pControl/*[out,retval]*/); // [24]
   HRESULT STDMETHODCALLTYPE get_ActiveForm(LPDISPATCH* pVal/*[out,retval]*/); // [25]
   HRESULT STDMETHODCALLTYPE get_ForegroundForm(LPDISPATCH* pVal/*[out,retval]*/); // [26]
   HRESULT STDMETHODCALLTYPE VirtualKeyCodeToString(unsigned_long VirtualKey/*[in]*/, 
                                                    VARIANT_BOOL UseKeyboardState/*[in,def,opt]*/, 
                                                    BSTR* pVal/*[out,retval]*/); // [27]
   HRESULT STDMETHODCALLTYPE SaveLayout(BSTR* Layout/*[out,retval]*/); // [28]
   HRESULT STDMETHODCALLTYPE LoadLayout(BSTR Layout/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE get_Color(LPDISPATCH* Color/*[out,retval]*/); // [30]
   HRESULT STDMETHODCALLTYPE get_EnableVistaFileDialog(VARIANT_BOOL* pVal/*[out,retval]*/); // [31]
   HRESULT STDMETHODCALLTYPE set_EnableVistaFileDialog(VARIANT_BOOL pVal/*[in]*/); // [31]
   HRESULT STDMETHODCALLTYPE LoadIcon(BSTR FileName/*[in]*/, LPDISPATCH* Result/*[out,retval]*/); // [32]
   HRESULT STDMETHODCALLTYPE LoadSysIcon(long ID/*[in]*/, LPDISPATCH* Result/*[out,retval]*/); // [33]
   HRESULT STDMETHODCALLTYPE GetIconCount(BSTR FileName/*[in]*/, 
                                          unsigned_long* Result/*[out,retval]*/); // [34]
};

// *********************************************************************//
// Interface: IVersion
// Flags:     (4096) Dispatchable
// GUID:      {AC444C04-F889-47E1-B56E-9F648D8AB009}
// *********************************************************************//
interface IVersion  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Major(long* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Minor(long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_BuildNumber(long* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_String(BSTR* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Trial(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Url(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Copyright(BSTR* pVal/*[out,retval]*/); // [7]
};

// *********************************************************************//
// Interface: IObject
// Flags:     (4096) Dispatchable
// GUID:      {AADDFAA1-E50D-4C66-8955-DFE8CF54FABB}
// *********************************************************************//
interface IObject  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Type(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_UserData(VARIANT* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_UserData(VARIANT pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/); // [4]
};

// *********************************************************************//
// Interface: IControl
// Flags:     (4096) Dispatchable
// GUID:      {4397A1F9-F35F-4234-AF6A-F6327B0F784E}
// *********************************************************************//
interface IControl  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE Show(void); // [6]
   HRESULT STDMETHODCALLTYPE Hide(void); // [7]
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE Destroy(void); // [10]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_Root(LPDISPATCH* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_Form(LPDISPATCH* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_Left(long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_Left(long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Top(long* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Top(long pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_Width(long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_Width(long pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_Height(long* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_Height(long pVal/*[in]*/); // [17]
   HRESULT STDMETHODCALLTYPE get_Right(long* pVal/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE set_Right(long pVal/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE get_Bottom(long* pVal/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE set_Bottom(long pVal/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/); // [20]
   HRESULT STDMETHODCALLTYPE CenterControl(void); // [21]
   HRESULT STDMETHODCALLTYPE get_MinWidth(unsigned_short* pVal/*[out,retval]*/); // [22]
   HRESULT STDMETHODCALLTYPE set_MinWidth(unsigned_short pVal/*[in]*/); // [22]
   HRESULT STDMETHODCALLTYPE get_MinHeight(unsigned_short* pVal/*[out,retval]*/); // [23]
   HRESULT STDMETHODCALLTYPE set_MinHeight(unsigned_short pVal/*[in]*/); // [23]
   HRESULT STDMETHODCALLTYPE get_MaxWidth(unsigned_short* pVal/*[out,retval]*/); // [24]
   HRESULT STDMETHODCALLTYPE set_MaxWidth(unsigned_short pVal/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE get_MaxHeight(unsigned_short* pVal/*[out,retval]*/); // [25]
   HRESULT STDMETHODCALLTYPE set_MaxHeight(unsigned_short pVal/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE get_Align(unsigned_short* pVal/*[out,retval]*/); // [26]
   HRESULT STDMETHODCALLTYPE set_Align(unsigned_short pVal/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE get_Color(unsigned_long* pVal/*[out,retval]*/); // [27]
   HRESULT STDMETHODCALLTYPE set_Color(unsigned_long pVal/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/); // [28]
   HRESULT STDMETHODCALLTYPE set_ParentColor(VARIANT_BOOL pVal/*[in]*/); // [28]
   HRESULT STDMETHODCALLTYPE get_Font(LPDISPATCH* pVal/*[out,retval]*/); // [29]
   HRESULT STDMETHODCALLTYPE set_Font(LPDISPATCH pVal/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE _set_Font(LPDISPATCH pVal/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/); // [30]
   HRESULT STDMETHODCALLTYPE set_ParentFont(VARIANT_BOOL pVal/*[in]*/); // [30]
   HRESULT STDMETHODCALLTYPE get_Pen(LPDISPATCH* pVal/*[out,retval]*/); // [31]
   HRESULT STDMETHODCALLTYPE set_Pen(LPDISPATCH pVal/*[in]*/); // [31]
   HRESULT STDMETHODCALLTYPE _set_Pen(LPDISPATCH pVal/*[in]*/); // [31]
   HRESULT STDMETHODCALLTYPE get_Brush(LPDISPATCH* pVal/*[out,retval]*/); // [32]
   HRESULT STDMETHODCALLTYPE set_Brush(LPDISPATCH pVal/*[in]*/); // [32]
   HRESULT STDMETHODCALLTYPE _set_Brush(LPDISPATCH pVal/*[in]*/); // [32]
   HRESULT STDMETHODCALLTYPE get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/); // [33]
   HRESULT STDMETHODCALLTYPE set_PopupMenu(LPDISPATCH pVal/*[in]*/); // [33]
   HRESULT STDMETHODCALLTYPE _set_PopupMenu(LPDISPATCH pVal/*[in]*/); // [33]
   HRESULT STDMETHODCALLTYPE get_Border(VARIANT_BOOL* pVal/*[out,retval]*/); // [34]
   HRESULT STDMETHODCALLTYPE set_Border(VARIANT_BOOL pVal/*[in]*/); // [34]
   HRESULT STDMETHODCALLTYPE SetFocus(void); // [35]
   HRESULT STDMETHODCALLTYPE get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/); // [36]
   HRESULT STDMETHODCALLTYPE get_TabOrder(long* pVal/*[out,retval]*/); // [37]
   HRESULT STDMETHODCALLTYPE set_TabOrder(long pVal/*[in]*/); // [37]
   HRESULT STDMETHODCALLTYPE get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/); // [38]
   HRESULT STDMETHODCALLTYPE set_TabStop(VARIANT_BOOL pVal/*[in]*/); // [38]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/); // [39]
   HRESULT STDMETHODCALLTYPE set_Name(BSTR pVal/*[in]*/); // [39]
   HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/); // [40]
   HRESULT STDMETHODCALLTYPE set_ID(BSTR pVal/*[in]*/); // [40]
   HRESULT STDMETHODCALLTYPE get_ClientWidth(long* pVal/*[out,retval]*/); // [41]
   HRESULT STDMETHODCALLTYPE set_ClientWidth(long pVal/*[in]*/); // [41]
   HRESULT STDMETHODCALLTYPE get_ClientHeight(long* pVal/*[out,retval]*/); // [42]
   HRESULT STDMETHODCALLTYPE set_ClientHeight(long pVal/*[in]*/); // [42]
   HRESULT STDMETHODCALLTYPE get_Cursor(VARIANT* pVal/*[out,retval]*/); // [44]
   HRESULT STDMETHODCALLTYPE set_Cursor(VARIANT pVal/*[in]*/); // [44]
   HRESULT STDMETHODCALLTYPE get_Hint(VARIANT* pVal/*[out,retval]*/); // [45]
   HRESULT STDMETHODCALLTYPE set_Hint(VARIANT pVal/*[in]*/); // [45]
   HRESULT STDMETHODCALLTYPE get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/); // [46]
   HRESULT STDMETHODCALLTYPE set_ThemeApplicationName(BSTR pVal/*[in]*/); // [46]
   HRESULT STDMETHODCALLTYPE get_Docking(LPDISPATCH* pVal/*[out,retval]*/); // [47]
   HRESULT STDMETHODCALLTYPE get_Layering(LPDISPATCH* pVal/*[out,retval]*/); // [48]
   HRESULT STDMETHODCALLTYPE set_OnClick(VARIANT Param1/*[in]*/); // [60]
   HRESULT STDMETHODCALLTYPE set_OnDblClick(VARIANT Param1/*[in]*/); // [61]
   HRESULT STDMETHODCALLTYPE set_OnChange(VARIANT Param1/*[in]*/); // [62]
   HRESULT STDMETHODCALLTYPE set_OnKeyDown(VARIANT Param1/*[in]*/); // [63]
   HRESULT STDMETHODCALLTYPE set_OnKeyUp(VARIANT Param1/*[in]*/); // [64]
   HRESULT STDMETHODCALLTYPE set_OnMouseEnter(VARIANT Param1/*[in]*/); // [65]
   HRESULT STDMETHODCALLTYPE set_OnMouseLeave(VARIANT Param1/*[in]*/); // [66]
   HRESULT STDMETHODCALLTYPE set_OnMouseUp(VARIANT Param1/*[in]*/); // [67]
   HRESULT STDMETHODCALLTYPE set_OnMouseMove(VARIANT Param1/*[in]*/); // [68]
   HRESULT STDMETHODCALLTYPE set_OnMouseDown(VARIANT Param1/*[in]*/); // [69]
   HRESULT STDMETHODCALLTYPE set_OnResize(VARIANT Param1/*[in]*/); // [70]
   HRESULT STDMETHODCALLTYPE set_OnMove(VARIANT Param1/*[in]*/); // [71]
   HRESULT STDMETHODCALLTYPE set_OnDestroy(VARIANT Param1/*[in]*/); // [72]
   HRESULT STDMETHODCALLTYPE set_OnShow(VARIANT Param1/*[in]*/); // [73]
   HRESULT STDMETHODCALLTYPE set_OnHide(VARIANT Param1/*[in]*/); // [74]
   HRESULT STDMETHODCALLTYPE set_OnEnabledChange(VARIANT Param1/*[in]*/); // [75]
   HRESULT STDMETHODCALLTYPE set_OnSetFocus(VARIANT Param1/*[in]*/); // [76]
   HRESULT STDMETHODCALLTYPE set_OnKillFocus(VARIANT Param1/*[in]*/); // [77]
   HRESULT STDMETHODCALLTYPE set_OnMouseWheel(VARIANT Param1/*[in]*/); // [78]
   HRESULT STDMETHODCALLTYPE set_OnBeginDock(VARIANT Param1/*[in]*/); // [79]
   HRESULT STDMETHODCALLTYPE set_OnDockControlCreate(VARIANT Param1/*[in]*/); // [80]
   HRESULT STDMETHODCALLTYPE set_OnUndockQuery(VARIANT Param1/*[in]*/); // [88]
   HRESULT STDMETHODCALLTYPE set_OnUndock(VARIANT Param1/*[in]*/); // [89]
   HRESULT STDMETHODCALLTYPE Repaint(void); // [49]
   HRESULT STDMETHODCALLTYPE get_Debug(unsigned_long* pVal/*[out,retval]*/); // [81]
   HRESULT STDMETHODCALLTYPE set_Debug(unsigned_long pVal/*[in]*/); // [81]
   HRESULT STDMETHODCALLTYPE get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/); // [83]
   HRESULT STDMETHODCALLTYPE set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/); // [83]
   HRESULT STDMETHODCALLTYPE get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/); // [84]
   HRESULT STDMETHODCALLTYPE set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/); // [84]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [85]
   HRESULT STDMETHODCALLTYPE get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/); // [86]
   HRESULT STDMETHODCALLTYPE get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/); // [87]
   HRESULT STDMETHODCALLTYPE set_MaskEvents(VARIANT_BOOL pVal/*[in]*/); // [87]
   HRESULT STDMETHODCALLTYPE PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/); // [90]
};

// *********************************************************************//
// Interface: IFrame
// Flags:     (4096) Dispatchable
// GUID:      {92337C2C-1C7D-4848-8AD2-B9D33E4EB242}
// *********************************************************************//
interface IFrame  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/); // [115]
   HRESULT STDMETHODCALLTYPE CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/); // [119]
   HRESULT STDMETHODCALLTYPE CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [120]
   HRESULT STDMETHODCALLTYPE CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [121]
   HRESULT STDMETHODCALLTYPE CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/); // [124]
   HRESULT STDMETHODCALLTYPE CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [125]
   HRESULT STDMETHODCALLTYPE CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/); // [130]
   HRESULT STDMETHODCALLTYPE CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/); // [399]
   HRESULT STDMETHODCALLTYPE CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/); // [401]
   HRESULT STDMETHODCALLTYPE CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/); // [402]
   HRESULT STDMETHODCALLTYPE CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/); // [403]
   HRESULT STDMETHODCALLTYPE CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/); // [404]
   HRESULT STDMETHODCALLTYPE CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/); // [405]
   HRESULT STDMETHODCALLTYPE Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/, 
                                  LPDISPATCH* pControl/*[out,retval]*/); // [131]
   HRESULT STDMETHODCALLTYPE Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/); // [132]
   HRESULT STDMETHODCALLTYPE RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/); // [133]
   HRESULT STDMETHODCALLTYPE Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/); // [135]
   HRESULT STDMETHODCALLTYPE Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/); // [138]
   HRESULT STDMETHODCALLTYPE Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/); // [139]
   HRESULT STDMETHODCALLTYPE TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/); // [140]
   HRESULT STDMETHODCALLTYPE TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/); // [141]
   HRESULT STDMETHODCALLTYPE DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/); // [142]
   HRESULT STDMETHODCALLTYPE DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/); // [400]
   HRESULT STDMETHODCALLTYPE Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/); // [143]
   HRESULT STDMETHODCALLTYPE get_Controls(LPDISPATCH* pVal/*[out,retval]*/); // [144]
   HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_long* pVal/*[out,retval]*/); // [145]
   HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_long pVal/*[in]*/); // [145]
   HRESULT STDMETHODCALLTYPE get_BevelWidth(unsigned_long* pVal/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE set_BevelWidth(unsigned_long pVal/*[in]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_BevelOuter(long* pVal/*[out,retval]*/); // [147]
   HRESULT STDMETHODCALLTYPE set_BevelOuter(long pVal/*[in]*/); // [147]
   HRESULT STDMETHODCALLTYPE get_BevelInner(long* pVal/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE set_BevelInner(long pVal/*[in]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE set_GraphFont(LPDISPATCH pVal/*[in]*/); // [149]
   HRESULT STDMETHODCALLTYPE _set_GraphFont(LPDISPATCH pVal/*[in]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE set_AutoScroll(VARIANT_BOOL pVal/*[in]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/); // [151]
   HRESULT STDMETHODCALLTYPE set_Tracking(VARIANT_BOOL pVal/*[in]*/); // [151]
   HRESULT STDMETHODCALLTYPE get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/); // [152]
   HRESULT STDMETHODCALLTYPE set_CaptureMouse(unsigned_short pVal/*[in]*/); // [152]
   HRESULT STDMETHODCALLTYPE get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/); // [153]
   HRESULT STDMETHODCALLTYPE set_ParentBackground(VARIANT_BOOL pVal/*[in]*/); // [153]
   HRESULT STDMETHODCALLTYPE BeginUpdate(void); // [154]
   HRESULT STDMETHODCALLTYPE EndUpdate(void); // [155]
   HRESULT STDMETHODCALLTYPE get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/); // [156]
   HRESULT STDMETHODCALLTYPE set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/); // [156]
   HRESULT STDMETHODCALLTYPE get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/); // [157]
   HRESULT STDMETHODCALLTYPE set_AutoSplit(VARIANT_BOOL pVal/*[in]*/); // [157]
   HRESULT STDMETHODCALLTYPE get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/); // [158]
   HRESULT STDMETHODCALLTYPE set_GroupBox(VARIANT_BOOL pVal/*[in]*/); // [158]
   HRESULT STDMETHODCALLTYPE get_Margin(unsigned_long* pVal/*[out,retval]*/); // [159]
   HRESULT STDMETHODCALLTYPE set_Margin(unsigned_long pVal/*[in]*/); // [159]
   HRESULT STDMETHODCALLTYPE get_MarginLeft(unsigned_long* pVal/*[out,retval]*/); // [160]
   HRESULT STDMETHODCALLTYPE set_MarginLeft(unsigned_long pVal/*[in]*/); // [160]
   HRESULT STDMETHODCALLTYPE get_MarginTop(unsigned_long* pVal/*[out,retval]*/); // [161]
   HRESULT STDMETHODCALLTYPE set_MarginTop(unsigned_long pVal/*[in]*/); // [161]
   HRESULT STDMETHODCALLTYPE get_MarginRight(unsigned_long* pVal/*[out,retval]*/); // [162]
   HRESULT STDMETHODCALLTYPE set_MarginRight(unsigned_long pVal/*[in]*/); // [162]
   HRESULT STDMETHODCALLTYPE get_MarginBottom(unsigned_long* pVal/*[out,retval]*/); // [163]
   HRESULT STDMETHODCALLTYPE set_MarginBottom(unsigned_long pVal/*[in]*/); // [163]
   HRESULT STDMETHODCALLTYPE Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/); // [164]
};

// *********************************************************************//
// Interface: IForm
// Flags:     (4096) Dispatchable
// GUID:      {044B381D-C581-4B9E-9C95-08B66B38468F}
// *********************************************************************//
interface IForm  : public Wsolib_tlb::IFrame
{
public:
   HRESULT STDMETHODCALLTYPE set_Icon(VARIANT Param1/*[in]*/); // [200]
   HRESULT STDMETHODCALLTYPE Minimize(void); // [201]
   HRESULT STDMETHODCALLTYPE Restore(void); // [202]
   HRESULT STDMETHODCALLTYPE Maximize(void); // [203]
   HRESULT STDMETHODCALLTYPE Close(void); // [204]
   HRESULT STDMETHODCALLTYPE ShowModal(void); // [205]
   HRESULT STDMETHODCALLTYPE MessageBox(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                        long Flags/*[in,def,opt]*/, long* pResult/*[out,retval]*/); // [206]
   HRESULT STDMETHODCALLTYPE ColorDialog(unsigned_long StartColor/*[in,def,opt]*/, 
                                         unsigned_long Flags/*[in,def,opt]*/, 
                                         unsigned_long* pColor/*[out,retval]*/); // [207]
   HRESULT STDMETHODCALLTYPE FontDialog(LPDISPATCH StartValue/*[in]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/, 
                                        LPDISPATCH* pResult/*[out,retval]*/); // [208]
   HRESULT STDMETHODCALLTYPE OpenDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                        BSTR StartFile/*[in,def,opt]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/, 
                                        BSTR* pFileName/*[out,retval]*/); // [209]
   HRESULT STDMETHODCALLTYPE SaveDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                        BSTR StartFile/*[in,def,opt]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/, 
                                        BSTR* pFileName/*[out,retval]*/); // [210]
   HRESULT STDMETHODCALLTYPE SelectFolderDialog(BSTR Title/*[in]*/, 
                                                unsigned_long Flags/*[in,def,opt]*/, 
                                                BSTR* pFolder/*[out,retval]*/); // [211]
   HRESULT STDMETHODCALLTYPE PrintDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                         unsigned_short MinPage/*[in,def,opt]*/, 
                                         unsigned_short MaxPage/*[in,def,opt]*/, 
                                         LPDISPATCH* pResult/*[out,retval]*/); // [212]
   HRESULT STDMETHODCALLTYPE PrinterSetupDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                                LPDISPATCH* pResult/*[out,retval]*/); // [213]
   HRESULT STDMETHODCALLTYPE PageSetupDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                             LPDISPATCH* pResult/*[out,retval]*/); // [214]
   HRESULT STDMETHODCALLTYPE CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                              unsigned_long Flags/*[in,def,opt]*/, 
                                              LPDISPATCH* pResult/*[out,retval]*/); // [215]
   HRESULT STDMETHODCALLTYPE CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                 BSTR ReplaceText/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/, 
                                                 LPDISPATCH* pResult/*[out,retval]*/); // [216]
   HRESULT STDMETHODCALLTYPE CreateFontDialog(LPDISPATCH* pResult/*[out,retval]*/); // [303]
   HRESULT STDMETHODCALLTYPE CreateColorDialog(LPDISPATCH* pResult/*[out,retval]*/); // [304]
   HRESULT STDMETHODCALLTYPE CreateOpenDialog(LPDISPATCH* pResult/*[out,retval]*/); // [300]
   HRESULT STDMETHODCALLTYPE CreateSaveDialog(LPDISPATCH* pResult/*[out,retval]*/); // [301]
   HRESULT STDMETHODCALLTYPE CreateSelectFolderDialog(LPDISPATCH* pResult/*[out,retval]*/); // [302]
   HRESULT STDMETHODCALLTYPE CreateForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/); // [217]
   HRESULT STDMETHODCALLTYPE CreateDialogForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/); // [218]
   HRESULT STDMETHODCALLTYPE CreateMessageDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                                 LPDISPATCH* pResult/*[out,retval]*/); // [246]
   HRESULT STDMETHODCALLTYPE CreateTaskDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                              LPDISPATCH* pResult/*[out,retval]*/); // [247]
   HRESULT STDMETHODCALLTYPE get_Menu(LPDISPATCH* pVal/*[out,retval]*/); // [219]
   HRESULT STDMETHODCALLTYPE set_Menu(LPDISPATCH pVal/*[in]*/); // [219]
   HRESULT STDMETHODCALLTYPE _set_Menu(LPDISPATCH pVal/*[in]*/); // [219]
   HRESULT STDMETHODCALLTYPE get_KeyPreview(VARIANT_BOOL* pVal/*[out,retval]*/); // [220]
   HRESULT STDMETHODCALLTYPE set_KeyPreview(VARIANT_BOOL pVal/*[in]*/); // [220]
   HRESULT STDMETHODCALLTYPE get_MaximizeBox(VARIANT_BOOL* pVal/*[out,retval]*/); // [221]
   HRESULT STDMETHODCALLTYPE set_MaximizeBox(VARIANT_BOOL pVal/*[in]*/); // [221]
   HRESULT STDMETHODCALLTYPE get_MinimizeBox(VARIANT_BOOL* pVal/*[out,retval]*/); // [222]
   HRESULT STDMETHODCALLTYPE set_MinimizeBox(VARIANT_BOOL pVal/*[in]*/); // [222]
   HRESULT STDMETHODCALLTYPE get_ControlBox(VARIANT_BOOL* pVal/*[out,retval]*/); // [223]
   HRESULT STDMETHODCALLTYPE set_ControlBox(VARIANT_BOOL pVal/*[in]*/); // [223]
   HRESULT STDMETHODCALLTYPE get_SizeGrip(VARIANT_BOOL* pVal/*[out,retval]*/); // [224]
   HRESULT STDMETHODCALLTYPE set_SizeGrip(VARIANT_BOOL pVal/*[in]*/); // [224]
   HRESULT STDMETHODCALLTYPE get_TopMost(VARIANT_BOOL* pVal/*[out,retval]*/); // [225]
   HRESULT STDMETHODCALLTYPE set_TopMost(VARIANT_BOOL pVal/*[in]*/); // [225]
   HRESULT STDMETHODCALLTYPE get_ToolWindow(VARIANT_BOOL* pVal/*[out,retval]*/); // [226]
   HRESULT STDMETHODCALLTYPE set_ToolWindow(VARIANT_BOOL pVal/*[in]*/); // [226]
   HRESULT STDMETHODCALLTYPE get_Caption(VARIANT_BOOL* pVal/*[out,retval]*/); // [227]
   HRESULT STDMETHODCALLTYPE set_Caption(VARIANT_BOOL pVal/*[in]*/); // [227]
   HRESULT STDMETHODCALLTYPE get_AcceptButton(LPDISPATCH* pVal/*[out,retval]*/); // [228]
   HRESULT STDMETHODCALLTYPE set_AcceptButton(LPDISPATCH pVal/*[in]*/); // [228]
   HRESULT STDMETHODCALLTYPE _set_AcceptButton(LPDISPATCH pVal/*[in]*/); // [228]
   HRESULT STDMETHODCALLTYPE get_CancelButton(LPDISPATCH* pVal/*[out,retval]*/); // [229]
   HRESULT STDMETHODCALLTYPE set_CancelButton(LPDISPATCH pVal/*[in]*/); // [229]
   HRESULT STDMETHODCALLTYPE _set_CancelButton(LPDISPATCH pVal/*[in]*/); // [229]
   HRESULT STDMETHODCALLTYPE get_HelpButton(LPDISPATCH* pVal/*[out,retval]*/); // [230]
   HRESULT STDMETHODCALLTYPE set_HelpButton(LPDISPATCH pVal/*[in]*/); // [230]
   HRESULT STDMETHODCALLTYPE _set_HelpButton(LPDISPATCH pVal/*[in]*/); // [230]
   HRESULT STDMETHODCALLTYPE get_ActiveControl(LPDISPATCH* pVal/*[out,retval]*/); // [231]
   HRESULT STDMETHODCALLTYPE set_ActiveControl(LPDISPATCH pVal/*[in]*/); // [231]
   HRESULT STDMETHODCALLTYPE _set_ActiveControl(LPDISPATCH pVal/*[in]*/); // [231]
   HRESULT STDMETHODCALLTYPE get_CanClose(VARIANT_BOOL* pVal/*[out,retval]*/); // [232]
   HRESULT STDMETHODCALLTYPE set_CanClose(VARIANT_BOOL pVal/*[in]*/); // [232]
   HRESULT STDMETHODCALLTYPE set_Region(unsigned_long Param1/*[in]*/); // [233]
   HRESULT STDMETHODCALLTYPE get_TaskBar(LPDISPATCH* pVal/*[out,retval]*/); // [253]
   HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* pVal/*[out,retval]*/); // [254]
   HRESULT STDMETHODCALLTYPE set_Active(VARIANT_BOOL pVal/*[in]*/); // [254]
   HRESULT STDMETHODCALLTYPE get_Foreground(VARIANT_BOOL* pVal/*[out,retval]*/); // [255]
   HRESULT STDMETHODCALLTYPE set_Foreground(VARIANT_BOOL pVal/*[in]*/); // [255]
   HRESULT STDMETHODCALLTYPE set_OnCloseQuery(VARIANT Param1/*[in]*/); // [234]
   HRESULT STDMETHODCALLTYPE set_OnClose(VARIANT Param1/*[in]*/); // [235]
   HRESULT STDMETHODCALLTYPE set_OnActiveControlChange(VARIANT Param1/*[in]*/); // [236]
   HRESULT STDMETHODCALLTYPE set_OnHitTest(VARIANT Param1/*[in]*/); // [237]
   HRESULT STDMETHODCALLTYPE set_OnHint(VARIANT Param1/*[in]*/); // [238]
   HRESULT STDMETHODCALLTYPE set_OnMinimize(VARIANT Param1/*[in]*/); // [239]
   HRESULT STDMETHODCALLTYPE set_OnMaximize(VARIANT Param1/*[in]*/); // [240]
   HRESULT STDMETHODCALLTYPE set_OnRestore(VARIANT Param1/*[in]*/); // [241]
   HRESULT STDMETHODCALLTYPE set_OnCopyData(VARIANT Param1/*[in]*/); // [242]
   HRESULT STDMETHODCALLTYPE set_OnActivate(VARIANT Param1/*[in]*/); // [243]
   HRESULT STDMETHODCALLTYPE set_OnEnterSizeMove(VARIANT Param1/*[in]*/); // [244]
   HRESULT STDMETHODCALLTYPE set_OnExitSizeMove(VARIANT Param1/*[in]*/); // [245]
};

// *********************************************************************//
// Interface: ICollection
// Flags:     (4096) Dispatchable
// GUID:      {92BEFD16-E781-484B-BC2D-F3B5E5DA2CC5}
// *********************************************************************//
interface ICollection  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE Clear(void); // [4]
   HRESULT STDMETHODCALLTYPE ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: IStringCollection
// Flags:     (4096) Dispatchable
// GUID:      {A68CF60C-30F0-4A23-B592-3CB23708733A}
// *********************************************************************//
interface IStringCollection  : public Wsolib_tlb::ICollection
{
public:
   HRESULT STDMETHODCALLTYPE Add(BSTR Value/*[in]*/); // [6]
};

// *********************************************************************//
// Interface: IImageList
// Flags:     (4096) Dispatchable
// GUID:      {68343C86-0240-44FD-A24F-5CD611E0A33F}
// *********************************************************************//
interface IImageList  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE Load(VARIANT Image/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE Add(VARIANT Image/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE Clear(void); // [3]
   HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Width(unsigned_long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Width(unsigned_long pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Height(unsigned_long* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Height(unsigned_long pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_BitsPerPixel(long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_BitsPerPixel(long pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_References(LPDISPATCH* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [10]
};

// *********************************************************************//
// Interface: IGraphicObject
// Flags:     (4096) Dispatchable
// GUID:      {09866D76-9782-4FD2-BA16-C469A06499C1}
// *********************************************************************//
interface IGraphicObject  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Color(unsigned_long* pVal/*[out,retval]*/); // [50]
   HRESULT STDMETHODCALLTYPE set_Color(unsigned_long pVal/*[in]*/); // [50]
   HRESULT STDMETHODCALLTYPE Default(void); // [51]
};

// *********************************************************************//
// Interface: IPen
// Flags:     (4096) Dispatchable
// GUID:      {A6BFFF0E-7526-495A-AEA9-7BE6005184D7}
// *********************************************************************//
interface IPen  : public Wsolib_tlb::IGraphicObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Width(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Width(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Style(long* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Style(long pVal/*[in]*/); // [4]
};

// *********************************************************************//
// Interface: IBrush
// Flags:     (4096) Dispatchable
// GUID:      {68FA42FE-34AC-40E9-857D-F94846E91B0A}
// *********************************************************************//
interface IBrush  : public Wsolib_tlb::IGraphicObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Style(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Style(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Image(VARIANT Param1/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_GradientColor(unsigned_long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_GradientColor(unsigned_long pVal/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: IFontEx
// Flags:     (4096) Dispatchable
// GUID:      {FAE1D3D9-57B5-42D7-AF14-AC9ED6B31EA8}
// *********************************************************************//
interface IFontEx  : public Wsolib_tlb::IGraphicObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Italic(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Italic(VARIANT_BOOL pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Underline(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Underline(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Strikethrough(VARIANT_BOOL* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Strikethrough(VARIANT_BOOL pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Weight(short* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_Weight(short pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Name(BSTR pVal/*[in]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Size(CURRENCY* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Size(CURRENCY pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_CharSet(short* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_CharSet(short pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Angle(long* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_Angle(long pVal/*[in]*/); // [11]
};

// *********************************************************************//
// Interface: IAction
// Flags:     (4096) Dispatchable
// GUID:      {752D00E4-9EBE-4A1A-82D8-5D62F66CB4ED}
// *********************************************************************//
interface IAction  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Item(long Index/*[in]*/, VARIANT pvar/*[in]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE Clear(void); // [7]
   HRESULT STDMETHODCALLTYPE ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE Add(VARIANT Item/*[in]*/, VARIANT Key/*[in,opt]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE Insert(long Index/*[in]*/, VARIANT Item/*[in]*/, 
                                    VARIANT Key/*[in,opt]*/, LPDISPATCH* pControl/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE NewLine(LPDISPATCH* pControl/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pVal/*[in]*/); // [17]
   HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pVal/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE get_CheckBox(VARIANT_BOOL* pVal/*[out,retval]*/); // [20]
   HRESULT STDMETHODCALLTYPE set_CheckBox(VARIANT_BOOL pVal/*[in]*/); // [20]
   HRESULT STDMETHODCALLTYPE get_RadioCheck(VARIANT_BOOL* pVal/*[out,retval]*/); // [21]
   HRESULT STDMETHODCALLTYPE set_RadioCheck(VARIANT_BOOL pVal/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE get_AllowAllUp(VARIANT_BOOL* pVal/*[out,retval]*/); // [22]
   HRESULT STDMETHODCALLTYPE set_AllowAllUp(VARIANT_BOOL pVal/*[in]*/); // [22]
   HRESULT STDMETHODCALLTYPE get_Default(VARIANT_BOOL* pVal/*[out,retval]*/); // [23]
   HRESULT STDMETHODCALLTYPE set_Default(VARIANT_BOOL pVal/*[in]*/); // [23]
   HRESULT STDMETHODCALLTYPE get_Control(LPDISPATCH* pVal/*[out,retval]*/); // [24]
   HRESULT STDMETHODCALLTYPE get_Form(LPDISPATCH* pVal/*[out,retval]*/); // [25]
   HRESULT STDMETHODCALLTYPE get_Items(LPDISPATCH* pVal/*[out,retval]*/); // [26]
   HRESULT STDMETHODCALLTYPE get_Hint(VARIANT* pVal/*[out,retval]*/); // [27]
   HRESULT STDMETHODCALLTYPE set_Hint(VARIANT pVal/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE get_Break(VARIANT_BOOL* pVal/*[out,retval]*/); // [28]
   HRESULT STDMETHODCALLTYPE set_Break(VARIANT_BOOL pVal/*[in]*/); // [28]
   HRESULT STDMETHODCALLTYPE get_Key(VARIANT* pVal/*[out,retval]*/); // [29]
   HRESULT STDMETHODCALLTYPE set_Key(VARIANT pVal/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE get_DismissonClick(VARIANT_BOOL* pVal/*[out,retval]*/); // [30]
   HRESULT STDMETHODCALLTYPE set_DismissonClick(VARIANT_BOOL pVal/*[in]*/); // [30]
   HRESULT STDMETHODCALLTYPE get_Noninteractive(VARIANT_BOOL* pVal/*[out,retval]*/); // [31]
   HRESULT STDMETHODCALLTYPE set_Noninteractive(VARIANT_BOOL pVal/*[in]*/); // [31]
   HRESULT STDMETHODCALLTYPE get_Nobackground(VARIANT_BOOL* pVal/*[out,retval]*/); // [32]
   HRESULT STDMETHODCALLTYPE set_Nobackground(VARIANT_BOOL pVal/*[in]*/); // [32]
   HRESULT STDMETHODCALLTYPE get_WholeDropDown(VARIANT_BOOL* pVal/*[out,retval]*/); // [33]
   HRESULT STDMETHODCALLTYPE set_WholeDropDown(VARIANT_BOOL pVal/*[in]*/); // [33]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [34]
   HRESULT STDMETHODCALLTYPE PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/); // [35]
   HRESULT STDMETHODCALLTYPE set_OnExecute(VARIANT Param1/*[in]*/); // [36]
   HRESULT STDMETHODCALLTYPE set_OnUpdate(VARIANT Param1/*[in]*/); // [37]
};

// *********************************************************************//
// Interface: IListControlItem
// Flags:     (4096) Dispatchable
// GUID:      {D5F460EE-3010-4A7A-AAD2-FA3F768BAC57}
// *********************************************************************//
interface IListControlItem  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Index(long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Font(LPDISPATCH* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Font(LPDISPATCH pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE _set_Font(LPDISPATCH pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_TextBkColor(unsigned_long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_TextBkColor(unsigned_long pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_ItemData(VARIANT* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Brush(LPDISPATCH* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_Brush(LPDISPATCH pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE _set_Brush(LPDISPATCH pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_Indent(unsigned_long* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Indent(unsigned_long pVal/*[in]*/); // [10]
};

// *********************************************************************//
// Interface: IStringsControl
// Flags:     (4096) Dispatchable
// GUID:      {A1E967E4-0CEB-436B-91C0-F6A42F8D8733}
// *********************************************************************//
interface IStringsControl  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_TopIndex(long* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_TopIndex(long pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, BSTR* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE Add(BSTR Item/*[in]*/, long* pItemIndex/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE Insert(long Index/*[in]*/, BSTR Item/*[in]*/, 
                                    long* pItemIndex/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE Clear(void); // [105]
   HRESULT STDMETHODCALLTYPE BeginUpdate(void); // [106]
   HRESULT STDMETHODCALLTYPE EndUpdate(void); // [107]
   HRESULT STDMETHODCALLTYPE ExChange(long A/*[in]*/, long B/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/); // [109]
   HRESULT STDMETHODCALLTYPE Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/, 
                                  long* pItemIndex/*[out,retval]*/); // [110]
};

// *********************************************************************//
// Interface: IListControl
// Flags:     (4096) Dispatchable
// GUID:      {B61BDF00-553F-401B-948C-2F7A5FDCBBBB}
// *********************************************************************//
interface IListControl  : public Wsolib_tlb::IStringsControl
{
public:
   HRESULT STDMETHODCALLTYPE get_ItemIndex(long* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_ItemIndex(long pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_ItemHeight(long* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_ItemHeight(long pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_ItemData(long Index/*[in]*/, VARIANT* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_ItemData(long Index/*[in]*/, VARIANT pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE get_Sorted(VARIANT_BOOL* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_Sorted(VARIANT_BOOL pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE get_IntegralHeight(VARIANT_BOOL* pVal/*[out,retval]*/); // [115]
   HRESULT STDMETHODCALLTYPE set_IntegralHeight(VARIANT_BOOL pVal/*[in]*/); // [115]
   HRESULT STDMETHODCALLTYPE get_HorizontalExtent(long* pVal/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE set_HorizontalExtent(long pVal/*[in]*/); // [116]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [117]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long Index/*[in]*/, long* pVal/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long Index/*[in]*/, long pVal/*[in]*/); // [118]
   HRESULT STDMETHODCALLTYPE get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/); // [119]
   HRESULT STDMETHODCALLTYPE set_CustomDraw(VARIANT_BOOL pVal/*[in]*/); // [119]
   HRESULT STDMETHODCALLTYPE set_OnDrawItem(VARIANT Param1/*[in]*/); // [120]
   HRESULT STDMETHODCALLTYPE set_BackgroundImage(VARIANT Param1/*[in]*/); // [121]
   HRESULT STDMETHODCALLTYPE get_CustomDrawSelection(VARIANT_BOOL* pVal/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_CustomDrawSelection(VARIANT_BOOL pVal/*[in]*/); // [122]
};

// *********************************************************************//
// Interface: IListBox
// Flags:     (4096) Dispatchable
// GUID:      {A33F2256-EF4D-409B-B1FD-0BE23F8F8C2D}
// *********************************************************************//
interface IListBox  : public Wsolib_tlb::IListControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Selected(long Index/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/); // [201]
   HRESULT STDMETHODCALLTYPE set_Selected(long Index/*[in]*/, VARIANT_BOOL pVal/*[in]*/); // [201]
   HRESULT STDMETHODCALLTYPE get_SelCount(long* pVal/*[out,retval]*/); // [202]
   HRESULT STDMETHODCALLTYPE get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/); // [203]
   HRESULT STDMETHODCALLTYPE set_MultiSelect(VARIANT_BOOL pVal/*[in]*/); // [203]
   HRESULT STDMETHODCALLTYPE get_ExtendedSelect(VARIANT_BOOL* pVal/*[out,retval]*/); // [204]
   HRESULT STDMETHODCALLTYPE set_ExtendedSelect(VARIANT_BOOL pVal/*[in]*/); // [204]
   HRESULT STDMETHODCALLTYPE get_ColumnCount(unsigned_short* pVal/*[out,retval]*/); // [205]
   HRESULT STDMETHODCALLTYPE set_ColumnCount(unsigned_short pVal/*[in]*/); // [205]
   HRESULT STDMETHODCALLTYPE get_ColumnWidth(unsigned_short* pVal/*[out,retval]*/); // [206]
   HRESULT STDMETHODCALLTYPE set_ColumnWidth(unsigned_short pVal/*[in]*/); // [206]
   HRESULT STDMETHODCALLTYPE get_ScrollBars(unsigned_long* pVal/*[out,retval]*/); // [207]
   HRESULT STDMETHODCALLTYPE set_ScrollBars(unsigned_long pVal/*[in]*/); // [207]
   HRESULT STDMETHODCALLTYPE ItemFromPoint(unsigned_short x/*[in]*/, unsigned_short y/*[in]*/, 
                                           long* pIndex/*[out,retval]*/); // [208]
};

// *********************************************************************//
// Interface: IComboBox
// Flags:     (4096) Dispatchable
// GUID:      {AA09373F-278A-49DF-9F40-74C5B92ABB6F}
// *********************************************************************//
interface IComboBox  : public Wsolib_tlb::IListControl
{
public:
   HRESULT STDMETHODCALLTYPE get_DropDownCount(unsigned_long* pVal/*[out,retval]*/); // [201]
   HRESULT STDMETHODCALLTYPE set_DropDownCount(unsigned_long pVal/*[in]*/); // [201]
   HRESULT STDMETHODCALLTYPE get_Style(long* pVal/*[out,retval]*/); // [202]
   HRESULT STDMETHODCALLTYPE set_Style(long pVal/*[in]*/); // [202]
   HRESULT STDMETHODCALLTYPE get_CharCase(long* pVal/*[out,retval]*/); // [203]
   HRESULT STDMETHODCALLTYPE set_CharCase(long pVal/*[in]*/); // [203]
   HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/); // [204]
   HRESULT STDMETHODCALLTYPE set_ReadOnly(VARIANT_BOOL pVal/*[in]*/); // [204]
   HRESULT STDMETHODCALLTYPE get_DroppedDown(VARIANT_BOOL* pVal/*[out,retval]*/); // [205]
   HRESULT STDMETHODCALLTYPE set_DroppedDown(VARIANT_BOOL pVal/*[in]*/); // [205]
   HRESULT STDMETHODCALLTYPE get_CueBanner(BSTR* pVal/*[out,retval]*/); // [206]
   HRESULT STDMETHODCALLTYPE set_CueBanner(BSTR pVal/*[in]*/); // [206]
   HRESULT STDMETHODCALLTYPE get_CueBannerAlwaysVisible(VARIANT_BOOL* pVal/*[out,retval]*/); // [207]
   HRESULT STDMETHODCALLTYPE set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/); // [207]
   HRESULT STDMETHODCALLTYPE get_BalloonTip(LPDISPATCH* pVal/*[out,retval]*/); // [208]
   HRESULT STDMETHODCALLTYPE set_OnDropDown(VARIANT Param1/*[in]*/); // [209]
};

// *********************************************************************//
// Interface: IEdit
// Flags:     (4096) Dispatchable
// GUID:      {1D2D9535-7884-49AB-90C2-49955A388137}
// *********************************************************************//
interface IEdit  : public Wsolib_tlb::IStringsControl
{
public:
   HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_ReadOnly(VARIANT_BOOL pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_MaxLength(long* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_MaxLength(long pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_CharCase(long* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_CharCase(long pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE get_PasswordChar(BSTR* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_PasswordChar(BSTR pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE get_HideSelection(VARIANT_BOOL* pVal/*[out,retval]*/); // [115]
   HRESULT STDMETHODCALLTYPE set_HideSelection(VARIANT_BOOL pVal/*[in]*/); // [115]
   HRESULT STDMETHODCALLTYPE get_MultiLine(VARIANT_BOOL* pVal/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE set_MultiLine(VARIANT_BOOL pVal/*[in]*/); // [116]
   HRESULT STDMETHODCALLTYPE get_ScrollBars(unsigned_long* pVal/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE set_ScrollBars(unsigned_long pVal/*[in]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* pVal/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL pVal/*[in]*/); // [118]
   HRESULT STDMETHODCALLTYPE get_Modified(VARIANT_BOOL* pVal/*[out,retval]*/); // [119]
   HRESULT STDMETHODCALLTYPE set_Modified(VARIANT_BOOL pVal/*[in]*/); // [119]
   HRESULT STDMETHODCALLTYPE get_SelStart(long* pVal/*[out,retval]*/); // [120]
   HRESULT STDMETHODCALLTYPE set_SelStart(long pVal/*[in]*/); // [120]
   HRESULT STDMETHODCALLTYPE get_SelEnd(long* pVal/*[out,retval]*/); // [121]
   HRESULT STDMETHODCALLTYPE set_SelEnd(long pVal/*[in]*/); // [121]
   HRESULT STDMETHODCALLTYPE get_SelLength(long* pVal/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_SelLength(long pVal/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_LeftMargin(unsigned_short* pVal/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_LeftMargin(unsigned_short pVal/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_RightMargin(unsigned_short* pVal/*[out,retval]*/); // [124]
   HRESULT STDMETHODCALLTYPE set_RightMargin(unsigned_short pVal/*[in]*/); // [124]
   HRESULT STDMETHODCALLTYPE get_WordWrap(VARIANT_BOOL* pVal/*[out,retval]*/); // [125]
   HRESULT STDMETHODCALLTYPE set_WordWrap(VARIANT_BOOL pVal/*[in]*/); // [125]
   HRESULT STDMETHODCALLTYPE get_TextAlign(unsigned_short* pVal/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_TextAlign(unsigned_short pVal/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE SelectAll(void); // [127]
   HRESULT STDMETHODCALLTYPE ClearSelection(void); // [128]
   HRESULT STDMETHODCALLTYPE ReplaceSelection(BSTR NewText/*[in]*/, 
                                              VARIANT_BOOL CanUndo/*[in,def,opt]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_CanUndo(VARIANT_BOOL* pVal/*[out,retval]*/); // [130]
   HRESULT STDMETHODCALLTYPE set_CanUndo(VARIANT_BOOL pVal/*[in]*/); // [130]
   HRESULT STDMETHODCALLTYPE get_CanPaste(VARIANT_BOOL* pVal/*[out,retval]*/); // [131]
   HRESULT STDMETHODCALLTYPE Undo(void); // [132]
   HRESULT STDMETHODCALLTYPE Cut(void); // [133]
   HRESULT STDMETHODCALLTYPE Copy(void); // [134]
   HRESULT STDMETHODCALLTYPE Paste(void); // [135]
   HRESULT STDMETHODCALLTYPE get_DataType(long* pVal/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE set_DataType(long pVal/*[in]*/); // [136]
   HRESULT STDMETHODCALLTYPE get_Min(VARIANT* pVal/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE set_Min(VARIANT pVal/*[in]*/); // [137]
   HRESULT STDMETHODCALLTYPE get_Max(VARIANT* pVal/*[out,retval]*/); // [138]
   HRESULT STDMETHODCALLTYPE set_Max(VARIANT pVal/*[in]*/); // [138]
   HRESULT STDMETHODCALLTYPE get_LineFromChar(long Index/*[in,def,opt]*/, long* pVal/*[out,retval]*/); // [139]
   HRESULT STDMETHODCALLTYPE get_AcceptsReturn(VARIANT_BOOL* pVal/*[out,retval]*/); // [140]
   HRESULT STDMETHODCALLTYPE set_AcceptsReturn(VARIANT_BOOL pVal/*[in]*/); // [140]
   HRESULT STDMETHODCALLTYPE get_AcceptsTab(VARIANT_BOOL* pVal/*[out,retval]*/); // [141]
   HRESULT STDMETHODCALLTYPE set_AcceptsTab(VARIANT_BOOL pVal/*[in]*/); // [141]
   HRESULT STDMETHODCALLTYPE get_AutoHeight(VARIANT_BOOL* pVal/*[out,retval]*/); // [142]
   HRESULT STDMETHODCALLTYPE set_AutoHeight(VARIANT_BOOL pVal/*[in]*/); // [142]
   HRESULT STDMETHODCALLTYPE get_CueBanner(BSTR* pVal/*[out,retval]*/); // [143]
   HRESULT STDMETHODCALLTYPE set_CueBanner(BSTR pVal/*[in]*/); // [143]
   HRESULT STDMETHODCALLTYPE get_CueBannerAlwaysVisible(VARIANT_BOOL* pVal/*[out,retval]*/); // [144]
   HRESULT STDMETHODCALLTYPE set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/); // [144]
   HRESULT STDMETHODCALLTYPE get_BalloonTip(LPDISPATCH* pVal/*[out,retval]*/); // [145]
};

// *********************************************************************//
// Interface: IButtonControl
// Flags:     (4096) Dispatchable
// GUID:      {CE6D21C9-132F-4990-ACB2-4C68A1D46BA2}
// *********************************************************************//
interface IButtonControl  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Flat(VARIANT_BOOL pVal/*[in]*/); // [100]
};

// *********************************************************************//
// Interface: IButton
// Flags:     (4096) Dispatchable
// GUID:      {31DC6745-8E8E-4F4A-9F17-36651B160FE9}
// *********************************************************************//
interface IButton  : public Wsolib_tlb::IButtonControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Default(VARIANT_BOOL* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_Default(VARIANT_BOOL pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_Cancel(VARIANT_BOOL* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_Cancel(VARIANT_BOOL pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_CommandLinkButton(VARIANT_BOOL* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_CommandLinkButton(VARIANT_BOOL pVal/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Note(BSTR* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_Note(BSTR pVal/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_Shield(VARIANT_BOOL* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_Shield(VARIANT_BOOL pVal/*[in]*/); // [105]
};

// *********************************************************************//
// Interface: ICheckBox
// Flags:     (4096) Dispatchable
// GUID:      {A924A1F1-1896-462D-98E9-873E721811CE}
// *********************************************************************//
interface ICheckBox  : public Wsolib_tlb::IButtonControl
{
public:
   HRESULT STDMETHODCALLTYPE get_State(long* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_State(long pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_AllowGrayed(VARIANT_BOOL* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_AllowGrayed(VARIANT_BOOL pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pVal/*[in]*/); // [103]
};

// *********************************************************************//
// Interface: IRadioButton
// Flags:     (4096) Dispatchable
// GUID:      {E4D0E174-9AB6-4BDF-9186-8905F5B54AAA}
// *********************************************************************//
interface IRadioButton  : public Wsolib_tlb::IButtonControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_Group(long* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_Group(long pVal/*[in]*/); // [102]
};

// *********************************************************************//
// Interface: IStatusItem
// Flags:     (4096) Dispatchable
// GUID:      {80508CDF-06EA-43C5-B41E-F2F97D516151}
// *********************************************************************//
interface IStatusItem  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Width(long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Width(long pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Border(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Border(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [6]
};

// *********************************************************************//
// Interface: IStatusBar
// Flags:     (4096) Dispatchable
// GUID:      {F61D55A1-ECC9-484B-A635-F0C5E71A8C29}
// *********************************************************************//
interface IStatusBar  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Simple(VARIANT_BOOL* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Simple(VARIANT_BOOL pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_SizeGrip(VARIANT_BOOL* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_SizeGrip(VARIANT_BOOL pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [105]
   HRESULT STDMETHODCALLTYPE Clear(void); // [106]
   HRESULT STDMETHODCALLTYPE ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE Add(long Width/*[in]*/, long Border/*[in,def,opt]*/, 
                                 LPDISPATCH* pItem/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [109]
};

// *********************************************************************//
// Interface: IStatusControl
// Flags:     (4096) Dispatchable
// GUID:      {7ADA76A6-13E2-455D-8DF1-E2C980D21BF9}
// *********************************************************************//
interface IStatusControl  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Min(long* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Min(long pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_Max(long* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_Max(long pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_Position(long* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_Position(long pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_Step(long* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Step(long pVal/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE StepIt(void); // [104]
   HRESULT STDMETHODCALLTYPE StepBy(long Delta/*[in]*/); // [105]
};

// *********************************************************************//
// Interface: IProgressBar
// Flags:     (4096) Dispatchable
// GUID:      {16271F21-45E5-4632-BC36-E3E429B49AD8}
// *********************************************************************//
interface IProgressBar  : public Wsolib_tlb::IStatusControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_Smooth(VARIANT_BOOL* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_Smooth(VARIANT_BOOL pVal/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE get_State(long* pVal/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_State(long pVal/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_Marquee(VARIANT_BOOL* pVal/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_Marquee(VARIANT_BOOL pVal/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE get_MarqueeActive(VARIANT_BOOL* pVal/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_MarqueeActive(VARIANT_BOOL pVal/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_MarqueeInterval(unsigned_long* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_MarqueeInterval(unsigned_long pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_SmoothReverse(VARIANT_BOOL* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_SmoothReverse(VARIANT_BOOL pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_BarColor(unsigned_long* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_BarColor(unsigned_long pVal/*[in]*/); // [113]
};

// *********************************************************************//
// Interface: IScrollBar
// Flags:     (4096) Dispatchable
// GUID:      {FC140361-F789-48AD-AE2B-A4B5A2643FB0}
// *********************************************************************//
interface IScrollBar  : public Wsolib_tlb::IStatusControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Page(unsigned_long* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Page(unsigned_long pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_SmallChange(unsigned_long* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_SmallChange(unsigned_long pVal/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE get_LargeChange(unsigned_long* pVal/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_LargeChange(unsigned_long pVal/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_Tracking(VARIANT_BOOL pVal/*[in]*/); // [110]
};

// *********************************************************************//
// Interface: ITab
// Flags:     (4096) Dispatchable
// GUID:      {F8019994-24F1-475D-8AC4-5A1BCFF213D0}
// *********************************************************************//
interface ITab  : public Wsolib_tlb::IFrame
{
public:
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [200]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [200]
};

// *********************************************************************//
// Interface: ITabControl
// Flags:     (4096) Dispatchable
// GUID:      {80249C22-E39E-4BF1-A167-8599130D19BA}
// *********************************************************************//
interface ITabControl  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE CreateTab(BSTR Text/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_Controls(LPDISPATCH* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_ActiveControl(LPDISPATCH* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_ActiveControl(LPDISPATCH pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE _set_ActiveControl(LPDISPATCH pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_Buttons(VARIANT_BOOL* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Buttons(VARIANT_BOOL pVal/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_MultiLine(VARIANT_BOOL* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_MultiLine(VARIANT_BOOL pVal/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_HotTrack(VARIANT_BOOL pVal/*[in]*/); // [105]
   HRESULT STDMETHODCALLTYPE get_FlatButtons(VARIANT_BOOL* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_FlatButtons(VARIANT_BOOL pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_RaggedRight(VARIANT_BOOL* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_RaggedRight(VARIANT_BOOL pVal/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE get_TabWidth(long* pVal/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_TabWidth(long pVal/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_TabHeight(long* pVal/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_TabHeight(long pVal/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_ItemIndex(long* pVal/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_ItemIndex(long pVal/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_TabsVisible(VARIANT_BOOL* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_TabsVisible(VARIANT_BOOL pVal/*[in]*/); // [111]
};

// *********************************************************************//
// Interface: IPageControl
// Flags:     (4096) Dispatchable
// GUID:      {A58B708B-DDC5-40BF-AD62-D2B94731BBF3}
// *********************************************************************//
interface IPageControl  : public Wsolib_tlb::ITabControl
{
public:
   HRESULT STDMETHODCALLTYPE get_TabsAlign(long* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_TabsAlign(long pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_HeaderVisible(VARIANT_BOOL* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_HeaderVisible(VARIANT_BOOL pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE get_TabCloseButton(VARIANT_BOOL* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_TabCloseButton(VARIANT_BOOL pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE get_ShowSingleTab(VARIANT_BOOL* pVal/*[out,retval]*/); // [115]
   HRESULT STDMETHODCALLTYPE set_ShowSingleTab(VARIANT_BOOL pVal/*[in]*/); // [115]
   HRESULT STDMETHODCALLTYPE get_HideClippedTabs(VARIANT_BOOL* pVal/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE set_HideClippedTabs(VARIANT_BOOL pVal/*[in]*/); // [116]
   HRESULT STDMETHODCALLTYPE get_TabsDragDrop(VARIANT_BOOL* pVal/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE set_TabsDragDrop(VARIANT_BOOL pVal/*[in]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_HeaderColors(LPDISPATCH* pVal/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE get_TabColors(LPDISPATCH* pVal/*[out,retval]*/); // [119]
   HRESULT STDMETHODCALLTYPE get_CloseButtonColors(LPDISPATCH* pVal/*[out,retval]*/); // [120]
   HRESULT STDMETHODCALLTYPE get_ChevronColors(LPDISPATCH* pVal/*[out,retval]*/); // [121]
};

// *********************************************************************//
// Interface: IToolBar
// Flags:     (4096) Dispatchable
// GUID:      {EE439DC1-D255-41A8-94E4-0E2F5518562D}
// *********************************************************************//
interface IToolBar  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Buttons(LPDISPATCH* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Buttons(LPDISPATCH pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE _set_Buttons(LPDISPATCH pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_Flat(VARIANT_BOOL pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_ShowText(VARIANT_BOOL* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_ShowText(VARIANT_BOOL pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_ButtonWidth(unsigned_long* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_ButtonWidth(unsigned_long pVal/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_ButtonHeight(unsigned_long* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_ButtonHeight(unsigned_long pVal/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_AutoSizeButtons(VARIANT_BOOL* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_AutoSizeButtons(VARIANT_BOOL pVal/*[in]*/); // [105]
   HRESULT STDMETHODCALLTYPE get_List(VARIANT_BOOL* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_List(VARIANT_BOOL pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_Wrapable(VARIANT_BOOL* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_Wrapable(VARIANT_BOOL pVal/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* pVal/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL pVal/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE get_MinButtonWidth(unsigned_long* pVal/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_MinButtonWidth(unsigned_long pVal/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_MaxButtonWidth(unsigned_long* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_MaxButtonWidth(unsigned_long pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_MaxTextRows(unsigned_long* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_MaxTextRows(unsigned_long pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_PaddingX(unsigned_long* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_PaddingX(unsigned_long pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE get_PaddingY(unsigned_long* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_PaddingY(unsigned_long pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE get_ButtonSpacingX(unsigned_long* pVal/*[out,retval]*/); // [115]
   HRESULT STDMETHODCALLTYPE set_ButtonSpacingX(unsigned_long pVal/*[in]*/); // [115]
   HRESULT STDMETHODCALLTYPE get_ButtonSpacingY(unsigned_long* pVal/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE set_ButtonSpacingY(unsigned_long pVal/*[in]*/); // [116]
};

// *********************************************************************//
// Interface: IMenuBar
// Flags:     (4096) Dispatchable
// GUID:      {CD1140FE-95CD-4690-8DB9-48DF5989E8FA}
// *********************************************************************//
interface IMenuBar  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Menu(LPDISPATCH* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Menu(LPDISPATCH pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE _set_Menu(LPDISPATCH pVal/*[in]*/); // [100]
};

// *********************************************************************//
// Interface: IReBarBand
// Flags:     (4096) Dispatchable
// GUID:      {5FFD779C-DF3C-4B7C-BA33-53ED4BE00360}
// *********************************************************************//
interface IReBarBand  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Color(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Color(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_ParentColor(VARIANT_BOOL pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Image(VARIANT Param1/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_ParentImage(VARIANT_BOOL* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_ParentImage(VARIANT_BOOL pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_FixedImage(VARIANT_BOOL* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_FixedImage(VARIANT_BOOL pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_FixedSize(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_FixedSize(VARIANT_BOOL pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Break(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_Break(VARIANT_BOOL pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_GripperAlways(VARIANT_BOOL* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_GripperAlways(VARIANT_BOOL pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_Chevron(VARIANT_BOOL* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_Chevron(VARIANT_BOOL pVal/*[in]*/); // [12]
   HRESULT STDMETHODCALLTYPE Maximize(void); // [13]
   HRESULT STDMETHODCALLTYPE Minimize(void); // [14]
   HRESULT STDMETHODCALLTYPE get_MinWidth(unsigned_long* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_MinWidth(unsigned_long pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_IdealWidth(unsigned_long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_IdealWidth(unsigned_long pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_Width(unsigned_long* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_Width(unsigned_long pVal/*[in]*/); // [17]
};

// *********************************************************************//
// Interface: IReBar
// Flags:     (4096) Dispatchable
// GUID:      {DBD8984A-5CB5-4B3B-94DE-62AF0C20F75F}
// *********************************************************************//
interface IReBar  : public Wsolib_tlb::IFrame
{
public:
   HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* pVal/*[out,retval]*/); // [200]
   HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL pVal/*[in]*/); // [200]
   HRESULT STDMETHODCALLTYPE get_InsertNewRow(VARIANT_BOOL* pVal/*[out,retval]*/); // [201]
   HRESULT STDMETHODCALLTYPE set_InsertNewRow(VARIANT_BOOL pVal/*[in]*/); // [201]
   HRESULT STDMETHODCALLTYPE get_Band(LPDISPATCH Control/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/); // [202]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [203]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [203]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [203]
   HRESULT STDMETHODCALLTYPE set_Image(VARIANT Param1/*[in]*/); // [204]
   HRESULT STDMETHODCALLTYPE get_FixedOrder(VARIANT_BOOL* pVal/*[out,retval]*/); // [205]
   HRESULT STDMETHODCALLTYPE set_FixedOrder(VARIANT_BOOL pVal/*[in]*/); // [205]
   HRESULT STDMETHODCALLTYPE get_VarHeight(VARIANT_BOOL* pVal/*[out,retval]*/); // [206]
   HRESULT STDMETHODCALLTYPE set_VarHeight(VARIANT_BOOL pVal/*[in]*/); // [206]
   HRESULT STDMETHODCALLTYPE get_BandBorders(VARIANT_BOOL* pVal/*[out,retval]*/); // [207]
   HRESULT STDMETHODCALLTYPE set_BandBorders(VARIANT_BOOL pVal/*[in]*/); // [207]
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [208]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [208]
   HRESULT STDMETHODCALLTYPE get_DblClkToggle(VARIANT_BOOL* pVal/*[out,retval]*/); // [209]
   HRESULT STDMETHODCALLTYPE set_DblClkToggle(VARIANT_BOOL pVal/*[in]*/); // [209]
   HRESULT STDMETHODCALLTYPE get_VerticalGripper(VARIANT_BOOL* pVal/*[out,retval]*/); // [210]
   HRESULT STDMETHODCALLTYPE set_VerticalGripper(VARIANT_BOOL pVal/*[in]*/); // [210]
   HRESULT STDMETHODCALLTYPE get_AutoLayout(VARIANT_BOOL* pVal/*[out,retval]*/); // [211]
   HRESULT STDMETHODCALLTYPE set_AutoLayout(VARIANT_BOOL pVal/*[in]*/); // [211]
   HRESULT STDMETHODCALLTYPE get_RowCount(long* pVal/*[out,retval]*/); // [212]
   HRESULT STDMETHODCALLTYPE get_RowHeight(long Index/*[in]*/, long* pVal/*[out,retval]*/); // [213]
   HRESULT STDMETHODCALLTYPE get_BandCount(long* pVal/*[out,retval]*/); // [214]
};

// *********************************************************************//
// Interface: IHyperLink
// Flags:     (4096) Dispatchable
// GUID:      {ED777BB6-9999-4385-8647-8C72156DC3A1}
// *********************************************************************//
interface IHyperLink  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Url(BSTR* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Url(BSTR pVal/*[in]*/); // [100]
};

// *********************************************************************//
// Interface: IPager
// Flags:     (4096) Dispatchable
// GUID:      {AD4463D6-4144-4D08-9A41-A296E6264F32}
// *********************************************************************//
interface IPager  : public Wsolib_tlb::IFrame
{
public:
   HRESULT STDMETHODCALLTYPE get_Control(LPDISPATCH* pVal/*[out,retval]*/); // [200]
   HRESULT STDMETHODCALLTYPE set_Control(LPDISPATCH pVal/*[in]*/); // [200]
   HRESULT STDMETHODCALLTYPE _set_Control(LPDISPATCH pVal/*[in]*/); // [200]
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [201]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [201]
   HRESULT STDMETHODCALLTYPE get_ButtonSize(unsigned_long* pVal/*[out,retval]*/); // [202]
   HRESULT STDMETHODCALLTYPE set_ButtonSize(unsigned_long pVal/*[in]*/); // [202]
   HRESULT STDMETHODCALLTYPE get_Position(long* pVal/*[out,retval]*/); // [203]
   HRESULT STDMETHODCALLTYPE set_Position(long pVal/*[in]*/); // [203]
};

// *********************************************************************//
// Interface: ICOMConnectionPoint
// Flags:     (4096) Dispatchable
// GUID:      {701F8D53-90B9-4D99-96A2-37C8BB960289}
// *********************************************************************//
interface ICOMConnectionPoint  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [7]
};

// *********************************************************************//
// Interface: ICOMEvents
// Flags:     (4096) Dispatchable
// GUID:      {DC2EF81F-A8DF-488D-89C9-DCC67D7B0EE8}
// *********************************************************************//
interface ICOMEvents  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [5]
};

// *********************************************************************//
// Interface: IActiveXControl
// Flags:     (4096) Dispatchable
// GUID:      {FF57FCA7-3701-47A2-B309-3C0F5A581CB1}
// *********************************************************************//
interface IActiveXControl  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Control(LPDISPATCH* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_Events(LPDISPATCH* pVal/*[out,retval]*/); // [101]
};

// *********************************************************************//
// Interface: IHeaderItem
// Flags:     (4096) Dispatchable
// GUID:      {76B856CD-223D-4728-BA49-DCB111DAAA9D}
// *********************************************************************//
interface IHeaderItem  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Width(long* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Width(long pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_TextAlign(long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_TextAlign(long pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_DataType(long* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_DataType(long pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_SortType(long* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_SortType(long pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Index(long* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_Owner(LPDISPATCH* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_Order(long* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_Order(long pVal/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_OnClick(VARIANT Param1/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_OnResize(VARIANT Param1/*[in]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_OnBeginTrack(VARIANT Param1/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE set_OnTrack(VARIANT Param1/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE set_OnDividerDblClick(VARIANT Param1/*[in]*/); // [20]
   HRESULT STDMETHODCALLTYPE set_OnBeginDrag(VARIANT Param1/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE set_OnEndDrag(VARIANT Param1/*[in]*/); // [22]
};

// *********************************************************************//
// Interface: IHeader
// Flags:     (4096) Dispatchable
// GUID:      {F1901A02-8CA0-4446-AC10-D8E9B6A9E573}
// *********************************************************************//
interface IHeader  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE Clear(void); // [102]
   HRESULT STDMETHODCALLTYPE Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long TextAlign/*[in,def,opt]*/, LPDISPATCH* pItem/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_HotTrack(VARIANT_BOOL pVal/*[in]*/); // [105]
   HRESULT STDMETHODCALLTYPE get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Flat(VARIANT_BOOL pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_DragDrop(VARIANT_BOOL* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_DragDrop(VARIANT_BOOL pVal/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_OnColumnClick(VARIANT Param1/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_OnColumnResize(VARIANT Param1/*[in]*/); // [109]
};

// *********************************************************************//
// Interface: IListSubItem
// Flags:     (4096) Dispatchable
// GUID:      {8BEFFC8D-A9E8-4699-8E02-64DB4DC78DA2}
// *********************************************************************//
interface IListSubItem  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Font(LPDISPATCH* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Font(LPDISPATCH pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE _set_Font(LPDISPATCH pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [5]
};

// *********************************************************************//
// Interface: IListItem
// Flags:     (4096) Dispatchable
// GUID:      {1FEE927E-CC8A-4DC0-9B40-E4113CDE5DA9}
// *********************************************************************//
interface IListItem  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Type(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_SubItems(long Index/*[in]*/, BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_SubItems(long Index/*[in]*/, BSTR pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_SubItemImage(long Index/*[in]*/, long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_SubItemImage(long Index/*[in]*/, long pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Index(long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_UserData(VARIANT* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_UserData(VARIANT pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_Hint(BSTR* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Hint(BSTR pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Group(unsigned_long* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_Group(unsigned_long pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE SetPosition(unsigned_long Left/*[in]*/, unsigned_long Top/*[in]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_Left(long* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_Left(long pVal/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_Top(long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_Top(long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Font(LPDISPATCH* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Font(LPDISPATCH pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE _set_Font(LPDISPATCH pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_TextBkColor(unsigned_long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_TextBkColor(unsigned_long pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_SubItemsEx(long Index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [18]
};

// *********************************************************************//
// Interface: IListViewColumns
// Flags:     (4096) Dispatchable
// GUID:      {1A015BF1-FDE4-49FF-85AE-A142E1239B16}
// *********************************************************************//
interface IListViewColumns  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE Clear(void); // [102]
   HRESULT STDMETHODCALLTYPE Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long TextAlign/*[in,def,opt]*/, LPDISPATCH* pItem/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_Flat(VARIANT_BOOL pVal/*[in]*/); // [105]
};

// *********************************************************************//
// Interface: IWorkArea
// Flags:     (4096) Dispatchable
// GUID:      {91CFAE79-1DAB-4194-82FE-314EAF0106B7}
// *********************************************************************//
interface IWorkArea  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Left(long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_Left(long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Top(long* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Top(long pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_Width(long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_Width(long pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_Height(long* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_Height(long pVal/*[in]*/); // [17]
};

// *********************************************************************//
// Interface: IWorkAreas
// Flags:     (4096) Dispatchable
// GUID:      {9A68D6D1-40E8-49A1-8497-E1A93F03A34E}
// *********************************************************************//
interface IWorkAreas  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE Clear(void); // [102]
   HRESULT STDMETHODCALLTYPE Add(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, LPDISPATCH* Item/*[out,retval]*/); // [103]
};

// *********************************************************************//
// Interface: IListViewGroup
// Flags:     (4096) Dispatchable
// GUID:      {9C37D97F-D003-4235-9284-091565709535}
// *********************************************************************//
interface IListViewGroup  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Header(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Header(BSTR pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_SubTitle(BSTR* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_SubTitle(BSTR pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Task(BSTR* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Task(BSTR pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_DescriptionTop(BSTR* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_DescriptionTop(BSTR pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_DescriptionBottom(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_DescriptionBottom(BSTR pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_SubsetTitle(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_SubsetTitle(BSTR pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_Subseted(VARIANT_BOOL* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_Subseted(VARIANT_BOOL pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_NoHeader(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_NoHeader(VARIANT_BOOL pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Collapsible(VARIANT_BOOL* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_Collapsible(VARIANT_BOOL pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_HeaderAlign(long* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_HeaderAlign(long pVal/*[in]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_TitleImage(long* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_TitleImage(long pVal/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_ExtendedImage(long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_ExtendedImage(long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Footer(BSTR* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Footer(BSTR pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_FooterAlign(long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_FooterAlign(long pVal/*[in]*/); // [16]
};

// *********************************************************************//
// Interface: IListViewGroups
// Flags:     (4096) Dispatchable
// GUID:      {C1B38DA4-7DE0-4CEC-AFB5-A25980DB88CF}
// *********************************************************************//
interface IListViewGroups  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE Clear(void); // [102]
   HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, LPDISPATCH* Item/*[out,retval]*/); // [103]
};

// *********************************************************************//
// Interface: IListView
// Flags:     (4096) Dispatchable
// GUID:      {98763204-A34A-4206-9151-8DDF2445F52B}
// *********************************************************************//
interface IListView  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Count(long pcount/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE Add(BSTR Text/*[in]*/, LPDISPATCH* pItem/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE Insert(long Index/*[in]*/, BSTR Text/*[in]*/, 
                                    LPDISPATCH* pItem/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE Clear(void); // [104]
   HRESULT STDMETHODCALLTYPE BeginUpdate(void); // [105]
   HRESULT STDMETHODCALLTYPE EndUpdate(void); // [106]
   HRESULT STDMETHODCALLTYPE SelectAll(void); // [107]
   HRESULT STDMETHODCALLTYPE ClearSelection(void); // [108]
   HRESULT STDMETHODCALLTYPE EditItem(long Index/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/, 
                                  unsigned_long Column/*[in,def,opt]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_LargeImages(LPDISPATCH* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_LargeImages(LPDISPATCH pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE _set_LargeImages(LPDISPATCH pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_SmallImages(LPDISPATCH* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_SmallImages(LPDISPATCH pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE _set_SmallImages(LPDISPATCH pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_StateImages(LPDISPATCH* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_StateImages(LPDISPATCH pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE _set_StateImages(LPDISPATCH pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE get_Style(long* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_Style(long pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE get_TextBkColor(unsigned_long* pVal/*[out,retval]*/); // [115]
   HRESULT STDMETHODCALLTYPE set_TextBkColor(unsigned_long pVal/*[in]*/); // [115]
   HRESULT STDMETHODCALLTYPE get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE set_MultiSelect(VARIANT_BOOL pVal/*[in]*/); // [116]
   HRESULT STDMETHODCALLTYPE get_HideSelection(VARIANT_BOOL* pVal/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE set_HideSelection(VARIANT_BOOL pVal/*[in]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_SelCount(long* pVal/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE get_ItemIndex(long* pVal/*[out,retval]*/); // [119]
   HRESULT STDMETHODCALLTYPE set_ItemIndex(long pVal/*[in]*/); // [119]
   HRESULT STDMETHODCALLTYPE get_Columns(LPDISPATCH* pVal/*[out,retval]*/); // [120]
   HRESULT STDMETHODCALLTYPE get_CheckBoxes(VARIANT_BOOL* pVal/*[out,retval]*/); // [121]
   HRESULT STDMETHODCALLTYPE set_CheckBoxes(VARIANT_BOOL pVal/*[in]*/); // [121]
   HRESULT STDMETHODCALLTYPE get_GridLines(VARIANT_BOOL* pVal/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_GridLines(VARIANT_BOOL pVal/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_HotTrack(VARIANT_BOOL pVal/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_RowSelect(VARIANT_BOOL* pVal/*[out,retval]*/); // [124]
   HRESULT STDMETHODCALLTYPE set_RowSelect(VARIANT_BOOL pVal/*[in]*/); // [124]
   HRESULT STDMETHODCALLTYPE get_BorderSelect(VARIANT_BOOL* pVal/*[out,retval]*/); // [125]
   HRESULT STDMETHODCALLTYPE set_BorderSelect(VARIANT_BOOL pVal/*[in]*/); // [125]
   HRESULT STDMETHODCALLTYPE get_FlatScrollBars(VARIANT_BOOL* pVal/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_FlatScrollBars(VARIANT_BOOL pVal/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_OwnerData(VARIANT_BOOL* pVal/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_OwnerData(VARIANT_BOOL pVal/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE set_ReadOnly(VARIANT_BOOL pVal/*[in]*/); // [128]
   HRESULT STDMETHODCALLTYPE get_WrapText(VARIANT_BOOL* pVal/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE set_WrapText(VARIANT_BOOL pVal/*[in]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Arrangement(long* pVal/*[out,retval]*/); // [130]
   HRESULT STDMETHODCALLTYPE set_Arrangement(long pVal/*[in]*/); // [130]
   HRESULT STDMETHODCALLTYPE get_HeaderDragDrop(VARIANT_BOOL* pVal/*[out,retval]*/); // [131]
   HRESULT STDMETHODCALLTYPE set_HeaderDragDrop(VARIANT_BOOL pVal/*[in]*/); // [131]
   HRESULT STDMETHODCALLTYPE get_InfoTip(VARIANT_BOOL* pVal/*[out,retval]*/); // [132]
   HRESULT STDMETHODCALLTYPE set_InfoTip(VARIANT_BOOL pVal/*[in]*/); // [132]
   HRESULT STDMETHODCALLTYPE set_BackgroundImage(VARIANT Param1/*[in]*/); // [133]
   HRESULT STDMETHODCALLTYPE get_WorkAreas(LPDISPATCH* pVal/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE get_Groups(LPDISPATCH* pVal/*[out,retval]*/); // [135]
   HRESULT STDMETHODCALLTYPE get_TileLines(unsigned_long* pVal/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE set_TileLines(unsigned_long pVal/*[in]*/); // [136]
   HRESULT STDMETHODCALLTYPE get_TileWidth(unsigned_long* pVal/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE set_TileWidth(unsigned_long pVal/*[in]*/); // [137]
   HRESULT STDMETHODCALLTYPE get_TileHeight(unsigned_long* pVal/*[out,retval]*/); // [138]
   HRESULT STDMETHODCALLTYPE set_TileHeight(unsigned_long pVal/*[in]*/); // [138]
   HRESULT STDMETHODCALLTYPE get_DoubleBuffering(VARIANT_BOOL* pVal/*[out,retval]*/); // [139]
   HRESULT STDMETHODCALLTYPE set_DoubleBuffering(VARIANT_BOOL pVal/*[in]*/); // [139]
   HRESULT STDMETHODCALLTYPE get_TransparentBackground(VARIANT_BOOL* pVal/*[out,retval]*/); // [140]
   HRESULT STDMETHODCALLTYPE set_TransparentBackground(VARIANT_BOOL pVal/*[in]*/); // [140]
   HRESULT STDMETHODCALLTYPE get_GroupHeaderImages(LPDISPATCH* pVal/*[out,retval]*/); // [141]
   HRESULT STDMETHODCALLTYPE set_GroupHeaderImages(LPDISPATCH pVal/*[in]*/); // [141]
   HRESULT STDMETHODCALLTYPE _set_GroupHeaderImages(LPDISPATCH pVal/*[in]*/); // [141]
   HRESULT STDMETHODCALLTYPE get_IconSpacingWidth(long* pVal/*[out,retval]*/); // [142]
   HRESULT STDMETHODCALLTYPE set_IconSpacingWidth(long pVal/*[in]*/); // [142]
   HRESULT STDMETHODCALLTYPE get_IconSpacingHeight(long* pVal/*[out,retval]*/); // [143]
   HRESULT STDMETHODCALLTYPE set_IconSpacingHeight(long pVal/*[in]*/); // [143]
   HRESULT STDMETHODCALLTYPE get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/); // [144]
   HRESULT STDMETHODCALLTYPE set_CustomDraw(VARIANT_BOOL pVal/*[in]*/); // [144]
   HRESULT STDMETHODCALLTYPE Arrange(void); // [145]
   HRESULT STDMETHODCALLTYPE get_ReadOnlySubItems(VARIANT_BOOL* pVal/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE set_ReadOnlySubItems(VARIANT_BOOL pVal/*[in]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_QuickEdit(VARIANT_BOOL* pVal/*[out,retval]*/); // [147]
   HRESULT STDMETHODCALLTYPE set_QuickEdit(VARIANT_BOOL pVal/*[in]*/); // [147]
   HRESULT STDMETHODCALLTYPE get_CheckByMouse(VARIANT_BOOL* pVal/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE set_CheckByMouse(VARIANT_BOOL pVal/*[in]*/); // [148]
   HRESULT STDMETHODCALLTYPE set_OnColumnClick(VARIANT Param1/*[in]*/); // [170]
   HRESULT STDMETHODCALLTYPE set_OnColumnResize(VARIANT Param1/*[in]*/); // [171]
   HRESULT STDMETHODCALLTYPE set_OnData(VARIANT Param1/*[in]*/); // [172]
   HRESULT STDMETHODCALLTYPE set_OnItemCheck(VARIANT Param1/*[in]*/); // [173]
   HRESULT STDMETHODCALLTYPE set_OnEdited(VARIANT Param1/*[in]*/); // [174]
   HRESULT STDMETHODCALLTYPE set_OnBeginEdit(VARIANT Param1/*[in]*/); // [175]
   HRESULT STDMETHODCALLTYPE set_OnGroupLinkClick(VARIANT Param1/*[in]*/); // [176]
   HRESULT STDMETHODCALLTYPE set_OnDrawItem(VARIANT Param1/*[in]*/); // [177]
   HRESULT STDMETHODCALLTYPE set_OnSubItemEdited(VARIANT Param1/*[in]*/); // [178]
   HRESULT STDMETHODCALLTYPE set_OnBeginSubItemEdit(VARIANT Param1/*[in]*/); // [179]
};

// *********************************************************************//
// Interface: ITreeItem
// Flags:     (4096) Dispatchable
// GUID:      {FFFF9989-481D-4921-949C-B283BD06CB44}
// *********************************************************************//
interface ITreeItem  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_SelectedImageIndex(long* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_SelectedImageIndex(long pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_HasChildren(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE Add(BSTR Text/*[in]*/, long ImageIndex/*[in,def,opt]*/, 
                                 long SelectedImageIndex/*[in,def,opt]*/, 
                                 LPDISPATCH* pItem/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE Insert(long Index/*[in]*/, BSTR Text/*[in]*/, 
                                    long ImageIndex/*[in,def,opt]*/, 
                                    long SelectedImageIndex/*[in,def,opt]*/, 
                                    LPDISPATCH* pItem/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE Remove(long Index/*[in,def,opt]*/); // [12]
   HRESULT STDMETHODCALLTYPE Clear(void); // [13]
   HRESULT STDMETHODCALLTYPE Expand(VARIANT_BOOL Recurse/*[in,def,opt]*/); // [14]
   HRESULT STDMETHODCALLTYPE Collapse(void); // [15]
   HRESULT STDMETHODCALLTYPE EditLabel(void); // [16]
   HRESULT STDMETHODCALLTYPE Sort(VARIANT_BOOL Recurse/*[in,def,opt]*/); // [17]
   HRESULT STDMETHODCALLTYPE MakeVisible(void); // [18]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pVal/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE get_NextSibling(LPDISPATCH* pVal/*[out,retval]*/); // [20]
   HRESULT STDMETHODCALLTYPE get_PrevSibling(LPDISPATCH* pVal/*[out,retval]*/); // [21]
   HRESULT STDMETHODCALLTYPE get_FirstChild(LPDISPATCH* pVal/*[out,retval]*/); // [22]
   HRESULT STDMETHODCALLTYPE get_LastChild(LPDISPATCH* pVal/*[out,retval]*/); // [23]
   HRESULT STDMETHODCALLTYPE get_UserData(VARIANT* pVal/*[out,retval]*/); // [24]
   HRESULT STDMETHODCALLTYPE set_UserData(VARIANT pVal/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE get_Hint(BSTR* pVal/*[out,retval]*/); // [25]
   HRESULT STDMETHODCALLTYPE set_Hint(BSTR pVal/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE get_Font(LPDISPATCH* pVal/*[out,retval]*/); // [26]
   HRESULT STDMETHODCALLTYPE set_Font(LPDISPATCH pVal/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE _set_Font(LPDISPATCH pVal/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE get_TextBkColor(unsigned_long* pVal/*[out,retval]*/); // [27]
   HRESULT STDMETHODCALLTYPE set_TextBkColor(unsigned_long pVal/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE ShowHint(void); // [28]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [29]
};

// *********************************************************************//
// Interface: ITreeView
// Flags:     (4096) Dispatchable
// GUID:      {A6034589-820F-4165-9EEE-AE1E97BFB9B1}
// *********************************************************************//
interface ITreeView  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Items(LPDISPATCH* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_SelectedItem(LPDISPATCH* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_TopItem(LPDISPATCH* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE BeginUpdate(void); // [104]
   HRESULT STDMETHODCALLTYPE EndUpdate(void); // [105]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_StateImages(LPDISPATCH* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_StateImages(LPDISPATCH pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE _set_StateImages(LPDISPATCH pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_HasButtons(VARIANT_BOOL* pVal/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE set_HasButtons(VARIANT_BOOL pVal/*[in]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_HasLines(VARIANT_BOOL* pVal/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE set_HasLines(VARIANT_BOOL pVal/*[in]*/); // [118]
   HRESULT STDMETHODCALLTYPE get_LinesAtRoot(VARIANT_BOOL* pVal/*[out,retval]*/); // [119]
   HRESULT STDMETHODCALLTYPE set_LinesAtRoot(VARIANT_BOOL pVal/*[in]*/); // [119]
   HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/); // [120]
   HRESULT STDMETHODCALLTYPE set_ReadOnly(VARIANT_BOOL pVal/*[in]*/); // [120]
   HRESULT STDMETHODCALLTYPE get_CheckBoxes(VARIANT_BOOL* pVal/*[out,retval]*/); // [121]
   HRESULT STDMETHODCALLTYPE set_CheckBoxes(VARIANT_BOOL pVal/*[in]*/); // [121]
   HRESULT STDMETHODCALLTYPE get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_HotTrack(VARIANT_BOOL pVal/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_RowSelect(VARIANT_BOOL* pVal/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_RowSelect(VARIANT_BOOL pVal/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_HideSelection(VARIANT_BOOL* pVal/*[out,retval]*/); // [124]
   HRESULT STDMETHODCALLTYPE set_HideSelection(VARIANT_BOOL pVal/*[in]*/); // [124]
   HRESULT STDMETHODCALLTYPE get_AutoExpand(VARIANT_BOOL* pVal/*[out,retval]*/); // [125]
   HRESULT STDMETHODCALLTYPE set_AutoExpand(VARIANT_BOOL pVal/*[in]*/); // [125]
   HRESULT STDMETHODCALLTYPE get_InfoTip(VARIANT_BOOL* pVal/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_InfoTip(VARIANT_BOOL pVal/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_CustomDraw(VARIANT_BOOL pVal/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_DoubleBuffering(VARIANT_BOOL* pVal/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE set_DoubleBuffering(VARIANT_BOOL pVal/*[in]*/); // [128]
   HRESULT STDMETHODCALLTYPE get_NoIndentState(VARIANT_BOOL* pVal/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE set_NoIndentState(VARIANT_BOOL pVal/*[in]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_AutoHScroll(VARIANT_BOOL* pVal/*[out,retval]*/); // [130]
   HRESULT STDMETHODCALLTYPE set_AutoHScroll(VARIANT_BOOL pVal/*[in]*/); // [130]
   HRESULT STDMETHODCALLTYPE set_OnEdited(VARIANT Param1/*[in]*/); // [140]
   HRESULT STDMETHODCALLTYPE set_OnExpanding(VARIANT Param1/*[in]*/); // [141]
   HRESULT STDMETHODCALLTYPE set_OnExpanded(VARIANT Param1/*[in]*/); // [142]
   HRESULT STDMETHODCALLTYPE set_OnCollapsing(VARIANT Param1/*[in]*/); // [143]
   HRESULT STDMETHODCALLTYPE set_OnCollapsed(VARIANT Param1/*[in]*/); // [144]
   HRESULT STDMETHODCALLTYPE set_OnItemCheck(VARIANT Param1/*[in]*/); // [145]
   HRESULT STDMETHODCALLTYPE set_OnBeginEdit(VARIANT Param1/*[in]*/); // [146]
   HRESULT STDMETHODCALLTYPE set_OnDrawItem(VARIANT Param1/*[in]*/); // [147]
};

// *********************************************************************//
// Interface: IParagraph
// Flags:     (4096) Dispatchable
// GUID:      {C15C0ABE-967F-4A17-9EA9-BC68A2855C0D}
// *********************************************************************//
interface IParagraph  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Align(unsigned_short* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Align(unsigned_short pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Numbering(VARIANT_BOOL* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Numbering(VARIANT_BOOL pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_StartIndent(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_StartIndent(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_LeftIndent(long* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_LeftIndent(long pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_RightIndent(long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_RightIndent(long pVal/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: IRichEdit
// Flags:     (4096) Dispatchable
// GUID:      {C775712D-FA95-49EE-971D-6DD3BE4FE703}
// *********************************************************************//
interface IRichEdit  : public Wsolib_tlb::IEdit
{
public:
   HRESULT STDMETHODCALLTYPE get_SelFont(LPDISPATCH* pVal/*[out,retval]*/); // [200]
   HRESULT STDMETHODCALLTYPE set_SelFont(LPDISPATCH pVal/*[in]*/); // [200]
   HRESULT STDMETHODCALLTYPE _set_SelFont(LPDISPATCH pVal/*[in]*/); // [200]
   HRESULT STDMETHODCALLTYPE get_Paragraph(LPDISPATCH* pVal/*[out,retval]*/); // [201]
   HRESULT STDMETHODCALLTYPE FindText(BSTR Text/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                      long MinPos/*[in,def,opt]*/, long MaxPos/*[in,def,opt]*/, 
                                      long* pResult/*[out,retval]*/); // [202]
   HRESULT STDMETHODCALLTYPE Load(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                  VARIANT_BOOL* pResult/*[out,retval]*/); // [203]
   HRESULT STDMETHODCALLTYPE Save(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                  VARIANT_BOOL* pResult/*[out,retval]*/); // [204]
   HRESULT STDMETHODCALLTYPE get_AutoURLDetect(VARIANT_BOOL* pVal/*[out,retval]*/); // [205]
   HRESULT STDMETHODCALLTYPE set_AutoURLDetect(VARIANT_BOOL pVal/*[in]*/); // [205]
   HRESULT STDMETHODCALLTYPE get_CanRedo(VARIANT_BOOL* pVal/*[out,retval]*/); // [206]
   HRESULT STDMETHODCALLTYPE Redo(void); // [207]
   HRESULT STDMETHODCALLTYPE get_UndoLimit(unsigned_long* pVal/*[out,retval]*/); // [208]
   HRESULT STDMETHODCALLTYPE set_UndoLimit(unsigned_long pVal/*[in]*/); // [208]
   HRESULT STDMETHODCALLTYPE set_OnSelChange(VARIANT Param1/*[in]*/); // [209]
   HRESULT STDMETHODCALLTYPE Print(BSTR Driver/*[in]*/, BSTR Device/*[in]*/, 
                                   LPDISPATCH PrintInfo/*[in]*/, 
                                   VARIANT_BOOL Selection/*[in,def,opt]*/); // [210]
   HRESULT STDMETHODCALLTYPE get_PageRotate(unsigned_long* pVal/*[out,retval]*/); // [211]
   HRESULT STDMETHODCALLTYPE set_PageRotate(unsigned_long pVal/*[in]*/); // [211]
   HRESULT STDMETHODCALLTYPE get_UndoName(unsigned_long* pVal/*[out,retval]*/); // [212]
   HRESULT STDMETHODCALLTYPE get_UndoNameString(BSTR* pVal/*[out,retval]*/); // [213]
};

// *********************************************************************//
// Interface: IUpDown
// Flags:     (4096) Dispatchable
// GUID:      {F09EE7EC-728F-4D8B-AE8E-0F5A113FD36E}
// *********************************************************************//
interface IUpDown  : public Wsolib_tlb::IStatusControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_HotTrack(VARIANT_BOOL pVal/*[in]*/); // [107]
};

// *********************************************************************//
// Interface: ITrackBar
// Flags:     (4096) Dispatchable
// GUID:      {D47DC012-3D4E-4412-8A06-E747160435E0}
// *********************************************************************//
interface ITrackBar  : public Wsolib_tlb::IStatusControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_TickMarks(long* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_TickMarks(long pVal/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE get_SmallChange(unsigned_long* pVal/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_SmallChange(unsigned_long pVal/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_LargeChange(unsigned_long* pVal/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_LargeChange(unsigned_long pVal/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE get_ThumbLength(unsigned_long* pVal/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_ThumbLength(unsigned_long pVal/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_TickFrequency(unsigned_long* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_TickFrequency(unsigned_long pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_EnableSelRange(VARIANT_BOOL* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_EnableSelRange(VARIANT_BOOL pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_SelStart(long* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_SelStart(long pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE get_SelEnd(long* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_SelEnd(long pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE SelectAll(void); // [115]
   HRESULT STDMETHODCALLTYPE ClearSelection(void); // [116]
};

// *********************************************************************//
// Interface: IHotKey
// Flags:     (4096) Dispatchable
// GUID:      {E9013635-B5D5-48D7-81A4-41D3AFF5A717}
// *********************************************************************//
interface IHotKey  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Key(VARIANT* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Key(VARIANT pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_InvalidKeys(long* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_InvalidKeys(long pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_DefaultKey(VARIANT* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_DefaultKey(VARIANT pVal/*[in]*/); // [102]
};

// *********************************************************************//
// Interface: IAnimate
// Flags:     (4096) Dispatchable
// GUID:      {CD27766E-91BF-4D27-BA1E-CBFE3CB55BD1}
// *********************************************************************//
interface IAnimate  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE Open(VARIANT newVal/*[in]*/, VARIANT_BOOL StartPlay/*[in,def,opt]*/, 
                                  VARIANT_BOOL* pResult/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE Play(void); // [101]
   HRESULT STDMETHODCALLTYPE Stop(void); // [102]
   HRESULT STDMETHODCALLTYPE Close(void); // [103]
   HRESULT STDMETHODCALLTYPE Seek(long Position/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_AutoRepeat(VARIANT_BOOL* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_AutoRepeat(VARIANT_BOOL pVal/*[in]*/); // [105]
   HRESULT STDMETHODCALLTYPE get_Transparent(VARIANT_BOOL* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Transparent(VARIANT_BOOL pVal/*[in]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_Center(VARIANT_BOOL* pVal/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_Center(VARIANT_BOOL pVal/*[in]*/); // [107]
};

// *********************************************************************//
// Interface: IIPAddress
// Flags:     (4096) Dispatchable
// GUID:      {CCC32DB0-A7E0-4947-A757-9534AB58027F}
// *********************************************************************//
interface IIPAddress  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Value(unsigned_long* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Value(unsigned_long pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE SetRange(long Index/*[in]*/, unsigned_char Min/*[in]*/, 
                                      unsigned_char Max/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_IsBlank(VARIANT_BOOL* pVal/*[out,retval]*/); // [102]
};

// *********************************************************************//
// Interface: IDateTime
// Flags:     (4096) Dispatchable
// GUID:      {E5197962-B022-4902-B92C-B46F2CCC8875}
// *********************************************************************//
interface IDateTime  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Value(DATE* pVal/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Value(DATE pVal/*[in]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Year(unsigned_short* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Year(unsigned_short pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_Month(unsigned_short* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_Month(unsigned_short pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_Day(unsigned_short* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_Day(unsigned_short pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_Hour(unsigned_short* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Hour(unsigned_short pVal/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Minute(unsigned_short* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_Minute(unsigned_short pVal/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_Second(unsigned_short* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_Second(unsigned_short pVal/*[in]*/); // [105]
   HRESULT STDMETHODCALLTYPE get_Milliseconds(unsigned_short* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Milliseconds(unsigned_short pVal/*[in]*/); // [106]
};

// *********************************************************************//
// Interface: IDateTimeControl
// Flags:     (4096) Dispatchable
// GUID:      {0E53C57C-CAC1-4290-8C57-559AD095F9F3}
// *********************************************************************//
interface IDateTimeControl  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Value(LPDISPATCH* pVal/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE get_Min(LPDISPATCH* pVal/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE get_Max(LPDISPATCH* pVal/*[out,retval]*/); // [107]
};

// *********************************************************************//
// Interface: IDateTimePicker
// Flags:     (4096) Dispatchable
// GUID:      {7FCABADD-F460-4049-ABBC-79821C613284}
// *********************************************************************//
interface IDateTimePicker  : public Wsolib_tlb::IDateTimeControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Style(unsigned_long* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_Style(unsigned_long pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_ShowCheckBox(VARIANT_BOOL* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_ShowCheckBox(VARIANT_BOOL pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_ShowUpDown(VARIANT_BOOL* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_ShowUpDown(VARIANT_BOOL pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_DropDownRightAlign(VARIANT_BOOL* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_DropDownRightAlign(VARIANT_BOOL pVal/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_CustomFormat(BSTR* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_CustomFormat(BSTR pVal/*[in]*/); // [104]
};

// *********************************************************************//
// Interface: ICalendar
// Flags:     (4096) Dispatchable
// GUID:      {EE27A882-AD8E-4723-AAA9-E10CFD472F75}
// *********************************************************************//
interface ICalendar  : public Wsolib_tlb::IDateTimeControl
{
public:
   HRESULT STDMETHODCALLTYPE get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_MultiSelect(VARIANT_BOOL pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE get_SelEnd(LPDISPATCH* pVal/*[out,retval]*/); // [115]
   HRESULT STDMETHODCALLTYPE get_SelStart(LPDISPATCH* pVal/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE get_Today(LPDISPATCH* pVal/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_MonthDelta(unsigned_long* pVal/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE set_MonthDelta(unsigned_long pVal/*[in]*/); // [118]
   HRESULT STDMETHODCALLTYPE get_MaxSelCount(unsigned_long* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_MaxSelCount(unsigned_long pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_TodayText(VARIANT_BOOL* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_TodayText(VARIANT_BOOL pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_TodayCircle(VARIANT_BOOL* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_TodayCircle(VARIANT_BOOL pVal/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_WeekNumbers(VARIANT_BOOL* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_WeekNumbers(VARIANT_BOOL pVal/*[in]*/); // [103]
};

// *********************************************************************//
// Interface: ISplitter
// Flags:     (4096) Dispatchable
// GUID:      {76A49C6D-284D-45F0-856E-6E9714281AC5}
// *********************************************************************//
interface ISplitter  : public Wsolib_tlb::IControl
{
public:
};

// *********************************************************************//
// Interface: ISplitPanel
// Flags:     (4096) Dispatchable
// GUID:      {7BB7C6EB-B2E7-4472-94C0-B22CC0457E80}
// *********************************************************************//
interface ISplitPanel  : public Wsolib_tlb::IFrame
{
public:
   HRESULT STDMETHODCALLTYPE get_DefaultSplit(double* pVal/*[out,retval]*/); // [200]
   HRESULT STDMETHODCALLTYPE set_DefaultSplit(double pVal/*[in]*/); // [200]
   HRESULT STDMETHODCALLTYPE get_Live(VARIANT_BOOL* pVal/*[out,retval]*/); // [201]
   HRESULT STDMETHODCALLTYPE set_Live(VARIANT_BOOL pVal/*[in]*/); // [201]
   HRESULT STDMETHODCALLTYPE get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/); // [202]
   HRESULT STDMETHODCALLTYPE set_Vertical(VARIANT_BOOL pVal/*[in]*/); // [202]
};

// *********************************************************************//
// Interface: IPolygon
// Flags:     (4096) Dispatchable
// GUID:      {01F209D7-27B9-41CD-8DAE-0DAF2875A8FA}
// *********************************************************************//
interface IPolygon  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_FillAll(VARIANT_BOOL* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_FillAll(VARIANT_BOOL pVal/*[in]*/); // [100]
};

// *********************************************************************//
// Interface: IImage
// Flags:     (4096) Dispatchable
// GUID:      {DAF6D7B8-1AB3-4DAC-8BDA-4E5234AD8731}
// *********************************************************************//
interface IImage  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_DrawType(unsigned_long* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_DrawType(unsigned_long pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_CopyMode(unsigned_long* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_CopyMode(unsigned_long pVal/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_ImageWidth(unsigned_long* pVal/*[out,retval]*/); // [102]
   HRESULT STDMETHODCALLTYPE get_ImageHeight(unsigned_long* pVal/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_AlphaBlend(unsigned_long* pVal/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_AlphaBlend(unsigned_long pVal/*[in]*/); // [104]
};

// *********************************************************************//
// Interface: ILine
// Flags:     (4096) Dispatchable
// GUID:      {D6D9AAA2-739F-4807-814E-0E7692E18E62}
// *********************************************************************//
interface ILine  : public Wsolib_tlb::IControl
{
public:
   HRESULT STDMETHODCALLTYPE get_x(long Index/*[in]*/, long* pVal/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_x(long Index/*[in]*/, long pVal/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_y(long Index/*[in]*/, long* pVal/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_y(long Index/*[in]*/, long pVal/*[in]*/); // [101]
};

// *********************************************************************//
// Interface: IPrintDialogBase
// Flags:     (4096) Dispatchable
// GUID:      {0E609193-AF42-4ECC-9897-4F279B659D1F}
// *********************************************************************//
interface IPrintDialogBase  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Driver(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Device(BSTR* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Port(BSTR* pVal/*[out,retval]*/); // [3]
};

// *********************************************************************//
// Interface: IPrintDialog
// Flags:     (4096) Dispatchable
// GUID:      {A48A739A-BAAF-4693-B8AE-B594065B8D17}
// *********************************************************************//
interface IPrintDialog  : public Wsolib_tlb::IPrintDialogBase
{
public:
   HRESULT STDMETHODCALLTYPE get_Copies(long* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Collate(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Selection(VARIANT_BOOL* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_All(VARIANT_BOOL* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Range(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_ToFile(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_FromPage(long* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_ToPage(long* pVal/*[out,retval]*/); // [11]
};

// *********************************************************************//
// Interface: IPageSetupDialog
// Flags:     (4096) Dispatchable
// GUID:      {740AE358-3778-4F25-89E8-CAE218F9F14C}
// *********************************************************************//
interface IPageSetupDialog  : public Wsolib_tlb::IPrintDialogBase
{
public:
   HRESULT STDMETHODCALLTYPE get_PaperWidth(long* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_PaperHeight(long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_LeftMargin(long* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_RightMargin(long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_TopMargin(long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_BottomMargin(long* pVal/*[out,retval]*/); // [9]
};

// *********************************************************************//
// Interface: IFindReplaceDialog
// Flags:     (4096) Dispatchable
// GUID:      {A156794D-9CF8-4AC9-84B8-D657F8ECCAF1}
// *********************************************************************//
interface IFindReplaceDialog  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_FindText(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_ReplaceText(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_SearchDown(VARIANT_BOOL* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_MatchCase(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_WholeWord(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE Close(void); // [10]
   HRESULT STDMETHODCALLTYPE set_OnFind(VARIANT Param1/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_OnReplace(VARIANT Param1/*[in]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_OnReplaceAll(VARIANT Param1/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_OnClose(VARIANT Param1/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_OnHelp(VARIANT Param1/*[in]*/); // [15]
};

// *********************************************************************//
// Interface: IFontDialog
// Flags:     (4096) Dispatchable
// GUID:      {7C57CB6F-E98B-4E58-9813-DD46E590B79B}
// *********************************************************************//
interface IFontDialog  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Flags(unsigned_long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_Flags(unsigned_long pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Font(LPDISPATCH* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_Font(LPDISPATCH pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE _set_Font(LPDISPATCH pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE Execute(VARIANT_BOOL* pResult/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_OnHelp(VARIANT Param1/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_OnApply(VARIANT Param1/*[in]*/); // [14]
};

// *********************************************************************//
// Interface: IColorDialog
// Flags:     (4096) Dispatchable
// GUID:      {5A8CE32D-69D3-45F1-BE74-531AEBA638DB}
// *********************************************************************//
interface IColorDialog  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Flags(unsigned_long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_Flags(unsigned_long pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Color(unsigned_long* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_Color(unsigned_long pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE Execute(VARIANT_BOOL* pResult/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_OnHelp(VARIANT Param1/*[in]*/); // [13]
};

// *********************************************************************//
// Interface: IFileOpenSaveDialog
// Flags:     (4096) Dispatchable
// GUID:      {B7ED6BDC-9791-4B8F-979E-990CD76A394A}
// *********************************************************************//
interface IFileOpenSaveDialog  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_DefaultExt(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_DefaultExt(BSTR pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Filter(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Filter(BSTR pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_FileName(BSTR* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_FileName(BSTR pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Flags(unsigned_long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_Flags(unsigned_long pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_FilterIndex(unsigned_long* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_FilterIndex(unsigned_long pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Directory(BSTR* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_Directory(BSTR pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE Execute(VARIANT_BOOL* pResult/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_OverwritePrompt(VARIANT_BOOL* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_OverwritePrompt(VARIANT_BOOL pVal/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_AllowMultiselect(VARIANT_BOOL* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_AllowMultiselect(VARIANT_BOOL pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_PathMustExist(VARIANT_BOOL* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_PathMustExist(VARIANT_BOOL pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_FileMustExist(VARIANT_BOOL* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_FileMustExist(VARIANT_BOOL pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_CreatePrompt(VARIANT_BOOL* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_CreatePrompt(VARIANT_BOOL pVal/*[in]*/); // [17]
   HRESULT STDMETHODCALLTYPE get_NoReadOnlyReturn(VARIANT_BOOL* pVal/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE set_NoReadOnlyReturn(VARIANT_BOOL pVal/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE get_NoTestFileCreate(VARIANT_BOOL* pVal/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE set_NoTestFileCreate(VARIANT_BOOL pVal/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE get_NoDereferenceLinks(VARIANT_BOOL* pVal/*[out,retval]*/); // [20]
   HRESULT STDMETHODCALLTYPE set_NoDereferenceLinks(VARIANT_BOOL pVal/*[in]*/); // [20]
   HRESULT STDMETHODCALLTYPE get_DontAddToRecent(VARIANT_BOOL* pVal/*[out,retval]*/); // [21]
   HRESULT STDMETHODCALLTYPE set_DontAddToRecent(VARIANT_BOOL pVal/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE get_ForceShowHidden(VARIANT_BOOL* pVal/*[out,retval]*/); // [22]
   HRESULT STDMETHODCALLTYPE set_ForceShowHidden(VARIANT_BOOL pVal/*[in]*/); // [22]
   HRESULT STDMETHODCALLTYPE get_NoPlacesBar(VARIANT_BOOL* pVal/*[out,retval]*/); // [23]
   HRESULT STDMETHODCALLTYPE set_NoPlacesBar(VARIANT_BOOL pVal/*[in]*/); // [23]
   HRESULT STDMETHODCALLTYPE get_ForceFileSystem(VARIANT_BOOL* pVal/*[out,retval]*/); // [24]
   HRESULT STDMETHODCALLTYPE set_ForceFileSystem(VARIANT_BOOL pVal/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE get_AllNonStorageItems(VARIANT_BOOL* pVal/*[out,retval]*/); // [25]
   HRESULT STDMETHODCALLTYPE set_AllNonStorageItems(VARIANT_BOOL pVal/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE get_HideMRUPlaces(VARIANT_BOOL* pVal/*[out,retval]*/); // [26]
   HRESULT STDMETHODCALLTYPE set_HideMRUPlaces(VARIANT_BOOL pVal/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE get_HidePinnedPlaces(VARIANT_BOOL* pVal/*[out,retval]*/); // [27]
   HRESULT STDMETHODCALLTYPE set_HidePinnedPlaces(VARIANT_BOOL pVal/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE get_DefaultNoMiniMode(VARIANT_BOOL* pVal/*[out,retval]*/); // [28]
   HRESULT STDMETHODCALLTYPE set_DefaultNoMiniMode(VARIANT_BOOL pVal/*[in]*/); // [28]
   HRESULT STDMETHODCALLTYPE get_ForcePreviewPaneOn(VARIANT_BOOL* pVal/*[out,retval]*/); // [29]
   HRESULT STDMETHODCALLTYPE set_ForcePreviewPaneOn(VARIANT_BOOL pVal/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE get_FileNames(LPDISPATCH* pVal/*[out,retval]*/); // [30]
   HRESULT STDMETHODCALLTYPE AddPlace(BSTR Value/*[in]*/, BSTR Name/*[in,def,opt]*/, 
                                      long Placement/*[in,def,opt]*/); // [31]
   HRESULT STDMETHODCALLTYPE get_ClientGuid(BSTR* pVal/*[out,retval]*/); // [32]
   HRESULT STDMETHODCALLTYPE set_ClientGuid(BSTR pVal/*[in]*/); // [32]
   HRESULT STDMETHODCALLTYPE set_OnCloseQuery(VARIANT Param1/*[in]*/); // [50]
   HRESULT STDMETHODCALLTYPE set_OnChange(VARIANT Param1/*[in]*/); // [51]
   HRESULT STDMETHODCALLTYPE set_OnFolderChange(VARIANT Param1/*[in]*/); // [52]
   HRESULT STDMETHODCALLTYPE set_OnTypeChange(VARIANT Param1/*[in]*/); // [53]
   HRESULT STDMETHODCALLTYPE set_OnHelp(VARIANT Param1/*[in]*/); // [54]
};

// *********************************************************************//
// Interface: ISelectFolderDialog
// Flags:     (4096) Dispatchable
// GUID:      {6F63CD78-C21E-4A64-90EC-90FCE7789897}
// *********************************************************************//
interface ISelectFolderDialog  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Flags(unsigned_long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Flags(unsigned_long pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_Value(BSTR* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_Value(BSTR pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Root(BSTR* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_Root(BSTR pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_StatusText(BSTR* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_StatusText(BSTR pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_Title(BSTR* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Title(BSTR pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_EnableOK(VARIANT_BOOL* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_EnableOK(VARIANT_BOOL pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE Execute(VARIANT_BOOL* pResult/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE Close(void); // [13]
   HRESULT STDMETHODCALLTYPE set_OnChange(VARIANT Param1/*[in]*/); // [14]
};

// *********************************************************************//
// Interface: ITimer
// Flags:     (4096) Dispatchable
// GUID:      {A70DBA20-F39F-4B55-BC04-7E5FE2C495B7}
// *********************************************************************//
interface ITimer  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Active(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Interval(unsigned_long* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Interval(unsigned_long pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_OnExecute(VARIANT Param1/*[in]*/); // [7]
};

// *********************************************************************//
// Interface: ITrayIcon
// Flags:     (4096) Dispatchable
// GUID:      {4AAC7C83-5BF6-44A6-AD8A-FD431D23DD79}
// *********************************************************************//
interface ITrayIcon  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Active(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Images(LPDISPATCH* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Images(LPDISPATCH pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE _set_Images(LPDISPATCH pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_ImageIndex(long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_ImageIndex(long pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Hint(BSTR* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_Hint(BSTR pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_PopupMenu(LPDISPATCH pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE _set_PopupMenu(LPDISPATCH pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_BalloonTip(LPDISPATCH* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_OnClick(VARIANT Param1/*[in]*/); // [60]
   HRESULT STDMETHODCALLTYPE set_OnDblClick(VARIANT Param1/*[in]*/); // [61]
   HRESULT STDMETHODCALLTYPE set_OnMouseDown(VARIANT Param1/*[in]*/); // [62]
   HRESULT STDMETHODCALLTYPE set_OnMouseUp(VARIANT Param1/*[in]*/); // [63]
};

// *********************************************************************//
// Interface: IRegions
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {179741BD-E3DA-4A18-B9C1-039785089B03}
// *********************************************************************//
interface IRegions  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE CombineRgn(unsigned_long hrgnSrc1/*[in]*/, 
                                        unsigned_long hrgnSrc2/*[in]*/, long fnCombineMode/*[in]*/, 
                                        LPDISPATCH* pRegion/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE CreateEllipticRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                               long Width/*[in]*/, long Height/*[in]*/, 
                                               LPDISPATCH* pRegion/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE CreatePolygonRgn(LPSAFEARRAY Data/*[in]*/, 
                                              LPDISPATCH* pRegion/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE CreateRectRgn(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                           long Height/*[in]*/, LPDISPATCH* pRegion/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE CreateRoundRectRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                                long Width/*[in]*/, long Height/*[in]*/, 
                                                long nWidthEllipse/*[in]*/, 
                                                long nHeightEllipse/*[in]*/, 
                                                LPDISPATCH* pRegion/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE TransformRgn(unsigned_long ARegion/*[in]*/, float eM11/*[in]*/, 
                                          float eM12/*[in]*/, float eM21/*[in]*/, float eM22/*[in]*/, 
                                          float eDx/*[in]*/, float eDy/*[in]*/, 
                                          LPDISPATCH* pRegion/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE EqualRgn(unsigned_long hSrcRgn1/*[in]*/, unsigned_long hSrcRgn2/*[in]*/, 
                                      VARIANT_BOOL* pResult/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE CreateRgnFromImage(VARIANT Image/*[in]*/, 
                                                unsigned_long MaskColor/*[in]*/, 
                                                LPDISPATCH* Region/*[out,retval]*/); // [8]
};

// *********************************************************************//
// Interface: IRegion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB9FCB6F-2C14-4568-BADF-E7C0B022A654}
// *********************************************************************//
interface IRegion  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(unsigned_long* pVal/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  unsigned_long __fastcall get_Value(void)
  {
    unsigned_long pVal;
    OLECHECK(this->get_Value((unsigned_long*)&pVal));
    return pVal;
  }


  __property   unsigned_long   Value = {read = get_Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IScreen
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {D0D86627-9E34-438F-92E2-8EC9C1ABE8C5}
// *********************************************************************//
interface IScreen  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Width(long* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Height(long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_PixelsPerInchX(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_PixelsPerInchY(long* pVal/*[out,retval]*/); // [4]
};

// *********************************************************************//
// Interface: IHint
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {00017030-B197-4EBC-804F-748CF210108E}
// *********************************************************************//
interface IHint  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Title(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Title(BSTR pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Image(long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Image(long pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Balloon(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Balloon(VARIANT_BOOL pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_AlwaysTip(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_AlwaysTip(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_NoPrefix(VARIANT_BOOL* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_NoPrefix(VARIANT_BOOL pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_MaxWidth(long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_MaxWidth(long pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_ParentData(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_ParentData(VARIANT_BOOL pVal/*[in]*/); // [8]
};

// *********************************************************************//
// Interface: IEventHandler
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {5273BA8F-609D-4959-9A72-92AD3EADA060}
// *********************************************************************//
interface IEventHandler  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE Execute(void); // [0]
   HRESULT STDMETHODCALLTYPE set_OnExecute(VARIANT Param1/*[in]*/); // [11]
};

// *********************************************************************//
// Interface: IWindowSystemObjectExtensions
// Flags:     (4096) Dispatchable
// GUID:      {1DD6DE1E-DB95-45FE-B2A8-655177B8E8DB}
// *********************************************************************//
interface IWindowSystemObjectExtensions  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE SendMessage(VARIANT Control/*[in]*/, long Message/*[in]*/, 
                                         long wParam/*[in]*/, VARIANT lParam/*[in]*/, 
                                         VARIANT* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE PostMessage(VARIANT Control/*[in]*/, long Message/*[in]*/, 
                                         long wParam/*[in]*/, VARIANT lParam/*[in]*/, 
                                         VARIANT* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE AddMessageHandler(LPDISPATCH Control/*[in]*/, long Message/*[in]*/, 
                                               VARIANT MessageHandler/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE RegisterWindowMessage(BSTR Message/*[in]*/, 
                                                   unsigned_long* MessageId/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE EnumWindows(LPDISPATCH* Result/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE SendCopyData(VARIANT Control/*[in]*/, BSTR Data/*[in]*/, 
                                          VARIANT* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE PostCopyData(VARIANT Control/*[in]*/, BSTR Data/*[in]*/, 
                                          VARIANT* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE CreateClipboard(VARIANT_BOOL ClipboardViewer/*[in,def,opt]*/, 
                                             LPDISPATCH* Clipboard/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_SystemImageListSmall(LPDISPATCH* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_SystemImageListLarge(LPDISPATCH* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE GetFileSysIconIndexSmall(BSTR pVal/*[in]*/, 
                                                      unsigned_long FileAttributes/*[in,def,opt]*/, 
                                                      unsigned_long* Result/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE GetFileSysIconIndexLarge(BSTR pVal/*[in]*/, 
                                                      unsigned_long FileAttributes/*[in,def,opt]*/, 
                                                      unsigned_long* Result/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_IsWindowsXP(VARIANT_BOOL* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_IsWindowsVista(VARIANT_BOOL* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_IsWindows7(VARIANT_BOOL* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_IsWindows8(VARIANT_BOOL* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_IsThemeActive(VARIANT_BOOL* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE UuidCreate(BSTR* Result/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE CreateIconBuilder(LPDISPATCH* Result/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE CreateExecutor(LPDISPATCH* Result/*[out,retval]*/); // [20]
   HRESULT STDMETHODCALLTYPE CreateFileManager(LPDISPATCH* Result/*[out,retval]*/); // [21]
};

// *********************************************************************//
// Interface: IPrintInfo
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {5C615F2E-9B71-4394-9C88-95EE52F97849}
// *********************************************************************//
interface IPrintInfo  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_DocumentName(BSTR* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_DocumentName(BSTR pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_LeftMargin(long* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_LeftMargin(long pVal/*[in]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_RightMargin(long* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_RightMargin(long pVal/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_TopMargin(long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_TopMargin(long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_BottomMargin(long* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_BottomMargin(long pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_MarginMeasurement(long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_MarginMeasurement(long pVal/*[in]*/); // [16]
};

// *********************************************************************//
// Interface: IStdDispatch
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {C0615DB9-9C1D-42B0-8EB5-8CC8AF95B110}
// *********************************************************************//
interface IStdDispatch  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IBalloonTip
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {A16801B1-8BA4-4F0D-A589-86443B09037C}
// *********************************************************************//
interface IBalloonTip  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Title(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Title(BSTR pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Icon(long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Icon(long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Timeout(unsigned_long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Timeout(unsigned_long pVal/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: IWindow
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {BEF454E2-AC05-40F6-BCFD-300B70CAD3FC}
// *********************************************************************//
interface IWindow  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_ClassName(BSTR* pVal/*[out,retval]*/); // [6]
};

// *********************************************************************//
// Interface: IClipboardEvents
// Flags:     (4096) Dispatchable
// GUID:      {FBAA7B25-99FF-4B15-832D-5A85EF97F814}
// *********************************************************************//
interface IClipboardEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnChange(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnChange */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ClipboardEvents
// Flags:     (4096) Dispatchable
// GUID:      {1CD8E952-7F59-4429-81FB-CADDDD77AE72}
// *********************************************************************//
interface ClipboardEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnChange(LPDISPATCH Sender/*[in]*/); // [1]
};

// *********************************************************************//
// Interface: IClipboard
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {3CA40ACA-6385-4080-BFC9-82437A0FF90D}
// *********************************************************************//
interface IClipboard  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_ClipboardViewer(VARIANT_BOOL* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_ClipboardViewer(VARIANT_BOOL pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE Empty(void); // [12]
   HRESULT STDMETHODCALLTYPE set_OnChange(VARIANT Param1/*[in]*/); // [20]
};

// *********************************************************************//
// Interface: ITaskBar
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {805EF906-67A7-4A9D-B026-1F5AA4E9303C}
// *********************************************************************//
interface ITaskBar  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE AddImages(LPDISPATCH newVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Buttons(LPDISPATCH* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Buttons(LPDISPATCH pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE _set_Buttons(LPDISPATCH pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE SetThumbnailClip(long Left, long Top, long Width, long Height); // [3]
   HRESULT STDMETHODCALLTYPE get_State(long* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_State(long pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Max(unsigned_long* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Max(unsigned_long pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_Position(unsigned_long* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Position(unsigned_long pVal/*[in]*/); // [6]
};

// *********************************************************************//
// Interface: IResourceUsageGraph
// Flags:     (4096) Dispatchable
// GUID:      {F61F2DE3-D729-4ADB-B1E2-6F4B496000F9}
// *********************************************************************//
interface IResourceUsageGraph  : public Wsolib_tlb::IDateTimeControl
{
public:
   HRESULT STDMETHODCALLTYPE get_Page(unsigned_long* pVal/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Page(unsigned_long pVal/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE Add(unsigned_long Offset/*[in]*/, double Value/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE AddEx(unsigned_long Offset/*[in]*/, double Value/*[in]*/, 
                                   BSTR Text/*[in,def,opt]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_MinYValue(double* pVal/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE set_MinYValue(double pVal/*[in]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_MaxYValue(double* pVal/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE set_MaxYValue(double pVal/*[in]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_BackgroundBrush(LPDISPATCH* pVal/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE set_BackgroundBrush(LPDISPATCH pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE _set_BackgroundBrush(LPDISPATCH pVal/*[in]*/); // [113]
   HRESULT STDMETHODCALLTYPE get_PageControlWidth(unsigned_long* pVal/*[out,retval]*/); // [114]
   HRESULT STDMETHODCALLTYPE set_PageControlWidth(unsigned_long pVal/*[in]*/); // [114]
   HRESULT STDMETHODCALLTYPE Clear(void); // [115]
   HRESULT STDMETHODCALLTYPE get_SelectedValue(unsigned_long* pVal/*[out,retval]*/); // [116]
   HRESULT STDMETHODCALLTYPE set_SelectedValue(unsigned_long pVal/*[in]*/); // [116]
   HRESULT STDMETHODCALLTYPE get_SelectedYValue(double* pVal/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_SelectedIndex(long* pVal/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE set_SelectedIndex(long pVal/*[in]*/); // [118]
   HRESULT STDMETHODCALLTYPE BeginUpdate(void); // [119]
   HRESULT STDMETHODCALLTYPE EndUpdate(void); // [120]
   HRESULT STDMETHODCALLTYPE get_Approximation(VARIANT_BOOL* pVal/*[out,retval]*/); // [121]
   HRESULT STDMETHODCALLTYPE set_Approximation(VARIANT_BOOL pVal/*[in]*/); // [121]
   HRESULT STDMETHODCALLTYPE get_AlwaysFillWindow(VARIANT_BOOL* pVal/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_AlwaysFillWindow(VARIANT_BOOL pVal/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_AutoRemove(VARIANT_BOOL* pVal/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_AutoRemove(VARIANT_BOOL pVal/*[in]*/); // [123]
};

// *********************************************************************//
// Interface: IProperty
// Flags:     (4096) Dispatchable
// GUID:      {0C78AFD5-6C85-4D18-971A-B3BDC0FD0FFE}
// *********************************************************************//
interface IProperty  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE Add(BSTR Text/*[in]*/, LPDISPATCH* pItem/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE Remove(VARIANT Index/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE Clear(void); // [9]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_Value(BSTR* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_Value(BSTR pVal/*[in]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_Control(LPDISPATCH* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_Height(unsigned_long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_Height(unsigned_long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pVal/*[in]*/); // [15]
};

// *********************************************************************//
// Interface: IPropertyGrid
// Flags:     (4096) Dispatchable
// GUID:      {A10865D8-EEF9-412E-AD54-36B52F1F5D3F}
// *********************************************************************//
interface IPropertyGrid  : public Wsolib_tlb::IFrame
{
public:
   HRESULT STDMETHODCALLTYPE get_Items(LPDISPATCH* pVal/*[out,retval]*/); // [200]
   HRESULT STDMETHODCALLTYPE get_ValueColor(unsigned_long* pVal/*[out,retval]*/); // [201]
   HRESULT STDMETHODCALLTYPE set_ValueColor(unsigned_long pVal/*[in]*/); // [201]
   HRESULT STDMETHODCALLTYPE get_Property(LPDISPATCH* pVal/*[out,retval]*/); // [231]
   HRESULT STDMETHODCALLTYPE set_Property(LPDISPATCH pVal/*[in]*/); // [231]
   HRESULT STDMETHODCALLTYPE get_SelectedItem(LPDISPATCH* pVal/*[out,retval]*/); // [232]
   HRESULT STDMETHODCALLTYPE set_SelectedItem(LPDISPATCH pVal/*[in]*/); // [232]
   HRESULT STDMETHODCALLTYPE Lookup(VARIANT Value/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/); // [233]
};

// *********************************************************************//
// Interface: IConsole
// Flags:     (4096) Dispatchable
// GUID:      {501853C5-0B67-4372-866C-9D082B219BFE}
// *********************************************************************//
interface IConsole  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE WriteLine(BSTR Text/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE Write(BSTR Text/*[in]*/); // [12]
};

// *********************************************************************//
// Interface: IDocking
// Flags:     (4096) Dispatchable
// GUID:      {7C323E2F-57F2-46DB-BAD5-CBCFD7CCE9C8}
// *********************************************************************//
interface IDocking  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_UniqueId(BSTR* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_UniqueId(BSTR pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE DockAsChild(LPDISPATCH Control/*[in]*/, 
                                         unsigned_short ControlAlign/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE DockAsNeighbour(LPDISPATCH Control/*[in]*/, 
                                             unsigned_short ControlAlign/*[in,def,opt]*/); // [3]
   HRESULT STDMETHODCALLTYPE UnDock(VARIANT_BOOL ControlVisible/*[in,def,opt]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_AllowDockAsChild(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_AllowDockAsChild(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_AllowDockAsNeighbour(VARIANT_BOOL* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_AllowDockAsNeighbour(VARIANT_BOOL pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_DropTarget(VARIANT_BOOL* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_DropTarget(VARIANT_BOOL pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_AlwaysDockTab(VARIANT_BOOL* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE set_AlwaysDockTab(VARIANT_BOOL pVal/*[in]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_AlwaysDockPage(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_AlwaysDockPage(VARIANT_BOOL pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_DockToolWindow(VARIANT_BOOL* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_DockToolWindow(VARIANT_BOOL pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_AutoCreated(VARIANT_BOOL* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE set_AutoCreated(VARIANT_BOOL pVal/*[in]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_PageControlTag(long* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE set_PageControlTag(long pVal/*[in]*/); // [12]
};

// *********************************************************************//
// Interface: IGraphicElement
// Flags:     (4096) Dispatchable
// GUID:      {73A618A4-D771-4BE2-BFE6-4ADB0B0C3703}
// *********************************************************************//
interface IGraphicElement  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Color(unsigned_long* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Color(unsigned_long pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_FontColor(unsigned_long* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_FontColor(unsigned_long pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Normal(LPDISPATCH* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Selected(LPDISPATCH* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_Hot(LPDISPATCH* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_ControlFocused(LPDISPATCH* pVal/*[out,retval]*/); // [6]
};

// *********************************************************************//
// Interface: IBeginDockContext
// Flags:     (4096) Dispatchable
// GUID:      {A93F1DA9-1F87-41F2-93F7-56F33DE002D5}
// *********************************************************************//
interface IBeginDockContext  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_AllowDropTargetPageControlType(VARIANT_BOOL* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_AllowDropTargetPageControlType(VARIANT_BOOL pVal/*[in]*/); // [1]
};

// *********************************************************************//
// Interface: IDockControlCreateContext
// Flags:     (4096) Dispatchable
// GUID:      {AE0D893C-7F42-466A-8F50-3D2216828B4C}
// *********************************************************************//
interface IDockControlCreateContext  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_UseDropTargetPageControlType(VARIANT_BOOL* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_UseDropTargetPageControlType(VARIANT_BOOL pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Target(LPDISPATCH* pVal/*[out,retval]*/); // [2]
};

// *********************************************************************//
// Interface: IUndockContext
// Flags:     (4096) Dispatchable
// GUID:      {92FAA2DB-8F11-4A1F-8B05-CCD1A97098E3}
// *********************************************************************//
interface IUndockContext  : public Wsolib_tlb::IResult
{
public:
   HRESULT STDMETHODCALLTYPE get_ControlVisible(VARIANT_BOOL* pVal/*[out,retval]*/); // [3]
};

// *********************************************************************//
// Interface: IColor
// Flags:     (4096) Dispatchable
// GUID:      {C5EE68E8-EB57-491A-B7A9-50AC5EA07B79}
// *********************************************************************//
interface IColor  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE Light(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/, 
                                   unsigned_long* Result/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE Dark(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/, 
                                  unsigned_long* Result/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE Invert(unsigned_long Color/*[in]*/, 
                                    unsigned_long* Result/*[out,retval]*/); // [3]
};

// *********************************************************************//
// Interface: ILayering
// Flags:     (4096) Dispatchable
// GUID:      {B23A2C07-3A36-4ADC-B695-94B8814AAF80}
// *********************************************************************//
interface ILayering  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Layered(VARIANT_BOOL* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_Layered(VARIANT_BOOL pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Alpha(unsigned_char* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_Alpha(unsigned_char pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_TransparentColor(unsigned_long* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_TransparentColor(unsigned_long pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Flags(unsigned_long* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Flags(unsigned_long pVal/*[in]*/); // [4]
};

// *********************************************************************//
// Interface: IMessageDialog
// Flags:     (4096) Dispatchable
// GUID:      {FA9F97C8-A273-412E-A708-285BEB3CABC5}
// *********************************************************************//
interface IMessageDialog  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE AddButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/); // [11]
   HRESULT STDMETHODCALLTYPE AddIcon(unsigned_long ID); // [12]
   HRESULT STDMETHODCALLTYPE Execute(long* Result/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_DefaultButton(long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_DefaultButton(long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_CancelButton(long* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_CancelButton(long pVal/*[in]*/); // [15]
};

// *********************************************************************//
// Interface: ITaskDialog
// Flags:     (4096) Dispatchable
// GUID:      {AE2631CE-2F75-4936-92D2-F2FD0097954C}
// *********************************************************************//
interface ITaskDialog  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE AddButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/); // [11]
   HRESULT STDMETHODCALLTYPE AddCommandLinkButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/); // [12]
   HRESULT STDMETHODCALLTYPE AddRadioButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/); // [13]
   HRESULT STDMETHODCALLTYPE Execute(long* Result/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Icon(unsigned_long* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Icon(unsigned_long pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_MainInstruction(BSTR* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_MainInstruction(BSTR pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_ExpandedInformation(BSTR* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_ExpandedInformation(BSTR pVal/*[in]*/); // [17]
   HRESULT STDMETHODCALLTYPE get_Footer(BSTR* pVal/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE set_Footer(BSTR pVal/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE get_ExpandedControlText(BSTR* pVal/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE set_ExpandedControlText(BSTR pVal/*[in]*/); // [19]
   HRESULT STDMETHODCALLTYPE get_CollapsedControlText(BSTR* pVal/*[out,retval]*/); // [20]
   HRESULT STDMETHODCALLTYPE set_CollapsedControlText(BSTR pVal/*[in]*/); // [20]
   HRESULT STDMETHODCALLTYPE get_VerificationText(BSTR* pVal/*[out,retval]*/); // [21]
   HRESULT STDMETHODCALLTYPE set_VerificationText(BSTR pVal/*[in]*/); // [21]
   HRESULT STDMETHODCALLTYPE get_FooterIcon(unsigned_long* pVal/*[out,retval]*/); // [22]
   HRESULT STDMETHODCALLTYPE set_FooterIcon(unsigned_long pVal/*[in]*/); // [22]
   HRESULT STDMETHODCALLTYPE get_RadioButton(long* pVal/*[out,retval]*/); // [23]
   HRESULT STDMETHODCALLTYPE set_RadioButton(long pVal/*[in]*/); // [23]
   HRESULT STDMETHODCALLTYPE get_AllowDialogCancellation(VARIANT_BOOL* pVal/*[out,retval]*/); // [24]
   HRESULT STDMETHODCALLTYPE set_AllowDialogCancellation(VARIANT_BOOL pVal/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE get_UseCommandLinks(VARIANT_BOOL* pVal/*[out,retval]*/); // [25]
   HRESULT STDMETHODCALLTYPE set_UseCommandLinks(VARIANT_BOOL pVal/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE get_UseCommandLinksNoIcon(VARIANT_BOOL* pVal/*[out,retval]*/); // [26]
   HRESULT STDMETHODCALLTYPE set_UseCommandLinksNoIcon(VARIANT_BOOL pVal/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE get_ExpandFooterArea(VARIANT_BOOL* pVal/*[out,retval]*/); // [27]
   HRESULT STDMETHODCALLTYPE set_ExpandFooterArea(VARIANT_BOOL pVal/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE get_ExpandedByDefault(VARIANT_BOOL* pVal/*[out,retval]*/); // [28]
   HRESULT STDMETHODCALLTYPE set_ExpandedByDefault(VARIANT_BOOL pVal/*[in]*/); // [28]
   HRESULT STDMETHODCALLTYPE get_VerificationFlagChecked(VARIANT_BOOL* pVal/*[out,retval]*/); // [29]
   HRESULT STDMETHODCALLTYPE set_VerificationFlagChecked(VARIANT_BOOL pVal/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE get_ShowProgressBar(VARIANT_BOOL* pVal/*[out,retval]*/); // [30]
   HRESULT STDMETHODCALLTYPE set_ShowProgressBar(VARIANT_BOOL pVal/*[in]*/); // [30]
   HRESULT STDMETHODCALLTYPE get_ShowMarqueeProgressBar(VARIANT_BOOL* pVal/*[out,retval]*/); // [31]
   HRESULT STDMETHODCALLTYPE set_ShowMarqueeProgressBar(VARIANT_BOOL pVal/*[in]*/); // [31]
   HRESULT STDMETHODCALLTYPE get_CallbackTimer(VARIANT_BOOL* pVal/*[out,retval]*/); // [32]
   HRESULT STDMETHODCALLTYPE set_CallbackTimer(VARIANT_BOOL pVal/*[in]*/); // [32]
   HRESULT STDMETHODCALLTYPE get_PositionRelativeToWindow(VARIANT_BOOL* pVal/*[out,retval]*/); // [33]
   HRESULT STDMETHODCALLTYPE set_PositionRelativeToWindow(VARIANT_BOOL pVal/*[in]*/); // [33]
   HRESULT STDMETHODCALLTYPE get_NoDefaultRadioButton(VARIANT_BOOL* pVal/*[out,retval]*/); // [34]
   HRESULT STDMETHODCALLTYPE set_NoDefaultRadioButton(VARIANT_BOOL pVal/*[in]*/); // [34]
   HRESULT STDMETHODCALLTYPE get_CanBeMinimized(VARIANT_BOOL* pVal/*[out,retval]*/); // [35]
   HRESULT STDMETHODCALLTYPE set_CanBeMinimized(VARIANT_BOOL pVal/*[in]*/); // [35]
   HRESULT STDMETHODCALLTYPE get_DefaultButton(long* pVal/*[out,retval]*/); // [36]
   HRESULT STDMETHODCALLTYPE set_DefaultButton(long pVal/*[in]*/); // [36]
   HRESULT STDMETHODCALLTYPE get_Position(long* pVal/*[out,retval]*/); // [37]
   HRESULT STDMETHODCALLTYPE set_Position(long pVal/*[in]*/); // [37]
   HRESULT STDMETHODCALLTYPE set_OnTimer(VARIANT Param1/*[in]*/); // [38]
   HRESULT STDMETHODCALLTYPE set_OnButtonClick(VARIANT Param1/*[in]*/); // [39]
};

// *********************************************************************//
// Interface: ITaskDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {58A2A29A-ABEB-4AAB-ABD4-03CC83B59915}
// *********************************************************************//
interface ITaskDialogEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnTimer(LPDISPATCH Sender/*[in]*/, unsigned_long Elapsed/*[in]*/)
  {
    _TDispID _dispid(/* OnTimer */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Elapsed /*[VT_UI4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnButtonClick(LPDISPATCH Sender/*[in]*/, long ID/*[in]*/, 
                                LPDISPATCH ResultPtr/*[in]*/)
  {
    _TDispID _dispid(/* OnButtonClick */ DISPID(2));
    TAutoArgs<3> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = ID /*[VT_I4:0]*/;
    _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: TaskDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {FEA1F5D3-2AF5-41A3-B732-59BB92E999AA}
// *********************************************************************//
interface TaskDialogEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnTimer(LPDISPATCH Sender/*[in]*/, unsigned_long Elapsed/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnButtonClick(LPDISPATCH Sender/*[in]*/, long ID/*[in]*/, 
                                           LPDISPATCH ResultPtr/*[in]*/); // [2]
};

// *********************************************************************//
// Interface: IIcon
// Flags:     (4096) Dispatchable
// GUID:      {8EF324A3-C801-49E1-B07C-D32A0589746F}
// *********************************************************************//
interface IIcon  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IRect
// Flags:     (4096) Dispatchable
// GUID:      {85BCA1CF-0215-432E-B290-13947A00DA8F}
// *********************************************************************//
interface IRect  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Left(long* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE set_Left(long pVal/*[in]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Top(long* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_Top(long pVal/*[in]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_Width(long* pVal/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE set_Width(long pVal/*[in]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_Height(long* pVal/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE set_Height(long pVal/*[in]*/); // [17]
   HRESULT STDMETHODCALLTYPE get_Right(long* pVal/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE set_Right(long pVal/*[in]*/); // [18]
   HRESULT STDMETHODCALLTYPE get_Bottom(long* pVal/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE set_Bottom(long pVal/*[in]*/); // [19]
};

// *********************************************************************//
// Interface: IIconBuilder
// Flags:     (4096) Dispatchable
// GUID:      {362DA7FC-F126-4E3B-BB58-14C126CEB063}
// *********************************************************************//
interface IIconBuilder  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE Add(VARIANT Image/*[in]*/, VARIANT_BOOL Transparent/*[in,def,opt]*/, 
                                 unsigned_long x/*[in,def,opt]*/, unsigned_long y/*[in,def,opt]*/); // [1]
   HRESULT STDMETHODCALLTYPE Save(BSTR FileName/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE Clear(void); // [3]
   HRESULT STDMETHODCALLTYPE get_Cursor(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_Cursor(VARIANT_BOOL pVal/*[in]*/); // [4]
};

// *********************************************************************//
// Interface: IDesignReference
// Flags:     (4096) Dispatchable
// GUID:      {7C5DD379-4C1A-4F52-B04B-6D0972964779}
// *********************************************************************//
interface IDesignReference  : public Wsolib_tlb::ICollection
{
public:
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_ReferenceType(unsigned_long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_ReferenceType(unsigned_long pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE Add(BSTR Text/*[in]*/, BSTR CurrentAbsoluteFileName/*[in,def,opt]*/, 
                                 LPDISPATCH* Result/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE Find(BSTR Text/*[in]*/, LPDISPATCH* Result/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_Main(VARIANT_BOOL* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_Main(VARIANT_BOOL pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Design(LPDISPATCH* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_ID(BSTR pVal/*[in]*/); // [13]
   HRESULT STDMETHODCALLTYPE Lookup(BSTR Value/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_FileName(BSTR* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE set_FileName(BSTR pVal/*[in]*/); // [15]
};

// *********************************************************************//
// Interface: IDesign
// Flags:     (4096) Dispatchable
// GUID:      {FBE98002-0D8F-4AC8-808C-22DEDE52BF1F}
// *********************************************************************//
interface IDesign  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_NewControlType(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_NewControlType(BSTR pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_NewControlCreationFlags(unsigned_long* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_NewControlCreationFlags(unsigned_long pVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Properties(LPDISPATCH* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_ShowDetailsButton(VARIANT_BOOL* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE set_ShowDetailsButton(VARIANT_BOOL pVal/*[in]*/); // [9]
   HRESULT STDMETHODCALLTYPE Save(BSTR* Layout/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE Load(BSTR Layout/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                  VARIANT Resources/*[in,opt]*/= TNoParam()); // [11]
   HRESULT STDMETHODCALLTYPE Open(BSTR FileName/*[in]*/, unsigned_long Flags/*[in,def,opt]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_References(LPDISPATCH* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_OnActiveControlChange(VARIANT Param1/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_OnControlCreate(VARIANT Param1/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_OnDetailsButtonClick(VARIANT Param1/*[in]*/); // [102]
   HRESULT STDMETHODCALLTYPE set_OnDesignerAdd(VARIANT Param1/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_OnDesignerRemove(VARIANT Param1/*[in]*/); // [104]
};

// *********************************************************************//
// Interface: IDesignEvents
// Flags:     (4096) Dispatchable
// GUID:      {8C46AC3B-00A3-42F5-B82F-E292FD49F53D}
// *********************************************************************//
interface IDesignEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnActiveControlChange(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
  {
    _TDispID _dispid(/* OnActiveControlChange */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
  {
    _TDispID _dispid(/* OnControlCreate */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDetailsButtonClick(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnDetailsButtonClick */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDesignerAdd(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
  {
    _TDispID _dispid(/* OnDesignerAdd */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDesignerRemove(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
  {
    _TDispID _dispid(/* OnDesignerRemove */ DISPID(5));
    TAutoArgs<2> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    _args[2] = Control /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: DesignEvents
// Flags:     (4096) Dispatchable
// GUID:      {FAE90BDF-6BDD-4C3C-8433-5C0DFEC216DC}
// *********************************************************************//
interface DesignEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnActiveControlChange(LPDISPATCH Sender/*[in]*/, 
                                                   LPDISPATCH Control/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE OnControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE OnDetailsButtonClick(LPDISPATCH Sender/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE OnDesignerAdd(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE OnDesignerRemove(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/); // [5]
};

// *********************************************************************//
// Interface: IExecutor
// Flags:     (4096) Dispatchable
// GUID:      {F17D5798-9B71-46B9-B6D3-3FA3AA87C423}
// *********************************************************************//
interface IExecutor  : public Wsolib_tlb::IObject
{
public:
   HRESULT STDMETHODCALLTYPE get_ApplicationName(BSTR* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_ApplicationName(BSTR pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_CommandLine(BSTR* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_CommandLine(BSTR pVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE Execute(VARIANT_BOOL* Result/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE Wait(unsigned_long Timeout/*[in,def,opt]*/, 
                                  VARIANT_BOOL* Result/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_ExitCode(unsigned_long* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_IntegrityLevel(BSTR* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE set_IntegrityLevel(BSTR pVal/*[in]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_Error(LPDISPATCH* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE Terminate(unsigned_long ProcessExitCode/*[in,def,opt]*/, 
                                       VARIANT_BOOL* Result/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE set_OnComplete(VARIANT Param1/*[in]*/); // [15]
};

// *********************************************************************//
// Interface: IExecutorEvents
// Flags:     (4096) Dispatchable
// GUID:      {885A7D58-B7A1-4CA6-BC6F-7C58C09C7812}
// *********************************************************************//
interface IExecutorEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnComplete(LPDISPATCH Sender/*[in]*/)
  {
    _TDispID _dispid(/* OnComplete */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Sender /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ExecutorEvents
// Flags:     (4096) Dispatchable
// GUID:      {9D263BBD-9C2D-4825-B6AF-12110F16D8BB}
// *********************************************************************//
interface ExecutorEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE OnComplete(LPDISPATCH Sender/*[in]*/); // [1]
};

// *********************************************************************//
// Interface: IControlExtendedProperties
// Flags:     (4096) Dispatchable
// GUID:      {EEB664B4-E288-4CC3-B9C2-ACAB3EFA0ECA}
// *********************************************************************//
interface IControlExtendedProperties  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_AllowLeftButtonDown(VARIANT_BOOL* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE set_AllowLeftButtonDown(VARIANT_BOOL pVal/*[in]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_AllowRightButtonDown(VARIANT_BOOL* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE set_AllowRightButtonDown(VARIANT_BOOL pVal/*[in]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_AllowMiddleButtonDown(VARIANT_BOOL* pVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_AllowMiddleButtonDown(VARIANT_BOOL pVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_AllowLeftButtonDoubleClick(VARIANT_BOOL* pVal/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE set_AllowLeftButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/); // [4]
   HRESULT STDMETHODCALLTYPE get_AllowRightButtonDoubleClick(VARIANT_BOOL* pVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_AllowRightButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_AllowMiddleButtonDoubleClick(VARIANT_BOOL* pVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_AllowMiddleButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/); // [6]
};

// *********************************************************************//
// Interface: IError
// Flags:     (4096) Dispatchable
// GUID:      {7190AE34-CBEA-432A-8044-D9B496B7778E}
// *********************************************************************//
interface IError  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Number(unsigned_long* pVal/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE get_Comment(BSTR* pVal/*[out,retval]*/); // [3]
};

// *********************************************************************//
// Interface: IPropertyInformation
// Flags:     (4096) Dispatchable
// GUID:      {EC6D466C-E844-4FD0-8521-6AE08E452DCA}
// *********************************************************************//
interface IPropertyInformation  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pcount/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Type(unsigned_long* pVal/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_ExType(unsigned_long* pVal/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE get_DesignDefault(VARIANT* pVal/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_SymbolicValues(LPDISPATCH* pVal/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_Combination(VARIANT_BOOL* pVal/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_Priority(unsigned_long* pVal/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_DefaultValueAsString(BSTR* pVal/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_DesignReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_Options(LPDISPATCH* pVal/*[out,retval]*/); // [16]
};

// *********************************************************************//
// Interface: IFileManager
// Flags:     (4096) Dispatchable
// GUID:      {FEA423F8-BE89-4285-9279-194AC034221A}
// *********************************************************************//
interface IFileManager  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE GetRelativeFileName(BSTR BaseAbsolutePath/*[in]*/, BSTR Path/*[in]*/, 
                                                 BSTR* Result/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE GetCanonicalFileName(BSTR Path/*[in]*/, 
                                                  VARIANT_BOOL ShortNames/*[in,def,opt]*/, 
                                                  BSTR* Result/*[out,retval]*/); // [2]
   HRESULT STDMETHODCALLTYPE GetCurrentDirectory(BSTR* Result/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE NPath(BSTR Path/*[in]*/, BSTR* Result/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE DPath(BSTR Path/*[in]*/, BSTR* Result/*[out,retval]*/); // [5]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  IControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {EE85ACDD-7499-4719-A173-FCC56CE6FA1D}
// *********************************************************************//
template <class T>
class IControlEventsDispT : public TAutoDriver<IControlEvents>
{
public:
  IControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);

};
typedef IControlEventsDispT<IControlEvents> IControlEventsDisp;

// *********************************************************************//
// DispIntf:  ControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {CCF521F3-D5AA-4CE2-BD3D-1B4D05A8BE1A}
// *********************************************************************//
template<class T>
class ControlEventsDispT : public TAutoDriver<ControlEvents>
{
public:
  ControlEventsDispT(){}

  ControlEventsDispT(ControlEvents *pintf)
  {
    TAutoDriver<ControlEvents>::Bind(pintf, false);
  }

  ControlEventsDispT(ControlEventsPtr pintf)
  {
    TAutoDriver<ControlEvents>::Bind(pintf, true);
  }

  ControlEventsDispT& operator=(ControlEvents *pintf)
  {
    TAutoDriver<ControlEvents>::Bind(pintf, false);
    return *this;
  }

  ControlEventsDispT& operator=(ControlEventsPtr pintf)
  {
    TAutoDriver<ControlEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);

};
typedef ControlEventsDispT<ControlEvents> ControlEventsDisp;

// *********************************************************************//
// DispIntf:  IFormEvents
// Flags:     (4096) Dispatchable
// GUID:      {E83611E0-B0CD-4087-887B-4A0454176AA9}
// *********************************************************************//
template <class T>
class IFormEventsDispT : public TAutoDriver<IFormEvents>
{
public:
  IFormEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnClose(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnActiveControlChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHitTest(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnHint(LPDISPATCH Sender/*[in]*/, LPDISPATCH Object/*[in]*/);
  void            __fastcall OnMinimize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnMaximize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnRestore(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnCopyData(LPDISPATCH Sender/*[in]*/, BSTR Data/*[in]*/);
  void            __fastcall OnActivate(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnEnterSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnExitSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/);

};
typedef IFormEventsDispT<IFormEvents> IFormEventsDisp;

// *********************************************************************//
// DispIntf:  FormEvents
// Flags:     (4096) Dispatchable
// GUID:      {1198D8CE-DCE6-4C9E-8CFF-CF0E3AB7DE87}
// *********************************************************************//
template<class T>
class FormEventsDispT : public TAutoDriver<FormEvents>
{
public:
  FormEventsDispT(){}

  FormEventsDispT(FormEvents *pintf)
  {
    TAutoDriver<FormEvents>::Bind(pintf, false);
  }

  FormEventsDispT(FormEventsPtr pintf)
  {
    TAutoDriver<FormEvents>::Bind(pintf, true);
  }

  FormEventsDispT& operator=(FormEvents *pintf)
  {
    TAutoDriver<FormEvents>::Bind(pintf, false);
    return *this;
  }

  FormEventsDispT& operator=(FormEventsPtr pintf)
  {
    TAutoDriver<FormEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnClose(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnActiveControlChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHitTest(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnHint(LPDISPATCH Sender/*[in]*/, LPDISPATCH Object/*[in]*/);
  HRESULT         __fastcall OnMinimize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnMaximize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnRestore(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnCopyData(LPDISPATCH Sender/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall OnActivate(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnEnterSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnExitSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);


};
typedef FormEventsDispT<FormEvents> FormEventsDisp;

// *********************************************************************//
// DispIntf:  IActionEvents
// Flags:     (4096) Dispatchable
// GUID:      {EFCC7766-9D3D-48CE-94B0-F0EAC186B763}
// *********************************************************************//
template <class T>
class IActionEventsDispT : public TAutoDriver<IActionEvents>
{
public:
  IActionEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnExecute(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnUpdate(LPDISPATCH Sender/*[in]*/);

};
typedef IActionEventsDispT<IActionEvents> IActionEventsDisp;

// *********************************************************************//
// DispIntf:  ActionEvents
// Flags:     (4096) Dispatchable
// GUID:      {F2C5B01B-E77C-411A-A958-7E77A8DA912F}
// *********************************************************************//
template<class T>
class ActionEventsDispT : public TAutoDriver<ActionEvents>
{
public:
  ActionEventsDispT(){}

  ActionEventsDispT(ActionEvents *pintf)
  {
    TAutoDriver<ActionEvents>::Bind(pintf, false);
  }

  ActionEventsDispT(ActionEventsPtr pintf)
  {
    TAutoDriver<ActionEvents>::Bind(pintf, true);
  }

  ActionEventsDispT& operator=(ActionEvents *pintf)
  {
    TAutoDriver<ActionEvents>::Bind(pintf, false);
    return *this;
  }

  ActionEventsDispT& operator=(ActionEventsPtr pintf)
  {
    TAutoDriver<ActionEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnExecute(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnUpdate(LPDISPATCH Sender/*[in]*/);

};
typedef ActionEventsDispT<ActionEvents> ActionEventsDisp;

// *********************************************************************//
// DispIntf:  ITimerEvents
// Flags:     (4096) Dispatchable
// GUID:      {E00E8E3D-8933-4679-B250-257A46743389}
// *********************************************************************//
template <class T>
class ITimerEventsDispT : public TAutoDriver<ITimerEvents>
{
public:
  ITimerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnExecute(LPDISPATCH Sender/*[in]*/);

};
typedef ITimerEventsDispT<ITimerEvents> ITimerEventsDisp;

// *********************************************************************//
// DispIntf:  TimerEvents
// Flags:     (4096) Dispatchable
// GUID:      {076A1D13-7601-477A-98BB-45E6328360DE}
// *********************************************************************//
template<class T>
class TimerEventsDispT : public TAutoDriver<TimerEvents>
{
public:
  TimerEventsDispT(){}

  TimerEventsDispT(TimerEvents *pintf)
  {
    TAutoDriver<TimerEvents>::Bind(pintf, false);
  }

  TimerEventsDispT(TimerEventsPtr pintf)
  {
    TAutoDriver<TimerEvents>::Bind(pintf, true);
  }

  TimerEventsDispT& operator=(TimerEvents *pintf)
  {
    TAutoDriver<TimerEvents>::Bind(pintf, false);
    return *this;
  }

  TimerEventsDispT& operator=(TimerEventsPtr pintf)
  {
    TAutoDriver<TimerEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnExecute(LPDISPATCH Sender/*[in]*/);

};
typedef TimerEventsDispT<TimerEvents> TimerEventsDisp;

// *********************************************************************//
// DispIntf:  IHeaderItemEvents
// Flags:     (4096) Dispatchable
// GUID:      {A71BDEAC-05C9-4594-854D-671071B3C110}
// *********************************************************************//
template <class T>
class IHeaderItemEventsDispT : public TAutoDriver<IHeaderItemEvents>
{
public:
  IHeaderItemEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnBeginTrack(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                          LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnTrack(LPDISPATCH Sender/*[in]*/, long Width/*[in]*/, 
                                     long Button/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnDividerDblClick(LPDISPATCH Sender/*[in]*/, 
                                               LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnBeginDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                         LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnEndDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                       LPDISPATCH ResultPtr/*[in]*/);

};
typedef IHeaderItemEventsDispT<IHeaderItemEvents> IHeaderItemEventsDisp;

// *********************************************************************//
// DispIntf:  HeaderItemEvents
// Flags:     (4096) Dispatchable
// GUID:      {AF9F723A-C078-431B-8723-AAB704905048}
// *********************************************************************//
template<class T>
class HeaderItemEventsDispT : public TAutoDriver<HeaderItemEvents>
{
public:
  HeaderItemEventsDispT(){}

  HeaderItemEventsDispT(HeaderItemEvents *pintf)
  {
    TAutoDriver<HeaderItemEvents>::Bind(pintf, false);
  }

  HeaderItemEventsDispT(HeaderItemEventsPtr pintf)
  {
    TAutoDriver<HeaderItemEvents>::Bind(pintf, true);
  }

  HeaderItemEventsDispT& operator=(HeaderItemEvents *pintf)
  {
    TAutoDriver<HeaderItemEvents>::Bind(pintf, false);
    return *this;
  }

  HeaderItemEventsDispT& operator=(HeaderItemEventsPtr pintf)
  {
    TAutoDriver<HeaderItemEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnBeginTrack(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                          LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnTrack(LPDISPATCH Sender/*[in]*/, long Width/*[in]*/, 
                                     long Button/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnDividerDblClick(LPDISPATCH Sender/*[in]*/, 
                                               LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnBeginDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                         LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnEndDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                       LPDISPATCH ResultPtr/*[in]*/);

};
typedef HeaderItemEventsDispT<HeaderItemEvents> HeaderItemEventsDisp;

// *********************************************************************//
// DispIntf:  IHeaderEvents
// Flags:     (4096) Dispatchable
// GUID:      {09D9EF1F-9DA1-4E05-9557-B3F692E5775B}
// *********************************************************************//
template <class T>
class IHeaderEventsDispT : public TAutoDriver<IHeaderEvents>
{
public:
  IHeaderEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);

};
typedef IHeaderEventsDispT<IHeaderEvents> IHeaderEventsDisp;

// *********************************************************************//
// DispIntf:  HeaderEvents
// Flags:     (4096) Dispatchable
// GUID:      {0CEF5413-315F-4FA8-B961-F7F04F8393A8}
// *********************************************************************//
template<class T>
class HeaderEventsDispT : public TAutoDriver<HeaderEvents>
{
public:
  HeaderEventsDispT(){}

  HeaderEventsDispT(HeaderEvents *pintf)
  {
    TAutoDriver<HeaderEvents>::Bind(pintf, false);
  }

  HeaderEventsDispT(HeaderEventsPtr pintf)
  {
    TAutoDriver<HeaderEvents>::Bind(pintf, true);
  }

  HeaderEventsDispT& operator=(HeaderEvents *pintf)
  {
    TAutoDriver<HeaderEvents>::Bind(pintf, false);
    return *this;
  }

  HeaderEventsDispT& operator=(HeaderEventsPtr pintf)
  {
    TAutoDriver<HeaderEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);


};
typedef HeaderEventsDispT<HeaderEvents> HeaderEventsDisp;

// *********************************************************************//
// DispIntf:  IListViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {A55B1FD3-30D4-479B-8F33-3978EB403A0B}
// *********************************************************************//
template <class T>
class IListViewEventsDispT : public TAutoDriver<IListViewEvents>
{
public:
  IListViewEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnData(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                      Wsolib_tlb::IResult* NewText/*[in]*/);
  void            __fastcall OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                         Wsolib_tlb::IResult* ResultPtr/*[in]*/);
  void            __fastcall OnGroupLinkClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Group/*[in]*/);
  void            __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnSubItemEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                             long SubItem/*[in]*/, 
                                             Wsolib_tlb::IResult* NewText/*[in]*/);
  void            __fastcall OnBeginSubItemEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                                long SubItem/*[in]*/, 
                                                Wsolib_tlb::IResult* ResultPtr/*[in]*/);

};
typedef IListViewEventsDispT<IListViewEvents> IListViewEventsDisp;

// *********************************************************************//
// DispIntf:  ListViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {F8233D5A-7BE6-48C7-8B44-E61345BBDF5A}
// *********************************************************************//
template<class T>
class ListViewEventsDispT : public TAutoDriver<ListViewEvents>
{
public:
  ListViewEventsDispT(){}

  ListViewEventsDispT(ListViewEvents *pintf)
  {
    TAutoDriver<ListViewEvents>::Bind(pintf, false);
  }

  ListViewEventsDispT(ListViewEventsPtr pintf)
  {
    TAutoDriver<ListViewEvents>::Bind(pintf, true);
  }

  ListViewEventsDispT& operator=(ListViewEvents *pintf)
  {
    TAutoDriver<ListViewEvents>::Bind(pintf, false);
    return *this;
  }

  ListViewEventsDispT& operator=(ListViewEventsPtr pintf)
  {
    TAutoDriver<ListViewEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnData(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                      Wsolib_tlb::IResult* NewText/*[in]*/);
  HRESULT         __fastcall OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                         Wsolib_tlb::IResult* ResultPtr/*[in]*/);
  HRESULT         __fastcall OnGroupLinkClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Group/*[in]*/);
  HRESULT         __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnSubItemEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                             long SubItem/*[in]*/, 
                                             Wsolib_tlb::IResult* NewText/*[in]*/);
  HRESULT         __fastcall OnBeginSubItemEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                                long SubItem/*[in]*/, 
                                                Wsolib_tlb::IResult* ResultPtr/*[in]*/);
  HRESULT         __fastcall OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);



};
typedef ListViewEventsDispT<ListViewEvents> ListViewEventsDisp;

// *********************************************************************//
// DispIntf:  IResult
// Flags:     (4096) Dispatchable
// GUID:      {50B60E8E-E889-46DB-88D8-09A416726824}
// *********************************************************************//
template<class T>
class IResultDispT : public TAutoDriver<IResult>
{
public:
  IResultDispT(){}

  IResultDispT(IResult *pintf)
  {
    TAutoDriver<IResult>::Bind(pintf, false);
  }

  IResultDispT(IResultPtr pintf)
  {
    TAutoDriver<IResult>::Bind(pintf, true);
  }

  IResultDispT& operator=(IResult *pintf)
  {
    TAutoDriver<IResult>::Bind(pintf, false);
    return *this;
  }

  IResultDispT& operator=(IResultPtr pintf)
  {
    TAutoDriver<IResult>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Result));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Result);
  }

  HRESULT         __fastcall Put(VARIANT newVal/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pVal/*[in]*/);

};
typedef IResultDispT<IResult> IResultDisp;

// *********************************************************************//
// DispIntf:  ITreeViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {FFC21772-F6D8-4AFC-A2F4-362C11DF0019}
// *********************************************************************//
template <class T>
class ITreeViewEventsDispT : public TAutoDriver<ITreeViewEvents>
{
public:
  ITreeViewEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                      Wsolib_tlb::IResult* NewText/*[in]*/);
  void            __fastcall OnExpanding(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnExpanded(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnCollapsing(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnCollapsed(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                         Wsolib_tlb::IResult* ResultPtr/*[in]*/);
  void            __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);

};
typedef ITreeViewEventsDispT<ITreeViewEvents> ITreeViewEventsDisp;

// *********************************************************************//
// DispIntf:  TreeViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {555949AA-0922-4BF3-926A-9DAA912861A2}
// *********************************************************************//
template<class T>
class TreeViewEventsDispT : public TAutoDriver<TreeViewEvents>
{
public:
  TreeViewEventsDispT(){}

  TreeViewEventsDispT(TreeViewEvents *pintf)
  {
    TAutoDriver<TreeViewEvents>::Bind(pintf, false);
  }

  TreeViewEventsDispT(TreeViewEventsPtr pintf)
  {
    TAutoDriver<TreeViewEvents>::Bind(pintf, true);
  }

  TreeViewEventsDispT& operator=(TreeViewEvents *pintf)
  {
    TAutoDriver<TreeViewEvents>::Bind(pintf, false);
    return *this;
  }

  TreeViewEventsDispT& operator=(TreeViewEventsPtr pintf)
  {
    TAutoDriver<TreeViewEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                      Wsolib_tlb::IResult* NewText/*[in]*/);
  HRESULT         __fastcall OnExpanding(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnExpanded(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnCollapsing(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnCollapsed(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                         Wsolib_tlb::IResult* ResultPtr/*[in]*/);
  HRESULT         __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);


};
typedef TreeViewEventsDispT<TreeViewEvents> TreeViewEventsDisp;

// *********************************************************************//
// DispIntf:  IRichEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}
// *********************************************************************//
template <class T>
class IRichEditEventsDispT : public TAutoDriver<IRichEditEvents>
{
public:
  IRichEditEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSelChange(LPDISPATCH Sender/*[in]*/);

};
typedef IRichEditEventsDispT<IRichEditEvents> IRichEditEventsDisp;

// *********************************************************************//
// DispIntf:  RichEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {5B691737-293F-421D-87DA-E810555C8459}
// *********************************************************************//
template<class T>
class RichEditEventsDispT : public TAutoDriver<RichEditEvents>
{
public:
  RichEditEventsDispT(){}

  RichEditEventsDispT(RichEditEvents *pintf)
  {
    TAutoDriver<RichEditEvents>::Bind(pintf, false);
  }

  RichEditEventsDispT(RichEditEventsPtr pintf)
  {
    TAutoDriver<RichEditEvents>::Bind(pintf, true);
  }

  RichEditEventsDispT& operator=(RichEditEvents *pintf)
  {
    TAutoDriver<RichEditEvents>::Bind(pintf, false);
    return *this;
  }

  RichEditEventsDispT& operator=(RichEditEventsPtr pintf)
  {
    TAutoDriver<RichEditEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnSelChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);


};
typedef RichEditEventsDispT<RichEditEvents> RichEditEventsDisp;

// *********************************************************************//
// DispIntf:  IComboBoxEvents
// Flags:     (4096) Dispatchable
// GUID:      {B8A6F3A3-EE81-4472-938E-F1B42513B7D2}
// *********************************************************************//
template <class T>
class IComboBoxEventsDispT : public TAutoDriver<IComboBoxEvents>
{
public:
  IComboBoxEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  void            __fastcall OnDropDown(LPDISPATCH Sender/*[in]*/);

};
typedef IComboBoxEventsDispT<IComboBoxEvents> IComboBoxEventsDisp;

// *********************************************************************//
// DispIntf:  ListControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {C3B3B3A5-DD01-4E17-900A-724AE1028B20}
// *********************************************************************//
template<class T>
class ListControlEventsDispT : public TAutoDriver<ListControlEvents>
{
public:
  ListControlEventsDispT(){}

  ListControlEventsDispT(ListControlEvents *pintf)
  {
    TAutoDriver<ListControlEvents>::Bind(pintf, false);
  }

  ListControlEventsDispT(ListControlEventsPtr pintf)
  {
    TAutoDriver<ListControlEvents>::Bind(pintf, true);
  }

  ListControlEventsDispT& operator=(ListControlEvents *pintf)
  {
    TAutoDriver<ListControlEvents>::Bind(pintf, false);
    return *this;
  }

  ListControlEventsDispT& operator=(ListControlEventsPtr pintf)
  {
    TAutoDriver<ListControlEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);


};
typedef ListControlEventsDispT<ListControlEvents> ListControlEventsDisp;

// *********************************************************************//
// DispIntf:  ComboBoxEvents
// Flags:     (4096) Dispatchable
// GUID:      {BDC47F49-9597-4CD8-BFBE-A5A317B940F8}
// *********************************************************************//
template<class T>
class ComboBoxEventsDispT : public TAutoDriver<ComboBoxEvents>
{
public:
  ComboBoxEventsDispT(){}

  ComboBoxEventsDispT(ComboBoxEvents *pintf)
  {
    TAutoDriver<ComboBoxEvents>::Bind(pintf, false);
  }

  ComboBoxEventsDispT(ComboBoxEventsPtr pintf)
  {
    TAutoDriver<ComboBoxEvents>::Bind(pintf, true);
  }

  ComboBoxEventsDispT& operator=(ComboBoxEvents *pintf)
  {
    TAutoDriver<ComboBoxEvents>::Bind(pintf, false);
    return *this;
  }

  ComboBoxEventsDispT& operator=(ComboBoxEventsPtr pintf)
  {
    TAutoDriver<ComboBoxEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnDropDown(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);
  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  HRESULT         __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  HRESULT         __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  HRESULT         __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  HRESULT         __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  HRESULT         __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);



};
typedef ComboBoxEventsDispT<ComboBoxEvents> ComboBoxEventsDisp;

// *********************************************************************//
// DispIntf:  IFindReplaceDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}
// *********************************************************************//
template <class T>
class IFindReplaceDialogEventsDispT : public TAutoDriver<IFindReplaceDialogEvents>
{
public:
  IFindReplaceDialogEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnFind(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnReplace(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnReplaceAll(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnClose(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);

};
typedef IFindReplaceDialogEventsDispT<IFindReplaceDialogEvents> IFindReplaceDialogEventsDisp;

// *********************************************************************//
// DispIntf:  FindReplaceDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {0FBA8E33-6938-4E38-97ED-DD9DF0248306}
// *********************************************************************//
template<class T>
class FindReplaceDialogEventsDispT : public TAutoDriver<FindReplaceDialogEvents>
{
public:
  FindReplaceDialogEventsDispT(){}

  FindReplaceDialogEventsDispT(FindReplaceDialogEvents *pintf)
  {
    TAutoDriver<FindReplaceDialogEvents>::Bind(pintf, false);
  }

  FindReplaceDialogEventsDispT(FindReplaceDialogEventsPtr pintf)
  {
    TAutoDriver<FindReplaceDialogEvents>::Bind(pintf, true);
  }

  FindReplaceDialogEventsDispT& operator=(FindReplaceDialogEvents *pintf)
  {
    TAutoDriver<FindReplaceDialogEvents>::Bind(pintf, false);
    return *this;
  }

  FindReplaceDialogEventsDispT& operator=(FindReplaceDialogEventsPtr pintf)
  {
    TAutoDriver<FindReplaceDialogEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnFind(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnReplace(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnReplaceAll(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnClose(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);

};
typedef FindReplaceDialogEventsDispT<FindReplaceDialogEvents> FindReplaceDialogEventsDisp;

// *********************************************************************//
// DispIntf:  IFileOpenSaveDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {BAE2B02E-9BD5-4D6D-824E-197CC72CF040}
// *********************************************************************//
template <class T>
class IFileOpenSaveDialogEventsDispT : public TAutoDriver<IFileOpenSaveDialogEvents>
{
public:
  IFileOpenSaveDialogEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnFolderChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnTypeChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);

};
typedef IFileOpenSaveDialogEventsDispT<IFileOpenSaveDialogEvents> IFileOpenSaveDialogEventsDisp;

// *********************************************************************//
// DispIntf:  FileOpenSaveDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {ED303EB3-B7F9-493B-BE0E-265D20F80E38}
// *********************************************************************//
template<class T>
class FileOpenSaveDialogEventsDispT : public TAutoDriver<FileOpenSaveDialogEvents>
{
public:
  FileOpenSaveDialogEventsDispT(){}

  FileOpenSaveDialogEventsDispT(FileOpenSaveDialogEvents *pintf)
  {
    TAutoDriver<FileOpenSaveDialogEvents>::Bind(pintf, false);
  }

  FileOpenSaveDialogEventsDispT(FileOpenSaveDialogEventsPtr pintf)
  {
    TAutoDriver<FileOpenSaveDialogEvents>::Bind(pintf, true);
  }

  FileOpenSaveDialogEventsDispT& operator=(FileOpenSaveDialogEvents *pintf)
  {
    TAutoDriver<FileOpenSaveDialogEvents>::Bind(pintf, false);
    return *this;
  }

  FileOpenSaveDialogEventsDispT& operator=(FileOpenSaveDialogEventsPtr pintf)
  {
    TAutoDriver<FileOpenSaveDialogEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/);
  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnFolderChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnTypeChange(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);

};
typedef FileOpenSaveDialogEventsDispT<FileOpenSaveDialogEvents> FileOpenSaveDialogEventsDisp;

// *********************************************************************//
// DispIntf:  ISelectFolderDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {C5A781AE-2868-4470-972D-39BEAE4721FC}
// *********************************************************************//
template <class T>
class ISelectFolderDialogEventsDispT : public TAutoDriver<ISelectFolderDialogEvents>
{
public:
  ISelectFolderDialogEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);

};
typedef ISelectFolderDialogEventsDispT<ISelectFolderDialogEvents> ISelectFolderDialogEventsDisp;

// *********************************************************************//
// DispIntf:  SelectFolderDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {1B47003E-14C2-4459-8280-40BCE5C8CA90}
// *********************************************************************//
template<class T>
class SelectFolderDialogEventsDispT : public TAutoDriver<SelectFolderDialogEvents>
{
public:
  SelectFolderDialogEventsDispT(){}

  SelectFolderDialogEventsDispT(SelectFolderDialogEvents *pintf)
  {
    TAutoDriver<SelectFolderDialogEvents>::Bind(pintf, false);
  }

  SelectFolderDialogEventsDispT(SelectFolderDialogEventsPtr pintf)
  {
    TAutoDriver<SelectFolderDialogEvents>::Bind(pintf, true);
  }

  SelectFolderDialogEventsDispT& operator=(SelectFolderDialogEvents *pintf)
  {
    TAutoDriver<SelectFolderDialogEvents>::Bind(pintf, false);
    return *this;
  }

  SelectFolderDialogEventsDispT& operator=(SelectFolderDialogEventsPtr pintf)
  {
    TAutoDriver<SelectFolderDialogEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);

};
typedef SelectFolderDialogEventsDispT<SelectFolderDialogEvents> SelectFolderDialogEventsDisp;

// *********************************************************************//
// DispIntf:  ITrayIconEvents
// Flags:     (4096) Dispatchable
// GUID:      {0EE395DB-AF4D-4493-861E-B0E1966FD5DB}
// *********************************************************************//
template <class T>
class ITrayIconEventsDispT : public TAutoDriver<ITrayIconEvents>
{
public:
  ITrayIconEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);

};
typedef ITrayIconEventsDispT<ITrayIconEvents> ITrayIconEventsDisp;

// *********************************************************************//
// DispIntf:  TrayIconEvents
// Flags:     (4096) Dispatchable
// GUID:      {C191A5DF-072B-4331-9A83-3E985716730A}
// *********************************************************************//
template<class T>
class TrayIconEventsDispT : public TAutoDriver<TrayIconEvents>
{
public:
  TrayIconEventsDispT(){}

  TrayIconEventsDispT(TrayIconEvents *pintf)
  {
    TAutoDriver<TrayIconEvents>::Bind(pintf, false);
  }

  TrayIconEventsDispT(TrayIconEventsPtr pintf)
  {
    TAutoDriver<TrayIconEvents>::Bind(pintf, true);
  }

  TrayIconEventsDispT& operator=(TrayIconEvents *pintf)
  {
    TAutoDriver<TrayIconEvents>::Bind(pintf, false);
    return *this;
  }

  TrayIconEventsDispT& operator=(TrayIconEventsPtr pintf)
  {
    TAutoDriver<TrayIconEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  HRESULT         __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);

};
typedef TrayIconEventsDispT<TrayIconEvents> TrayIconEventsDisp;

// *********************************************************************//
// DispIntf:  IEventHandlerEvents
// Flags:     (4096) Dispatchable
// GUID:      {A3BE55F5-A954-45E5-8419-CB249B836ABA}
// *********************************************************************//
template <class T>
class IEventHandlerEventsDispT : public TAutoDriver<IEventHandlerEvents>
{
public:
  IEventHandlerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnExecute(LPDISPATCH Sender/*[in]*/);

};
typedef IEventHandlerEventsDispT<IEventHandlerEvents> IEventHandlerEventsDisp;

// *********************************************************************//
// DispIntf:  EventHandlerEvents
// Flags:     (4096) Dispatchable
// GUID:      {7E144038-C33F-4F65-8CE2-B833F4773101}
// *********************************************************************//
template<class T>
class EventHandlerEventsDispT : public TAutoDriver<EventHandlerEvents>
{
public:
  EventHandlerEventsDispT(){}

  EventHandlerEventsDispT(EventHandlerEvents *pintf)
  {
    TAutoDriver<EventHandlerEvents>::Bind(pintf, false);
  }

  EventHandlerEventsDispT(EventHandlerEventsPtr pintf)
  {
    TAutoDriver<EventHandlerEvents>::Bind(pintf, true);
  }

  EventHandlerEventsDispT& operator=(EventHandlerEvents *pintf)
  {
    TAutoDriver<EventHandlerEvents>::Bind(pintf, false);
    return *this;
  }

  EventHandlerEventsDispT& operator=(EventHandlerEventsPtr pintf)
  {
    TAutoDriver<EventHandlerEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnExecute(LPDISPATCH Sender/*[in]*/);

};
typedef EventHandlerEventsDispT<EventHandlerEvents> EventHandlerEventsDisp;

// *********************************************************************//
// DispIntf:  IFontDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {57ACC027-05B0-48A5-ACC3-AB2E31C34D28}
// *********************************************************************//
template <class T>
class IFontDialogEventsDispT : public TAutoDriver<IFontDialogEvents>
{
public:
  IFontDialogEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnApply(LPDISPATCH Sender/*[in]*/);

};
typedef IFontDialogEventsDispT<IFontDialogEvents> IFontDialogEventsDisp;

// *********************************************************************//
// DispIntf:  FontDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {9C2C742B-33B5-4BCF-AEB9-640DF4D94374}
// *********************************************************************//
template<class T>
class FontDialogEventsDispT : public TAutoDriver<FontDialogEvents>
{
public:
  FontDialogEventsDispT(){}

  FontDialogEventsDispT(FontDialogEvents *pintf)
  {
    TAutoDriver<FontDialogEvents>::Bind(pintf, false);
  }

  FontDialogEventsDispT(FontDialogEventsPtr pintf)
  {
    TAutoDriver<FontDialogEvents>::Bind(pintf, true);
  }

  FontDialogEventsDispT& operator=(FontDialogEvents *pintf)
  {
    TAutoDriver<FontDialogEvents>::Bind(pintf, false);
    return *this;
  }

  FontDialogEventsDispT& operator=(FontDialogEventsPtr pintf)
  {
    TAutoDriver<FontDialogEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnApply(LPDISPATCH Sender/*[in]*/);

};
typedef FontDialogEventsDispT<FontDialogEvents> FontDialogEventsDisp;

// *********************************************************************//
// DispIntf:  IColorDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {F3B57D51-7823-4E4F-907D-70E73A2C9E72}
// *********************************************************************//
template <class T>
class IColorDialogEventsDispT : public TAutoDriver<IColorDialogEvents>
{
public:
  IColorDialogEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);

};
typedef IColorDialogEventsDispT<IColorDialogEvents> IColorDialogEventsDisp;

// *********************************************************************//
// DispIntf:  ColorDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {B7B784F7-A097-4D24-BE47-E9842A532192}
// *********************************************************************//
template<class T>
class ColorDialogEventsDispT : public TAutoDriver<ColorDialogEvents>
{
public:
  ColorDialogEventsDispT(){}

  ColorDialogEventsDispT(ColorDialogEvents *pintf)
  {
    TAutoDriver<ColorDialogEvents>::Bind(pintf, false);
  }

  ColorDialogEventsDispT(ColorDialogEventsPtr pintf)
  {
    TAutoDriver<ColorDialogEvents>::Bind(pintf, true);
  }

  ColorDialogEventsDispT& operator=(ColorDialogEvents *pintf)
  {
    TAutoDriver<ColorDialogEvents>::Bind(pintf, false);
    return *this;
  }

  ColorDialogEventsDispT& operator=(ColorDialogEventsPtr pintf)
  {
    TAutoDriver<ColorDialogEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnHelp(LPDISPATCH Sender/*[in]*/);

};
typedef ColorDialogEventsDispT<ColorDialogEvents> ColorDialogEventsDisp;

// *********************************************************************//
// DispIntf:  IListControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {DDB41E4E-78C4-4E80-9065-0D20B278E837}
// *********************************************************************//
template<class T>
class IListControlEventsDispT : public TAutoDriver<IListControlEvents>
{
public:
  IListControlEventsDispT(){}

  IListControlEventsDispT(IListControlEvents *pintf)
  {
    TAutoDriver<IListControlEvents>::Bind(pintf, false);
  }

  IListControlEventsDispT(IListControlEventsPtr pintf)
  {
    TAutoDriver<IListControlEvents>::Bind(pintf, true);
  }

  IListControlEventsDispT& operator=(IListControlEvents *pintf)
  {
    TAutoDriver<IListControlEvents>::Bind(pintf, false);
    return *this;
  }

  IListControlEventsDispT& operator=(IListControlEventsPtr pintf)
  {
    TAutoDriver<IListControlEvents>::Bind(pintf, true);
    return *this;
  }

  void            __fastcall OnClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                       long Flags/*[in]*/);
  void            __fastcall OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseEnter(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseLeave(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                         long Flags/*[in]*/);
  void            __fastcall OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/);
  void            __fastcall OnResize(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMove(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDestroy(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnShow(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnHide(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnEnabledChange(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnSetFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnKillFocus(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                          long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/);
  void            __fastcall OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH BeginDockContext/*[in]*/);
  void            __fastcall OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                 LPDISPATCH Control/*[in]*/, 
                                                 LPDISPATCH DockTarget/*[in]*/, 
                                                 LPDISPATCH DockControlCreateContext/*[in]*/);
  void            __fastcall OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                           LPDISPATCH UndockContext/*[in]*/);
  void            __fastcall OnUndock(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/);

};
typedef IListControlEventsDispT<IListControlEvents> IListControlEventsDisp;

// *********************************************************************//
// DispIntf:  IWindowSystemObject
// Flags:     (4096) Dispatchable
// GUID:      {06983696-F0BE-40C1-992E-76172C1CA324}
// *********************************************************************//
template<class T>
class IWindowSystemObjectDispT : public TAutoDriver<IWindowSystemObject>
{
public:
  IWindowSystemObjectDispT(){}

  IWindowSystemObjectDispT(IWindowSystemObject *pintf)
  {
    TAutoDriver<IWindowSystemObject>::Bind(pintf, false);
  }

  IWindowSystemObjectDispT(IWindowSystemObjectPtr pintf)
  {
    TAutoDriver<IWindowSystemObject>::Bind(pintf, true);
  }

  IWindowSystemObjectDispT& operator=(IWindowSystemObject *pintf)
  {
    TAutoDriver<IWindowSystemObject>::Bind(pintf, false);
    return *this;
  }

  IWindowSystemObjectDispT& operator=(IWindowSystemObjectPtr pintf)
  {
    TAutoDriver<IWindowSystemObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WindowSystemObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WindowSystemObject);
  }

  HRESULT         __fastcall CreateForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDialogForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDialogForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateImageList(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateImageList(void);
  HRESULT         __fastcall CreateTimer(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTimer(void);
  HRESULT         __fastcall CreateCOMEvents(LPDISPATCH COMObject/*[in]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCOMEvents(LPDISPATCH COMObject/*[in]*/);
  HRESULT         __fastcall CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                              unsigned_long Flags/*[in,def,opt]*/, 
                                              LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                              unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                 BSTR ReplaceText/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/, 
                                                 LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                 BSTR ReplaceText/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrayIcon(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrayIcon(void);
  HRESULT         __fastcall Run();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall Translate(BSTR Text/*[in]*/, VARIANT* pResult/*[out,retval]*/);
  VARIANT         __fastcall Translate(BSTR Text/*[in]*/);
  HRESULT         __fastcall LoadImage(BSTR Path/*[in]*/, LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall LoadImage(BSTR Path/*[in]*/);
  HRESULT         __fastcall get_Version(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Version(void);
  HRESULT         __fastcall get_Debug(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall About();
  HRESULT         __fastcall get_Regions(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Regions(void);
  HRESULT         __fastcall get_PixelsPerInch(long* pVal/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long pVal/*[in]*/);
  HRESULT         __fastcall get_Screen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Screen(void);
  HRESULT         __fastcall CreateEventHandler(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEventHandler(void);
  HRESULT         __fastcall get_EnableVisualStyles(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableVisualStyles(void);
  HRESULT         __fastcall set_EnableVisualStyles(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall CreatePrintInfo(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePrintInfo(void);
  HRESULT         __fastcall CreateStdDispatch(BSTR TypeLibrary/*[in]*/, long Major/*[in]*/, 
                                               long Minor/*[in]*/, BSTR Guid/*[in]*/, 
                                               LPUNKNOWN Object/*[in]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStdDispatch(BSTR TypeLibrary/*[in]*/, long Major/*[in]*/, 
                                               long Minor/*[in]*/, BSTR Guid/*[in]*/, 
                                               LPUNKNOWN Object/*[in]*/);
  HRESULT         __fastcall get_Console(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Console(void);
  HRESULT         __fastcall get_ActiveForm(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveForm(void);
  HRESULT         __fastcall get_ForegroundForm(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ForegroundForm(void);
  HRESULT         __fastcall VirtualKeyCodeToString(unsigned_long VirtualKey/*[in]*/, 
                                                    VARIANT_BOOL UseKeyboardState/*[in,def,opt]*/, 
                                                    BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall VirtualKeyCodeToString(unsigned_long VirtualKey/*[in]*/, 
                                                    VARIANT_BOOL UseKeyboardState/*[in,def,opt]*/);
  HRESULT         __fastcall SaveLayout(BSTR* Layout/*[out,retval]*/);
  BSTR            __fastcall SaveLayout(void);
  HRESULT         __fastcall LoadLayout(BSTR Layout/*[in]*/);
  HRESULT         __fastcall get_Color(LPDISPATCH* Color/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Color(void);
  HRESULT         __fastcall get_EnableVistaFileDialog(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableVistaFileDialog(void);
  HRESULT         __fastcall set_EnableVistaFileDialog(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall LoadIcon(BSTR FileName/*[in]*/, LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall LoadIcon(BSTR FileName/*[in]*/);
  HRESULT         __fastcall LoadSysIcon(long ID/*[in]*/, LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall LoadSysIcon(long ID/*[in]*/);
  HRESULT         __fastcall GetIconCount(BSTR FileName/*[in]*/, 
                                          unsigned_long* Result/*[out,retval]*/);
  unsigned_long   __fastcall GetIconCount(BSTR FileName/*[in]*/);

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   LPDISPATCH      Version = {read = get_Version};
  __property   VARIANT_BOOL    Debug = {read = get_Debug, write = set_Debug};
  __property   LPDISPATCH      Regions = {read = get_Regions};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   LPDISPATCH      Screen = {read = get_Screen};
  __property   VARIANT_BOOL    EnableVisualStyles = {read = get_EnableVisualStyles, write = set_EnableVisualStyles};
  __property   LPDISPATCH      Console = {read = get_Console};
  __property   LPDISPATCH      ActiveForm = {read = get_ActiveForm};
  __property   LPDISPATCH      ForegroundForm = {read = get_ForegroundForm};
  __property   LPDISPATCH      Color = {read = get_Color};
  __property   VARIANT_BOOL    EnableVistaFileDialog = {read = get_EnableVistaFileDialog, write = set_EnableVistaFileDialog};
};
typedef IWindowSystemObjectDispT<IWindowSystemObject> IWindowSystemObjectDisp;

// *********************************************************************//
// DispIntf:  IVersion
// Flags:     (4096) Dispatchable
// GUID:      {AC444C04-F889-47E1-B56E-9F648D8AB009}
// *********************************************************************//
template<class T>
class IVersionDispT : public TAutoDriver<IVersion>
{
public:
  IVersionDispT(){}

  IVersionDispT(IVersion *pintf)
  {
    TAutoDriver<IVersion>::Bind(pintf, false);
  }

  IVersionDispT(IVersionPtr pintf)
  {
    TAutoDriver<IVersion>::Bind(pintf, true);
  }

  IVersionDispT& operator=(IVersion *pintf)
  {
    TAutoDriver<IVersion>::Bind(pintf, false);
    return *this;
  }

  IVersionDispT& operator=(IVersionPtr pintf)
  {
    TAutoDriver<IVersion>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Version));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Version);
  }

  HRESULT         __fastcall get_Major(long* pVal/*[out,retval]*/);
  long            __fastcall get_Major(void);
  HRESULT         __fastcall get_Minor(long* pVal/*[out,retval]*/);
  long            __fastcall get_Minor(void);
  HRESULT         __fastcall get_BuildNumber(long* pVal/*[out,retval]*/);
  long            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_String(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_String(void);
  HRESULT         __fastcall get_Trial(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Trial(void);
  HRESULT         __fastcall get_Url(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Url(void);
  HRESULT         __fastcall get_Copyright(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Copyright(void);

  __property   long            Major = {read = get_Major};
  __property   long            Minor = {read = get_Minor};
  __property   long            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            String = {read = get_String};
  __property   VARIANT_BOOL    Trial = {read = get_Trial};
  __property   BSTR            Url = {read = get_Url};
  __property   BSTR            Copyright = {read = get_Copyright};
};
typedef IVersionDispT<IVersion> IVersionDisp;

// *********************************************************************//
// DispIntf:  IObject
// Flags:     (4096) Dispatchable
// GUID:      {AADDFAA1-E50D-4C66-8955-DFE8CF54FABB}
// *********************************************************************//
template<class T>
class IObjectDispT : public TAutoDriver<IObject>
{
public:
  IObjectDispT(){}

  IObjectDispT(IObject *pintf)
  {
    TAutoDriver<IObject>::Bind(pintf, false);
  }

  IObjectDispT(IObjectPtr pintf)
  {
    TAutoDriver<IObject>::Bind(pintf, true);
  }

  IObjectDispT& operator=(IObject *pintf)
  {
    TAutoDriver<IObject>::Bind(pintf, false);
    return *this;
  }

  IObjectDispT& operator=(IObjectPtr pintf)
  {
    TAutoDriver<IObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            Type = {read = get_Type};
};
typedef IObjectDispT<IObject> IObjectDisp;

// *********************************************************************//
// DispIntf:  IControl
// Flags:     (4096) Dispatchable
// GUID:      {4397A1F9-F35F-4234-AF6A-F6327B0F784E}
// *********************************************************************//
template<class T>
class IControlDispT : public TAutoDriver<IControl>
{
public:
  IControlDispT(){}

  IControlDispT(IControl *pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, false);
  }

  IControlDispT(IControlPtr pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, true);
  }

  IControlDispT& operator=(IControl *pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, false);
    return *this;
  }

  IControlDispT& operator=(IControlPtr pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Control));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Control);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IControlDispT<IControl> IControlDisp;

// *********************************************************************//
// DispIntf:  IFrame
// Flags:     (4096) Dispatchable
// GUID:      {92337C2C-1C7D-4848-8AD2-B9D33E4EB242}
// *********************************************************************//
template<class T>
class IFrameDispT : public TAutoDriver<IFrame>
{
public:
  IFrameDispT(){}

  IFrameDispT(IFrame *pintf)
  {
    TAutoDriver<IFrame>::Bind(pintf, false);
  }

  IFrameDispT(IFramePtr pintf)
  {
    TAutoDriver<IFrame>::Bind(pintf, true);
  }

  IFrameDispT& operator=(IFrame *pintf)
  {
    TAutoDriver<IFrame>::Bind(pintf, false);
    return *this;
  }

  IFrameDispT& operator=(IFramePtr pintf)
  {
    TAutoDriver<IFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Frame));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Frame);
  }

  HRESULT         __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStatusBar(void);
  HRESULT         __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/);
  HRESULT         __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/);
  HRESULT         __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitter(unsigned_short Align/*[in]*/);
  HRESULT         __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/);
  HRESULT         __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/
                                                , long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/
                                  , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/);
  HRESULT         __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/);
  HRESULT         __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/);
  HRESULT         __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/);
  HRESULT         __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/);
  HRESULT         __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/);
  HRESULT         __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/);
  HRESULT         __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/
                                 , long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/);
  HRESULT         __fastcall Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Polygon(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/);
  HRESULT         __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/);
  HRESULT         __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_BorderWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BevelWidth(void);
  HRESULT         __fastcall set_BevelWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelInner(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(long pVal/*[in]*/);
  HRESULT         __fastcall get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GraphFont(void);
  HRESULT         __fastcall set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_CaptureMouse(void);
  HRESULT         __fastcall set_CaptureMouse(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderParentBackground(void);
  HRESULT         __fastcall set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSplit(void);
  HRESULT         __fastcall set_AutoSplit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupBox(void);
  HRESULT         __fastcall set_GroupBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Margin(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Margin(void);
  HRESULT         __fastcall set_Margin(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginTop(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/);
  LPDISPATCH      __fastcall Get(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   unsigned_long   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_long   BevelWidth = {read = get_BevelWidth, write = set_BevelWidth};
  __property   long            BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   long            BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   LPDISPATCH      GraphFont = {read = get_GraphFont, write = set_GraphFont};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};
  __property   unsigned_short  CaptureMouse = {read = get_CaptureMouse, write = set_CaptureMouse};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    BorderParentBackground = {read = get_BorderParentBackground, write = set_BorderParentBackground};
  __property   VARIANT_BOOL    AutoSplit = {read = get_AutoSplit, write = set_AutoSplit};
  __property   VARIANT_BOOL    GroupBox = {read = get_GroupBox, write = set_GroupBox};
  __property   unsigned_long   Margin = {read = get_Margin, write = set_Margin};
  __property   unsigned_long   MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   unsigned_long   MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   unsigned_long   MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   unsigned_long   MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IFrameDispT<IFrame> IFrameDisp;

// *********************************************************************//
// DispIntf:  IForm
// Flags:     (4096) Dispatchable
// GUID:      {044B381D-C581-4B9E-9C95-08B66B38468F}
// *********************************************************************//
template<class T>
class IFormDispT : public TAutoDriver<IForm>
{
public:
  IFormDispT(){}

  IFormDispT(IForm *pintf)
  {
    TAutoDriver<IForm>::Bind(pintf, false);
  }

  IFormDispT(IFormPtr pintf)
  {
    TAutoDriver<IForm>::Bind(pintf, true);
  }

  IFormDispT& operator=(IForm *pintf)
  {
    TAutoDriver<IForm>::Bind(pintf, false);
    return *this;
  }

  IFormDispT& operator=(IFormPtr pintf)
  {
    TAutoDriver<IForm>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Form));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Form);
  }

  HRESULT         __fastcall set_Icon(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Minimize();
  HRESULT         __fastcall Restore();
  HRESULT         __fastcall Maximize();
  HRESULT         __fastcall Close();
  HRESULT         __fastcall ShowModal();
  HRESULT         __fastcall MessageBox(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                        long Flags/*[in,def,opt]*/, long* pResult/*[out,retval]*/);
  long            __fastcall MessageBox(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                        long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall ColorDialog(unsigned_long StartColor/*[in,def,opt]*/, 
                                         unsigned_long Flags/*[in,def,opt]*/, 
                                         unsigned_long* pColor/*[out,retval]*/);
  unsigned_long   __fastcall ColorDialog(unsigned_long StartColor/*[in,def,opt]*/, 
                                         unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall FontDialog(LPDISPATCH StartValue/*[in]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/, 
                                        LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall FontDialog(LPDISPATCH StartValue/*[in]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall OpenDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                        BSTR StartFile/*[in,def,opt]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/, 
                                        BSTR* pFileName/*[out,retval]*/);
  BSTR            __fastcall OpenDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                        BSTR StartFile/*[in,def,opt]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall SaveDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                        BSTR StartFile/*[in,def,opt]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/, 
                                        BSTR* pFileName/*[out,retval]*/);
  BSTR            __fastcall SaveDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                        BSTR StartFile/*[in,def,opt]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall SelectFolderDialog(BSTR Title/*[in]*/, 
                                                unsigned_long Flags/*[in,def,opt]*/, 
                                                BSTR* pFolder/*[out,retval]*/);
  BSTR            __fastcall SelectFolderDialog(BSTR Title/*[in]*/, 
                                                unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall PrintDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                         unsigned_short MinPage/*[in,def,opt]*/, 
                                         unsigned_short MaxPage/*[in,def,opt]*/, 
                                         LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall PrintDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                         unsigned_short MinPage/*[in,def,opt]*/, 
                                         unsigned_short MaxPage/*[in,def,opt]*/);
  HRESULT         __fastcall PrinterSetupDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                                LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall PrinterSetupDialog(unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall PageSetupDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                             LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall PageSetupDialog(unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                              unsigned_long Flags/*[in,def,opt]*/, 
                                              LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                              unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                 BSTR ReplaceText/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/, 
                                                 LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                 BSTR ReplaceText/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFontDialog(LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFontDialog(void);
  HRESULT         __fastcall CreateColorDialog(LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateColorDialog(void);
  HRESULT         __fastcall CreateOpenDialog(LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateOpenDialog(void);
  HRESULT         __fastcall CreateSaveDialog(LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSaveDialog(void);
  HRESULT         __fastcall CreateSelectFolderDialog(LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSelectFolderDialog(void);
  HRESULT         __fastcall CreateForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDialogForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDialogForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMessageDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                                 LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMessageDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTaskDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                              LPDISPATCH* pResult/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTaskDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/);
  HRESULT         __fastcall get_Menu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Menu(void);
  HRESULT         __fastcall set_Menu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Menu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MaximizeBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaximizeBox(void);
  HRESULT         __fastcall set_MaximizeBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MinimizeBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MinimizeBox(void);
  HRESULT         __fastcall set_MinimizeBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ControlBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ControlBox(void);
  HRESULT         __fastcall set_ControlBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SizeGrip(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SizeGrip(void);
  HRESULT         __fastcall set_SizeGrip(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TopMost(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TopMost(void);
  HRESULT         __fastcall set_TopMost(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ToolWindow(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ToolWindow(void);
  HRESULT         __fastcall set_ToolWindow(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Caption(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AcceptButton(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_AcceptButton(void);
  HRESULT         __fastcall set_AcceptButton(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_AcceptButton(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_CancelButton(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CancelButton(void);
  HRESULT         __fastcall set_CancelButton(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_CancelButton(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_HelpButton(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_HelpButton(void);
  HRESULT         __fastcall set_HelpButton(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_HelpButton(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ActiveControl(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveControl(void);
  HRESULT         __fastcall set_ActiveControl(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_ActiveControl(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_CanClose(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanClose(void);
  HRESULT         __fastcall set_CanClose(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_Region(unsigned_long Param1/*[in]*/);
  HRESULT         __fastcall get_TaskBar(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_TaskBar(void);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Foreground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Foreground(void);
  HRESULT         __fastcall set_Foreground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_OnCloseQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnClose(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnActiveControlChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHitTest(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHint(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMinimize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMaximize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnRestore(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnCopyData(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnActivate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnterSizeMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnExitSizeMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStatusBar(void);
  HRESULT         __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/);
  HRESULT         __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/);
  HRESULT         __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitter(unsigned_short Align/*[in]*/);
  HRESULT         __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/);
  HRESULT         __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/
                                                , long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/
                                  , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/);
  HRESULT         __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/);
  HRESULT         __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/);
  HRESULT         __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/);
  HRESULT         __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/);
  HRESULT         __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/);
  HRESULT         __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/);
  HRESULT         __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/
                                 , long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/);
  HRESULT         __fastcall Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Polygon(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/);
  HRESULT         __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/);
  HRESULT         __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_BorderWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BevelWidth(void);
  HRESULT         __fastcall set_BevelWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelInner(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(long pVal/*[in]*/);
  HRESULT         __fastcall get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GraphFont(void);
  HRESULT         __fastcall set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_CaptureMouse(void);
  HRESULT         __fastcall set_CaptureMouse(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderParentBackground(void);
  HRESULT         __fastcall set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSplit(void);
  HRESULT         __fastcall set_AutoSplit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupBox(void);
  HRESULT         __fastcall set_GroupBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Margin(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Margin(void);
  HRESULT         __fastcall set_Margin(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginTop(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/);
  LPDISPATCH      __fastcall Get(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Menu = {read = get_Menu, write = set_Menu};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   VARIANT_BOOL    MaximizeBox = {read = get_MaximizeBox, write = set_MaximizeBox};
  __property   VARIANT_BOOL    MinimizeBox = {read = get_MinimizeBox, write = set_MinimizeBox};
  __property   VARIANT_BOOL    ControlBox = {read = get_ControlBox, write = set_ControlBox};
  __property   VARIANT_BOOL    SizeGrip = {read = get_SizeGrip, write = set_SizeGrip};
  __property   VARIANT_BOOL    TopMost = {read = get_TopMost, write = set_TopMost};
  __property   VARIANT_BOOL    ToolWindow = {read = get_ToolWindow, write = set_ToolWindow};
  __property   VARIANT_BOOL    Caption = {read = get_Caption, write = set_Caption};
  __property   LPDISPATCH      AcceptButton = {read = get_AcceptButton, write = set_AcceptButton};
  __property   LPDISPATCH      CancelButton = {read = get_CancelButton, write = set_CancelButton};
  __property   LPDISPATCH      HelpButton = {read = get_HelpButton, write = set_HelpButton};
  __property   LPDISPATCH      ActiveControl = {read = get_ActiveControl, write = set_ActiveControl};
  __property   VARIANT_BOOL    CanClose = {read = get_CanClose, write = set_CanClose};
  __property   unsigned_long   Region = {write = set_Region};
  __property   LPDISPATCH      TaskBar = {read = get_TaskBar};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   VARIANT_BOOL    Foreground = {read = get_Foreground, write = set_Foreground};

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   unsigned_long   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_long   BevelWidth = {read = get_BevelWidth, write = set_BevelWidth};
  __property   long            BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   long            BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   LPDISPATCH      GraphFont = {read = get_GraphFont, write = set_GraphFont};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};
  __property   unsigned_short  CaptureMouse = {read = get_CaptureMouse, write = set_CaptureMouse};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    BorderParentBackground = {read = get_BorderParentBackground, write = set_BorderParentBackground};
  __property   VARIANT_BOOL    AutoSplit = {read = get_AutoSplit, write = set_AutoSplit};
  __property   VARIANT_BOOL    GroupBox = {read = get_GroupBox, write = set_GroupBox};
  __property   unsigned_long   Margin = {read = get_Margin, write = set_Margin};
  __property   unsigned_long   MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   unsigned_long   MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   unsigned_long   MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   unsigned_long   MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IFormDispT<IForm> IFormDisp;

// *********************************************************************//
// DispIntf:  ICollection
// Flags:     (4096) Dispatchable
// GUID:      {92BEFD16-E781-484B-BC2D-F3B5E5DA2CC5}
// *********************************************************************//
template<class T>
class ICollectionDispT : public TAutoDriver<ICollection>
{
public:
  ICollectionDispT(){}

  ICollectionDispT(ICollection *pintf)
  {
    TAutoDriver<ICollection>::Bind(pintf, false);
  }

  ICollectionDispT(ICollectionPtr pintf)
  {
    TAutoDriver<ICollection>::Bind(pintf, true);
  }

  ICollectionDispT& operator=(ICollection *pintf)
  {
    TAutoDriver<ICollection>::Bind(pintf, false);
    return *this;
  }

  ICollectionDispT& operator=(ICollectionPtr pintf)
  {
    TAutoDriver<ICollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Collection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Collection);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ICollectionDispT<ICollection> ICollectionDisp;

// *********************************************************************//
// DispIntf:  IStringCollection
// Flags:     (4096) Dispatchable
// GUID:      {A68CF60C-30F0-4A23-B592-3CB23708733A}
// *********************************************************************//
template<class T>
class IStringCollectionDispT : public TAutoDriver<IStringCollection>
{
public:
  IStringCollectionDispT(){}

  IStringCollectionDispT(IStringCollection *pintf)
  {
    TAutoDriver<IStringCollection>::Bind(pintf, false);
  }

  IStringCollectionDispT(IStringCollectionPtr pintf)
  {
    TAutoDriver<IStringCollection>::Bind(pintf, true);
  }

  IStringCollectionDispT& operator=(IStringCollection *pintf)
  {
    TAutoDriver<IStringCollection>::Bind(pintf, false);
    return *this;
  }

  IStringCollectionDispT& operator=(IStringCollectionPtr pintf)
  {
    TAutoDriver<IStringCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StringCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StringCollection);
  }

  HRESULT         __fastcall Add(BSTR Value/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IStringCollectionDispT<IStringCollection> IStringCollectionDisp;

// *********************************************************************//
// DispIntf:  IImageList
// Flags:     (4096) Dispatchable
// GUID:      {68343C86-0240-44FD-A24F-5CD611E0A33F}
// *********************************************************************//
template<class T>
class IImageListDispT : public TAutoDriver<IImageList>
{
public:
  IImageListDispT(){}

  IImageListDispT(IImageList *pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, false);
  }

  IImageListDispT(IImageListPtr pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, true);
  }

  IImageListDispT& operator=(IImageList *pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, false);
    return *this;
  }

  IImageListDispT& operator=(IImageListPtr pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ImageList));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ImageList);
  }

  HRESULT         __fastcall Load(VARIANT Image/*[in]*/);
  HRESULT         __fastcall Add(VARIANT Image/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall get_Width(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_BitsPerPixel(long* pVal/*[out,retval]*/);
  long            __fastcall get_BitsPerPixel(void);
  HRESULT         __fastcall set_BitsPerPixel(long pVal/*[in]*/);
  HRESULT         __fastcall get_References(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_References(void);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);

  __property   unsigned_long   Width = {read = get_Width, write = set_Width};
  __property   unsigned_long   Height = {read = get_Height, write = set_Height};
  __property   long            Count = {read = get_Count};
  __property   long            BitsPerPixel = {read = get_BitsPerPixel, write = set_BitsPerPixel};
  __property   LPDISPATCH      References = {read = get_References};
  __property   LPDISPATCH      Design = {read = get_Design};
};
typedef IImageListDispT<IImageList> IImageListDisp;

// *********************************************************************//
// DispIntf:  IGraphicObject
// Flags:     (4096) Dispatchable
// GUID:      {09866D76-9782-4FD2-BA16-C469A06499C1}
// *********************************************************************//
template<class T>
class IGraphicObjectDispT : public TAutoDriver<IGraphicObject>
{
public:
  IGraphicObjectDispT(){}

  IGraphicObjectDispT(IGraphicObject *pintf)
  {
    TAutoDriver<IGraphicObject>::Bind(pintf, false);
  }

  IGraphicObjectDispT(IGraphicObjectPtr pintf)
  {
    TAutoDriver<IGraphicObject>::Bind(pintf, true);
  }

  IGraphicObjectDispT& operator=(IGraphicObject *pintf)
  {
    TAutoDriver<IGraphicObject>::Bind(pintf, false);
    return *this;
  }

  IGraphicObjectDispT& operator=(IGraphicObjectPtr pintf)
  {
    TAutoDriver<IGraphicObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Default();

  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
};
typedef IGraphicObjectDispT<IGraphicObject> IGraphicObjectDisp;

// *********************************************************************//
// DispIntf:  IPen
// Flags:     (4096) Dispatchable
// GUID:      {A6BFFF0E-7526-495A-AEA9-7BE6005184D7}
// *********************************************************************//
template<class T>
class IPenDispT : public TAutoDriver<IPen>
{
public:
  IPenDispT(){}

  IPenDispT(IPen *pintf)
  {
    TAutoDriver<IPen>::Bind(pintf, false);
  }

  IPenDispT(IPenPtr pintf)
  {
    TAutoDriver<IPen>::Bind(pintf, true);
  }

  IPenDispT& operator=(IPen *pintf)
  {
    TAutoDriver<IPen>::Bind(pintf, false);
    return *this;
  }

  IPenDispT& operator=(IPenPtr pintf)
  {
    TAutoDriver<IPen>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Pen));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Pen);
  }

  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Style(long* pVal/*[out,retval]*/);
  long            __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(long pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Default();

  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Style = {read = get_Style, write = set_Style};

  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
};
typedef IPenDispT<IPen> IPenDisp;

// *********************************************************************//
// DispIntf:  IBrush
// Flags:     (4096) Dispatchable
// GUID:      {68FA42FE-34AC-40E9-857D-F94846E91B0A}
// *********************************************************************//
template<class T>
class IBrushDispT : public TAutoDriver<IBrush>
{
public:
  IBrushDispT(){}

  IBrushDispT(IBrush *pintf)
  {
    TAutoDriver<IBrush>::Bind(pintf, false);
  }

  IBrushDispT(IBrushPtr pintf)
  {
    TAutoDriver<IBrush>::Bind(pintf, true);
  }

  IBrushDispT& operator=(IBrush *pintf)
  {
    TAutoDriver<IBrush>::Bind(pintf, false);
    return *this;
  }

  IBrushDispT& operator=(IBrushPtr pintf)
  {
    TAutoDriver<IBrush>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Brush));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Brush);
  }

  HRESULT         __fastcall get_Style(long* pVal/*[out,retval]*/);
  long            __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(long pVal/*[in]*/);
  HRESULT         __fastcall set_Image(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_GradientColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_GradientColor(void);
  HRESULT         __fastcall set_GradientColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Default();

  __property   long            Style = {read = get_Style, write = set_Style};
  __property   unsigned_long   GradientColor = {read = get_GradientColor, write = set_GradientColor};

  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
};
typedef IBrushDispT<IBrush> IBrushDisp;

// *********************************************************************//
// DispIntf:  IFontEx
// Flags:     (4096) Dispatchable
// GUID:      {FAE1D3D9-57B5-42D7-AF14-AC9ED6B31EA8}
// *********************************************************************//
template<class T>
class IFontExDispT : public TAutoDriver<IFontEx>
{
public:
  IFontExDispT(){}

  IFontExDispT(IFontEx *pintf)
  {
    TAutoDriver<IFontEx>::Bind(pintf, false);
  }

  IFontExDispT(IFontExPtr pintf)
  {
    TAutoDriver<IFontEx>::Bind(pintf, true);
  }

  IFontExDispT& operator=(IFontEx *pintf)
  {
    TAutoDriver<IFontEx>::Bind(pintf, false);
    return *this;
  }

  IFontExDispT& operator=(IFontExPtr pintf)
  {
    TAutoDriver<IFontEx>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Font));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Font);
  }

  HRESULT         __fastcall get_Italic(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Italic(void);
  HRESULT         __fastcall set_Italic(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Underline(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Underline(void);
  HRESULT         __fastcall set_Underline(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Strikethrough(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Strikethrough(void);
  HRESULT         __fastcall set_Strikethrough(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Bold(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT         __fastcall set_Bold(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Weight(short* pVal/*[out,retval]*/);
  short           __fastcall get_Weight(void);
  HRESULT         __fastcall set_Weight(short pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Size(CURRENCY* pVal/*[out,retval]*/);
  CURRENCY        __fastcall get_Size(void);
  HRESULT         __fastcall set_Size(CURRENCY pVal/*[in]*/);
  HRESULT         __fastcall get_CharSet(short* pVal/*[out,retval]*/);
  short           __fastcall get_CharSet(void);
  HRESULT         __fastcall set_CharSet(short pVal/*[in]*/);
  HRESULT         __fastcall get_Angle(long* pVal/*[out,retval]*/);
  long            __fastcall get_Angle(void);
  HRESULT         __fastcall set_Angle(long pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Default();

  __property   VARIANT_BOOL    Italic = {read = get_Italic, write = set_Italic};
  __property   VARIANT_BOOL    Underline = {read = get_Underline, write = set_Underline};
  __property   VARIANT_BOOL    Strikethrough = {read = get_Strikethrough, write = set_Strikethrough};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   short           Weight = {read = get_Weight, write = set_Weight};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   CURRENCY        Size = {read = get_Size, write = set_Size};
  __property   short           CharSet = {read = get_CharSet, write = set_CharSet};
  __property   long            Angle = {read = get_Angle, write = set_Angle};

  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
};
typedef IFontExDispT<IFontEx> IFontExDisp;

// *********************************************************************//
// DispIntf:  IAction
// Flags:     (4096) Dispatchable
// GUID:      {752D00E4-9EBE-4A1A-82D8-5D62F66CB4ED}
// *********************************************************************//
template<class T>
class IActionDispT : public TAutoDriver<IAction>
{
public:
  IActionDispT(){}

  IActionDispT(IAction *pintf)
  {
    TAutoDriver<IAction>::Bind(pintf, false);
  }

  IActionDispT(IActionPtr pintf)
  {
    TAutoDriver<IAction>::Bind(pintf, true);
  }

  IActionDispT& operator=(IAction *pintf)
  {
    TAutoDriver<IAction>::Bind(pintf, false);
    return *this;
  }

  IActionDispT& operator=(IActionPtr pintf)
  {
    TAutoDriver<IAction>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Action));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Action);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall set_Item(long Index/*[in]*/, VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/);
  HRESULT         __fastcall Add(VARIANT Item/*[in]*/, VARIANT Key/*[in,opt]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(VARIANT Item/*[in]*/, VARIANT Key/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Insert(long Index/*[in]*/, VARIANT Item/*[in]*/, 
                                    VARIANT Key/*[in,opt]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Insert(long Index/*[in]*/, VARIANT Item/*[in]*/, 
                                    VARIANT Key/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall NewLine(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall NewLine(void);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CheckBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CheckBox(void);
  HRESULT         __fastcall set_CheckBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RadioCheck(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RadioCheck(void);
  HRESULT         __fastcall set_RadioCheck(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowAllUp(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowAllUp(void);
  HRESULT         __fastcall set_AllowAllUp(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Default(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Default(void);
  HRESULT         __fastcall set_Default(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Control(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Items(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Items(void);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Break(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Break(void);
  HRESULT         __fastcall set_Break(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Key(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_DismissonClick(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DismissonClick(void);
  HRESULT         __fastcall set_DismissonClick(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Noninteractive(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Noninteractive(void);
  HRESULT         __fastcall set_Noninteractive(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Nobackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Nobackground(void);
  HRESULT         __fastcall set_Nobackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_WholeDropDown(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WholeDropDown(void);
  HRESULT         __fastcall set_WholeDropDown(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall set_OnExecute(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUpdate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    CheckBox = {read = get_CheckBox, write = set_CheckBox};
  __property   VARIANT_BOOL    RadioCheck = {read = get_RadioCheck, write = set_RadioCheck};
  __property   VARIANT_BOOL    AllowAllUp = {read = get_AllowAllUp, write = set_AllowAllUp};
  __property   VARIANT_BOOL    Default = {read = get_Default, write = set_Default};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   LPDISPATCH      Items = {read = get_Items};
  __property   VARIANT_BOOL    Break = {read = get_Break, write = set_Break};
  __property   VARIANT_BOOL    DismissonClick = {read = get_DismissonClick, write = set_DismissonClick};
  __property   VARIANT_BOOL    Noninteractive = {read = get_Noninteractive, write = set_Noninteractive};
  __property   VARIANT_BOOL    Nobackground = {read = get_Nobackground, write = set_Nobackground};
  __property   VARIANT_BOOL    WholeDropDown = {read = get_WholeDropDown, write = set_WholeDropDown};
  __property   LPDISPATCH      Design = {read = get_Design};

  __property   BSTR            Type = {read = get_Type};
};
typedef IActionDispT<IAction> IActionDisp;

// *********************************************************************//
// DispIntf:  IListControlItem
// Flags:     (4096) Dispatchable
// GUID:      {D5F460EE-3010-4A7A-AAD2-FA3F768BAC57}
// *********************************************************************//
template<class T>
class IListControlItemDispT : public TAutoDriver<IListControlItem>
{
public:
  IListControlItemDispT(){}

  IListControlItemDispT(IListControlItem *pintf)
  {
    TAutoDriver<IListControlItem>::Bind(pintf, false);
  }

  IListControlItemDispT(IListControlItemPtr pintf)
  {
    TAutoDriver<IListControlItem>::Bind(pintf, true);
  }

  IListControlItemDispT& operator=(IListControlItem *pintf)
  {
    TAutoDriver<IListControlItem>::Bind(pintf, false);
    return *this;
  }

  IListControlItemDispT& operator=(IListControlItemPtr pintf)
  {
    TAutoDriver<IListControlItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListControlItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListControlItem);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_Index(long* pVal/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_TextBkColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TextBkColor(void);
  HRESULT         __fastcall set_TextBkColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_ItemData(void);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Indent(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Indent(void);
  HRESULT         __fastcall set_Indent(unsigned_long pVal/*[in]*/);

  __property   BSTR            Text = {read = get_Text};
  __property   long            ImageIndex = {read = get_ImageIndex};
  __property   VARIANT_BOOL    Selected = {read = get_Selected};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            Index = {read = get_Index};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   unsigned_long   TextBkColor = {read = get_TextBkColor, write = set_TextBkColor};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   unsigned_long   Indent = {read = get_Indent, write = set_Indent};
};
typedef IListControlItemDispT<IListControlItem> IListControlItemDisp;

// *********************************************************************//
// DispIntf:  IStringsControl
// Flags:     (4096) Dispatchable
// GUID:      {A1E967E4-0CEB-436B-91C0-F6A42F8D8733}
// *********************************************************************//
template<class T>
class IStringsControlDispT : public TAutoDriver<IStringsControl>
{
public:
  IStringsControlDispT(){}

  IStringsControlDispT(IStringsControl *pintf)
  {
    TAutoDriver<IStringsControl>::Bind(pintf, false);
  }

  IStringsControlDispT(IStringsControlPtr pintf)
  {
    TAutoDriver<IStringsControl>::Bind(pintf, true);
  }

  IStringsControlDispT& operator=(IStringsControl *pintf)
  {
    TAutoDriver<IStringsControl>::Bind(pintf, false);
    return *this;
  }

  IStringsControlDispT& operator=(IStringsControlPtr pintf)
  {
    TAutoDriver<IStringsControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_TopIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopIndex(void);
  HRESULT         __fastcall set_TopIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, BSTR* pvar/*[out,retval]*/);
  BSTR            __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR Item/*[in]*/, long* pItemIndex/*[out,retval]*/);
  long            __fastcall Add(BSTR Item/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/, 
                                    long* pItemIndex/*[out,retval]*/);
  long            __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall ExChange(long A/*[in]*/, long B/*[in]*/);
  HRESULT         __fastcall Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/);
  HRESULT         __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/, 
                                  long* pItemIndex/*[out,retval]*/);
  long            __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            TopIndex = {read = get_TopIndex, write = set_TopIndex};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IStringsControlDispT<IStringsControl> IStringsControlDisp;

// *********************************************************************//
// DispIntf:  IListControl
// Flags:     (4096) Dispatchable
// GUID:      {B61BDF00-553F-401B-948C-2F7A5FDCBBBB}
// *********************************************************************//
template<class T>
class IListControlDispT : public TAutoDriver<IListControl>
{
public:
  IListControlDispT(){}

  IListControlDispT(IListControl *pintf)
  {
    TAutoDriver<IListControl>::Bind(pintf, false);
  }

  IListControlDispT(IListControlPtr pintf)
  {
    TAutoDriver<IListControl>::Bind(pintf, true);
  }

  IListControlDispT& operator=(IListControl *pintf)
  {
    TAutoDriver<IListControl>::Bind(pintf, false);
    return *this;
  }

  IListControlDispT& operator=(IListControlPtr pintf)
  {
    TAutoDriver<IListControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ItemIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemIndex(void);
  HRESULT         __fastcall set_ItemIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemHeight(void);
  HRESULT         __fastcall set_ItemHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemData(long Index/*[in]*/, VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT         __fastcall set_ItemData(long Index/*[in]*/, VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Sorted(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Sorted(void);
  HRESULT         __fastcall set_Sorted(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IntegralHeight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IntegralHeight(void);
  HRESULT         __fastcall set_IntegralHeight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HorizontalExtent(long* pVal/*[out,retval]*/);
  long            __fastcall get_HorizontalExtent(void);
  HRESULT         __fastcall set_HorizontalExtent(long pVal/*[in]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(long Index/*[in]*/);
  HRESULT         __fastcall set_ImageIndex(long Index/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDraw(void);
  HRESULT         __fastcall set_CustomDraw(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_OnDrawItem(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_BackgroundImage(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_CustomDrawSelection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDrawSelection(void);
  HRESULT         __fastcall set_CustomDrawSelection(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TopIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopIndex(void);
  HRESULT         __fastcall set_TopIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, BSTR* pvar/*[out,retval]*/);
  BSTR            __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR Item/*[in]*/, long* pItemIndex/*[out,retval]*/);
  long            __fastcall Add(BSTR Item/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/, 
                                    long* pItemIndex/*[out,retval]*/);
  long            __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall ExChange(long A/*[in]*/, long B/*[in]*/);
  HRESULT         __fastcall Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/);
  HRESULT         __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/, 
                                  long* pItemIndex/*[out,retval]*/);
  long            __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            ItemIndex = {read = get_ItemIndex, write = set_ItemIndex};
  __property   long            ItemHeight = {read = get_ItemHeight, write = set_ItemHeight};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   VARIANT_BOOL    IntegralHeight = {read = get_IntegralHeight, write = set_IntegralHeight};
  __property   long            HorizontalExtent = {read = get_HorizontalExtent, write = set_HorizontalExtent};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   VARIANT_BOOL    CustomDraw = {read = get_CustomDraw, write = set_CustomDraw};
  __property   VARIANT_BOOL    CustomDrawSelection = {read = get_CustomDrawSelection, write = set_CustomDrawSelection};

  __property   long            TopIndex = {read = get_TopIndex, write = set_TopIndex};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IListControlDispT<IListControl> IListControlDisp;

// *********************************************************************//
// DispIntf:  IListBox
// Flags:     (4096) Dispatchable
// GUID:      {A33F2256-EF4D-409B-B1FD-0BE23F8F8C2D}
// *********************************************************************//
template<class T>
class IListBoxDispT : public TAutoDriver<IListBox>
{
public:
  IListBoxDispT(){}

  IListBoxDispT(IListBox *pintf)
  {
    TAutoDriver<IListBox>::Bind(pintf, false);
  }

  IListBoxDispT(IListBoxPtr pintf)
  {
    TAutoDriver<IListBox>::Bind(pintf, true);
  }

  IListBoxDispT& operator=(IListBox *pintf)
  {
    TAutoDriver<IListBox>::Bind(pintf, false);
    return *this;
  }

  IListBoxDispT& operator=(IListBoxPtr pintf)
  {
    TAutoDriver<IListBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListBox);
  }

  HRESULT         __fastcall get_Selected(long Index/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(long Index/*[in]*/);
  HRESULT         __fastcall set_Selected(long Index/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SelCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelCount(void);
  HRESULT         __fastcall get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_MultiSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ExtendedSelect(void);
  HRESULT         __fastcall set_ExtendedSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ColumnCount(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_ColumnCount(void);
  HRESULT         __fastcall set_ColumnCount(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ScrollBars(void);
  HRESULT         __fastcall set_ScrollBars(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall ItemFromPoint(unsigned_short x/*[in]*/, unsigned_short y/*[in]*/, 
                                           long* pIndex/*[out,retval]*/);
  long            __fastcall ItemFromPoint(unsigned_short x/*[in]*/, unsigned_short y/*[in]*/);
  HRESULT         __fastcall get_ItemIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemIndex(void);
  HRESULT         __fastcall set_ItemIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemHeight(void);
  HRESULT         __fastcall set_ItemHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemData(long Index/*[in]*/, VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT         __fastcall set_ItemData(long Index/*[in]*/, VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Sorted(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Sorted(void);
  HRESULT         __fastcall set_Sorted(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IntegralHeight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IntegralHeight(void);
  HRESULT         __fastcall set_IntegralHeight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HorizontalExtent(long* pVal/*[out,retval]*/);
  long            __fastcall get_HorizontalExtent(void);
  HRESULT         __fastcall set_HorizontalExtent(long pVal/*[in]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(long Index/*[in]*/);
  HRESULT         __fastcall set_ImageIndex(long Index/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDraw(void);
  HRESULT         __fastcall set_CustomDraw(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_OnDrawItem(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_BackgroundImage(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_CustomDrawSelection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDrawSelection(void);
  HRESULT         __fastcall set_CustomDrawSelection(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TopIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopIndex(void);
  HRESULT         __fastcall set_TopIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, BSTR* pvar/*[out,retval]*/);
  BSTR            __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR Item/*[in]*/, long* pItemIndex/*[out,retval]*/);
  long            __fastcall Add(BSTR Item/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/, 
                                    long* pItemIndex/*[out,retval]*/);
  long            __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall ExChange(long A/*[in]*/, long B/*[in]*/);
  HRESULT         __fastcall Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/);
  HRESULT         __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/, 
                                  long* pItemIndex/*[out,retval]*/);
  long            __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            SelCount = {read = get_SelCount};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   VARIANT_BOOL    ExtendedSelect = {read = get_ExtendedSelect, write = set_ExtendedSelect};
  __property   unsigned_short  ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   unsigned_short  ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   unsigned_long   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};

  __property   long            ItemIndex = {read = get_ItemIndex, write = set_ItemIndex};
  __property   long            ItemHeight = {read = get_ItemHeight, write = set_ItemHeight};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   VARIANT_BOOL    IntegralHeight = {read = get_IntegralHeight, write = set_IntegralHeight};
  __property   long            HorizontalExtent = {read = get_HorizontalExtent, write = set_HorizontalExtent};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   VARIANT_BOOL    CustomDraw = {read = get_CustomDraw, write = set_CustomDraw};
  __property   VARIANT_BOOL    CustomDrawSelection = {read = get_CustomDrawSelection, write = set_CustomDrawSelection};

  __property   long            TopIndex = {read = get_TopIndex, write = set_TopIndex};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IListBoxDispT<IListBox> IListBoxDisp;

// *********************************************************************//
// DispIntf:  IComboBox
// Flags:     (4096) Dispatchable
// GUID:      {AA09373F-278A-49DF-9F40-74C5B92ABB6F}
// *********************************************************************//
template<class T>
class IComboBoxDispT : public TAutoDriver<IComboBox>
{
public:
  IComboBoxDispT(){}

  IComboBoxDispT(IComboBox *pintf)
  {
    TAutoDriver<IComboBox>::Bind(pintf, false);
  }

  IComboBoxDispT(IComboBoxPtr pintf)
  {
    TAutoDriver<IComboBox>::Bind(pintf, true);
  }

  IComboBoxDispT& operator=(IComboBox *pintf)
  {
    TAutoDriver<IComboBox>::Bind(pintf, false);
    return *this;
  }

  IComboBoxDispT& operator=(IComboBoxPtr pintf)
  {
    TAutoDriver<IComboBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComboBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComboBox);
  }

  HRESULT         __fastcall get_DropDownCount(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_DropDownCount(void);
  HRESULT         __fastcall set_DropDownCount(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Style(long* pVal/*[out,retval]*/);
  long            __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(long pVal/*[in]*/);
  HRESULT         __fastcall get_CharCase(long* pVal/*[out,retval]*/);
  long            __fastcall get_CharCase(void);
  HRESULT         __fastcall set_CharCase(long pVal/*[in]*/);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DroppedDown(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DroppedDown(void);
  HRESULT         __fastcall set_DroppedDown(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CueBanner(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CueBanner(void);
  HRESULT         __fastcall set_CueBanner(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CueBannerAlwaysVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CueBannerAlwaysVisible(void);
  HRESULT         __fastcall set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BalloonTip(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BalloonTip(void);
  HRESULT         __fastcall set_OnDropDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_ItemIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemIndex(void);
  HRESULT         __fastcall set_ItemIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemHeight(void);
  HRESULT         __fastcall set_ItemHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemData(long Index/*[in]*/, VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT         __fastcall set_ItemData(long Index/*[in]*/, VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Sorted(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Sorted(void);
  HRESULT         __fastcall set_Sorted(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IntegralHeight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IntegralHeight(void);
  HRESULT         __fastcall set_IntegralHeight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HorizontalExtent(long* pVal/*[out,retval]*/);
  long            __fastcall get_HorizontalExtent(void);
  HRESULT         __fastcall set_HorizontalExtent(long pVal/*[in]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(long Index/*[in]*/);
  HRESULT         __fastcall set_ImageIndex(long Index/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDraw(void);
  HRESULT         __fastcall set_CustomDraw(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_OnDrawItem(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_BackgroundImage(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_CustomDrawSelection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDrawSelection(void);
  HRESULT         __fastcall set_CustomDrawSelection(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TopIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopIndex(void);
  HRESULT         __fastcall set_TopIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, BSTR* pvar/*[out,retval]*/);
  BSTR            __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR Item/*[in]*/, long* pItemIndex/*[out,retval]*/);
  long            __fastcall Add(BSTR Item/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/, 
                                    long* pItemIndex/*[out,retval]*/);
  long            __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall ExChange(long A/*[in]*/, long B/*[in]*/);
  HRESULT         __fastcall Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/);
  HRESULT         __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/, 
                                  long* pItemIndex/*[out,retval]*/);
  long            __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   DropDownCount = {read = get_DropDownCount, write = set_DropDownCount};
  __property   long            Style = {read = get_Style, write = set_Style};
  __property   long            CharCase = {read = get_CharCase, write = set_CharCase};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   VARIANT_BOOL    DroppedDown = {read = get_DroppedDown, write = set_DroppedDown};
  __property   BSTR            CueBanner = {read = get_CueBanner, write = set_CueBanner};
  __property   VARIANT_BOOL    CueBannerAlwaysVisible = {read = get_CueBannerAlwaysVisible, write = set_CueBannerAlwaysVisible};
  __property   LPDISPATCH      BalloonTip = {read = get_BalloonTip};

  __property   long            ItemIndex = {read = get_ItemIndex, write = set_ItemIndex};
  __property   long            ItemHeight = {read = get_ItemHeight, write = set_ItemHeight};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   VARIANT_BOOL    IntegralHeight = {read = get_IntegralHeight, write = set_IntegralHeight};
  __property   long            HorizontalExtent = {read = get_HorizontalExtent, write = set_HorizontalExtent};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   VARIANT_BOOL    CustomDraw = {read = get_CustomDraw, write = set_CustomDraw};
  __property   VARIANT_BOOL    CustomDrawSelection = {read = get_CustomDrawSelection, write = set_CustomDrawSelection};

  __property   long            TopIndex = {read = get_TopIndex, write = set_TopIndex};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IComboBoxDispT<IComboBox> IComboBoxDisp;

// *********************************************************************//
// DispIntf:  IEdit
// Flags:     (4096) Dispatchable
// GUID:      {1D2D9535-7884-49AB-90C2-49955A388137}
// *********************************************************************//
template<class T>
class IEditDispT : public TAutoDriver<IEdit>
{
public:
  IEditDispT(){}

  IEditDispT(IEdit *pintf)
  {
    TAutoDriver<IEdit>::Bind(pintf, false);
  }

  IEditDispT(IEditPtr pintf)
  {
    TAutoDriver<IEdit>::Bind(pintf, true);
  }

  IEditDispT& operator=(IEdit *pintf)
  {
    TAutoDriver<IEdit>::Bind(pintf, false);
    return *this;
  }

  IEditDispT& operator=(IEditPtr pintf)
  {
    TAutoDriver<IEdit>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Edit));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Edit);
  }

  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MaxLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT         __fastcall set_MaxLength(long pVal/*[in]*/);
  HRESULT         __fastcall get_CharCase(long* pVal/*[out,retval]*/);
  long            __fastcall get_CharCase(void);
  HRESULT         __fastcall set_CharCase(long pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordChar(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PasswordChar(void);
  HRESULT         __fastcall set_PasswordChar(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MultiLine(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiLine(void);
  HRESULT         __fastcall set_MultiLine(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ScrollBars(void);
  HRESULT         __fastcall set_ScrollBars(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Modified(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Modified(void);
  HRESULT         __fastcall set_Modified(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SelStart(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelStart(long pVal/*[in]*/);
  HRESULT         __fastcall get_SelEnd(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelEnd(void);
  HRESULT         __fastcall set_SelEnd(long pVal/*[in]*/);
  HRESULT         __fastcall get_SelLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelLength(long pVal/*[in]*/);
  HRESULT         __fastcall get_LeftMargin(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_LeftMargin(void);
  HRESULT         __fastcall set_LeftMargin(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_RightMargin(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_RightMargin(void);
  HRESULT         __fastcall set_RightMargin(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_WordWrap(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT         __fastcall set_WordWrap(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TextAlign(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_TextAlign(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall SelectAll();
  HRESULT         __fastcall ClearSelection();
  HRESULT         __fastcall ReplaceSelection(BSTR NewText/*[in]*/, 
                                              VARIANT_BOOL CanUndo/*[in,def,opt]*/);
  HRESULT         __fastcall get_CanUndo(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanUndo(void);
  HRESULT         __fastcall set_CanUndo(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CanPaste(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPaste(void);
  HRESULT         __fastcall Undo();
  HRESULT         __fastcall Cut();
  HRESULT         __fastcall Copy();
  HRESULT         __fastcall Paste();
  HRESULT         __fastcall get_DataType(long* pVal/*[out,retval]*/);
  long            __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(long pVal/*[in]*/);
  HRESULT         __fastcall get_Min(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Max(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_LineFromChar(long Index/*[in,def,opt]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_LineFromChar(long Index/*[in,def,opt]*/);
  HRESULT         __fastcall get_AcceptsReturn(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AcceptsReturn(void);
  HRESULT         __fastcall set_AcceptsReturn(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AcceptsTab(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AcceptsTab(void);
  HRESULT         __fastcall set_AcceptsTab(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoHeight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoHeight(void);
  HRESULT         __fastcall set_AutoHeight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CueBanner(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CueBanner(void);
  HRESULT         __fastcall set_CueBanner(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CueBannerAlwaysVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CueBannerAlwaysVisible(void);
  HRESULT         __fastcall set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BalloonTip(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BalloonTip(void);
  HRESULT         __fastcall get_TopIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopIndex(void);
  HRESULT         __fastcall set_TopIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, BSTR* pvar/*[out,retval]*/);
  BSTR            __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR Item/*[in]*/, long* pItemIndex/*[out,retval]*/);
  long            __fastcall Add(BSTR Item/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/, 
                                    long* pItemIndex/*[out,retval]*/);
  long            __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall ExChange(long A/*[in]*/, long B/*[in]*/);
  HRESULT         __fastcall Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/);
  HRESULT         __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/, 
                                  long* pItemIndex/*[out,retval]*/);
  long            __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            CharCase = {read = get_CharCase, write = set_CharCase};
  __property   BSTR            PasswordChar = {read = get_PasswordChar, write = set_PasswordChar};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   VARIANT_BOOL    MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   unsigned_long   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    Modified = {read = get_Modified, write = set_Modified};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   long            SelEnd = {read = get_SelEnd, write = set_SelEnd};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   unsigned_short  LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
  __property   unsigned_short  RightMargin = {read = get_RightMargin, write = set_RightMargin};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   unsigned_short  TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo, write = set_CanUndo};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   long            DataType = {read = get_DataType, write = set_DataType};
  __property   VARIANT_BOOL    AcceptsReturn = {read = get_AcceptsReturn, write = set_AcceptsReturn};
  __property   VARIANT_BOOL    AcceptsTab = {read = get_AcceptsTab, write = set_AcceptsTab};
  __property   VARIANT_BOOL    AutoHeight = {read = get_AutoHeight, write = set_AutoHeight};
  __property   BSTR            CueBanner = {read = get_CueBanner, write = set_CueBanner};
  __property   VARIANT_BOOL    CueBannerAlwaysVisible = {read = get_CueBannerAlwaysVisible, write = set_CueBannerAlwaysVisible};
  __property   LPDISPATCH      BalloonTip = {read = get_BalloonTip};

  __property   long            TopIndex = {read = get_TopIndex, write = set_TopIndex};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IEditDispT<IEdit> IEditDisp;

// *********************************************************************//
// DispIntf:  IButtonControl
// Flags:     (4096) Dispatchable
// GUID:      {CE6D21C9-132F-4990-ACB2-4C68A1D46BA2}
// *********************************************************************//
template<class T>
class IButtonControlDispT : public TAutoDriver<IButtonControl>
{
public:
  IButtonControlDispT(){}

  IButtonControlDispT(IButtonControl *pintf)
  {
    TAutoDriver<IButtonControl>::Bind(pintf, false);
  }

  IButtonControlDispT(IButtonControlPtr pintf)
  {
    TAutoDriver<IButtonControl>::Bind(pintf, true);
  }

  IButtonControlDispT& operator=(IButtonControl *pintf)
  {
    TAutoDriver<IButtonControl>::Bind(pintf, false);
    return *this;
  }

  IButtonControlDispT& operator=(IButtonControlPtr pintf)
  {
    TAutoDriver<IButtonControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Flat(void);
  HRESULT         __fastcall set_Flat(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Flat = {read = get_Flat, write = set_Flat};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IButtonControlDispT<IButtonControl> IButtonControlDisp;

// *********************************************************************//
// DispIntf:  IButton
// Flags:     (4096) Dispatchable
// GUID:      {31DC6745-8E8E-4F4A-9F17-36651B160FE9}
// *********************************************************************//
template<class T>
class IButtonDispT : public TAutoDriver<IButton>
{
public:
  IButtonDispT(){}

  IButtonDispT(IButton *pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, false);
  }

  IButtonDispT(IButtonPtr pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, true);
  }

  IButtonDispT& operator=(IButton *pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, false);
    return *this;
  }

  IButtonDispT& operator=(IButtonPtr pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Button));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Button);
  }

  HRESULT         __fastcall get_Default(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Default(void);
  HRESULT         __fastcall set_Default(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Cancel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Cancel(void);
  HRESULT         __fastcall set_Cancel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CommandLinkButton(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CommandLinkButton(void);
  HRESULT         __fastcall set_CommandLinkButton(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Note(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Note(void);
  HRESULT         __fastcall set_Note(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Shield(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Shield(void);
  HRESULT         __fastcall set_Shield(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Flat(void);
  HRESULT         __fastcall set_Flat(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Default = {read = get_Default, write = set_Default};
  __property   VARIANT_BOOL    Cancel = {read = get_Cancel, write = set_Cancel};
  __property   VARIANT_BOOL    CommandLinkButton = {read = get_CommandLinkButton, write = set_CommandLinkButton};
  __property   BSTR            Note = {read = get_Note, write = set_Note};
  __property   VARIANT_BOOL    Shield = {read = get_Shield, write = set_Shield};

  __property   VARIANT_BOOL    Flat = {read = get_Flat, write = set_Flat};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IButtonDispT<IButton> IButtonDisp;

// *********************************************************************//
// DispIntf:  ICheckBox
// Flags:     (4096) Dispatchable
// GUID:      {A924A1F1-1896-462D-98E9-873E721811CE}
// *********************************************************************//
template<class T>
class ICheckBoxDispT : public TAutoDriver<ICheckBox>
{
public:
  ICheckBoxDispT(){}

  ICheckBoxDispT(ICheckBox *pintf)
  {
    TAutoDriver<ICheckBox>::Bind(pintf, false);
  }

  ICheckBoxDispT(ICheckBoxPtr pintf)
  {
    TAutoDriver<ICheckBox>::Bind(pintf, true);
  }

  ICheckBoxDispT& operator=(ICheckBox *pintf)
  {
    TAutoDriver<ICheckBox>::Bind(pintf, false);
    return *this;
  }

  ICheckBoxDispT& operator=(ICheckBoxPtr pintf)
  {
    TAutoDriver<ICheckBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CheckBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CheckBox);
  }

  HRESULT         __fastcall get_State(long* pVal/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall set_State(long pVal/*[in]*/);
  HRESULT         __fastcall get_AllowGrayed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowGrayed(void);
  HRESULT         __fastcall set_AllowGrayed(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Flat(void);
  HRESULT         __fastcall set_Flat(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            State = {read = get_State, write = set_State};
  __property   VARIANT_BOOL    AllowGrayed = {read = get_AllowGrayed, write = set_AllowGrayed};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};

  __property   VARIANT_BOOL    Flat = {read = get_Flat, write = set_Flat};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ICheckBoxDispT<ICheckBox> ICheckBoxDisp;

// *********************************************************************//
// DispIntf:  IRadioButton
// Flags:     (4096) Dispatchable
// GUID:      {E4D0E174-9AB6-4BDF-9186-8905F5B54AAA}
// *********************************************************************//
template<class T>
class IRadioButtonDispT : public TAutoDriver<IRadioButton>
{
public:
  IRadioButtonDispT(){}

  IRadioButtonDispT(IRadioButton *pintf)
  {
    TAutoDriver<IRadioButton>::Bind(pintf, false);
  }

  IRadioButtonDispT(IRadioButtonPtr pintf)
  {
    TAutoDriver<IRadioButton>::Bind(pintf, true);
  }

  IRadioButtonDispT& operator=(IRadioButton *pintf)
  {
    TAutoDriver<IRadioButton>::Bind(pintf, false);
    return *this;
  }

  IRadioButtonDispT& operator=(IRadioButtonPtr pintf)
  {
    TAutoDriver<IRadioButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RadioButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RadioButton);
  }

  HRESULT         __fastcall get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Group(long* pVal/*[out,retval]*/);
  long            __fastcall get_Group(void);
  HRESULT         __fastcall set_Group(long pVal/*[in]*/);
  HRESULT         __fastcall get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Flat(void);
  HRESULT         __fastcall set_Flat(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   long            Group = {read = get_Group, write = set_Group};

  __property   VARIANT_BOOL    Flat = {read = get_Flat, write = set_Flat};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IRadioButtonDispT<IRadioButton> IRadioButtonDisp;

// *********************************************************************//
// DispIntf:  IStatusItem
// Flags:     (4096) Dispatchable
// GUID:      {80508CDF-06EA-43C5-B41E-F2F97D516151}
// *********************************************************************//
template<class T>
class IStatusItemDispT : public TAutoDriver<IStatusItem>
{
public:
  IStatusItemDispT(){}

  IStatusItemDispT(IStatusItem *pintf)
  {
    TAutoDriver<IStatusItem>::Bind(pintf, false);
  }

  IStatusItemDispT(IStatusItemPtr pintf)
  {
    TAutoDriver<IStatusItem>::Bind(pintf, true);
  }

  IStatusItemDispT& operator=(IStatusItem *pintf)
  {
    TAutoDriver<IStatusItem>::Bind(pintf, false);
    return *this;
  }

  IStatusItemDispT& operator=(IStatusItemPtr pintf)
  {
    TAutoDriver<IStatusItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StatusItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StatusItem);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Border(long* pVal/*[out,retval]*/);
  long            __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(long pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   LPDISPATCH      Design = {read = get_Design};
};
typedef IStatusItemDispT<IStatusItem> IStatusItemDisp;

// *********************************************************************//
// DispIntf:  IStatusBar
// Flags:     (4096) Dispatchable
// GUID:      {F61D55A1-ECC9-484B-A635-F0C5E71A8C29}
// *********************************************************************//
template<class T>
class IStatusBarDispT : public TAutoDriver<IStatusBar>
{
public:
  IStatusBarDispT(){}

  IStatusBarDispT(IStatusBar *pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, false);
  }

  IStatusBarDispT(IStatusBarPtr pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, true);
  }

  IStatusBarDispT& operator=(IStatusBar *pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, false);
    return *this;
  }

  IStatusBarDispT& operator=(IStatusBarPtr pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StatusBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StatusBar);
  }

  HRESULT         __fastcall get_Simple(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Simple(void);
  HRESULT         __fastcall set_Simple(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SizeGrip(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SizeGrip(void);
  HRESULT         __fastcall set_SizeGrip(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/);
  HRESULT         __fastcall Add(long Width/*[in]*/, long Border/*[in,def,opt]*/, 
                                 LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(long Width/*[in]*/, long Border/*[in,def,opt]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Simple = {read = get_Simple, write = set_Simple};
  __property   VARIANT_BOOL    SizeGrip = {read = get_SizeGrip, write = set_SizeGrip};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IStatusBarDispT<IStatusBar> IStatusBarDisp;

// *********************************************************************//
// DispIntf:  IStatusControl
// Flags:     (4096) Dispatchable
// GUID:      {7ADA76A6-13E2-455D-8DF1-E2C980D21BF9}
// *********************************************************************//
template<class T>
class IStatusControlDispT : public TAutoDriver<IStatusControl>
{
public:
  IStatusControlDispT(){}

  IStatusControlDispT(IStatusControl *pintf)
  {
    TAutoDriver<IStatusControl>::Bind(pintf, false);
  }

  IStatusControlDispT(IStatusControlPtr pintf)
  {
    TAutoDriver<IStatusControl>::Bind(pintf, true);
  }

  IStatusControlDispT& operator=(IStatusControl *pintf)
  {
    TAutoDriver<IStatusControl>::Bind(pintf, false);
    return *this;
  }

  IStatusControlDispT& operator=(IStatusControlPtr pintf)
  {
    TAutoDriver<IStatusControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Min(long* pVal/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(long pVal/*[in]*/);
  HRESULT         __fastcall get_Max(long* pVal/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(long pVal/*[in]*/);
  HRESULT         __fastcall get_Step(long* pVal/*[out,retval]*/);
  long            __fastcall get_Step(void);
  HRESULT         __fastcall set_Step(long pVal/*[in]*/);
  HRESULT         __fastcall StepIt();
  HRESULT         __fastcall StepBy(long Delta/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Position = {read = get_Position, write = set_Position};
  __property   long            Step = {read = get_Step, write = set_Step};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IStatusControlDispT<IStatusControl> IStatusControlDisp;

// *********************************************************************//
// DispIntf:  IProgressBar
// Flags:     (4096) Dispatchable
// GUID:      {16271F21-45E5-4632-BC36-E3E429B49AD8}
// *********************************************************************//
template<class T>
class IProgressBarDispT : public TAutoDriver<IProgressBar>
{
public:
  IProgressBarDispT(){}

  IProgressBarDispT(IProgressBar *pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, false);
  }

  IProgressBarDispT(IProgressBarPtr pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, true);
  }

  IProgressBarDispT& operator=(IProgressBar *pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, false);
    return *this;
  }

  IProgressBarDispT& operator=(IProgressBarPtr pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ProgressBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ProgressBar);
  }

  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Smooth(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Smooth(void);
  HRESULT         __fastcall set_Smooth(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_State(long* pVal/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall set_State(long pVal/*[in]*/);
  HRESULT         __fastcall get_Marquee(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Marquee(void);
  HRESULT         __fastcall set_Marquee(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MarqueeActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MarqueeActive(void);
  HRESULT         __fastcall set_MarqueeActive(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MarqueeInterval(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarqueeInterval(void);
  HRESULT         __fastcall set_MarqueeInterval(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_SmoothReverse(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmoothReverse(void);
  HRESULT         __fastcall set_SmoothReverse(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BarColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BarColor(void);
  HRESULT         __fastcall set_BarColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Min(long* pVal/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(long pVal/*[in]*/);
  HRESULT         __fastcall get_Max(long* pVal/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(long pVal/*[in]*/);
  HRESULT         __fastcall get_Step(long* pVal/*[out,retval]*/);
  long            __fastcall get_Step(void);
  HRESULT         __fastcall set_Step(long pVal/*[in]*/);
  HRESULT         __fastcall StepIt();
  HRESULT         __fastcall StepBy(long Delta/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};
  __property   VARIANT_BOOL    Smooth = {read = get_Smooth, write = set_Smooth};
  __property   long            State = {read = get_State, write = set_State};
  __property   VARIANT_BOOL    Marquee = {read = get_Marquee, write = set_Marquee};
  __property   VARIANT_BOOL    MarqueeActive = {read = get_MarqueeActive, write = set_MarqueeActive};
  __property   unsigned_long   MarqueeInterval = {read = get_MarqueeInterval, write = set_MarqueeInterval};
  __property   VARIANT_BOOL    SmoothReverse = {read = get_SmoothReverse, write = set_SmoothReverse};
  __property   unsigned_long   BarColor = {read = get_BarColor, write = set_BarColor};

  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Position = {read = get_Position, write = set_Position};
  __property   long            Step = {read = get_Step, write = set_Step};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IProgressBarDispT<IProgressBar> IProgressBarDisp;

// *********************************************************************//
// DispIntf:  IScrollBar
// Flags:     (4096) Dispatchable
// GUID:      {FC140361-F789-48AD-AE2B-A4B5A2643FB0}
// *********************************************************************//
template<class T>
class IScrollBarDispT : public TAutoDriver<IScrollBar>
{
public:
  IScrollBarDispT(){}

  IScrollBarDispT(IScrollBar *pintf)
  {
    TAutoDriver<IScrollBar>::Bind(pintf, false);
  }

  IScrollBarDispT(IScrollBarPtr pintf)
  {
    TAutoDriver<IScrollBar>::Bind(pintf, true);
  }

  IScrollBarDispT& operator=(IScrollBar *pintf)
  {
    TAutoDriver<IScrollBar>::Bind(pintf, false);
    return *this;
  }

  IScrollBarDispT& operator=(IScrollBarPtr pintf)
  {
    TAutoDriver<IScrollBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ScrollBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ScrollBar);
  }

  HRESULT         __fastcall get_Page(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Page(void);
  HRESULT         __fastcall set_Page(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_SmallChange(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_SmallChange(void);
  HRESULT         __fastcall set_SmallChange(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_LargeChange(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_LargeChange(void);
  HRESULT         __fastcall set_LargeChange(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Min(long* pVal/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(long pVal/*[in]*/);
  HRESULT         __fastcall get_Max(long* pVal/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(long pVal/*[in]*/);
  HRESULT         __fastcall get_Step(long* pVal/*[out,retval]*/);
  long            __fastcall get_Step(void);
  HRESULT         __fastcall set_Step(long pVal/*[in]*/);
  HRESULT         __fastcall StepIt();
  HRESULT         __fastcall StepBy(long Delta/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Page = {read = get_Page, write = set_Page};
  __property   unsigned_long   SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   unsigned_long   LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};

  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Position = {read = get_Position, write = set_Position};
  __property   long            Step = {read = get_Step, write = set_Step};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IScrollBarDispT<IScrollBar> IScrollBarDisp;

// *********************************************************************//
// DispIntf:  ITab
// Flags:     (4096) Dispatchable
// GUID:      {F8019994-24F1-475D-8AC4-5A1BCFF213D0}
// *********************************************************************//
template<class T>
class ITabDispT : public TAutoDriver<ITab>
{
public:
  ITabDispT(){}

  ITabDispT(ITab *pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, false);
  }

  ITabDispT(ITabPtr pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, true);
  }

  ITabDispT& operator=(ITab *pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, false);
    return *this;
  }

  ITabDispT& operator=(ITabPtr pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Tab));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Tab);
  }

  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStatusBar(void);
  HRESULT         __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/);
  HRESULT         __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/);
  HRESULT         __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitter(unsigned_short Align/*[in]*/);
  HRESULT         __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/);
  HRESULT         __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/
                                                , long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/
                                  , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/);
  HRESULT         __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/);
  HRESULT         __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/);
  HRESULT         __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/);
  HRESULT         __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/);
  HRESULT         __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/);
  HRESULT         __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/);
  HRESULT         __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/
                                 , long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/);
  HRESULT         __fastcall Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Polygon(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/);
  HRESULT         __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/);
  HRESULT         __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_BorderWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BevelWidth(void);
  HRESULT         __fastcall set_BevelWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelInner(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(long pVal/*[in]*/);
  HRESULT         __fastcall get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GraphFont(void);
  HRESULT         __fastcall set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_CaptureMouse(void);
  HRESULT         __fastcall set_CaptureMouse(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderParentBackground(void);
  HRESULT         __fastcall set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSplit(void);
  HRESULT         __fastcall set_AutoSplit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupBox(void);
  HRESULT         __fastcall set_GroupBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Margin(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Margin(void);
  HRESULT         __fastcall set_Margin(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginTop(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/);
  LPDISPATCH      __fastcall Get(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   unsigned_long   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_long   BevelWidth = {read = get_BevelWidth, write = set_BevelWidth};
  __property   long            BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   long            BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   LPDISPATCH      GraphFont = {read = get_GraphFont, write = set_GraphFont};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};
  __property   unsigned_short  CaptureMouse = {read = get_CaptureMouse, write = set_CaptureMouse};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    BorderParentBackground = {read = get_BorderParentBackground, write = set_BorderParentBackground};
  __property   VARIANT_BOOL    AutoSplit = {read = get_AutoSplit, write = set_AutoSplit};
  __property   VARIANT_BOOL    GroupBox = {read = get_GroupBox, write = set_GroupBox};
  __property   unsigned_long   Margin = {read = get_Margin, write = set_Margin};
  __property   unsigned_long   MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   unsigned_long   MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   unsigned_long   MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   unsigned_long   MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ITabDispT<ITab> ITabDisp;

// *********************************************************************//
// DispIntf:  ITabControl
// Flags:     (4096) Dispatchable
// GUID:      {80249C22-E39E-4BF1-A167-8599130D19BA}
// *********************************************************************//
template<class T>
class ITabControlDispT : public TAutoDriver<ITabControl>
{
public:
  ITabControlDispT(){}

  ITabControlDispT(ITabControl *pintf)
  {
    TAutoDriver<ITabControl>::Bind(pintf, false);
  }

  ITabControlDispT(ITabControlPtr pintf)
  {
    TAutoDriver<ITabControl>::Bind(pintf, true);
  }

  ITabControlDispT& operator=(ITabControl *pintf)
  {
    TAutoDriver<ITabControl>::Bind(pintf, false);
    return *this;
  }

  ITabControlDispT& operator=(ITabControlPtr pintf)
  {
    TAutoDriver<ITabControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TabControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TabControl);
  }

  HRESULT         __fastcall CreateTab(BSTR Text/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTab(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_ActiveControl(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveControl(void);
  HRESULT         __fastcall set_ActiveControl(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_ActiveControl(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Buttons(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Buttons(void);
  HRESULT         __fastcall set_Buttons(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MultiLine(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiLine(void);
  HRESULT         __fastcall set_MultiLine(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTrack(void);
  HRESULT         __fastcall set_HotTrack(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FlatButtons(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FlatButtons(void);
  HRESULT         __fastcall set_FlatButtons(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RaggedRight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RaggedRight(void);
  HRESULT         __fastcall set_RaggedRight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TabWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabWidth(void);
  HRESULT         __fastcall set_TabWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabHeight(void);
  HRESULT         __fastcall set_TabHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemIndex(void);
  HRESULT         __fastcall set_ItemIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_TabsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabsVisible(void);
  HRESULT         __fastcall set_TabsVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   LPDISPATCH      ActiveControl = {read = get_ActiveControl, write = set_ActiveControl};
  __property   VARIANT_BOOL    Buttons = {read = get_Buttons, write = set_Buttons};
  __property   VARIANT_BOOL    MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   VARIANT_BOOL    HotTrack = {read = get_HotTrack, write = set_HotTrack};
  __property   VARIANT_BOOL    FlatButtons = {read = get_FlatButtons, write = set_FlatButtons};
  __property   VARIANT_BOOL    RaggedRight = {read = get_RaggedRight, write = set_RaggedRight};
  __property   long            TabWidth = {read = get_TabWidth, write = set_TabWidth};
  __property   long            TabHeight = {read = get_TabHeight, write = set_TabHeight};
  __property   long            ItemIndex = {read = get_ItemIndex, write = set_ItemIndex};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   VARIANT_BOOL    TabsVisible = {read = get_TabsVisible, write = set_TabsVisible};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ITabControlDispT<ITabControl> ITabControlDisp;

// *********************************************************************//
// DispIntf:  IPageControl
// Flags:     (4096) Dispatchable
// GUID:      {A58B708B-DDC5-40BF-AD62-D2B94731BBF3}
// *********************************************************************//
template<class T>
class IPageControlDispT : public TAutoDriver<IPageControl>
{
public:
  IPageControlDispT(){}

  IPageControlDispT(IPageControl *pintf)
  {
    TAutoDriver<IPageControl>::Bind(pintf, false);
  }

  IPageControlDispT(IPageControlPtr pintf)
  {
    TAutoDriver<IPageControl>::Bind(pintf, true);
  }

  IPageControlDispT& operator=(IPageControl *pintf)
  {
    TAutoDriver<IPageControl>::Bind(pintf, false);
    return *this;
  }

  IPageControlDispT& operator=(IPageControlPtr pintf)
  {
    TAutoDriver<IPageControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PageControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PageControl);
  }

  HRESULT         __fastcall get_TabsAlign(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabsAlign(void);
  HRESULT         __fastcall set_TabsAlign(long pVal/*[in]*/);
  HRESULT         __fastcall get_HeaderVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HeaderVisible(void);
  HRESULT         __fastcall set_HeaderVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TabCloseButton(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabCloseButton(void);
  HRESULT         __fastcall set_TabCloseButton(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ShowSingleTab(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowSingleTab(void);
  HRESULT         __fastcall set_ShowSingleTab(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HideClippedTabs(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideClippedTabs(void);
  HRESULT         __fastcall set_HideClippedTabs(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TabsDragDrop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabsDragDrop(void);
  HRESULT         __fastcall set_TabsDragDrop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HeaderColors(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_HeaderColors(void);
  HRESULT         __fastcall get_TabColors(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_TabColors(void);
  HRESULT         __fastcall get_CloseButtonColors(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CloseButtonColors(void);
  HRESULT         __fastcall get_ChevronColors(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ChevronColors(void);
  HRESULT         __fastcall CreateTab(BSTR Text/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTab(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_ActiveControl(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveControl(void);
  HRESULT         __fastcall set_ActiveControl(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_ActiveControl(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Buttons(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Buttons(void);
  HRESULT         __fastcall set_Buttons(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MultiLine(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiLine(void);
  HRESULT         __fastcall set_MultiLine(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTrack(void);
  HRESULT         __fastcall set_HotTrack(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FlatButtons(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FlatButtons(void);
  HRESULT         __fastcall set_FlatButtons(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RaggedRight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RaggedRight(void);
  HRESULT         __fastcall set_RaggedRight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TabWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabWidth(void);
  HRESULT         __fastcall set_TabWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabHeight(void);
  HRESULT         __fastcall set_TabHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_ItemIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemIndex(void);
  HRESULT         __fastcall set_ItemIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_TabsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabsVisible(void);
  HRESULT         __fastcall set_TabsVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            TabsAlign = {read = get_TabsAlign, write = set_TabsAlign};
  __property   VARIANT_BOOL    HeaderVisible = {read = get_HeaderVisible, write = set_HeaderVisible};
  __property   VARIANT_BOOL    TabCloseButton = {read = get_TabCloseButton, write = set_TabCloseButton};
  __property   VARIANT_BOOL    ShowSingleTab = {read = get_ShowSingleTab, write = set_ShowSingleTab};
  __property   VARIANT_BOOL    HideClippedTabs = {read = get_HideClippedTabs, write = set_HideClippedTabs};
  __property   VARIANT_BOOL    TabsDragDrop = {read = get_TabsDragDrop, write = set_TabsDragDrop};
  __property   LPDISPATCH      HeaderColors = {read = get_HeaderColors};
  __property   LPDISPATCH      TabColors = {read = get_TabColors};
  __property   LPDISPATCH      CloseButtonColors = {read = get_CloseButtonColors};
  __property   LPDISPATCH      ChevronColors = {read = get_ChevronColors};

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   LPDISPATCH      ActiveControl = {read = get_ActiveControl, write = set_ActiveControl};
  __property   VARIANT_BOOL    Buttons = {read = get_Buttons, write = set_Buttons};
  __property   VARIANT_BOOL    MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   VARIANT_BOOL    HotTrack = {read = get_HotTrack, write = set_HotTrack};
  __property   VARIANT_BOOL    FlatButtons = {read = get_FlatButtons, write = set_FlatButtons};
  __property   VARIANT_BOOL    RaggedRight = {read = get_RaggedRight, write = set_RaggedRight};
  __property   long            TabWidth = {read = get_TabWidth, write = set_TabWidth};
  __property   long            TabHeight = {read = get_TabHeight, write = set_TabHeight};
  __property   long            ItemIndex = {read = get_ItemIndex, write = set_ItemIndex};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   VARIANT_BOOL    TabsVisible = {read = get_TabsVisible, write = set_TabsVisible};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IPageControlDispT<IPageControl> IPageControlDisp;

// *********************************************************************//
// DispIntf:  IToolBar
// Flags:     (4096) Dispatchable
// GUID:      {EE439DC1-D255-41A8-94E4-0E2F5518562D}
// *********************************************************************//
template<class T>
class IToolBarDispT : public TAutoDriver<IToolBar>
{
public:
  IToolBarDispT(){}

  IToolBarDispT(IToolBar *pintf)
  {
    TAutoDriver<IToolBar>::Bind(pintf, false);
  }

  IToolBarDispT(IToolBarPtr pintf)
  {
    TAutoDriver<IToolBar>::Bind(pintf, true);
  }

  IToolBarDispT& operator=(IToolBar *pintf)
  {
    TAutoDriver<IToolBar>::Bind(pintf, false);
    return *this;
  }

  IToolBarDispT& operator=(IToolBarPtr pintf)
  {
    TAutoDriver<IToolBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolBar);
  }

  HRESULT         __fastcall get_Buttons(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Buttons(void);
  HRESULT         __fastcall set_Buttons(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Buttons(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Flat(void);
  HRESULT         __fastcall set_Flat(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ShowText(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowText(void);
  HRESULT         __fastcall set_ShowText(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ButtonWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ButtonWidth(void);
  HRESULT         __fastcall set_ButtonWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ButtonHeight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ButtonHeight(void);
  HRESULT         __fastcall set_ButtonHeight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSizeButtons(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSizeButtons(void);
  HRESULT         __fastcall set_AutoSizeButtons(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_List(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_List(void);
  HRESULT         __fastcall set_List(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Wrapable(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Wrapable(void);
  HRESULT         __fastcall set_Wrapable(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MinButtonWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MinButtonWidth(void);
  HRESULT         __fastcall set_MinButtonWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxButtonWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MaxButtonWidth(void);
  HRESULT         __fastcall set_MaxButtonWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxTextRows(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MaxTextRows(void);
  HRESULT         __fastcall set_MaxTextRows(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_PaddingX(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_PaddingX(void);
  HRESULT         __fastcall set_PaddingX(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_PaddingY(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_PaddingY(void);
  HRESULT         __fastcall set_PaddingY(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ButtonSpacingX(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ButtonSpacingX(void);
  HRESULT         __fastcall set_ButtonSpacingX(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ButtonSpacingY(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ButtonSpacingY(void);
  HRESULT         __fastcall set_ButtonSpacingY(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Buttons = {read = get_Buttons, write = set_Buttons};
  __property   VARIANT_BOOL    Flat = {read = get_Flat, write = set_Flat};
  __property   VARIANT_BOOL    ShowText = {read = get_ShowText, write = set_ShowText};
  __property   unsigned_long   ButtonWidth = {read = get_ButtonWidth, write = set_ButtonWidth};
  __property   unsigned_long   ButtonHeight = {read = get_ButtonHeight, write = set_ButtonHeight};
  __property   VARIANT_BOOL    AutoSizeButtons = {read = get_AutoSizeButtons, write = set_AutoSizeButtons};
  __property   VARIANT_BOOL    List = {read = get_List, write = set_List};
  __property   VARIANT_BOOL    Wrapable = {read = get_Wrapable, write = set_Wrapable};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};
  __property   unsigned_long   MinButtonWidth = {read = get_MinButtonWidth, write = set_MinButtonWidth};
  __property   unsigned_long   MaxButtonWidth = {read = get_MaxButtonWidth, write = set_MaxButtonWidth};
  __property   unsigned_long   MaxTextRows = {read = get_MaxTextRows, write = set_MaxTextRows};
  __property   unsigned_long   PaddingX = {read = get_PaddingX, write = set_PaddingX};
  __property   unsigned_long   PaddingY = {read = get_PaddingY, write = set_PaddingY};
  __property   unsigned_long   ButtonSpacingX = {read = get_ButtonSpacingX, write = set_ButtonSpacingX};
  __property   unsigned_long   ButtonSpacingY = {read = get_ButtonSpacingY, write = set_ButtonSpacingY};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IToolBarDispT<IToolBar> IToolBarDisp;

// *********************************************************************//
// DispIntf:  IMenuBar
// Flags:     (4096) Dispatchable
// GUID:      {CD1140FE-95CD-4690-8DB9-48DF5989E8FA}
// *********************************************************************//
template<class T>
class IMenuBarDispT : public TAutoDriver<IMenuBar>
{
public:
  IMenuBarDispT(){}

  IMenuBarDispT(IMenuBar *pintf)
  {
    TAutoDriver<IMenuBar>::Bind(pintf, false);
  }

  IMenuBarDispT(IMenuBarPtr pintf)
  {
    TAutoDriver<IMenuBar>::Bind(pintf, true);
  }

  IMenuBarDispT& operator=(IMenuBar *pintf)
  {
    TAutoDriver<IMenuBar>::Bind(pintf, false);
    return *this;
  }

  IMenuBarDispT& operator=(IMenuBarPtr pintf)
  {
    TAutoDriver<IMenuBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MenuBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MenuBar);
  }

  HRESULT         __fastcall get_Menu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Menu(void);
  HRESULT         __fastcall set_Menu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Menu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Menu = {read = get_Menu, write = set_Menu};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IMenuBarDispT<IMenuBar> IMenuBarDisp;

// *********************************************************************//
// DispIntf:  IReBarBand
// Flags:     (4096) Dispatchable
// GUID:      {5FFD779C-DF3C-4B7C-BA33-53ED4BE00360}
// *********************************************************************//
template<class T>
class IReBarBandDispT : public TAutoDriver<IReBarBand>
{
public:
  IReBarBandDispT(){}

  IReBarBandDispT(IReBarBand *pintf)
  {
    TAutoDriver<IReBarBand>::Bind(pintf, false);
  }

  IReBarBandDispT(IReBarBandPtr pintf)
  {
    TAutoDriver<IReBarBand>::Bind(pintf, true);
  }

  IReBarBandDispT& operator=(IReBarBand *pintf)
  {
    TAutoDriver<IReBarBand>::Bind(pintf, false);
    return *this;
  }

  IReBarBandDispT& operator=(IReBarBandPtr pintf)
  {
    TAutoDriver<IReBarBand>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ReBarBand));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ReBarBand);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Color(long* pVal/*[out,retval]*/);
  long            __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_Image(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_ParentImage(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentImage(void);
  HRESULT         __fastcall set_ParentImage(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FixedImage(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FixedImage(void);
  HRESULT         __fastcall set_FixedImage(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FixedSize(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FixedSize(void);
  HRESULT         __fastcall set_FixedSize(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Break(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Break(void);
  HRESULT         __fastcall set_Break(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GripperAlways(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GripperAlways(void);
  HRESULT         __fastcall set_GripperAlways(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Chevron(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Chevron(void);
  HRESULT         __fastcall set_Chevron(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Maximize();
  HRESULT         __fastcall Minimize();
  HRESULT         __fastcall get_MinWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_IdealWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_IdealWidth(void);
  HRESULT         __fastcall set_IdealWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(unsigned_long pVal/*[in]*/);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   long            Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   VARIANT_BOOL    ParentImage = {read = get_ParentImage, write = set_ParentImage};
  __property   VARIANT_BOOL    FixedImage = {read = get_FixedImage, write = set_FixedImage};
  __property   VARIANT_BOOL    FixedSize = {read = get_FixedSize, write = set_FixedSize};
  __property   VARIANT_BOOL    Break = {read = get_Break, write = set_Break};
  __property   VARIANT_BOOL    GripperAlways = {read = get_GripperAlways, write = set_GripperAlways};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   VARIANT_BOOL    Chevron = {read = get_Chevron, write = set_Chevron};
  __property   unsigned_long   MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_long   IdealWidth = {read = get_IdealWidth, write = set_IdealWidth};
  __property   unsigned_long   Width = {read = get_Width, write = set_Width};
};
typedef IReBarBandDispT<IReBarBand> IReBarBandDisp;

// *********************************************************************//
// DispIntf:  IReBar
// Flags:     (4096) Dispatchable
// GUID:      {DBD8984A-5CB5-4B3B-94DE-62AF0C20F75F}
// *********************************************************************//
template<class T>
class IReBarDispT : public TAutoDriver<IReBar>
{
public:
  IReBarDispT(){}

  IReBarDispT(IReBar *pintf)
  {
    TAutoDriver<IReBar>::Bind(pintf, false);
  }

  IReBarDispT(IReBarPtr pintf)
  {
    TAutoDriver<IReBar>::Bind(pintf, true);
  }

  IReBarDispT& operator=(IReBar *pintf)
  {
    TAutoDriver<IReBar>::Bind(pintf, false);
    return *this;
  }

  IReBarDispT& operator=(IReBarPtr pintf)
  {
    TAutoDriver<IReBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ReBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ReBar);
  }

  HRESULT         __fastcall get_Locked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_InsertNewRow(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InsertNewRow(void);
  HRESULT         __fastcall set_InsertNewRow(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Band(LPDISPATCH Control/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Band(LPDISPATCH Control/*[in]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall set_Image(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_FixedOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FixedOrder(void);
  HRESULT         __fastcall set_FixedOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_VarHeight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_VarHeight(void);
  HRESULT         __fastcall set_VarHeight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BandBorders(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BandBorders(void);
  HRESULT         __fastcall set_BandBorders(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DblClkToggle(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DblClkToggle(void);
  HRESULT         __fastcall set_DblClkToggle(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_VerticalGripper(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_VerticalGripper(void);
  HRESULT         __fastcall set_VerticalGripper(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoLayout(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoLayout(void);
  HRESULT         __fastcall set_AutoLayout(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RowCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_RowCount(void);
  HRESULT         __fastcall get_RowHeight(long Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_RowHeight(long Index/*[in]*/);
  HRESULT         __fastcall get_BandCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_BandCount(void);
  HRESULT         __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStatusBar(void);
  HRESULT         __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/);
  HRESULT         __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/);
  HRESULT         __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitter(unsigned_short Align/*[in]*/);
  HRESULT         __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/);
  HRESULT         __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/
                                                , long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/
                                  , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/);
  HRESULT         __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/);
  HRESULT         __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/);
  HRESULT         __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/);
  HRESULT         __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/);
  HRESULT         __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/);
  HRESULT         __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/);
  HRESULT         __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/
                                 , long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/);
  HRESULT         __fastcall Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Polygon(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/);
  HRESULT         __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/);
  HRESULT         __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_BorderWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BevelWidth(void);
  HRESULT         __fastcall set_BevelWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelInner(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(long pVal/*[in]*/);
  HRESULT         __fastcall get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GraphFont(void);
  HRESULT         __fastcall set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_CaptureMouse(void);
  HRESULT         __fastcall set_CaptureMouse(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderParentBackground(void);
  HRESULT         __fastcall set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSplit(void);
  HRESULT         __fastcall set_AutoSplit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupBox(void);
  HRESULT         __fastcall set_GroupBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Margin(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Margin(void);
  HRESULT         __fastcall set_Margin(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginTop(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/);
  LPDISPATCH      __fastcall Get(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   VARIANT_BOOL    InsertNewRow = {read = get_InsertNewRow, write = set_InsertNewRow};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   VARIANT_BOOL    FixedOrder = {read = get_FixedOrder, write = set_FixedOrder};
  __property   VARIANT_BOOL    VarHeight = {read = get_VarHeight, write = set_VarHeight};
  __property   VARIANT_BOOL    BandBorders = {read = get_BandBorders, write = set_BandBorders};
  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};
  __property   VARIANT_BOOL    DblClkToggle = {read = get_DblClkToggle, write = set_DblClkToggle};
  __property   VARIANT_BOOL    VerticalGripper = {read = get_VerticalGripper, write = set_VerticalGripper};
  __property   VARIANT_BOOL    AutoLayout = {read = get_AutoLayout, write = set_AutoLayout};
  __property   long            RowCount = {read = get_RowCount};
  __property   long            BandCount = {read = get_BandCount};

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   unsigned_long   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_long   BevelWidth = {read = get_BevelWidth, write = set_BevelWidth};
  __property   long            BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   long            BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   LPDISPATCH      GraphFont = {read = get_GraphFont, write = set_GraphFont};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};
  __property   unsigned_short  CaptureMouse = {read = get_CaptureMouse, write = set_CaptureMouse};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    BorderParentBackground = {read = get_BorderParentBackground, write = set_BorderParentBackground};
  __property   VARIANT_BOOL    AutoSplit = {read = get_AutoSplit, write = set_AutoSplit};
  __property   VARIANT_BOOL    GroupBox = {read = get_GroupBox, write = set_GroupBox};
  __property   unsigned_long   Margin = {read = get_Margin, write = set_Margin};
  __property   unsigned_long   MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   unsigned_long   MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   unsigned_long   MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   unsigned_long   MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IReBarDispT<IReBar> IReBarDisp;

// *********************************************************************//
// DispIntf:  IHyperLink
// Flags:     (4096) Dispatchable
// GUID:      {ED777BB6-9999-4385-8647-8C72156DC3A1}
// *********************************************************************//
template<class T>
class IHyperLinkDispT : public TAutoDriver<IHyperLink>
{
public:
  IHyperLinkDispT(){}

  IHyperLinkDispT(IHyperLink *pintf)
  {
    TAutoDriver<IHyperLink>::Bind(pintf, false);
  }

  IHyperLinkDispT(IHyperLinkPtr pintf)
  {
    TAutoDriver<IHyperLink>::Bind(pintf, true);
  }

  IHyperLinkDispT& operator=(IHyperLink *pintf)
  {
    TAutoDriver<IHyperLink>::Bind(pintf, false);
    return *this;
  }

  IHyperLinkDispT& operator=(IHyperLinkPtr pintf)
  {
    TAutoDriver<IHyperLink>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HyperLink));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HyperLink);
  }

  HRESULT         __fastcall get_Url(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Url(void);
  HRESULT         __fastcall set_Url(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            Url = {read = get_Url, write = set_Url};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IHyperLinkDispT<IHyperLink> IHyperLinkDisp;

// *********************************************************************//
// DispIntf:  IPager
// Flags:     (4096) Dispatchable
// GUID:      {AD4463D6-4144-4D08-9A41-A296E6264F32}
// *********************************************************************//
template<class T>
class IPagerDispT : public TAutoDriver<IPager>
{
public:
  IPagerDispT(){}

  IPagerDispT(IPager *pintf)
  {
    TAutoDriver<IPager>::Bind(pintf, false);
  }

  IPagerDispT(IPagerPtr pintf)
  {
    TAutoDriver<IPager>::Bind(pintf, true);
  }

  IPagerDispT& operator=(IPager *pintf)
  {
    TAutoDriver<IPager>::Bind(pintf, false);
    return *this;
  }

  IPagerDispT& operator=(IPagerPtr pintf)
  {
    TAutoDriver<IPager>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Pager));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Pager);
  }

  HRESULT         __fastcall get_Control(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT         __fastcall set_Control(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Control(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ButtonSize(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ButtonSize(void);
  HRESULT         __fastcall set_ButtonSize(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(long pVal/*[in]*/);
  HRESULT         __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStatusBar(void);
  HRESULT         __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/);
  HRESULT         __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/);
  HRESULT         __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitter(unsigned_short Align/*[in]*/);
  HRESULT         __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/);
  HRESULT         __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/
                                                , long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/
                                  , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/);
  HRESULT         __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/);
  HRESULT         __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/);
  HRESULT         __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/);
  HRESULT         __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/);
  HRESULT         __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/);
  HRESULT         __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/);
  HRESULT         __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/
                                 , long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/);
  HRESULT         __fastcall Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Polygon(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/);
  HRESULT         __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/);
  HRESULT         __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_BorderWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BevelWidth(void);
  HRESULT         __fastcall set_BevelWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelInner(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(long pVal/*[in]*/);
  HRESULT         __fastcall get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GraphFont(void);
  HRESULT         __fastcall set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_CaptureMouse(void);
  HRESULT         __fastcall set_CaptureMouse(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderParentBackground(void);
  HRESULT         __fastcall set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSplit(void);
  HRESULT         __fastcall set_AutoSplit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupBox(void);
  HRESULT         __fastcall set_GroupBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Margin(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Margin(void);
  HRESULT         __fastcall set_Margin(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginTop(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/);
  LPDISPATCH      __fastcall Get(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Control = {read = get_Control, write = set_Control};
  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};
  __property   unsigned_long   ButtonSize = {read = get_ButtonSize, write = set_ButtonSize};
  __property   long            Position = {read = get_Position, write = set_Position};

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   unsigned_long   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_long   BevelWidth = {read = get_BevelWidth, write = set_BevelWidth};
  __property   long            BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   long            BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   LPDISPATCH      GraphFont = {read = get_GraphFont, write = set_GraphFont};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};
  __property   unsigned_short  CaptureMouse = {read = get_CaptureMouse, write = set_CaptureMouse};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    BorderParentBackground = {read = get_BorderParentBackground, write = set_BorderParentBackground};
  __property   VARIANT_BOOL    AutoSplit = {read = get_AutoSplit, write = set_AutoSplit};
  __property   VARIANT_BOOL    GroupBox = {read = get_GroupBox, write = set_GroupBox};
  __property   unsigned_long   Margin = {read = get_Margin, write = set_Margin};
  __property   unsigned_long   MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   unsigned_long   MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   unsigned_long   MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   unsigned_long   MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IPagerDispT<IPager> IPagerDisp;

// *********************************************************************//
// DispIntf:  ICOMConnectionPoint
// Flags:     (4096) Dispatchable
// GUID:      {701F8D53-90B9-4D99-96A2-37C8BB960289}
// *********************************************************************//
template<class T>
class ICOMConnectionPointDispT : public TAutoDriver<ICOMConnectionPoint>
{
public:
  ICOMConnectionPointDispT(){}

  ICOMConnectionPointDispT(ICOMConnectionPoint *pintf)
  {
    TAutoDriver<ICOMConnectionPoint>::Bind(pintf, false);
  }

  ICOMConnectionPointDispT(ICOMConnectionPointPtr pintf)
  {
    TAutoDriver<ICOMConnectionPoint>::Bind(pintf, true);
  }

  ICOMConnectionPointDispT& operator=(ICOMConnectionPoint *pintf)
  {
    TAutoDriver<ICOMConnectionPoint>::Bind(pintf, false);
    return *this;
  }

  ICOMConnectionPointDispT& operator=(ICOMConnectionPointPtr pintf)
  {
    TAutoDriver<ICOMConnectionPoint>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_COMConnectionPoint));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_COMConnectionPoint);
  }

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Text = {read = get_Text};

  __property   BSTR            Type = {read = get_Type};
};
typedef ICOMConnectionPointDispT<ICOMConnectionPoint> ICOMConnectionPointDisp;

// *********************************************************************//
// DispIntf:  ICOMEvents
// Flags:     (4096) Dispatchable
// GUID:      {DC2EF81F-A8DF-488D-89C9-DCC67D7B0EE8}
// *********************************************************************//
template<class T>
class ICOMEventsDispT : public TAutoDriver<ICOMEvents>
{
public:
  ICOMEventsDispT(){}

  ICOMEventsDispT(ICOMEvents *pintf)
  {
    TAutoDriver<ICOMEvents>::Bind(pintf, false);
  }

  ICOMEventsDispT(ICOMEventsPtr pintf)
  {
    TAutoDriver<ICOMEvents>::Bind(pintf, true);
  }

  ICOMEventsDispT& operator=(ICOMEvents *pintf)
  {
    TAutoDriver<ICOMEvents>::Bind(pintf, false);
    return *this;
  }

  ICOMEventsDispT& operator=(ICOMEventsPtr pintf)
  {
    TAutoDriver<ICOMEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_COMEvents));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_COMEvents);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   BSTR            Type = {read = get_Type};
};
typedef ICOMEventsDispT<ICOMEvents> ICOMEventsDisp;

// *********************************************************************//
// DispIntf:  IActiveXControl
// Flags:     (4096) Dispatchable
// GUID:      {FF57FCA7-3701-47A2-B309-3C0F5A581CB1}
// *********************************************************************//
template<class T>
class IActiveXControlDispT : public TAutoDriver<IActiveXControl>
{
public:
  IActiveXControlDispT(){}

  IActiveXControlDispT(IActiveXControl *pintf)
  {
    TAutoDriver<IActiveXControl>::Bind(pintf, false);
  }

  IActiveXControlDispT(IActiveXControlPtr pintf)
  {
    TAutoDriver<IActiveXControl>::Bind(pintf, true);
  }

  IActiveXControlDispT& operator=(IActiveXControl *pintf)
  {
    TAutoDriver<IActiveXControl>::Bind(pintf, false);
    return *this;
  }

  IActiveXControlDispT& operator=(IActiveXControlPtr pintf)
  {
    TAutoDriver<IActiveXControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ActiveXControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ActiveXControl);
  }

  HRESULT         __fastcall get_Control(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT         __fastcall get_Events(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Events(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Control = {read = get_Control};
  __property   LPDISPATCH      Events = {read = get_Events};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IActiveXControlDispT<IActiveXControl> IActiveXControlDisp;

// *********************************************************************//
// DispIntf:  IHeaderItem
// Flags:     (4096) Dispatchable
// GUID:      {76B856CD-223D-4728-BA49-DCB111DAAA9D}
// *********************************************************************//
template<class T>
class IHeaderItemDispT : public TAutoDriver<IHeaderItem>
{
public:
  IHeaderItemDispT(){}

  IHeaderItemDispT(IHeaderItem *pintf)
  {
    TAutoDriver<IHeaderItem>::Bind(pintf, false);
  }

  IHeaderItemDispT(IHeaderItemPtr pintf)
  {
    TAutoDriver<IHeaderItem>::Bind(pintf, true);
  }

  IHeaderItemDispT& operator=(IHeaderItem *pintf)
  {
    TAutoDriver<IHeaderItem>::Bind(pintf, false);
    return *this;
  }

  IHeaderItemDispT& operator=(IHeaderItemPtr pintf)
  {
    TAutoDriver<IHeaderItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HeaderItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HeaderItem);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_TextAlign(long* pVal/*[out,retval]*/);
  long            __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_TextAlign(long pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_DataType(long* pVal/*[out,retval]*/);
  long            __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(long pVal/*[in]*/);
  HRESULT         __fastcall get_SortType(long* pVal/*[out,retval]*/);
  long            __fastcall get_SortType(void);
  HRESULT         __fastcall set_SortType(long pVal/*[in]*/);
  HRESULT         __fastcall get_Index(long* pVal/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall get_Owner(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Owner(void);
  HRESULT         __fastcall get_Order(long* pVal/*[out,retval]*/);
  long            __fastcall get_Order(void);
  HRESULT         __fastcall set_Order(long pVal/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginTrack(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnTrack(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDividerDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDrag(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEndDrag(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   long            DataType = {read = get_DataType, write = set_DataType};
  __property   long            SortType = {read = get_SortType, write = set_SortType};
  __property   long            Index = {read = get_Index};
  __property   LPDISPATCH      Owner = {read = get_Owner};
  __property   long            Order = {read = get_Order, write = set_Order};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   LPDISPATCH      Design = {read = get_Design};

  __property   BSTR            Type = {read = get_Type};
};
typedef IHeaderItemDispT<IHeaderItem> IHeaderItemDisp;

// *********************************************************************//
// DispIntf:  IHeader
// Flags:     (4096) Dispatchable
// GUID:      {F1901A02-8CA0-4446-AC10-D8E9B6A9E573}
// *********************************************************************//
template<class T>
class IHeaderDispT : public TAutoDriver<IHeader>
{
public:
  IHeaderDispT(){}

  IHeaderDispT(IHeader *pintf)
  {
    TAutoDriver<IHeader>::Bind(pintf, false);
  }

  IHeaderDispT(IHeaderPtr pintf)
  {
    TAutoDriver<IHeader>::Bind(pintf, true);
  }

  IHeaderDispT& operator=(IHeader *pintf)
  {
    TAutoDriver<IHeader>::Bind(pintf, false);
    return *this;
  }

  IHeaderDispT& operator=(IHeaderPtr pintf)
  {
    TAutoDriver<IHeader>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Header));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Header);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long TextAlign/*[in,def,opt]*/, LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long TextAlign/*[in,def,opt]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTrack(void);
  HRESULT         __fastcall set_HotTrack(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Flat(void);
  HRESULT         __fastcall set_Flat(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DragDrop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DragDrop(void);
  HRESULT         __fastcall set_DragDrop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_OnColumnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnColumnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   VARIANT_BOOL    HotTrack = {read = get_HotTrack, write = set_HotTrack};
  __property   VARIANT_BOOL    Flat = {read = get_Flat, write = set_Flat};
  __property   VARIANT_BOOL    DragDrop = {read = get_DragDrop, write = set_DragDrop};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IHeaderDispT<IHeader> IHeaderDisp;

// *********************************************************************//
// DispIntf:  IListSubItem
// Flags:     (4096) Dispatchable
// GUID:      {8BEFFC8D-A9E8-4699-8E02-64DB4DC78DA2}
// *********************************************************************//
template<class T>
class IListSubItemDispT : public TAutoDriver<IListSubItem>
{
public:
  IListSubItemDispT(){}

  IListSubItemDispT(IListSubItem *pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, false);
  }

  IListSubItemDispT(IListSubItemPtr pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, true);
  }

  IListSubItemDispT& operator=(IListSubItem *pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, false);
    return *this;
  }

  IListSubItemDispT& operator=(IListSubItemPtr pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListSubItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListSubItem);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Design = {read = get_Design};
};
typedef IListSubItemDispT<IListSubItem> IListSubItemDisp;

// *********************************************************************//
// DispIntf:  IListItem
// Flags:     (4096) Dispatchable
// GUID:      {1FEE927E-CC8A-4DC0-9B40-E4113CDE5DA9}
// *********************************************************************//
template<class T>
class IListItemDispT : public TAutoDriver<IListItem>
{
public:
  IListItemDispT(){}

  IListItemDispT(IListItem *pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, false);
  }

  IListItemDispT(IListItemPtr pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, true);
  }

  IListItemDispT& operator=(IListItem *pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, false);
    return *this;
  }

  IListItemDispT& operator=(IListItemPtr pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListItem);
  }

  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT         __fastcall set_Selected(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SubItems(long Index/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubItems(long Index/*[in]*/);
  HRESULT         __fastcall set_SubItems(long Index/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SubItemImage(long Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SubItemImage(long Index/*[in]*/);
  HRESULT         __fastcall set_SubItemImage(long Index/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_Index(long* pVal/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Group(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Group(void);
  HRESULT         __fastcall set_Group(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall SetPosition(unsigned_long Left/*[in]*/, unsigned_long Top/*[in]*/);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_TextBkColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TextBkColor(void);
  HRESULT         __fastcall set_TextBkColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_SubItemsEx(long Index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SubItemsEx(long Index/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);

  __property   BSTR            Type = {read = get_Type};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   long            Index = {read = get_Index};
  __property   BSTR            Hint = {read = get_Hint, write = set_Hint};
  __property   unsigned_long   Group = {read = get_Group, write = set_Group};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   unsigned_long   TextBkColor = {read = get_TextBkColor, write = set_TextBkColor};
  __property   LPDISPATCH      Design = {read = get_Design};
};
typedef IListItemDispT<IListItem> IListItemDisp;

// *********************************************************************//
// DispIntf:  IListViewColumns
// Flags:     (4096) Dispatchable
// GUID:      {1A015BF1-FDE4-49FF-85AE-A142E1239B16}
// *********************************************************************//
template<class T>
class IListViewColumnsDispT : public TAutoDriver<IListViewColumns>
{
public:
  IListViewColumnsDispT(){}

  IListViewColumnsDispT(IListViewColumns *pintf)
  {
    TAutoDriver<IListViewColumns>::Bind(pintf, false);
  }

  IListViewColumnsDispT(IListViewColumnsPtr pintf)
  {
    TAutoDriver<IListViewColumns>::Bind(pintf, true);
  }

  IListViewColumnsDispT& operator=(IListViewColumns *pintf)
  {
    TAutoDriver<IListViewColumns>::Bind(pintf, false);
    return *this;
  }

  IListViewColumnsDispT& operator=(IListViewColumnsPtr pintf)
  {
    TAutoDriver<IListViewColumns>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListViewColumns));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListViewColumns);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long TextAlign/*[in,def,opt]*/, LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long TextAlign/*[in,def,opt]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Flat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Flat(void);
  HRESULT         __fastcall set_Flat(VARIANT_BOOL pVal/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Flat = {read = get_Flat, write = set_Flat};
};
typedef IListViewColumnsDispT<IListViewColumns> IListViewColumnsDisp;

// *********************************************************************//
// DispIntf:  IWorkArea
// Flags:     (4096) Dispatchable
// GUID:      {91CFAE79-1DAB-4194-82FE-314EAF0106B7}
// *********************************************************************//
template<class T>
class IWorkAreaDispT : public TAutoDriver<IWorkArea>
{
public:
  IWorkAreaDispT(){}

  IWorkAreaDispT(IWorkArea *pintf)
  {
    TAutoDriver<IWorkArea>::Bind(pintf, false);
  }

  IWorkAreaDispT(IWorkAreaPtr pintf)
  {
    TAutoDriver<IWorkArea>::Bind(pintf, true);
  }

  IWorkAreaDispT& operator=(IWorkArea *pintf)
  {
    TAutoDriver<IWorkArea>::Bind(pintf, false);
    return *this;
  }

  IWorkAreaDispT& operator=(IWorkAreaPtr pintf)
  {
    TAutoDriver<IWorkArea>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WorkArea));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WorkArea);
  }

  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);

  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
};
typedef IWorkAreaDispT<IWorkArea> IWorkAreaDisp;

// *********************************************************************//
// DispIntf:  IWorkAreas
// Flags:     (4096) Dispatchable
// GUID:      {9A68D6D1-40E8-49A1-8497-E1A93F03A34E}
// *********************************************************************//
template<class T>
class IWorkAreasDispT : public TAutoDriver<IWorkAreas>
{
public:
  IWorkAreasDispT(){}

  IWorkAreasDispT(IWorkAreas *pintf)
  {
    TAutoDriver<IWorkAreas>::Bind(pintf, false);
  }

  IWorkAreasDispT(IWorkAreasPtr pintf)
  {
    TAutoDriver<IWorkAreas>::Bind(pintf, true);
  }

  IWorkAreasDispT& operator=(IWorkAreas *pintf)
  {
    TAutoDriver<IWorkAreas>::Bind(pintf, false);
    return *this;
  }

  IWorkAreasDispT& operator=(IWorkAreasPtr pintf)
  {
    TAutoDriver<IWorkAreas>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WorkAreas));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WorkAreas);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, LPDISPATCH* Item/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IWorkAreasDispT<IWorkAreas> IWorkAreasDisp;

// *********************************************************************//
// DispIntf:  IListViewGroup
// Flags:     (4096) Dispatchable
// GUID:      {9C37D97F-D003-4235-9284-091565709535}
// *********************************************************************//
template<class T>
class IListViewGroupDispT : public TAutoDriver<IListViewGroup>
{
public:
  IListViewGroupDispT(){}

  IListViewGroupDispT(IListViewGroup *pintf)
  {
    TAutoDriver<IListViewGroup>::Bind(pintf, false);
  }

  IListViewGroupDispT(IListViewGroupPtr pintf)
  {
    TAutoDriver<IListViewGroup>::Bind(pintf, true);
  }

  IListViewGroupDispT& operator=(IListViewGroup *pintf)
  {
    TAutoDriver<IListViewGroup>::Bind(pintf, false);
    return *this;
  }

  IListViewGroupDispT& operator=(IListViewGroupPtr pintf)
  {
    TAutoDriver<IListViewGroup>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListViewGroup));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListViewGroup);
  }

  HRESULT         __fastcall get_Header(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Header(void);
  HRESULT         __fastcall set_Header(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SubTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubTitle(void);
  HRESULT         __fastcall set_SubTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Task(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Task(void);
  HRESULT         __fastcall set_Task(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DescriptionTop(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionTop(void);
  HRESULT         __fastcall set_DescriptionTop(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DescriptionBottom(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionBottom(void);
  HRESULT         __fastcall set_DescriptionBottom(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SubsetTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubsetTitle(void);
  HRESULT         __fastcall set_SubsetTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Subseted(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Subseted(void);
  HRESULT         __fastcall set_Subseted(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoHeader(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoHeader(void);
  HRESULT         __fastcall set_NoHeader(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT         __fastcall set_Expanded(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Collapsible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Collapsible(void);
  HRESULT         __fastcall set_Collapsible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HeaderAlign(long* pVal/*[out,retval]*/);
  long            __fastcall get_HeaderAlign(void);
  HRESULT         __fastcall set_HeaderAlign(long pVal/*[in]*/);
  HRESULT         __fastcall get_TitleImage(long* pVal/*[out,retval]*/);
  long            __fastcall get_TitleImage(void);
  HRESULT         __fastcall set_TitleImage(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedImage(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExtendedImage(void);
  HRESULT         __fastcall set_ExtendedImage(long pVal/*[in]*/);
  HRESULT         __fastcall get_Footer(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Footer(void);
  HRESULT         __fastcall set_Footer(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FooterAlign(long* pVal/*[out,retval]*/);
  long            __fastcall get_FooterAlign(void);
  HRESULT         __fastcall set_FooterAlign(long pVal/*[in]*/);

  __property   BSTR            Header = {read = get_Header, write = set_Header};
  __property   BSTR            SubTitle = {read = get_SubTitle, write = set_SubTitle};
  __property   BSTR            Task = {read = get_Task, write = set_Task};
  __property   BSTR            DescriptionTop = {read = get_DescriptionTop, write = set_DescriptionTop};
  __property   BSTR            DescriptionBottom = {read = get_DescriptionBottom, write = set_DescriptionBottom};
  __property   BSTR            SubsetTitle = {read = get_SubsetTitle, write = set_SubsetTitle};
  __property   VARIANT_BOOL    Subseted = {read = get_Subseted, write = set_Subseted};
  __property   VARIANT_BOOL    NoHeader = {read = get_NoHeader, write = set_NoHeader};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   VARIANT_BOOL    Collapsible = {read = get_Collapsible, write = set_Collapsible};
  __property   long            HeaderAlign = {read = get_HeaderAlign, write = set_HeaderAlign};
  __property   long            TitleImage = {read = get_TitleImage, write = set_TitleImage};
  __property   long            ExtendedImage = {read = get_ExtendedImage, write = set_ExtendedImage};
  __property   BSTR            Footer = {read = get_Footer, write = set_Footer};
  __property   long            FooterAlign = {read = get_FooterAlign, write = set_FooterAlign};
};
typedef IListViewGroupDispT<IListViewGroup> IListViewGroupDisp;

// *********************************************************************//
// DispIntf:  IListViewGroups
// Flags:     (4096) Dispatchable
// GUID:      {C1B38DA4-7DE0-4CEC-AFB5-A25980DB88CF}
// *********************************************************************//
template<class T>
class IListViewGroupsDispT : public TAutoDriver<IListViewGroups>
{
public:
  IListViewGroupsDispT(){}

  IListViewGroupsDispT(IListViewGroups *pintf)
  {
    TAutoDriver<IListViewGroups>::Bind(pintf, false);
  }

  IListViewGroupsDispT(IListViewGroupsPtr pintf)
  {
    TAutoDriver<IListViewGroups>::Bind(pintf, true);
  }

  IListViewGroupsDispT& operator=(IListViewGroups *pintf)
  {
    TAutoDriver<IListViewGroups>::Bind(pintf, false);
    return *this;
  }

  IListViewGroupsDispT& operator=(IListViewGroupsPtr pintf)
  {
    TAutoDriver<IListViewGroups>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListViewGroups));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListViewGroups);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, LPDISPATCH* Item/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR Name/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IListViewGroupsDispT<IListViewGroups> IListViewGroupsDisp;

// *********************************************************************//
// DispIntf:  IListView
// Flags:     (4096) Dispatchable
// GUID:      {98763204-A34A-4206-9151-8DDF2445F52B}
// *********************************************************************//
template<class T>
class IListViewDispT : public TAutoDriver<IListView>
{
public:
  IListViewDispT(){}

  IListViewDispT(IListView *pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, false);
  }

  IListViewDispT(IListViewPtr pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, true);
  }

  IListViewDispT& operator=(IListView *pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, false);
    return *this;
  }

  IListViewDispT& operator=(IListViewPtr pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListView);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(long pcount/*[in]*/);
  HRESULT         __fastcall Add(BSTR Text/*[in]*/, LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR Text/*[in]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Text/*[in]*/, 
                                    LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Insert(long Index/*[in]*/, BSTR Text/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall SelectAll();
  HRESULT         __fastcall ClearSelection();
  HRESULT         __fastcall EditItem(long Index/*[in]*/);
  HRESULT         __fastcall Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/, 
                                  unsigned_long Column/*[in,def,opt]*/);
  HRESULT         __fastcall get_LargeImages(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_LargeImages(void);
  HRESULT         __fastcall set_LargeImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_LargeImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_SmallImages(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SmallImages(void);
  HRESULT         __fastcall set_SmallImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_SmallImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_StateImages(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_StateImages(void);
  HRESULT         __fastcall set_StateImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_StateImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Style(long* pVal/*[out,retval]*/);
  long            __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(long pVal/*[in]*/);
  HRESULT         __fastcall get_TextBkColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TextBkColor(void);
  HRESULT         __fastcall set_TextBkColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_MultiSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SelCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelCount(void);
  HRESULT         __fastcall get_ItemIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ItemIndex(void);
  HRESULT         __fastcall set_ItemIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Columns(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Columns(void);
  HRESULT         __fastcall get_CheckBoxes(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CheckBoxes(void);
  HRESULT         __fastcall set_CheckBoxes(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GridLines(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GridLines(void);
  HRESULT         __fastcall set_GridLines(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTrack(void);
  HRESULT         __fastcall set_HotTrack(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RowSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RowSelect(void);
  HRESULT         __fastcall set_RowSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BorderSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderSelect(void);
  HRESULT         __fastcall set_BorderSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FlatScrollBars(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FlatScrollBars(void);
  HRESULT         __fastcall set_FlatScrollBars(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_OwnerData(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_OwnerData(void);
  HRESULT         __fastcall set_OwnerData(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_WrapText(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WrapText(void);
  HRESULT         __fastcall set_WrapText(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Arrangement(long* pVal/*[out,retval]*/);
  long            __fastcall get_Arrangement(void);
  HRESULT         __fastcall set_Arrangement(long pVal/*[in]*/);
  HRESULT         __fastcall get_HeaderDragDrop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HeaderDragDrop(void);
  HRESULT         __fastcall set_HeaderDragDrop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_InfoTip(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InfoTip(void);
  HRESULT         __fastcall set_InfoTip(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_BackgroundImage(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_WorkAreas(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_WorkAreas(void);
  HRESULT         __fastcall get_Groups(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Groups(void);
  HRESULT         __fastcall get_TileLines(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TileLines(void);
  HRESULT         __fastcall set_TileLines(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_TileWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TileWidth(void);
  HRESULT         __fastcall set_TileWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_TileHeight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TileHeight(void);
  HRESULT         __fastcall set_TileHeight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffering(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffering(void);
  HRESULT         __fastcall set_DoubleBuffering(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TransparentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TransparentBackground(void);
  HRESULT         __fastcall set_TransparentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupHeaderImages(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GroupHeaderImages(void);
  HRESULT         __fastcall set_GroupHeaderImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GroupHeaderImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_IconSpacingWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_IconSpacingWidth(void);
  HRESULT         __fastcall set_IconSpacingWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_IconSpacingHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_IconSpacingHeight(void);
  HRESULT         __fastcall set_IconSpacingHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDraw(void);
  HRESULT         __fastcall set_CustomDraw(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Arrange();
  HRESULT         __fastcall get_ReadOnlySubItems(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnlySubItems(void);
  HRESULT         __fastcall set_ReadOnlySubItems(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_QuickEdit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_QuickEdit(void);
  HRESULT         __fastcall set_QuickEdit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CheckByMouse(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CheckByMouse(void);
  HRESULT         __fastcall set_CheckByMouse(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_OnColumnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnColumnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnData(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnItemCheck(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEdited(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginEdit(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnGroupLinkClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDrawItem(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSubItemEdited(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginSubItemEdit(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count, write = set_Count};
  __property   LPDISPATCH      LargeImages = {read = get_LargeImages, write = set_LargeImages};
  __property   LPDISPATCH      SmallImages = {read = get_SmallImages, write = set_SmallImages};
  __property   LPDISPATCH      StateImages = {read = get_StateImages, write = set_StateImages};
  __property   long            Style = {read = get_Style, write = set_Style};
  __property   unsigned_long   TextBkColor = {read = get_TextBkColor, write = set_TextBkColor};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   long            SelCount = {read = get_SelCount};
  __property   long            ItemIndex = {read = get_ItemIndex, write = set_ItemIndex};
  __property   LPDISPATCH      Columns = {read = get_Columns};
  __property   VARIANT_BOOL    CheckBoxes = {read = get_CheckBoxes, write = set_CheckBoxes};
  __property   VARIANT_BOOL    GridLines = {read = get_GridLines, write = set_GridLines};
  __property   VARIANT_BOOL    HotTrack = {read = get_HotTrack, write = set_HotTrack};
  __property   VARIANT_BOOL    RowSelect = {read = get_RowSelect, write = set_RowSelect};
  __property   VARIANT_BOOL    BorderSelect = {read = get_BorderSelect, write = set_BorderSelect};
  __property   VARIANT_BOOL    FlatScrollBars = {read = get_FlatScrollBars, write = set_FlatScrollBars};
  __property   VARIANT_BOOL    OwnerData = {read = get_OwnerData, write = set_OwnerData};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   VARIANT_BOOL    WrapText = {read = get_WrapText, write = set_WrapText};
  __property   long            Arrangement = {read = get_Arrangement, write = set_Arrangement};
  __property   VARIANT_BOOL    HeaderDragDrop = {read = get_HeaderDragDrop, write = set_HeaderDragDrop};
  __property   VARIANT_BOOL    InfoTip = {read = get_InfoTip, write = set_InfoTip};
  __property   LPDISPATCH      WorkAreas = {read = get_WorkAreas};
  __property   LPDISPATCH      Groups = {read = get_Groups};
  __property   unsigned_long   TileLines = {read = get_TileLines, write = set_TileLines};
  __property   unsigned_long   TileWidth = {read = get_TileWidth, write = set_TileWidth};
  __property   unsigned_long   TileHeight = {read = get_TileHeight, write = set_TileHeight};
  __property   VARIANT_BOOL    DoubleBuffering = {read = get_DoubleBuffering, write = set_DoubleBuffering};
  __property   VARIANT_BOOL    TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};
  __property   LPDISPATCH      GroupHeaderImages = {read = get_GroupHeaderImages, write = set_GroupHeaderImages};
  __property   long            IconSpacingWidth = {read = get_IconSpacingWidth, write = set_IconSpacingWidth};
  __property   long            IconSpacingHeight = {read = get_IconSpacingHeight, write = set_IconSpacingHeight};
  __property   VARIANT_BOOL    CustomDraw = {read = get_CustomDraw, write = set_CustomDraw};
  __property   VARIANT_BOOL    ReadOnlySubItems = {read = get_ReadOnlySubItems, write = set_ReadOnlySubItems};
  __property   VARIANT_BOOL    QuickEdit = {read = get_QuickEdit, write = set_QuickEdit};
  __property   VARIANT_BOOL    CheckByMouse = {read = get_CheckByMouse, write = set_CheckByMouse};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IListViewDispT<IListView> IListViewDisp;

// *********************************************************************//
// DispIntf:  ITreeItem
// Flags:     (4096) Dispatchable
// GUID:      {FFFF9989-481D-4921-949C-B283BD06CB44}
// *********************************************************************//
template<class T>
class ITreeItemDispT : public TAutoDriver<ITreeItem>
{
public:
  ITreeItemDispT(){}

  ITreeItemDispT(ITreeItem *pintf)
  {
    TAutoDriver<ITreeItem>::Bind(pintf, false);
  }

  ITreeItemDispT(ITreeItemPtr pintf)
  {
    TAutoDriver<ITreeItem>::Bind(pintf, true);
  }

  ITreeItemDispT& operator=(ITreeItem *pintf)
  {
    TAutoDriver<ITreeItem>::Bind(pintf, false);
    return *this;
  }

  ITreeItemDispT& operator=(ITreeItemPtr pintf)
  {
    TAutoDriver<ITreeItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TreeItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TreeItem);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_SelectedImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelectedImageIndex(void);
  HRESULT         __fastcall set_SelectedImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT         __fastcall set_Selected(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT         __fastcall set_Expanded(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Bold(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT         __fastcall set_Bold(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HasChildren(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasChildren(void);
  HRESULT         __fastcall Add(BSTR Text/*[in]*/, long ImageIndex/*[in,def,opt]*/, 
                                 long SelectedImageIndex/*[in,def,opt]*/, 
                                 LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR Text/*[in]*/, long ImageIndex/*[in,def,opt]*/, 
                                 long SelectedImageIndex/*[in,def,opt]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Text/*[in]*/, 
                                    long ImageIndex/*[in,def,opt]*/, 
                                    long SelectedImageIndex/*[in,def,opt]*/, 
                                    LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Insert(long Index/*[in]*/, BSTR Text/*[in]*/, 
                                    long ImageIndex/*[in,def,opt]*/, 
                                    long SelectedImageIndex/*[in,def,opt]*/);
  HRESULT         __fastcall Remove(long Index/*[in,def,opt]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Expand(VARIANT_BOOL Recurse/*[in,def,opt]*/);
  HRESULT         __fastcall Collapse();
  HRESULT         __fastcall EditLabel();
  HRESULT         __fastcall Sort(VARIANT_BOOL Recurse/*[in,def,opt]*/);
  HRESULT         __fastcall MakeVisible();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_NextSibling(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NextSibling(void);
  HRESULT         __fastcall get_PrevSibling(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PrevSibling(void);
  HRESULT         __fastcall get_FirstChild(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_FirstChild(void);
  HRESULT         __fastcall get_LastChild(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_LastChild(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_TextBkColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TextBkColor(void);
  HRESULT         __fastcall set_TextBkColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall ShowHint();
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   long            SelectedImageIndex = {read = get_SelectedImageIndex, write = set_SelectedImageIndex};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   VARIANT_BOOL    HasChildren = {read = get_HasChildren};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      NextSibling = {read = get_NextSibling};
  __property   LPDISPATCH      PrevSibling = {read = get_PrevSibling};
  __property   LPDISPATCH      FirstChild = {read = get_FirstChild};
  __property   LPDISPATCH      LastChild = {read = get_LastChild};
  __property   BSTR            Hint = {read = get_Hint, write = set_Hint};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   unsigned_long   TextBkColor = {read = get_TextBkColor, write = set_TextBkColor};
  __property   LPDISPATCH      Design = {read = get_Design};
};
typedef ITreeItemDispT<ITreeItem> ITreeItemDisp;

// *********************************************************************//
// DispIntf:  ITreeView
// Flags:     (4096) Dispatchable
// GUID:      {A6034589-820F-4165-9EEE-AE1E97BFB9B1}
// *********************************************************************//
template<class T>
class ITreeViewDispT : public TAutoDriver<ITreeView>
{
public:
  ITreeViewDispT(){}

  ITreeViewDispT(ITreeView *pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, false);
  }

  ITreeViewDispT(ITreeViewPtr pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, true);
  }

  ITreeViewDispT& operator=(ITreeView *pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, false);
    return *this;
  }

  ITreeViewDispT& operator=(ITreeViewPtr pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TreeView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TreeView);
  }

  HRESULT         __fastcall get_Items(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Items(void);
  HRESULT         __fastcall get_SelectedItem(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SelectedItem(void);
  HRESULT         __fastcall get_TopItem(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_TopItem(void);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_StateImages(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_StateImages(void);
  HRESULT         __fastcall set_StateImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_StateImages(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_HasButtons(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasButtons(void);
  HRESULT         __fastcall set_HasButtons(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HasLines(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasLines(void);
  HRESULT         __fastcall set_HasLines(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_LinesAtRoot(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_LinesAtRoot(void);
  HRESULT         __fastcall set_LinesAtRoot(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CheckBoxes(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CheckBoxes(void);
  HRESULT         __fastcall set_CheckBoxes(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTrack(void);
  HRESULT         __fastcall set_HotTrack(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RowSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RowSelect(void);
  HRESULT         __fastcall set_RowSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoExpand(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoExpand(void);
  HRESULT         __fastcall set_AutoExpand(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_InfoTip(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InfoTip(void);
  HRESULT         __fastcall set_InfoTip(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CustomDraw(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CustomDraw(void);
  HRESULT         __fastcall set_CustomDraw(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffering(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffering(void);
  HRESULT         __fastcall set_DoubleBuffering(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoIndentState(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoIndentState(void);
  HRESULT         __fastcall set_NoIndentState(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoHScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoHScroll(void);
  HRESULT         __fastcall set_AutoHScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_OnEdited(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnExpanding(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnExpanded(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnCollapsing(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnCollapsed(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnItemCheck(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginEdit(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDrawItem(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Items = {read = get_Items};
  __property   LPDISPATCH      SelectedItem = {read = get_SelectedItem};
  __property   LPDISPATCH      TopItem = {read = get_TopItem};
  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   LPDISPATCH      StateImages = {read = get_StateImages, write = set_StateImages};
  __property   VARIANT_BOOL    HasButtons = {read = get_HasButtons, write = set_HasButtons};
  __property   VARIANT_BOOL    HasLines = {read = get_HasLines, write = set_HasLines};
  __property   VARIANT_BOOL    LinesAtRoot = {read = get_LinesAtRoot, write = set_LinesAtRoot};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   VARIANT_BOOL    CheckBoxes = {read = get_CheckBoxes, write = set_CheckBoxes};
  __property   VARIANT_BOOL    HotTrack = {read = get_HotTrack, write = set_HotTrack};
  __property   VARIANT_BOOL    RowSelect = {read = get_RowSelect, write = set_RowSelect};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   VARIANT_BOOL    AutoExpand = {read = get_AutoExpand, write = set_AutoExpand};
  __property   VARIANT_BOOL    InfoTip = {read = get_InfoTip, write = set_InfoTip};
  __property   VARIANT_BOOL    CustomDraw = {read = get_CustomDraw, write = set_CustomDraw};
  __property   VARIANT_BOOL    DoubleBuffering = {read = get_DoubleBuffering, write = set_DoubleBuffering};
  __property   VARIANT_BOOL    NoIndentState = {read = get_NoIndentState, write = set_NoIndentState};
  __property   VARIANT_BOOL    AutoHScroll = {read = get_AutoHScroll, write = set_AutoHScroll};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ITreeViewDispT<ITreeView> ITreeViewDisp;

// *********************************************************************//
// DispIntf:  IParagraph
// Flags:     (4096) Dispatchable
// GUID:      {C15C0ABE-967F-4A17-9EA9-BC68A2855C0D}
// *********************************************************************//
template<class T>
class IParagraphDispT : public TAutoDriver<IParagraph>
{
public:
  IParagraphDispT(){}

  IParagraphDispT(IParagraph *pintf)
  {
    TAutoDriver<IParagraph>::Bind(pintf, false);
  }

  IParagraphDispT(IParagraphPtr pintf)
  {
    TAutoDriver<IParagraph>::Bind(pintf, true);
  }

  IParagraphDispT& operator=(IParagraph *pintf)
  {
    TAutoDriver<IParagraph>::Bind(pintf, false);
    return *this;
  }

  IParagraphDispT& operator=(IParagraphPtr pintf)
  {
    TAutoDriver<IParagraph>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Paragraph));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Paragraph);
  }

  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Numbering(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Numbering(void);
  HRESULT         __fastcall set_Numbering(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StartIndent(long* pVal/*[out,retval]*/);
  long            __fastcall get_StartIndent(void);
  HRESULT         __fastcall set_StartIndent(long pVal/*[in]*/);
  HRESULT         __fastcall get_LeftIndent(long* pVal/*[out,retval]*/);
  long            __fastcall get_LeftIndent(void);
  HRESULT         __fastcall set_LeftIndent(long pVal/*[in]*/);
  HRESULT         __fastcall get_RightIndent(long* pVal/*[out,retval]*/);
  long            __fastcall get_RightIndent(void);
  HRESULT         __fastcall set_RightIndent(long pVal/*[in]*/);

  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   VARIANT_BOOL    Numbering = {read = get_Numbering, write = set_Numbering};
  __property   long            StartIndent = {read = get_StartIndent, write = set_StartIndent};
  __property   long            LeftIndent = {read = get_LeftIndent, write = set_LeftIndent};
  __property   long            RightIndent = {read = get_RightIndent, write = set_RightIndent};
};
typedef IParagraphDispT<IParagraph> IParagraphDisp;

// *********************************************************************//
// DispIntf:  IRichEdit
// Flags:     (4096) Dispatchable
// GUID:      {C775712D-FA95-49EE-971D-6DD3BE4FE703}
// *********************************************************************//
template<class T>
class IRichEditDispT : public TAutoDriver<IRichEdit>
{
public:
  IRichEditDispT(){}

  IRichEditDispT(IRichEdit *pintf)
  {
    TAutoDriver<IRichEdit>::Bind(pintf, false);
  }

  IRichEditDispT(IRichEditPtr pintf)
  {
    TAutoDriver<IRichEdit>::Bind(pintf, true);
  }

  IRichEditDispT& operator=(IRichEdit *pintf)
  {
    TAutoDriver<IRichEdit>::Bind(pintf, false);
    return *this;
  }

  IRichEditDispT& operator=(IRichEditPtr pintf)
  {
    TAutoDriver<IRichEdit>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RichEdit));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RichEdit);
  }

  HRESULT         __fastcall get_SelFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SelFont(void);
  HRESULT         __fastcall set_SelFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_SelFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Paragraph(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Paragraph(void);
  HRESULT         __fastcall FindText(BSTR Text/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                      long MinPos/*[in,def,opt]*/, long MaxPos/*[in,def,opt]*/, 
                                      long* pResult/*[out,retval]*/);
  long            __fastcall FindText(BSTR Text/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                      long MinPos/*[in,def,opt]*/, long MaxPos/*[in,def,opt]*/);
  HRESULT         __fastcall Load(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                  VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Load(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall Save(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                  VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Save(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall get_AutoURLDetect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoURLDetect(void);
  HRESULT         __fastcall set_AutoURLDetect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CanRedo(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanRedo(void);
  HRESULT         __fastcall Redo();
  HRESULT         __fastcall get_UndoLimit(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_UndoLimit(void);
  HRESULT         __fastcall set_UndoLimit(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall set_OnSelChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Print(BSTR Driver/*[in]*/, BSTR Device/*[in]*/, 
                                   LPDISPATCH PrintInfo/*[in]*/, 
                                   VARIANT_BOOL Selection/*[in,def,opt]*/);
  HRESULT         __fastcall get_PageRotate(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_PageRotate(void);
  HRESULT         __fastcall set_PageRotate(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_UndoName(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_UndoName(void);
  HRESULT         __fastcall get_UndoNameString(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UndoNameString(void);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MaxLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT         __fastcall set_MaxLength(long pVal/*[in]*/);
  HRESULT         __fastcall get_CharCase(long* pVal/*[out,retval]*/);
  long            __fastcall get_CharCase(void);
  HRESULT         __fastcall set_CharCase(long pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordChar(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PasswordChar(void);
  HRESULT         __fastcall set_PasswordChar(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MultiLine(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiLine(void);
  HRESULT         __fastcall set_MultiLine(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ScrollBars(void);
  HRESULT         __fastcall set_ScrollBars(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Modified(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Modified(void);
  HRESULT         __fastcall set_Modified(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SelStart(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelStart(long pVal/*[in]*/);
  HRESULT         __fastcall get_SelEnd(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelEnd(void);
  HRESULT         __fastcall set_SelEnd(long pVal/*[in]*/);
  HRESULT         __fastcall get_SelLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelLength(long pVal/*[in]*/);
  HRESULT         __fastcall get_LeftMargin(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_LeftMargin(void);
  HRESULT         __fastcall set_LeftMargin(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_RightMargin(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_RightMargin(void);
  HRESULT         __fastcall set_RightMargin(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_WordWrap(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT         __fastcall set_WordWrap(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TextAlign(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_TextAlign(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall SelectAll();
  HRESULT         __fastcall ClearSelection();
  HRESULT         __fastcall ReplaceSelection(BSTR NewText/*[in]*/, 
                                              VARIANT_BOOL CanUndo/*[in,def,opt]*/);
  HRESULT         __fastcall get_CanUndo(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanUndo(void);
  HRESULT         __fastcall set_CanUndo(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CanPaste(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPaste(void);
  HRESULT         __fastcall Undo();
  HRESULT         __fastcall Cut();
  HRESULT         __fastcall Copy();
  HRESULT         __fastcall Paste();
  HRESULT         __fastcall get_DataType(long* pVal/*[out,retval]*/);
  long            __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(long pVal/*[in]*/);
  HRESULT         __fastcall get_Min(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Max(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_LineFromChar(long Index/*[in,def,opt]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_LineFromChar(long Index/*[in,def,opt]*/);
  HRESULT         __fastcall get_AcceptsReturn(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AcceptsReturn(void);
  HRESULT         __fastcall set_AcceptsReturn(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AcceptsTab(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AcceptsTab(void);
  HRESULT         __fastcall set_AcceptsTab(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoHeight(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoHeight(void);
  HRESULT         __fastcall set_AutoHeight(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CueBanner(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CueBanner(void);
  HRESULT         __fastcall set_CueBanner(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CueBannerAlwaysVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CueBannerAlwaysVisible(void);
  HRESULT         __fastcall set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BalloonTip(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BalloonTip(void);
  HRESULT         __fastcall get_TopIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopIndex(void);
  HRESULT         __fastcall set_TopIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, BSTR* pvar/*[out,retval]*/);
  BSTR            __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR Item/*[in]*/, long* pItemIndex/*[out,retval]*/);
  long            __fastcall Add(BSTR Item/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/, 
                                    long* pItemIndex/*[out,retval]*/);
  long            __fastcall Insert(long Index/*[in]*/, BSTR Item/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall ExChange(long A/*[in]*/, long B/*[in]*/);
  HRESULT         __fastcall Sort(long DataType/*[in,def,opt]*/, 
                                  VARIANT_BOOL Reverse/*[in,def,opt]*/);
  HRESULT         __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/, 
                                  long* pItemIndex/*[out,retval]*/);
  long            __fastcall Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                  VARIANT_BOOL IgnoreCase/*[in,def,opt]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      SelFont = {read = get_SelFont, write = set_SelFont};
  __property   LPDISPATCH      Paragraph = {read = get_Paragraph};
  __property   VARIANT_BOOL    AutoURLDetect = {read = get_AutoURLDetect, write = set_AutoURLDetect};
  __property   VARIANT_BOOL    CanRedo = {read = get_CanRedo};
  __property   unsigned_long   UndoLimit = {read = get_UndoLimit, write = set_UndoLimit};
  __property   unsigned_long   PageRotate = {read = get_PageRotate, write = set_PageRotate};
  __property   unsigned_long   UndoName = {read = get_UndoName};
  __property   BSTR            UndoNameString = {read = get_UndoNameString};

  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            CharCase = {read = get_CharCase, write = set_CharCase};
  __property   BSTR            PasswordChar = {read = get_PasswordChar, write = set_PasswordChar};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   VARIANT_BOOL    MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   unsigned_long   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    Modified = {read = get_Modified, write = set_Modified};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   long            SelEnd = {read = get_SelEnd, write = set_SelEnd};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   unsigned_short  LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
  __property   unsigned_short  RightMargin = {read = get_RightMargin, write = set_RightMargin};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   unsigned_short  TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo, write = set_CanUndo};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   long            DataType = {read = get_DataType, write = set_DataType};
  __property   VARIANT_BOOL    AcceptsReturn = {read = get_AcceptsReturn, write = set_AcceptsReturn};
  __property   VARIANT_BOOL    AcceptsTab = {read = get_AcceptsTab, write = set_AcceptsTab};
  __property   VARIANT_BOOL    AutoHeight = {read = get_AutoHeight, write = set_AutoHeight};
  __property   BSTR            CueBanner = {read = get_CueBanner, write = set_CueBanner};
  __property   VARIANT_BOOL    CueBannerAlwaysVisible = {read = get_CueBannerAlwaysVisible, write = set_CueBannerAlwaysVisible};
  __property   LPDISPATCH      BalloonTip = {read = get_BalloonTip};

  __property   long            TopIndex = {read = get_TopIndex, write = set_TopIndex};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IRichEditDispT<IRichEdit> IRichEditDisp;

// *********************************************************************//
// DispIntf:  IUpDown
// Flags:     (4096) Dispatchable
// GUID:      {F09EE7EC-728F-4D8B-AE8E-0F5A113FD36E}
// *********************************************************************//
template<class T>
class IUpDownDispT : public TAutoDriver<IUpDown>
{
public:
  IUpDownDispT(){}

  IUpDownDispT(IUpDown *pintf)
  {
    TAutoDriver<IUpDown>::Bind(pintf, false);
  }

  IUpDownDispT(IUpDownPtr pintf)
  {
    TAutoDriver<IUpDown>::Bind(pintf, true);
  }

  IUpDownDispT& operator=(IUpDown *pintf)
  {
    TAutoDriver<IUpDown>::Bind(pintf, false);
    return *this;
  }

  IUpDownDispT& operator=(IUpDownPtr pintf)
  {
    TAutoDriver<IUpDown>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_UpDown));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_UpDown);
  }

  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HotTrack(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTrack(void);
  HRESULT         __fastcall set_HotTrack(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Min(long* pVal/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(long pVal/*[in]*/);
  HRESULT         __fastcall get_Max(long* pVal/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(long pVal/*[in]*/);
  HRESULT         __fastcall get_Step(long* pVal/*[out,retval]*/);
  long            __fastcall get_Step(void);
  HRESULT         __fastcall set_Step(long pVal/*[in]*/);
  HRESULT         __fastcall StepIt();
  HRESULT         __fastcall StepBy(long Delta/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};
  __property   VARIANT_BOOL    HotTrack = {read = get_HotTrack, write = set_HotTrack};

  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Position = {read = get_Position, write = set_Position};
  __property   long            Step = {read = get_Step, write = set_Step};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IUpDownDispT<IUpDown> IUpDownDisp;

// *********************************************************************//
// DispIntf:  ITrackBar
// Flags:     (4096) Dispatchable
// GUID:      {D47DC012-3D4E-4412-8A06-E747160435E0}
// *********************************************************************//
template<class T>
class ITrackBarDispT : public TAutoDriver<ITrackBar>
{
public:
  ITrackBarDispT(){}

  ITrackBarDispT(ITrackBar *pintf)
  {
    TAutoDriver<ITrackBar>::Bind(pintf, false);
  }

  ITrackBarDispT(ITrackBarPtr pintf)
  {
    TAutoDriver<ITrackBar>::Bind(pintf, true);
  }

  ITrackBarDispT& operator=(ITrackBar *pintf)
  {
    TAutoDriver<ITrackBar>::Bind(pintf, false);
    return *this;
  }

  ITrackBarDispT& operator=(ITrackBarPtr pintf)
  {
    TAutoDriver<ITrackBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TrackBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TrackBar);
  }

  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TickMarks(long* pVal/*[out,retval]*/);
  long            __fastcall get_TickMarks(void);
  HRESULT         __fastcall set_TickMarks(long pVal/*[in]*/);
  HRESULT         __fastcall get_SmallChange(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_SmallChange(void);
  HRESULT         __fastcall set_SmallChange(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_LargeChange(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_LargeChange(void);
  HRESULT         __fastcall set_LargeChange(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ThumbLength(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ThumbLength(void);
  HRESULT         __fastcall set_ThumbLength(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_TickFrequency(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TickFrequency(void);
  HRESULT         __fastcall set_TickFrequency(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_EnableSelRange(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableSelRange(void);
  HRESULT         __fastcall set_EnableSelRange(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SelStart(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelStart(long pVal/*[in]*/);
  HRESULT         __fastcall get_SelEnd(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelEnd(void);
  HRESULT         __fastcall set_SelEnd(long pVal/*[in]*/);
  HRESULT         __fastcall SelectAll();
  HRESULT         __fastcall ClearSelection();
  HRESULT         __fastcall get_Min(long* pVal/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(long pVal/*[in]*/);
  HRESULT         __fastcall get_Max(long* pVal/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(long pVal/*[in]*/);
  HRESULT         __fastcall get_Step(long* pVal/*[out,retval]*/);
  long            __fastcall get_Step(void);
  HRESULT         __fastcall set_Step(long pVal/*[in]*/);
  HRESULT         __fastcall StepIt();
  HRESULT         __fastcall StepBy(long Delta/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};
  __property   long            TickMarks = {read = get_TickMarks, write = set_TickMarks};
  __property   unsigned_long   SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   unsigned_long   LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   unsigned_long   ThumbLength = {read = get_ThumbLength, write = set_ThumbLength};
  __property   unsigned_long   TickFrequency = {read = get_TickFrequency, write = set_TickFrequency};
  __property   VARIANT_BOOL    EnableSelRange = {read = get_EnableSelRange, write = set_EnableSelRange};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   long            SelEnd = {read = get_SelEnd, write = set_SelEnd};

  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Position = {read = get_Position, write = set_Position};
  __property   long            Step = {read = get_Step, write = set_Step};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ITrackBarDispT<ITrackBar> ITrackBarDisp;

// *********************************************************************//
// DispIntf:  IHotKey
// Flags:     (4096) Dispatchable
// GUID:      {E9013635-B5D5-48D7-81A4-41D3AFF5A717}
// *********************************************************************//
template<class T>
class IHotKeyDispT : public TAutoDriver<IHotKey>
{
public:
  IHotKeyDispT(){}

  IHotKeyDispT(IHotKey *pintf)
  {
    TAutoDriver<IHotKey>::Bind(pintf, false);
  }

  IHotKeyDispT(IHotKeyPtr pintf)
  {
    TAutoDriver<IHotKey>::Bind(pintf, true);
  }

  IHotKeyDispT& operator=(IHotKey *pintf)
  {
    TAutoDriver<IHotKey>::Bind(pintf, false);
    return *this;
  }

  IHotKeyDispT& operator=(IHotKeyPtr pintf)
  {
    TAutoDriver<IHotKey>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HotKey));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HotKey);
  }

  HRESULT         __fastcall get_Key(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_InvalidKeys(long* pVal/*[out,retval]*/);
  long            __fastcall get_InvalidKeys(void);
  HRESULT         __fastcall set_InvalidKeys(long pVal/*[in]*/);
  HRESULT         __fastcall get_DefaultKey(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultKey(void);
  HRESULT         __fastcall set_DefaultKey(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            InvalidKeys = {read = get_InvalidKeys, write = set_InvalidKeys};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IHotKeyDispT<IHotKey> IHotKeyDisp;

// *********************************************************************//
// DispIntf:  IAnimate
// Flags:     (4096) Dispatchable
// GUID:      {CD27766E-91BF-4D27-BA1E-CBFE3CB55BD1}
// *********************************************************************//
template<class T>
class IAnimateDispT : public TAutoDriver<IAnimate>
{
public:
  IAnimateDispT(){}

  IAnimateDispT(IAnimate *pintf)
  {
    TAutoDriver<IAnimate>::Bind(pintf, false);
  }

  IAnimateDispT(IAnimatePtr pintf)
  {
    TAutoDriver<IAnimate>::Bind(pintf, true);
  }

  IAnimateDispT& operator=(IAnimate *pintf)
  {
    TAutoDriver<IAnimate>::Bind(pintf, false);
    return *this;
  }

  IAnimateDispT& operator=(IAnimatePtr pintf)
  {
    TAutoDriver<IAnimate>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Animate));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Animate);
  }

  HRESULT         __fastcall Open(VARIANT newVal/*[in]*/, VARIANT_BOOL StartPlay/*[in,def,opt]*/, 
                                  VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Open(VARIANT newVal/*[in]*/, VARIANT_BOOL StartPlay/*[in,def,opt]*/);
  HRESULT         __fastcall Play();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall Close();
  HRESULT         __fastcall Seek(long Position/*[in]*/);
  HRESULT         __fastcall get_AutoRepeat(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoRepeat(void);
  HRESULT         __fastcall set_AutoRepeat(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Transparent(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Transparent(void);
  HRESULT         __fastcall set_Transparent(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Center(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Center(void);
  HRESULT         __fastcall set_Center(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    AutoRepeat = {read = get_AutoRepeat, write = set_AutoRepeat};
  __property   VARIANT_BOOL    Transparent = {read = get_Transparent, write = set_Transparent};
  __property   VARIANT_BOOL    Center = {read = get_Center, write = set_Center};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IAnimateDispT<IAnimate> IAnimateDisp;

// *********************************************************************//
// DispIntf:  IIPAddress
// Flags:     (4096) Dispatchable
// GUID:      {CCC32DB0-A7E0-4947-A757-9534AB58027F}
// *********************************************************************//
template<class T>
class IIPAddressDispT : public TAutoDriver<IIPAddress>
{
public:
  IIPAddressDispT(){}

  IIPAddressDispT(IIPAddress *pintf)
  {
    TAutoDriver<IIPAddress>::Bind(pintf, false);
  }

  IIPAddressDispT(IIPAddressPtr pintf)
  {
    TAutoDriver<IIPAddress>::Bind(pintf, true);
  }

  IIPAddressDispT& operator=(IIPAddress *pintf)
  {
    TAutoDriver<IIPAddress>::Bind(pintf, false);
    return *this;
  }

  IIPAddressDispT& operator=(IIPAddressPtr pintf)
  {
    TAutoDriver<IIPAddress>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_IPAddress));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_IPAddress);
  }

  HRESULT         __fastcall get_Value(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall SetRange(long Index/*[in]*/, unsigned_char Min/*[in]*/, 
                                      unsigned_char Max/*[in]*/);
  HRESULT         __fastcall get_IsBlank(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsBlank(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Value = {read = get_Value, write = set_Value};
  __property   VARIANT_BOOL    IsBlank = {read = get_IsBlank};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IIPAddressDispT<IIPAddress> IIPAddressDisp;

// *********************************************************************//
// DispIntf:  IDateTime
// Flags:     (4096) Dispatchable
// GUID:      {E5197962-B022-4902-B92C-B46F2CCC8875}
// *********************************************************************//
template<class T>
class IDateTimeDispT : public TAutoDriver<IDateTime>
{
public:
  IDateTimeDispT(){}

  IDateTimeDispT(IDateTime *pintf)
  {
    TAutoDriver<IDateTime>::Bind(pintf, false);
  }

  IDateTimeDispT(IDateTimePtr pintf)
  {
    TAutoDriver<IDateTime>::Bind(pintf, true);
  }

  IDateTimeDispT& operator=(IDateTime *pintf)
  {
    TAutoDriver<IDateTime>::Bind(pintf, false);
    return *this;
  }

  IDateTimeDispT& operator=(IDateTimePtr pintf)
  {
    TAutoDriver<IDateTime>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DateTime));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DateTime);
  }

  HRESULT         __fastcall get_Value(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(DATE pVal/*[in]*/);
  HRESULT         __fastcall get_Year(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Year(void);
  HRESULT         __fastcall set_Year(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Month(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Month(void);
  HRESULT         __fastcall set_Month(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Day(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Day(void);
  HRESULT         __fastcall set_Day(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Hour(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Hour(void);
  HRESULT         __fastcall set_Hour(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Minute(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Minute(void);
  HRESULT         __fastcall set_Minute(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Second(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Second(void);
  HRESULT         __fastcall set_Second(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Milliseconds(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Milliseconds(void);
  HRESULT         __fastcall set_Milliseconds(unsigned_short pVal/*[in]*/);

  __property   DATE            Value = {read = get_Value, write = set_Value};
  __property   unsigned_short  Year = {read = get_Year, write = set_Year};
  __property   unsigned_short  Month = {read = get_Month, write = set_Month};
  __property   unsigned_short  Day = {read = get_Day, write = set_Day};
  __property   unsigned_short  Hour = {read = get_Hour, write = set_Hour};
  __property   unsigned_short  Minute = {read = get_Minute, write = set_Minute};
  __property   unsigned_short  Second = {read = get_Second, write = set_Second};
  __property   unsigned_short  Milliseconds = {read = get_Milliseconds, write = set_Milliseconds};
};
typedef IDateTimeDispT<IDateTime> IDateTimeDisp;

// *********************************************************************//
// DispIntf:  IDateTimeControl
// Flags:     (4096) Dispatchable
// GUID:      {0E53C57C-CAC1-4290-8C57-559AD095F9F3}
// *********************************************************************//
template<class T>
class IDateTimeControlDispT : public TAutoDriver<IDateTimeControl>
{
public:
  IDateTimeControlDispT(){}

  IDateTimeControlDispT(IDateTimeControl *pintf)
  {
    TAutoDriver<IDateTimeControl>::Bind(pintf, false);
  }

  IDateTimeControlDispT(IDateTimeControlPtr pintf)
  {
    TAutoDriver<IDateTimeControl>::Bind(pintf, true);
  }

  IDateTimeControlDispT& operator=(IDateTimeControl *pintf)
  {
    TAutoDriver<IDateTimeControl>::Bind(pintf, false);
    return *this;
  }

  IDateTimeControlDispT& operator=(IDateTimeControlPtr pintf)
  {
    TAutoDriver<IDateTimeControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Value(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Value(void);
  HRESULT         __fastcall get_Min(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Min(void);
  HRESULT         __fastcall get_Max(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Max(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Value = {read = get_Value};
  __property   LPDISPATCH      Min = {read = get_Min};
  __property   LPDISPATCH      Max = {read = get_Max};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IDateTimeControlDispT<IDateTimeControl> IDateTimeControlDisp;

// *********************************************************************//
// DispIntf:  IDateTimePicker
// Flags:     (4096) Dispatchable
// GUID:      {7FCABADD-F460-4049-ABBC-79821C613284}
// *********************************************************************//
template<class T>
class IDateTimePickerDispT : public TAutoDriver<IDateTimePicker>
{
public:
  IDateTimePickerDispT(){}

  IDateTimePickerDispT(IDateTimePicker *pintf)
  {
    TAutoDriver<IDateTimePicker>::Bind(pintf, false);
  }

  IDateTimePickerDispT(IDateTimePickerPtr pintf)
  {
    TAutoDriver<IDateTimePicker>::Bind(pintf, true);
  }

  IDateTimePickerDispT& operator=(IDateTimePicker *pintf)
  {
    TAutoDriver<IDateTimePicker>::Bind(pintf, false);
    return *this;
  }

  IDateTimePickerDispT& operator=(IDateTimePickerPtr pintf)
  {
    TAutoDriver<IDateTimePicker>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DateTimePicker));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DateTimePicker);
  }

  HRESULT         __fastcall get_Style(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ShowCheckBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowCheckBox(void);
  HRESULT         __fastcall set_ShowCheckBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ShowUpDown(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowUpDown(void);
  HRESULT         __fastcall set_ShowUpDown(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DropDownRightAlign(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DropDownRightAlign(void);
  HRESULT         __fastcall set_DropDownRightAlign(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CustomFormat(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CustomFormat(void);
  HRESULT         __fastcall set_CustomFormat(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Value(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Value(void);
  HRESULT         __fastcall get_Min(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Min(void);
  HRESULT         __fastcall get_Max(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Max(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Style = {read = get_Style, write = set_Style};
  __property   VARIANT_BOOL    ShowCheckBox = {read = get_ShowCheckBox, write = set_ShowCheckBox};
  __property   VARIANT_BOOL    ShowUpDown = {read = get_ShowUpDown, write = set_ShowUpDown};
  __property   VARIANT_BOOL    DropDownRightAlign = {read = get_DropDownRightAlign, write = set_DropDownRightAlign};
  __property   BSTR            CustomFormat = {read = get_CustomFormat, write = set_CustomFormat};

  __property   LPDISPATCH      Value = {read = get_Value};
  __property   LPDISPATCH      Min = {read = get_Min};
  __property   LPDISPATCH      Max = {read = get_Max};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IDateTimePickerDispT<IDateTimePicker> IDateTimePickerDisp;

// *********************************************************************//
// DispIntf:  ICalendar
// Flags:     (4096) Dispatchable
// GUID:      {EE27A882-AD8E-4723-AAA9-E10CFD472F75}
// *********************************************************************//
template<class T>
class ICalendarDispT : public TAutoDriver<ICalendar>
{
public:
  ICalendarDispT(){}

  ICalendarDispT(ICalendar *pintf)
  {
    TAutoDriver<ICalendar>::Bind(pintf, false);
  }

  ICalendarDispT(ICalendarPtr pintf)
  {
    TAutoDriver<ICalendar>::Bind(pintf, true);
  }

  ICalendarDispT& operator=(ICalendar *pintf)
  {
    TAutoDriver<ICalendar>::Bind(pintf, false);
    return *this;
  }

  ICalendarDispT& operator=(ICalendarPtr pintf)
  {
    TAutoDriver<ICalendar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Calendar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Calendar);
  }

  HRESULT         __fastcall get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_MultiSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SelEnd(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SelEnd(void);
  HRESULT         __fastcall get_SelStart(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SelStart(void);
  HRESULT         __fastcall get_Today(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Today(void);
  HRESULT         __fastcall get_MonthDelta(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MonthDelta(void);
  HRESULT         __fastcall set_MonthDelta(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxSelCount(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MaxSelCount(void);
  HRESULT         __fastcall set_MaxSelCount(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_TodayText(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TodayText(void);
  HRESULT         __fastcall set_TodayText(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TodayCircle(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TodayCircle(void);
  HRESULT         __fastcall set_TodayCircle(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_WeekNumbers(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WeekNumbers(void);
  HRESULT         __fastcall set_WeekNumbers(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Value(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Value(void);
  HRESULT         __fastcall get_Min(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Min(void);
  HRESULT         __fastcall get_Max(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Max(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   LPDISPATCH      SelEnd = {read = get_SelEnd};
  __property   LPDISPATCH      SelStart = {read = get_SelStart};
  __property   LPDISPATCH      Today = {read = get_Today};
  __property   unsigned_long   MonthDelta = {read = get_MonthDelta, write = set_MonthDelta};
  __property   unsigned_long   MaxSelCount = {read = get_MaxSelCount, write = set_MaxSelCount};
  __property   VARIANT_BOOL    TodayText = {read = get_TodayText, write = set_TodayText};
  __property   VARIANT_BOOL    TodayCircle = {read = get_TodayCircle, write = set_TodayCircle};
  __property   VARIANT_BOOL    WeekNumbers = {read = get_WeekNumbers, write = set_WeekNumbers};

  __property   LPDISPATCH      Value = {read = get_Value};
  __property   LPDISPATCH      Min = {read = get_Min};
  __property   LPDISPATCH      Max = {read = get_Max};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ICalendarDispT<ICalendar> ICalendarDisp;

// *********************************************************************//
// DispIntf:  ISplitter
// Flags:     (4096) Dispatchable
// GUID:      {76A49C6D-284D-45F0-856E-6E9714281AC5}
// *********************************************************************//
template<class T>
class ISplitterDispT : public TAutoDriver<ISplitter>
{
public:
  ISplitterDispT(){}

  ISplitterDispT(ISplitter *pintf)
  {
    TAutoDriver<ISplitter>::Bind(pintf, false);
  }

  ISplitterDispT(ISplitterPtr pintf)
  {
    TAutoDriver<ISplitter>::Bind(pintf, true);
  }

  ISplitterDispT& operator=(ISplitter *pintf)
  {
    TAutoDriver<ISplitter>::Bind(pintf, false);
    return *this;
  }

  ISplitterDispT& operator=(ISplitterPtr pintf)
  {
    TAutoDriver<ISplitter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Splitter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Splitter);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);


  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ISplitterDispT<ISplitter> ISplitterDisp;

// *********************************************************************//
// DispIntf:  ISplitPanel
// Flags:     (4096) Dispatchable
// GUID:      {7BB7C6EB-B2E7-4472-94C0-B22CC0457E80}
// *********************************************************************//
template<class T>
class ISplitPanelDispT : public TAutoDriver<ISplitPanel>
{
public:
  ISplitPanelDispT(){}

  ISplitPanelDispT(ISplitPanel *pintf)
  {
    TAutoDriver<ISplitPanel>::Bind(pintf, false);
  }

  ISplitPanelDispT(ISplitPanelPtr pintf)
  {
    TAutoDriver<ISplitPanel>::Bind(pintf, true);
  }

  ISplitPanelDispT& operator=(ISplitPanel *pintf)
  {
    TAutoDriver<ISplitPanel>::Bind(pintf, false);
    return *this;
  }

  ISplitPanelDispT& operator=(ISplitPanelPtr pintf)
  {
    TAutoDriver<ISplitPanel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SplitPanel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SplitPanel);
  }

  HRESULT         __fastcall get_DefaultSplit(double* pVal/*[out,retval]*/);
  double          __fastcall get_DefaultSplit(void);
  HRESULT         __fastcall set_DefaultSplit(double pVal/*[in]*/);
  HRESULT         __fastcall get_Live(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Live(void);
  HRESULT         __fastcall set_Live(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Vertical(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Vertical(void);
  HRESULT         __fastcall set_Vertical(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStatusBar(void);
  HRESULT         __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/);
  HRESULT         __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/);
  HRESULT         __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitter(unsigned_short Align/*[in]*/);
  HRESULT         __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/);
  HRESULT         __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/
                                                , long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/
                                  , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/);
  HRESULT         __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/);
  HRESULT         __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/);
  HRESULT         __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/);
  HRESULT         __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/);
  HRESULT         __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/);
  HRESULT         __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/);
  HRESULT         __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/
                                 , long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/);
  HRESULT         __fastcall Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Polygon(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/);
  HRESULT         __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/);
  HRESULT         __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_BorderWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BevelWidth(void);
  HRESULT         __fastcall set_BevelWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelInner(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(long pVal/*[in]*/);
  HRESULT         __fastcall get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GraphFont(void);
  HRESULT         __fastcall set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_CaptureMouse(void);
  HRESULT         __fastcall set_CaptureMouse(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderParentBackground(void);
  HRESULT         __fastcall set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSplit(void);
  HRESULT         __fastcall set_AutoSplit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupBox(void);
  HRESULT         __fastcall set_GroupBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Margin(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Margin(void);
  HRESULT         __fastcall set_Margin(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginTop(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/);
  LPDISPATCH      __fastcall Get(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   double          DefaultSplit = {read = get_DefaultSplit, write = set_DefaultSplit};
  __property   VARIANT_BOOL    Live = {read = get_Live, write = set_Live};
  __property   VARIANT_BOOL    Vertical = {read = get_Vertical, write = set_Vertical};

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   unsigned_long   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_long   BevelWidth = {read = get_BevelWidth, write = set_BevelWidth};
  __property   long            BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   long            BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   LPDISPATCH      GraphFont = {read = get_GraphFont, write = set_GraphFont};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};
  __property   unsigned_short  CaptureMouse = {read = get_CaptureMouse, write = set_CaptureMouse};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    BorderParentBackground = {read = get_BorderParentBackground, write = set_BorderParentBackground};
  __property   VARIANT_BOOL    AutoSplit = {read = get_AutoSplit, write = set_AutoSplit};
  __property   VARIANT_BOOL    GroupBox = {read = get_GroupBox, write = set_GroupBox};
  __property   unsigned_long   Margin = {read = get_Margin, write = set_Margin};
  __property   unsigned_long   MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   unsigned_long   MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   unsigned_long   MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   unsigned_long   MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ISplitPanelDispT<ISplitPanel> ISplitPanelDisp;

// *********************************************************************//
// DispIntf:  IPolygon
// Flags:     (4096) Dispatchable
// GUID:      {01F209D7-27B9-41CD-8DAE-0DAF2875A8FA}
// *********************************************************************//
template<class T>
class IPolygonDispT : public TAutoDriver<IPolygon>
{
public:
  IPolygonDispT(){}

  IPolygonDispT(IPolygon *pintf)
  {
    TAutoDriver<IPolygon>::Bind(pintf, false);
  }

  IPolygonDispT(IPolygonPtr pintf)
  {
    TAutoDriver<IPolygon>::Bind(pintf, true);
  }

  IPolygonDispT& operator=(IPolygon *pintf)
  {
    TAutoDriver<IPolygon>::Bind(pintf, false);
    return *this;
  }

  IPolygonDispT& operator=(IPolygonPtr pintf)
  {
    TAutoDriver<IPolygon>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PolygonGraphic));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PolygonGraphic);
  }

  HRESULT         __fastcall get_FillAll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FillAll(void);
  HRESULT         __fastcall set_FillAll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    FillAll = {read = get_FillAll, write = set_FillAll};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IPolygonDispT<IPolygon> IPolygonDisp;

// *********************************************************************//
// DispIntf:  IImage
// Flags:     (4096) Dispatchable
// GUID:      {DAF6D7B8-1AB3-4DAC-8BDA-4E5234AD8731}
// *********************************************************************//
template<class T>
class IImageDispT : public TAutoDriver<IImage>
{
public:
  IImageDispT(){}

  IImageDispT(IImage *pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, false);
  }

  IImageDispT(IImagePtr pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, true);
  }

  IImageDispT& operator=(IImage *pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, false);
    return *this;
  }

  IImageDispT& operator=(IImagePtr pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ImageGraphic));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ImageGraphic);
  }

  HRESULT         __fastcall get_DrawType(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_DrawType(void);
  HRESULT         __fastcall set_DrawType(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_CopyMode(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_CopyMode(void);
  HRESULT         __fastcall set_CopyMode(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ImageWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ImageWidth(void);
  HRESULT         __fastcall get_ImageHeight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ImageHeight(void);
  HRESULT         __fastcall get_AlphaBlend(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_AlphaBlend(void);
  HRESULT         __fastcall set_AlphaBlend(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   DrawType = {read = get_DrawType, write = set_DrawType};
  __property   unsigned_long   CopyMode = {read = get_CopyMode, write = set_CopyMode};
  __property   unsigned_long   ImageWidth = {read = get_ImageWidth};
  __property   unsigned_long   ImageHeight = {read = get_ImageHeight};
  __property   unsigned_long   AlphaBlend = {read = get_AlphaBlend, write = set_AlphaBlend};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IImageDispT<IImage> IImageDisp;

// *********************************************************************//
// DispIntf:  ILine
// Flags:     (4096) Dispatchable
// GUID:      {D6D9AAA2-739F-4807-814E-0E7692E18E62}
// *********************************************************************//
template<class T>
class ILineDispT : public TAutoDriver<ILine>
{
public:
  ILineDispT(){}

  ILineDispT(ILine *pintf)
  {
    TAutoDriver<ILine>::Bind(pintf, false);
  }

  ILineDispT(ILinePtr pintf)
  {
    TAutoDriver<ILine>::Bind(pintf, true);
  }

  ILineDispT& operator=(ILine *pintf)
  {
    TAutoDriver<ILine>::Bind(pintf, false);
    return *this;
  }

  ILineDispT& operator=(ILinePtr pintf)
  {
    TAutoDriver<ILine>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_LineGraphic));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_LineGraphic);
  }

  HRESULT         __fastcall get_x(long Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_x(long Index/*[in]*/);
  HRESULT         __fastcall set_x(long Index/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_y(long Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_y(long Index/*[in]*/);
  HRESULT         __fastcall set_y(long Index/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);


  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef ILineDispT<ILine> ILineDisp;

// *********************************************************************//
// DispIntf:  IPrintDialogBase
// Flags:     (4096) Dispatchable
// GUID:      {0E609193-AF42-4ECC-9897-4F279B659D1F}
// *********************************************************************//
template<class T>
class IPrintDialogBaseDispT : public TAutoDriver<IPrintDialogBase>
{
public:
  IPrintDialogBaseDispT(){}

  IPrintDialogBaseDispT(IPrintDialogBase *pintf)
  {
    TAutoDriver<IPrintDialogBase>::Bind(pintf, false);
  }

  IPrintDialogBaseDispT(IPrintDialogBasePtr pintf)
  {
    TAutoDriver<IPrintDialogBase>::Bind(pintf, true);
  }

  IPrintDialogBaseDispT& operator=(IPrintDialogBase *pintf)
  {
    TAutoDriver<IPrintDialogBase>::Bind(pintf, false);
    return *this;
  }

  IPrintDialogBaseDispT& operator=(IPrintDialogBasePtr pintf)
  {
    TAutoDriver<IPrintDialogBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PrintDialogBase));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PrintDialogBase);
  }

  HRESULT         __fastcall get_Driver(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Driver(void);
  HRESULT         __fastcall get_Device(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Device(void);
  HRESULT         __fastcall get_Port(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Port(void);

  __property   BSTR            Driver = {read = get_Driver};
  __property   BSTR            Device = {read = get_Device};
  __property   BSTR            Port = {read = get_Port};
};
typedef IPrintDialogBaseDispT<IPrintDialogBase> IPrintDialogBaseDisp;

// *********************************************************************//
// DispIntf:  IPrintDialog
// Flags:     (4096) Dispatchable
// GUID:      {A48A739A-BAAF-4693-B8AE-B594065B8D17}
// *********************************************************************//
template<class T>
class IPrintDialogDispT : public TAutoDriver<IPrintDialog>
{
public:
  IPrintDialogDispT(){}

  IPrintDialogDispT(IPrintDialog *pintf)
  {
    TAutoDriver<IPrintDialog>::Bind(pintf, false);
  }

  IPrintDialogDispT(IPrintDialogPtr pintf)
  {
    TAutoDriver<IPrintDialog>::Bind(pintf, true);
  }

  IPrintDialogDispT& operator=(IPrintDialog *pintf)
  {
    TAutoDriver<IPrintDialog>::Bind(pintf, false);
    return *this;
  }

  IPrintDialogDispT& operator=(IPrintDialogPtr pintf)
  {
    TAutoDriver<IPrintDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PrintDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PrintDialog);
  }

  HRESULT         __fastcall get_Copies(long* pVal/*[out,retval]*/);
  long            __fastcall get_Copies(void);
  HRESULT         __fastcall get_Collate(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Collate(void);
  HRESULT         __fastcall get_Selection(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selection(void);
  HRESULT         __fastcall get_All(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_All(void);
  HRESULT         __fastcall get_Range(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Range(void);
  HRESULT         __fastcall get_ToFile(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ToFile(void);
  HRESULT         __fastcall get_FromPage(long* pVal/*[out,retval]*/);
  long            __fastcall get_FromPage(void);
  HRESULT         __fastcall get_ToPage(long* pVal/*[out,retval]*/);
  long            __fastcall get_ToPage(void);
  HRESULT         __fastcall get_Driver(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Driver(void);
  HRESULT         __fastcall get_Device(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Device(void);
  HRESULT         __fastcall get_Port(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Port(void);

  __property   long            Copies = {read = get_Copies};
  __property   VARIANT_BOOL    Collate = {read = get_Collate};
  __property   VARIANT_BOOL    Selection = {read = get_Selection};
  __property   VARIANT_BOOL    All = {read = get_All};
  __property   VARIANT_BOOL    Range = {read = get_Range};
  __property   VARIANT_BOOL    ToFile = {read = get_ToFile};
  __property   long            FromPage = {read = get_FromPage};
  __property   long            ToPage = {read = get_ToPage};

  __property   BSTR            Driver = {read = get_Driver};
  __property   BSTR            Device = {read = get_Device};
  __property   BSTR            Port = {read = get_Port};
};
typedef IPrintDialogDispT<IPrintDialog> IPrintDialogDisp;

// *********************************************************************//
// DispIntf:  IPageSetupDialog
// Flags:     (4096) Dispatchable
// GUID:      {740AE358-3778-4F25-89E8-CAE218F9F14C}
// *********************************************************************//
template<class T>
class IPageSetupDialogDispT : public TAutoDriver<IPageSetupDialog>
{
public:
  IPageSetupDialogDispT(){}

  IPageSetupDialogDispT(IPageSetupDialog *pintf)
  {
    TAutoDriver<IPageSetupDialog>::Bind(pintf, false);
  }

  IPageSetupDialogDispT(IPageSetupDialogPtr pintf)
  {
    TAutoDriver<IPageSetupDialog>::Bind(pintf, true);
  }

  IPageSetupDialogDispT& operator=(IPageSetupDialog *pintf)
  {
    TAutoDriver<IPageSetupDialog>::Bind(pintf, false);
    return *this;
  }

  IPageSetupDialogDispT& operator=(IPageSetupDialogPtr pintf)
  {
    TAutoDriver<IPageSetupDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PageSetupDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PageSetupDialog);
  }

  HRESULT         __fastcall get_PaperWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_PaperWidth(void);
  HRESULT         __fastcall get_PaperHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_PaperHeight(void);
  HRESULT         __fastcall get_LeftMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_LeftMargin(void);
  HRESULT         __fastcall get_RightMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_RightMargin(void);
  HRESULT         __fastcall get_TopMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopMargin(void);
  HRESULT         __fastcall get_BottomMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_BottomMargin(void);
  HRESULT         __fastcall get_Driver(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Driver(void);
  HRESULT         __fastcall get_Device(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Device(void);
  HRESULT         __fastcall get_Port(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Port(void);

  __property   long            PaperWidth = {read = get_PaperWidth};
  __property   long            PaperHeight = {read = get_PaperHeight};
  __property   long            LeftMargin = {read = get_LeftMargin};
  __property   long            RightMargin = {read = get_RightMargin};
  __property   long            TopMargin = {read = get_TopMargin};
  __property   long            BottomMargin = {read = get_BottomMargin};

  __property   BSTR            Driver = {read = get_Driver};
  __property   BSTR            Device = {read = get_Device};
  __property   BSTR            Port = {read = get_Port};
};
typedef IPageSetupDialogDispT<IPageSetupDialog> IPageSetupDialogDisp;

// *********************************************************************//
// DispIntf:  IFindReplaceDialog
// Flags:     (4096) Dispatchable
// GUID:      {A156794D-9CF8-4AC9-84B8-D657F8ECCAF1}
// *********************************************************************//
template<class T>
class IFindReplaceDialogDispT : public TAutoDriver<IFindReplaceDialog>
{
public:
  IFindReplaceDialogDispT(){}

  IFindReplaceDialogDispT(IFindReplaceDialog *pintf)
  {
    TAutoDriver<IFindReplaceDialog>::Bind(pintf, false);
  }

  IFindReplaceDialogDispT(IFindReplaceDialogPtr pintf)
  {
    TAutoDriver<IFindReplaceDialog>::Bind(pintf, true);
  }

  IFindReplaceDialogDispT& operator=(IFindReplaceDialog *pintf)
  {
    TAutoDriver<IFindReplaceDialog>::Bind(pintf, false);
    return *this;
  }

  IFindReplaceDialogDispT& operator=(IFindReplaceDialogPtr pintf)
  {
    TAutoDriver<IFindReplaceDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FindReplaceDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FindReplaceDialog);
  }

  HRESULT         __fastcall get_FindText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FindText(void);
  HRESULT         __fastcall get_ReplaceText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ReplaceText(void);
  HRESULT         __fastcall get_SearchDown(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SearchDown(void);
  HRESULT         __fastcall get_MatchCase(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MatchCase(void);
  HRESULT         __fastcall get_WholeWord(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WholeWord(void);
  HRESULT         __fastcall Close();
  HRESULT         __fastcall set_OnFind(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnReplace(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnReplaceAll(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnClose(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHelp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            FindText = {read = get_FindText};
  __property   BSTR            ReplaceText = {read = get_ReplaceText};
  __property   VARIANT_BOOL    SearchDown = {read = get_SearchDown};
  __property   VARIANT_BOOL    MatchCase = {read = get_MatchCase};
  __property   VARIANT_BOOL    WholeWord = {read = get_WholeWord};

  __property   BSTR            Type = {read = get_Type};
};
typedef IFindReplaceDialogDispT<IFindReplaceDialog> IFindReplaceDialogDisp;

// *********************************************************************//
// DispIntf:  IFontDialog
// Flags:     (4096) Dispatchable
// GUID:      {7C57CB6F-E98B-4E58-9813-DD46E590B79B}
// *********************************************************************//
template<class T>
class IFontDialogDispT : public TAutoDriver<IFontDialog>
{
public:
  IFontDialogDispT(){}

  IFontDialogDispT(IFontDialog *pintf)
  {
    TAutoDriver<IFontDialog>::Bind(pintf, false);
  }

  IFontDialogDispT(IFontDialogPtr pintf)
  {
    TAutoDriver<IFontDialog>::Bind(pintf, true);
  }

  IFontDialogDispT& operator=(IFontDialog *pintf)
  {
    TAutoDriver<IFontDialog>::Bind(pintf, false);
    return *this;
  }

  IFontDialogDispT& operator=(IFontDialogPtr pintf)
  {
    TAutoDriver<IFontDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FontDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FontDialog);
  }

  HRESULT         __fastcall get_Flags(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Flags(void);
  HRESULT         __fastcall set_Flags(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall Execute(VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Execute(void);
  HRESULT         __fastcall set_OnHelp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnApply(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Flags = {read = get_Flags, write = set_Flags};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};

  __property   BSTR            Type = {read = get_Type};
};
typedef IFontDialogDispT<IFontDialog> IFontDialogDisp;

// *********************************************************************//
// DispIntf:  IColorDialog
// Flags:     (4096) Dispatchable
// GUID:      {5A8CE32D-69D3-45F1-BE74-531AEBA638DB}
// *********************************************************************//
template<class T>
class IColorDialogDispT : public TAutoDriver<IColorDialog>
{
public:
  IColorDialogDispT(){}

  IColorDialogDispT(IColorDialog *pintf)
  {
    TAutoDriver<IColorDialog>::Bind(pintf, false);
  }

  IColorDialogDispT(IColorDialogPtr pintf)
  {
    TAutoDriver<IColorDialog>::Bind(pintf, true);
  }

  IColorDialogDispT& operator=(IColorDialog *pintf)
  {
    TAutoDriver<IColorDialog>::Bind(pintf, false);
    return *this;
  }

  IColorDialogDispT& operator=(IColorDialogPtr pintf)
  {
    TAutoDriver<IColorDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ColorDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ColorDialog);
  }

  HRESULT         __fastcall get_Flags(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Flags(void);
  HRESULT         __fastcall set_Flags(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Execute(VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Execute(void);
  HRESULT         __fastcall set_OnHelp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Flags = {read = get_Flags, write = set_Flags};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};

  __property   BSTR            Type = {read = get_Type};
};
typedef IColorDialogDispT<IColorDialog> IColorDialogDisp;

// *********************************************************************//
// DispIntf:  IFileOpenSaveDialog
// Flags:     (4096) Dispatchable
// GUID:      {B7ED6BDC-9791-4B8F-979E-990CD76A394A}
// *********************************************************************//
template<class T>
class IFileOpenSaveDialogDispT : public TAutoDriver<IFileOpenSaveDialog>
{
public:
  IFileOpenSaveDialogDispT(){}

  IFileOpenSaveDialogDispT(IFileOpenSaveDialog *pintf)
  {
    TAutoDriver<IFileOpenSaveDialog>::Bind(pintf, false);
  }

  IFileOpenSaveDialogDispT(IFileOpenSaveDialogPtr pintf)
  {
    TAutoDriver<IFileOpenSaveDialog>::Bind(pintf, true);
  }

  IFileOpenSaveDialogDispT& operator=(IFileOpenSaveDialog *pintf)
  {
    TAutoDriver<IFileOpenSaveDialog>::Bind(pintf, false);
    return *this;
  }

  IFileOpenSaveDialogDispT& operator=(IFileOpenSaveDialogPtr pintf)
  {
    TAutoDriver<IFileOpenSaveDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FileOpenSaveDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FileOpenSaveDialog);
  }

  HRESULT         __fastcall get_DefaultExt(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DefaultExt(void);
  HRESULT         __fastcall set_DefaultExt(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Filter(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FileName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT         __fastcall set_FileName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Flags(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Flags(void);
  HRESULT         __fastcall set_Flags(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FilterIndex(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_FilterIndex(void);
  HRESULT         __fastcall set_FilterIndex(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Directory(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Directory(void);
  HRESULT         __fastcall set_Directory(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Execute(VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Execute(void);
  HRESULT         __fastcall get_OverwritePrompt(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_OverwritePrompt(void);
  HRESULT         __fastcall set_OverwritePrompt(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowMultiselect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowMultiselect(void);
  HRESULT         __fastcall set_AllowMultiselect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_PathMustExist(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PathMustExist(void);
  HRESULT         __fastcall set_PathMustExist(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FileMustExist(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FileMustExist(void);
  HRESULT         __fastcall set_FileMustExist(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CreatePrompt(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CreatePrompt(void);
  HRESULT         __fastcall set_CreatePrompt(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoReadOnlyReturn(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoReadOnlyReturn(void);
  HRESULT         __fastcall set_NoReadOnlyReturn(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoTestFileCreate(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoTestFileCreate(void);
  HRESULT         __fastcall set_NoTestFileCreate(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoDereferenceLinks(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoDereferenceLinks(void);
  HRESULT         __fastcall set_NoDereferenceLinks(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DontAddToRecent(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DontAddToRecent(void);
  HRESULT         __fastcall set_DontAddToRecent(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ForceShowHidden(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ForceShowHidden(void);
  HRESULT         __fastcall set_ForceShowHidden(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoPlacesBar(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoPlacesBar(void);
  HRESULT         __fastcall set_NoPlacesBar(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ForceFileSystem(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ForceFileSystem(void);
  HRESULT         __fastcall set_ForceFileSystem(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllNonStorageItems(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllNonStorageItems(void);
  HRESULT         __fastcall set_AllNonStorageItems(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HideMRUPlaces(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideMRUPlaces(void);
  HRESULT         __fastcall set_HideMRUPlaces(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HidePinnedPlaces(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HidePinnedPlaces(void);
  HRESULT         __fastcall set_HidePinnedPlaces(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DefaultNoMiniMode(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DefaultNoMiniMode(void);
  HRESULT         __fastcall set_DefaultNoMiniMode(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ForcePreviewPaneOn(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ForcePreviewPaneOn(void);
  HRESULT         __fastcall set_ForcePreviewPaneOn(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FileNames(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_FileNames(void);
  HRESULT         __fastcall AddPlace(BSTR Value/*[in]*/, BSTR Name/*[in,def,opt]*/, 
                                      long Placement/*[in,def,opt]*/);
  HRESULT         __fastcall get_ClientGuid(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ClientGuid(void);
  HRESULT         __fastcall set_ClientGuid(BSTR pVal/*[in]*/);
  HRESULT         __fastcall set_OnCloseQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnFolderChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnTypeChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHelp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            DefaultExt = {read = get_DefaultExt, write = set_DefaultExt};
  __property   BSTR            Filter = {read = get_Filter, write = set_Filter};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   unsigned_long   Flags = {read = get_Flags, write = set_Flags};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   unsigned_long   FilterIndex = {read = get_FilterIndex, write = set_FilterIndex};
  __property   BSTR            Directory = {read = get_Directory, write = set_Directory};
  __property   VARIANT_BOOL    OverwritePrompt = {read = get_OverwritePrompt, write = set_OverwritePrompt};
  __property   VARIANT_BOOL    AllowMultiselect = {read = get_AllowMultiselect, write = set_AllowMultiselect};
  __property   VARIANT_BOOL    PathMustExist = {read = get_PathMustExist, write = set_PathMustExist};
  __property   VARIANT_BOOL    FileMustExist = {read = get_FileMustExist, write = set_FileMustExist};
  __property   VARIANT_BOOL    CreatePrompt = {read = get_CreatePrompt, write = set_CreatePrompt};
  __property   VARIANT_BOOL    NoReadOnlyReturn = {read = get_NoReadOnlyReturn, write = set_NoReadOnlyReturn};
  __property   VARIANT_BOOL    NoTestFileCreate = {read = get_NoTestFileCreate, write = set_NoTestFileCreate};
  __property   VARIANT_BOOL    NoDereferenceLinks = {read = get_NoDereferenceLinks, write = set_NoDereferenceLinks};
  __property   VARIANT_BOOL    DontAddToRecent = {read = get_DontAddToRecent, write = set_DontAddToRecent};
  __property   VARIANT_BOOL    ForceShowHidden = {read = get_ForceShowHidden, write = set_ForceShowHidden};
  __property   VARIANT_BOOL    NoPlacesBar = {read = get_NoPlacesBar, write = set_NoPlacesBar};
  __property   VARIANT_BOOL    ForceFileSystem = {read = get_ForceFileSystem, write = set_ForceFileSystem};
  __property   VARIANT_BOOL    AllNonStorageItems = {read = get_AllNonStorageItems, write = set_AllNonStorageItems};
  __property   VARIANT_BOOL    HideMRUPlaces = {read = get_HideMRUPlaces, write = set_HideMRUPlaces};
  __property   VARIANT_BOOL    HidePinnedPlaces = {read = get_HidePinnedPlaces, write = set_HidePinnedPlaces};
  __property   VARIANT_BOOL    DefaultNoMiniMode = {read = get_DefaultNoMiniMode, write = set_DefaultNoMiniMode};
  __property   VARIANT_BOOL    ForcePreviewPaneOn = {read = get_ForcePreviewPaneOn, write = set_ForcePreviewPaneOn};
  __property   LPDISPATCH      FileNames = {read = get_FileNames};
  __property   BSTR            ClientGuid = {read = get_ClientGuid, write = set_ClientGuid};

  __property   BSTR            Type = {read = get_Type};
};
typedef IFileOpenSaveDialogDispT<IFileOpenSaveDialog> IFileOpenSaveDialogDisp;

// *********************************************************************//
// DispIntf:  ISelectFolderDialog
// Flags:     (4096) Dispatchable
// GUID:      {6F63CD78-C21E-4A64-90EC-90FCE7789897}
// *********************************************************************//
template<class T>
class ISelectFolderDialogDispT : public TAutoDriver<ISelectFolderDialog>
{
public:
  ISelectFolderDialogDispT(){}

  ISelectFolderDialogDispT(ISelectFolderDialog *pintf)
  {
    TAutoDriver<ISelectFolderDialog>::Bind(pintf, false);
  }

  ISelectFolderDialogDispT(ISelectFolderDialogPtr pintf)
  {
    TAutoDriver<ISelectFolderDialog>::Bind(pintf, true);
  }

  ISelectFolderDialogDispT& operator=(ISelectFolderDialog *pintf)
  {
    TAutoDriver<ISelectFolderDialog>::Bind(pintf, false);
    return *this;
  }

  ISelectFolderDialogDispT& operator=(ISelectFolderDialogPtr pintf)
  {
    TAutoDriver<ISelectFolderDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SelectFolderDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SelectFolderDialog);
  }

  HRESULT         __fastcall get_Flags(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Flags(void);
  HRESULT         __fastcall set_Flags(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Root(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Root(void);
  HRESULT         __fastcall set_Root(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_StatusText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_StatusText(void);
  HRESULT         __fastcall set_StatusText(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT         __fastcall set_Title(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_EnableOK(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableOK(void);
  HRESULT         __fastcall set_EnableOK(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Execute(VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Execute(void);
  HRESULT         __fastcall Close();
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Flags = {read = get_Flags, write = set_Flags};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   BSTR            Root = {read = get_Root, write = set_Root};
  __property   BSTR            StatusText = {read = get_StatusText, write = set_StatusText};
  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   VARIANT_BOOL    EnableOK = {read = get_EnableOK, write = set_EnableOK};

  __property   BSTR            Type = {read = get_Type};
};
typedef ISelectFolderDialogDispT<ISelectFolderDialog> ISelectFolderDialogDisp;

// *********************************************************************//
// DispIntf:  ITimer
// Flags:     (4096) Dispatchable
// GUID:      {A70DBA20-F39F-4B55-BC04-7E5FE2C495B7}
// *********************************************************************//
template<class T>
class ITimerDispT : public TAutoDriver<ITimer>
{
public:
  ITimerDispT(){}

  ITimerDispT(ITimer *pintf)
  {
    TAutoDriver<ITimer>::Bind(pintf, false);
  }

  ITimerDispT(ITimerPtr pintf)
  {
    TAutoDriver<ITimer>::Bind(pintf, true);
  }

  ITimerDispT& operator=(ITimer *pintf)
  {
    TAutoDriver<ITimer>::Bind(pintf, false);
    return *this;
  }

  ITimerDispT& operator=(ITimerPtr pintf)
  {
    TAutoDriver<ITimer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Timer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Timer);
  }

  HRESULT         __fastcall get_Active(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Interval(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Interval(void);
  HRESULT         __fastcall set_Interval(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall set_OnExecute(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   unsigned_long   Interval = {read = get_Interval, write = set_Interval};

  __property   BSTR            Type = {read = get_Type};
};
typedef ITimerDispT<ITimer> ITimerDisp;

// *********************************************************************//
// DispIntf:  ITrayIcon
// Flags:     (4096) Dispatchable
// GUID:      {4AAC7C83-5BF6-44A6-AD8A-FD431D23DD79}
// *********************************************************************//
template<class T>
class ITrayIconDispT : public TAutoDriver<ITrayIcon>
{
public:
  ITrayIconDispT(){}

  ITrayIconDispT(ITrayIcon *pintf)
  {
    TAutoDriver<ITrayIcon>::Bind(pintf, false);
  }

  ITrayIconDispT(ITrayIconPtr pintf)
  {
    TAutoDriver<ITrayIcon>::Bind(pintf, true);
  }

  ITrayIconDispT& operator=(ITrayIcon *pintf)
  {
    TAutoDriver<ITrayIcon>::Bind(pintf, false);
    return *this;
  }

  ITrayIconDispT& operator=(ITrayIconPtr pintf)
  {
    TAutoDriver<ITrayIcon>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TrayIcon));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TrayIcon);
  }

  HRESULT         __fastcall get_Active(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Images(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Images(void);
  HRESULT         __fastcall set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Images(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ImageIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImageIndex(void);
  HRESULT         __fastcall set_ImageIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_BalloonTip(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BalloonTip(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
  __property   LPDISPATCH      Images = {read = get_Images, write = set_Images};
  __property   long            ImageIndex = {read = get_ImageIndex, write = set_ImageIndex};
  __property   BSTR            Hint = {read = get_Hint, write = set_Hint};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   LPDISPATCH      BalloonTip = {read = get_BalloonTip};

  __property   BSTR            Type = {read = get_Type};
};
typedef ITrayIconDispT<ITrayIcon> ITrayIconDisp;

// *********************************************************************//
// DispIntf:  IRegions
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {179741BD-E3DA-4A18-B9C1-039785089B03}
// *********************************************************************//
template<class T>
class IRegionsDispT : public TAutoDriver<IRegions>
{
public:
  IRegionsDispT(){}

  IRegionsDispT(IRegions *pintf)
  {
    TAutoDriver<IRegions>::Bind(pintf, false);
  }

  IRegionsDispT(IRegionsPtr pintf)
  {
    TAutoDriver<IRegions>::Bind(pintf, true);
  }

  IRegionsDispT& operator=(IRegions *pintf)
  {
    TAutoDriver<IRegions>::Bind(pintf, false);
    return *this;
  }

  IRegionsDispT& operator=(IRegionsPtr pintf)
  {
    TAutoDriver<IRegions>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Regions));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Regions);
  }

  HRESULT         __fastcall CombineRgn(unsigned_long hrgnSrc1/*[in]*/, 
                                        unsigned_long hrgnSrc2/*[in]*/, long fnCombineMode/*[in]*/, 
                                        LPDISPATCH* pRegion/*[out,retval]*/);
  LPDISPATCH      __fastcall CombineRgn(unsigned_long hrgnSrc1/*[in]*/, 
                                        unsigned_long hrgnSrc2/*[in]*/, long fnCombineMode/*[in]*/);
  HRESULT         __fastcall CreateEllipticRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                               long Width/*[in]*/, long Height/*[in]*/, 
                                               LPDISPATCH* pRegion/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEllipticRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                               long Width/*[in]*/, long Height/*[in]*/);
  HRESULT         __fastcall CreatePolygonRgn(LPSAFEARRAY Data/*[in]*/, 
                                              LPDISPATCH* pRegion/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePolygonRgn(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall CreateRectRgn(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                           long Height/*[in]*/, LPDISPATCH* pRegion/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRectRgn(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                           long Height/*[in]*/);
  HRESULT         __fastcall CreateRoundRectRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                                long Width/*[in]*/, long Height/*[in]*/, 
                                                long nWidthEllipse/*[in]*/, 
                                                long nHeightEllipse/*[in]*/, 
                                                LPDISPATCH* pRegion/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRoundRectRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                                long Width/*[in]*/, long Height/*[in]*/, 
                                                long nWidthEllipse/*[in]*/, 
                                                long nHeightEllipse/*[in]*/);
  HRESULT         __fastcall TransformRgn(unsigned_long ARegion/*[in]*/, float eM11/*[in]*/, 
                                          float eM12/*[in]*/, float eM21/*[in]*/, float eM22/*[in]*/
                                          , float eDx/*[in]*/, float eDy/*[in]*/, 
                                          LPDISPATCH* pRegion/*[out,retval]*/);
  LPDISPATCH      __fastcall TransformRgn(unsigned_long ARegion/*[in]*/, float eM11/*[in]*/, 
                                          float eM12/*[in]*/, float eM21/*[in]*/, float eM22/*[in]*/, 
                                          float eDx/*[in]*/, float eDy/*[in]*/);
  HRESULT         __fastcall EqualRgn(unsigned_long hSrcRgn1/*[in]*/, unsigned_long hSrcRgn2/*[in]*/
                                      , VARIANT_BOOL* pResult/*[out,retval]*/);
  VARIANT_BOOL    __fastcall EqualRgn(unsigned_long hSrcRgn1/*[in]*/, unsigned_long hSrcRgn2/*[in]*/);
  HRESULT         __fastcall CreateRgnFromImage(VARIANT Image/*[in]*/, 
                                                unsigned_long MaskColor/*[in]*/, 
                                                LPDISPATCH* Region/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRgnFromImage(VARIANT Image/*[in]*/, 
                                                unsigned_long MaskColor/*[in]*/);

};
typedef IRegionsDispT<IRegions> IRegionsDisp;

// *********************************************************************//
// SmartIntf: TCOMIRegion
// Interface: IRegion
// *********************************************************************//
template <class T /* IRegion */ >
class TCOMIRegionT : public TComInterface<IRegion>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRegionT() {}
  TCOMIRegionT(IRegion *intf, bool addRef = false) : TComInterface<IRegion>(intf, addRef) {}
  TCOMIRegionT(const TCOMIRegionT& src) : TComInterface<IRegion>(src) {}
  TCOMIRegionT& operator=(const TCOMIRegionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Value(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Value(void);

  __property   unsigned_long   Value = {read = get_Value};
};
typedef TCOMIRegionT<IRegion> TCOMIRegion;

// *********************************************************************//
// DispIntf:  IRegion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB9FCB6F-2C14-4568-BADF-E7C0B022A654}
// *********************************************************************//
template<class T>
class IRegionDispT : public TAutoDriver<IRegion>
{
public:
  IRegionDispT(){}

  IRegionDispT(IRegion *pintf)
  {
    TAutoDriver<IRegion>::Bind(pintf, false);
  }

  IRegionDispT(IRegionPtr pintf)
  {
    TAutoDriver<IRegion>::Bind(pintf, true);
  }

  IRegionDispT& operator=(IRegion *pintf)
  {
    TAutoDriver<IRegion>::Bind(pintf, false);
    return *this;
  }

  IRegionDispT& operator=(IRegionPtr pintf)
  {
    TAutoDriver<IRegion>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Region));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Region);
  }

  HRESULT         __fastcall get_Value(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Value(void);

  __property   unsigned_long   Value = {read = get_Value};
};
typedef IRegionDispT<IRegion> IRegionDisp;

// *********************************************************************//
// DispIntf:  IScreen
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {D0D86627-9E34-438F-92E2-8EC9C1ABE8C5}
// *********************************************************************//
template<class T>
class IScreenDispT : public TAutoDriver<IScreen>
{
public:
  IScreenDispT(){}

  IScreenDispT(IScreen *pintf)
  {
    TAutoDriver<IScreen>::Bind(pintf, false);
  }

  IScreenDispT(IScreenPtr pintf)
  {
    TAutoDriver<IScreen>::Bind(pintf, true);
  }

  IScreenDispT& operator=(IScreen *pintf)
  {
    TAutoDriver<IScreen>::Bind(pintf, false);
    return *this;
  }

  IScreenDispT& operator=(IScreenPtr pintf)
  {
    TAutoDriver<IScreen>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Screen));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Screen);
  }

  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall get_PixelsPerInchX(long* pVal/*[out,retval]*/);
  long            __fastcall get_PixelsPerInchX(void);
  HRESULT         __fastcall get_PixelsPerInchY(long* pVal/*[out,retval]*/);
  long            __fastcall get_PixelsPerInchY(void);

  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
  __property   long            PixelsPerInchX = {read = get_PixelsPerInchX};
  __property   long            PixelsPerInchY = {read = get_PixelsPerInchY};
};
typedef IScreenDispT<IScreen> IScreenDisp;

// *********************************************************************//
// DispIntf:  IHint
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {00017030-B197-4EBC-804F-748CF210108E}
// *********************************************************************//
template<class T>
class IHintDispT : public TAutoDriver<IHint>
{
public:
  IHintDispT(){}

  IHintDispT(IHint *pintf)
  {
    TAutoDriver<IHint>::Bind(pintf, false);
  }

  IHintDispT(IHintPtr pintf)
  {
    TAutoDriver<IHint>::Bind(pintf, true);
  }

  IHintDispT& operator=(IHint *pintf)
  {
    TAutoDriver<IHint>::Bind(pintf, false);
    return *this;
  }

  IHintDispT& operator=(IHintPtr pintf)
  {
    TAutoDriver<IHint>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Hint));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Hint);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT         __fastcall set_Title(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Image(long* pVal/*[out,retval]*/);
  long            __fastcall get_Image(void);
  HRESULT         __fastcall set_Image(long pVal/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Balloon(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Balloon(void);
  HRESULT         __fastcall set_Balloon(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AlwaysTip(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlwaysTip(void);
  HRESULT         __fastcall set_AlwaysTip(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoPrefix(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoPrefix(void);
  HRESULT         __fastcall set_NoPrefix(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentData(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentData(void);
  HRESULT         __fastcall set_ParentData(VARIANT_BOOL pVal/*[in]*/);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   long            Image = {read = get_Image, write = set_Image};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Balloon = {read = get_Balloon, write = set_Balloon};
  __property   VARIANT_BOOL    AlwaysTip = {read = get_AlwaysTip, write = set_AlwaysTip};
  __property   VARIANT_BOOL    NoPrefix = {read = get_NoPrefix, write = set_NoPrefix};
  __property   long            MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   VARIANT_BOOL    ParentData = {read = get_ParentData, write = set_ParentData};
};
typedef IHintDispT<IHint> IHintDisp;

// *********************************************************************//
// DispIntf:  IEventHandler
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {5273BA8F-609D-4959-9A72-92AD3EADA060}
// *********************************************************************//
template<class T>
class IEventHandlerDispT : public TAutoDriver<IEventHandler>
{
public:
  IEventHandlerDispT(){}

  IEventHandlerDispT(IEventHandler *pintf)
  {
    TAutoDriver<IEventHandler>::Bind(pintf, false);
  }

  IEventHandlerDispT(IEventHandlerPtr pintf)
  {
    TAutoDriver<IEventHandler>::Bind(pintf, true);
  }

  IEventHandlerDispT& operator=(IEventHandler *pintf)
  {
    TAutoDriver<IEventHandler>::Bind(pintf, false);
    return *this;
  }

  IEventHandlerDispT& operator=(IEventHandlerPtr pintf)
  {
    TAutoDriver<IEventHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EventHandler));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EventHandler);
  }

  HRESULT         __fastcall Execute();
  HRESULT         __fastcall set_OnExecute(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);


  __property   BSTR            Type = {read = get_Type};
};
typedef IEventHandlerDispT<IEventHandler> IEventHandlerDisp;

// *********************************************************************//
// DispIntf:  IWindowSystemObjectExtensions
// Flags:     (4096) Dispatchable
// GUID:      {1DD6DE1E-DB95-45FE-B2A8-655177B8E8DB}
// *********************************************************************//
template<class T>
class IWindowSystemObjectExtensionsDispT : public TAutoDriver<IWindowSystemObjectExtensions>
{
public:
  IWindowSystemObjectExtensionsDispT(){}

  IWindowSystemObjectExtensionsDispT(IWindowSystemObjectExtensions *pintf)
  {
    TAutoDriver<IWindowSystemObjectExtensions>::Bind(pintf, false);
  }

  IWindowSystemObjectExtensionsDispT(IWindowSystemObjectExtensionsPtr pintf)
  {
    TAutoDriver<IWindowSystemObjectExtensions>::Bind(pintf, true);
  }

  IWindowSystemObjectExtensionsDispT& operator=(IWindowSystemObjectExtensions *pintf)
  {
    TAutoDriver<IWindowSystemObjectExtensions>::Bind(pintf, false);
    return *this;
  }

  IWindowSystemObjectExtensionsDispT& operator=(IWindowSystemObjectExtensionsPtr pintf)
  {
    TAutoDriver<IWindowSystemObjectExtensions>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WindowSystemObjectExtensions));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WindowSystemObjectExtensions);
  }

  HRESULT         __fastcall SendMessage(VARIANT Control/*[in]*/, long Message/*[in]*/, 
                                         long wParam/*[in]*/, VARIANT lParam/*[in]*/, 
                                         VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall SendMessage(VARIANT Control/*[in]*/, long Message/*[in]*/, 
                                         long wParam/*[in]*/, VARIANT lParam/*[in]*/);
  HRESULT         __fastcall PostMessage(VARIANT Control/*[in]*/, long Message/*[in]*/, 
                                         long wParam/*[in]*/, VARIANT lParam/*[in]*/, 
                                         VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall PostMessage(VARIANT Control/*[in]*/, long Message/*[in]*/, 
                                         long wParam/*[in]*/, VARIANT lParam/*[in]*/);
  HRESULT         __fastcall AddMessageHandler(LPDISPATCH Control/*[in]*/, long Message/*[in]*/, 
                                               VARIANT MessageHandler/*[in]*/);
  HRESULT         __fastcall RegisterWindowMessage(BSTR Message/*[in]*/, 
                                                   unsigned_long* MessageId/*[out,retval]*/);
  unsigned_long   __fastcall RegisterWindowMessage(BSTR Message/*[in]*/);
  HRESULT         __fastcall EnumWindows(LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall EnumWindows(void);
  HRESULT         __fastcall SendCopyData(VARIANT Control/*[in]*/, BSTR Data/*[in]*/, 
                                          VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall SendCopyData(VARIANT Control/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall PostCopyData(VARIANT Control/*[in]*/, BSTR Data/*[in]*/, 
                                          VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall PostCopyData(VARIANT Control/*[in]*/, BSTR Data/*[in]*/);
  HRESULT         __fastcall CreateClipboard(VARIANT_BOOL ClipboardViewer/*[in,def,opt]*/, 
                                             LPDISPATCH* Clipboard/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateClipboard(VARIANT_BOOL ClipboardViewer/*[in,def,opt]*/);
  HRESULT         __fastcall get_SystemImageListSmall(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SystemImageListSmall(void);
  HRESULT         __fastcall get_SystemImageListLarge(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SystemImageListLarge(void);
  HRESULT         __fastcall GetFileSysIconIndexSmall(BSTR pVal/*[in]*/, 
                                                      unsigned_long FileAttributes/*[in,def,opt]*/, 
                                                      unsigned_long* Result/*[out,retval]*/);
  unsigned_long   __fastcall GetFileSysIconIndexSmall(BSTR pVal/*[in]*/, 
                                                      unsigned_long FileAttributes/*[in,def,opt]*/);
  HRESULT         __fastcall GetFileSysIconIndexLarge(BSTR pVal/*[in]*/, 
                                                      unsigned_long FileAttributes/*[in,def,opt]*/, 
                                                      unsigned_long* Result/*[out,retval]*/);
  unsigned_long   __fastcall GetFileSysIconIndexLarge(BSTR pVal/*[in]*/, 
                                                      unsigned_long FileAttributes/*[in,def,opt]*/);
  HRESULT         __fastcall get_IsWindowsXP(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsWindowsXP(void);
  HRESULT         __fastcall get_IsWindowsVista(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsWindowsVista(void);
  HRESULT         __fastcall get_IsWindows7(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsWindows7(void);
  HRESULT         __fastcall get_IsWindows8(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsWindows8(void);
  HRESULT         __fastcall get_IsThemeActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsThemeActive(void);
  HRESULT         __fastcall UuidCreate(BSTR* Result/*[out,retval]*/);
  BSTR            __fastcall UuidCreate(void);
  HRESULT         __fastcall CreateIconBuilder(LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIconBuilder(void);
  HRESULT         __fastcall CreateExecutor(LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateExecutor(void);
  HRESULT         __fastcall CreateFileManager(LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFileManager(void);

  __property   LPDISPATCH      SystemImageListSmall = {read = get_SystemImageListSmall};
  __property   LPDISPATCH      SystemImageListLarge = {read = get_SystemImageListLarge};
  __property   VARIANT_BOOL    IsWindowsXP = {read = get_IsWindowsXP};
  __property   VARIANT_BOOL    IsWindowsVista = {read = get_IsWindowsVista};
  __property   VARIANT_BOOL    IsWindows7 = {read = get_IsWindows7};
  __property   VARIANT_BOOL    IsWindows8 = {read = get_IsWindows8};
  __property   VARIANT_BOOL    IsThemeActive = {read = get_IsThemeActive};
};
typedef IWindowSystemObjectExtensionsDispT<IWindowSystemObjectExtensions> IWindowSystemObjectExtensionsDisp;

// *********************************************************************//
// DispIntf:  IPrintInfo
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {5C615F2E-9B71-4394-9C88-95EE52F97849}
// *********************************************************************//
template<class T>
class IPrintInfoDispT : public TAutoDriver<IPrintInfo>
{
public:
  IPrintInfoDispT(){}

  IPrintInfoDispT(IPrintInfo *pintf)
  {
    TAutoDriver<IPrintInfo>::Bind(pintf, false);
  }

  IPrintInfoDispT(IPrintInfoPtr pintf)
  {
    TAutoDriver<IPrintInfo>::Bind(pintf, true);
  }

  IPrintInfoDispT& operator=(IPrintInfo *pintf)
  {
    TAutoDriver<IPrintInfo>::Bind(pintf, false);
    return *this;
  }

  IPrintInfoDispT& operator=(IPrintInfoPtr pintf)
  {
    TAutoDriver<IPrintInfo>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PrintInfo));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PrintInfo);
  }

  HRESULT         __fastcall get_DocumentName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DocumentName(void);
  HRESULT         __fastcall set_DocumentName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LeftMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_LeftMargin(void);
  HRESULT         __fastcall set_LeftMargin(long pVal/*[in]*/);
  HRESULT         __fastcall get_RightMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_RightMargin(void);
  HRESULT         __fastcall set_RightMargin(long pVal/*[in]*/);
  HRESULT         __fastcall get_TopMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopMargin(void);
  HRESULT         __fastcall set_TopMargin(long pVal/*[in]*/);
  HRESULT         __fastcall get_BottomMargin(long* pVal/*[out,retval]*/);
  long            __fastcall get_BottomMargin(void);
  HRESULT         __fastcall set_BottomMargin(long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginMeasurement(long* pVal/*[out,retval]*/);
  long            __fastcall get_MarginMeasurement(void);
  HRESULT         __fastcall set_MarginMeasurement(long pVal/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            DocumentName = {read = get_DocumentName, write = set_DocumentName};
  __property   long            LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
  __property   long            RightMargin = {read = get_RightMargin, write = set_RightMargin};
  __property   long            TopMargin = {read = get_TopMargin, write = set_TopMargin};
  __property   long            BottomMargin = {read = get_BottomMargin, write = set_BottomMargin};
  __property   long            MarginMeasurement = {read = get_MarginMeasurement, write = set_MarginMeasurement};

  __property   BSTR            Type = {read = get_Type};
};
typedef IPrintInfoDispT<IPrintInfo> IPrintInfoDisp;

// *********************************************************************//
// DispIntf:  IStdDispatch
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {C0615DB9-9C1D-42B0-8EB5-8CC8AF95B110}
// *********************************************************************//
template<class T>
class IStdDispatchDispT : public TAutoDriver<IStdDispatch>
{
public:
  IStdDispatchDispT(){}

  IStdDispatchDispT(IStdDispatch *pintf)
  {
    TAutoDriver<IStdDispatch>::Bind(pintf, false);
  }

  IStdDispatchDispT(IStdDispatchPtr pintf)
  {
    TAutoDriver<IStdDispatch>::Bind(pintf, true);
  }

  IStdDispatchDispT& operator=(IStdDispatch *pintf)
  {
    TAutoDriver<IStdDispatch>::Bind(pintf, false);
    return *this;
  }

  IStdDispatchDispT& operator=(IStdDispatchPtr pintf)
  {
    TAutoDriver<IStdDispatch>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StdDispatch));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StdDispatch);
  }


};
typedef IStdDispatchDispT<IStdDispatch> IStdDispatchDisp;

// *********************************************************************//
// DispIntf:  IBalloonTip
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {A16801B1-8BA4-4F0D-A589-86443B09037C}
// *********************************************************************//
template<class T>
class IBalloonTipDispT : public TAutoDriver<IBalloonTip>
{
public:
  IBalloonTipDispT(){}

  IBalloonTipDispT(IBalloonTip *pintf)
  {
    TAutoDriver<IBalloonTip>::Bind(pintf, false);
  }

  IBalloonTipDispT(IBalloonTipPtr pintf)
  {
    TAutoDriver<IBalloonTip>::Bind(pintf, true);
  }

  IBalloonTipDispT& operator=(IBalloonTip *pintf)
  {
    TAutoDriver<IBalloonTip>::Bind(pintf, false);
    return *this;
  }

  IBalloonTipDispT& operator=(IBalloonTipPtr pintf)
  {
    TAutoDriver<IBalloonTip>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BalloonTip));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BalloonTip);
  }

  HRESULT         __fastcall get_Title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT         __fastcall set_Title(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Icon(long* pVal/*[out,retval]*/);
  long            __fastcall get_Icon(void);
  HRESULT         __fastcall set_Icon(long pVal/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Timeout(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Timeout(void);
  HRESULT         __fastcall set_Timeout(unsigned_long pVal/*[in]*/);

  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            Icon = {read = get_Icon, write = set_Icon};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_long   Timeout = {read = get_Timeout, write = set_Timeout};
};
typedef IBalloonTipDispT<IBalloonTip> IBalloonTipDisp;

// *********************************************************************//
// DispIntf:  IWindow
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {BEF454E2-AC05-40F6-BCFD-300B70CAD3FC}
// *********************************************************************//
template<class T>
class IWindowDispT : public TAutoDriver<IWindow>
{
public:
  IWindowDispT(){}

  IWindowDispT(IWindow *pintf)
  {
    TAutoDriver<IWindow>::Bind(pintf, false);
  }

  IWindowDispT(IWindowPtr pintf)
  {
    TAutoDriver<IWindow>::Bind(pintf, true);
  }

  IWindowDispT& operator=(IWindow *pintf)
  {
    TAutoDriver<IWindow>::Bind(pintf, false);
    return *this;
  }

  IWindowDispT& operator=(IWindowPtr pintf)
  {
    TAutoDriver<IWindow>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Window));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Window);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClassName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ClassName(void);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            ClassName = {read = get_ClassName};
};
typedef IWindowDispT<IWindow> IWindowDisp;

// *********************************************************************//
// DispIntf:  IClipboardEvents
// Flags:     (4096) Dispatchable
// GUID:      {FBAA7B25-99FF-4B15-832D-5A85EF97F814}
// *********************************************************************//
template <class T>
class IClipboardEventsDispT : public TAutoDriver<IClipboardEvents>
{
public:
  IClipboardEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnChange(LPDISPATCH Sender/*[in]*/);

};
typedef IClipboardEventsDispT<IClipboardEvents> IClipboardEventsDisp;

// *********************************************************************//
// DispIntf:  ClipboardEvents
// Flags:     (4096) Dispatchable
// GUID:      {1CD8E952-7F59-4429-81FB-CADDDD77AE72}
// *********************************************************************//
template<class T>
class ClipboardEventsDispT : public TAutoDriver<ClipboardEvents>
{
public:
  ClipboardEventsDispT(){}

  ClipboardEventsDispT(ClipboardEvents *pintf)
  {
    TAutoDriver<ClipboardEvents>::Bind(pintf, false);
  }

  ClipboardEventsDispT(ClipboardEventsPtr pintf)
  {
    TAutoDriver<ClipboardEvents>::Bind(pintf, true);
  }

  ClipboardEventsDispT& operator=(ClipboardEvents *pintf)
  {
    TAutoDriver<ClipboardEvents>::Bind(pintf, false);
    return *this;
  }

  ClipboardEventsDispT& operator=(ClipboardEventsPtr pintf)
  {
    TAutoDriver<ClipboardEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnChange(LPDISPATCH Sender/*[in]*/);

};
typedef ClipboardEventsDispT<ClipboardEvents> ClipboardEventsDisp;

// *********************************************************************//
// DispIntf:  IClipboard
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {3CA40ACA-6385-4080-BFC9-82437A0FF90D}
// *********************************************************************//
template<class T>
class IClipboardDispT : public TAutoDriver<IClipboard>
{
public:
  IClipboardDispT(){}

  IClipboardDispT(IClipboard *pintf)
  {
    TAutoDriver<IClipboard>::Bind(pintf, false);
  }

  IClipboardDispT(IClipboardPtr pintf)
  {
    TAutoDriver<IClipboard>::Bind(pintf, true);
  }

  IClipboardDispT& operator=(IClipboard *pintf)
  {
    TAutoDriver<IClipboard>::Bind(pintf, false);
    return *this;
  }

  IClipboardDispT& operator=(IClipboardPtr pintf)
  {
    TAutoDriver<IClipboard>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Clipboard));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Clipboard);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClipboardViewer(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ClipboardViewer(void);
  HRESULT         __fastcall set_ClipboardViewer(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Empty();
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    ClipboardViewer = {read = get_ClipboardViewer, write = set_ClipboardViewer};

  __property   BSTR            Type = {read = get_Type};
};
typedef IClipboardDispT<IClipboard> IClipboardDisp;

// *********************************************************************//
// DispIntf:  ITaskBar
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {805EF906-67A7-4A9D-B026-1F5AA4E9303C}
// *********************************************************************//
template<class T>
class ITaskBarDispT : public TAutoDriver<ITaskBar>
{
public:
  ITaskBarDispT(){}

  ITaskBarDispT(ITaskBar *pintf)
  {
    TAutoDriver<ITaskBar>::Bind(pintf, false);
  }

  ITaskBarDispT(ITaskBarPtr pintf)
  {
    TAutoDriver<ITaskBar>::Bind(pintf, true);
  }

  ITaskBarDispT& operator=(ITaskBar *pintf)
  {
    TAutoDriver<ITaskBar>::Bind(pintf, false);
    return *this;
  }

  ITaskBarDispT& operator=(ITaskBarPtr pintf)
  {
    TAutoDriver<ITaskBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TaskBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TaskBar);
  }

  HRESULT         __fastcall AddImages(LPDISPATCH newVal/*[in]*/);
  HRESULT         __fastcall get_Buttons(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Buttons(void);
  HRESULT         __fastcall set_Buttons(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Buttons(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall SetThumbnailClip(long Left, long Top, long Width, long Height);
  HRESULT         __fastcall get_State(long* pVal/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall set_State(long pVal/*[in]*/);
  HRESULT         __fastcall get_Max(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(unsigned_long pVal/*[in]*/);

  __property   LPDISPATCH      Buttons = {read = get_Buttons, write = set_Buttons};
  __property   long            State = {read = get_State, write = set_State};
  __property   unsigned_long   Max = {read = get_Max, write = set_Max};
  __property   unsigned_long   Position = {read = get_Position, write = set_Position};
};
typedef ITaskBarDispT<ITaskBar> ITaskBarDisp;

// *********************************************************************//
// DispIntf:  IResourceUsageGraph
// Flags:     (4096) Dispatchable
// GUID:      {F61F2DE3-D729-4ADB-B1E2-6F4B496000F9}
// *********************************************************************//
template<class T>
class IResourceUsageGraphDispT : public TAutoDriver<IResourceUsageGraph>
{
public:
  IResourceUsageGraphDispT(){}

  IResourceUsageGraphDispT(IResourceUsageGraph *pintf)
  {
    TAutoDriver<IResourceUsageGraph>::Bind(pintf, false);
  }

  IResourceUsageGraphDispT(IResourceUsageGraphPtr pintf)
  {
    TAutoDriver<IResourceUsageGraph>::Bind(pintf, true);
  }

  IResourceUsageGraphDispT& operator=(IResourceUsageGraph *pintf)
  {
    TAutoDriver<IResourceUsageGraph>::Bind(pintf, false);
    return *this;
  }

  IResourceUsageGraphDispT& operator=(IResourceUsageGraphPtr pintf)
  {
    TAutoDriver<IResourceUsageGraph>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ResourceUsageGraph));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ResourceUsageGraph);
  }

  HRESULT         __fastcall get_Page(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Page(void);
  HRESULT         __fastcall set_Page(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Add(unsigned_long Offset/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall AddEx(unsigned_long Offset/*[in]*/, double Value/*[in]*/, 
                                   BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall get_MinYValue(double* pVal/*[out,retval]*/);
  double          __fastcall get_MinYValue(void);
  HRESULT         __fastcall set_MinYValue(double pVal/*[in]*/);
  HRESULT         __fastcall get_MaxYValue(double* pVal/*[out,retval]*/);
  double          __fastcall get_MaxYValue(void);
  HRESULT         __fastcall set_MaxYValue(double pVal/*[in]*/);
  HRESULT         __fastcall get_BackgroundBrush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BackgroundBrush(void);
  HRESULT         __fastcall set_BackgroundBrush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_BackgroundBrush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PageControlWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_PageControlWidth(void);
  HRESULT         __fastcall set_PageControlWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall get_SelectedValue(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_SelectedValue(void);
  HRESULT         __fastcall set_SelectedValue(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_SelectedYValue(double* pVal/*[out,retval]*/);
  double          __fastcall get_SelectedYValue(void);
  HRESULT         __fastcall get_SelectedIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_SelectedIndex(void);
  HRESULT         __fastcall set_SelectedIndex(long pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_Approximation(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Approximation(void);
  HRESULT         __fastcall set_Approximation(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AlwaysFillWindow(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlwaysFillWindow(void);
  HRESULT         __fastcall set_AlwaysFillWindow(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoRemove(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoRemove(void);
  HRESULT         __fastcall set_AutoRemove(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Value(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Value(void);
  HRESULT         __fastcall get_Min(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Min(void);
  HRESULT         __fastcall get_Max(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Max(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Page = {read = get_Page, write = set_Page};
  __property   double          MinYValue = {read = get_MinYValue, write = set_MinYValue};
  __property   double          MaxYValue = {read = get_MaxYValue, write = set_MaxYValue};
  __property   LPDISPATCH      BackgroundBrush = {read = get_BackgroundBrush, write = set_BackgroundBrush};
  __property   unsigned_long   PageControlWidth = {read = get_PageControlWidth, write = set_PageControlWidth};
  __property   unsigned_long   SelectedValue = {read = get_SelectedValue, write = set_SelectedValue};
  __property   double          SelectedYValue = {read = get_SelectedYValue};
  __property   long            SelectedIndex = {read = get_SelectedIndex, write = set_SelectedIndex};
  __property   VARIANT_BOOL    Approximation = {read = get_Approximation, write = set_Approximation};
  __property   VARIANT_BOOL    AlwaysFillWindow = {read = get_AlwaysFillWindow, write = set_AlwaysFillWindow};
  __property   VARIANT_BOOL    AutoRemove = {read = get_AutoRemove, write = set_AutoRemove};

  __property   LPDISPATCH      Value = {read = get_Value};
  __property   LPDISPATCH      Min = {read = get_Min};
  __property   LPDISPATCH      Max = {read = get_Max};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IResourceUsageGraphDispT<IResourceUsageGraph> IResourceUsageGraphDisp;

// *********************************************************************//
// DispIntf:  IProperty
// Flags:     (4096) Dispatchable
// GUID:      {0C78AFD5-6C85-4D18-971A-B3BDC0FD0FFE}
// *********************************************************************//
template<class T>
class IPropertyDispT : public TAutoDriver<IProperty>
{
public:
  IPropertyDispT(){}

  IPropertyDispT(IProperty *pintf)
  {
    TAutoDriver<IProperty>::Bind(pintf, false);
  }

  IPropertyDispT(IPropertyPtr pintf)
  {
    TAutoDriver<IProperty>::Bind(pintf, true);
  }

  IPropertyDispT& operator=(IProperty *pintf)
  {
    TAutoDriver<IProperty>::Bind(pintf, false);
    return *this;
  }

  IPropertyDispT& operator=(IPropertyPtr pintf)
  {
    TAutoDriver<IProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Property));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Property);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR Text/*[in]*/, LPDISPATCH* pItem/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR Text/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT         __fastcall set_Expanded(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Control(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT         __fastcall get_Height(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT         __fastcall set_Selected(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   unsigned_long   Height = {read = get_Height, write = set_Height};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};

  __property   BSTR            Type = {read = get_Type};
};
typedef IPropertyDispT<IProperty> IPropertyDisp;

// *********************************************************************//
// DispIntf:  IPropertyGrid
// Flags:     (4096) Dispatchable
// GUID:      {A10865D8-EEF9-412E-AD54-36B52F1F5D3F}
// *********************************************************************//
template<class T>
class IPropertyGridDispT : public TAutoDriver<IPropertyGrid>
{
public:
  IPropertyGridDispT(){}

  IPropertyGridDispT(IPropertyGrid *pintf)
  {
    TAutoDriver<IPropertyGrid>::Bind(pintf, false);
  }

  IPropertyGridDispT(IPropertyGridPtr pintf)
  {
    TAutoDriver<IPropertyGrid>::Bind(pintf, true);
  }

  IPropertyGridDispT& operator=(IPropertyGrid *pintf)
  {
    TAutoDriver<IPropertyGrid>::Bind(pintf, false);
    return *this;
  }

  IPropertyGridDispT& operator=(IPropertyGridPtr pintf)
  {
    TAutoDriver<IPropertyGrid>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PropertyGrid));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PropertyGrid);
  }

  HRESULT         __fastcall get_Items(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Items(void);
  HRESULT         __fastcall get_ValueColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ValueColor(void);
  HRESULT         __fastcall set_ValueColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Property(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Property(void);
  HRESULT         __fastcall set_Property(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_SelectedItem(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SelectedItem(void);
  HRESULT         __fastcall set_SelectedItem(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall Lookup(VARIANT Value/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall Lookup(VARIANT Value/*[in]*/);
  HRESULT         __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateStatusBar(LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateStatusBar(void);
  HRESULT         __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , long Style/*[in,def,opt]*/, 
                                             LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/);
  HRESULT         __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/, 
                                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/);
  HRESULT         __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            long Version/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, 
                                           LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/, 
                                          LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                            , long Style/*[in,def,opt]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/
                                             , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateSplitter(unsigned_short Align/*[in]*/, 
                                            LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitter(unsigned_short Align/*[in]*/);
  HRESULT         __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/, 
                                              LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/);
  HRESULT         __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/
                                                , long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/, 
                                         LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/);
  HRESULT         __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/
                                  , LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/);
  HRESULT         __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/);
  HRESULT         __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/);
  HRESULT         __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/, 
                                    LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/);
  HRESULT         __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/);
  HRESULT         __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/);
  HRESULT         __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/);
  HRESULT         __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/
                                 , long nXRadial2/*[in]*/, long nYRadial2/*[in]*/, 
                                 LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/);
  HRESULT         __fastcall Polygon(LPSAFEARRAY Data/*[in]*/, LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Polygon(LPSAFEARRAY Data/*[in]*/);
  HRESULT         __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/, 
                                     LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/, 
                                      LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/, 
                                       LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/);
  HRESULT         __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/, 
                                        LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/);
  HRESULT         __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/, 
                                   LPDISPATCH* pControl/*[out,retval]*/);
  LPDISPATCH      __fastcall Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/);
  HRESULT         __fastcall get_Controls(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Controls(void);
  HRESULT         __fastcall get_BorderWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelWidth(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_BevelWidth(void);
  HRESULT         __fastcall set_BevelWidth(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(long pVal/*[in]*/);
  HRESULT         __fastcall get_BevelInner(long* pVal/*[out,retval]*/);
  long            __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(long pVal/*[in]*/);
  HRESULT         __fastcall get_GraphFont(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_GraphFont(void);
  HRESULT         __fastcall set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_GraphFont(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Tracking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Tracking(void);
  HRESULT         __fastcall set_Tracking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMouse(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_CaptureMouse(void);
  HRESULT         __fastcall set_CaptureMouse(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall BeginUpdate();
  HRESULT         __fastcall EndUpdate();
  HRESULT         __fastcall get_BorderParentBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BorderParentBackground(void);
  HRESULT         __fastcall set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoSplit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSplit(void);
  HRESULT         __fastcall set_AutoSplit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GroupBox(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupBox(void);
  HRESULT         __fastcall set_GroupBox(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Margin(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Margin(void);
  HRESULT         __fastcall set_Margin(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginTop(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRight(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Get(BSTR Name/*[in]*/, LPDISPATCH* Control/*[out,retval]*/);
  LPDISPATCH      __fastcall Get(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Destroy();
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Root(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Root(void);
  HRESULT         __fastcall get_Form(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Form(void);
  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);
  HRESULT         __fastcall SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall CenterControl();
  HRESULT         __fastcall get_MinWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MinHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MinHeight(void);
  HRESULT         __fastcall set_MinHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Align(unsigned_short* pVal/*[out,retval]*/);
  unsigned_short  __fastcall get_Align(void);
  HRESULT         __fastcall set_Align(unsigned_short pVal/*[in]*/);
  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Font(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Font(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_ParentFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentFont(void);
  HRESULT         __fastcall set_ParentFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Pen(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Pen(void);
  HRESULT         __fastcall set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Pen(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Brush(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Brush(void);
  HRESULT         __fastcall set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_Brush(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_PopupMenu(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PopupMenu(void);
  HRESULT         __fastcall set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall _set_PopupMenu(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_Border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Border(void);
  HRESULT         __fastcall set_Border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetFocus();
  HRESULT         __fastcall get_Focused(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Focused(void);
  HRESULT         __fastcall get_TabOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_TabOrder(void);
  HRESULT         __fastcall set_TabOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_Cursor(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Hint(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Hint(void);
  HRESULT         __fastcall set_Hint(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_ThemeApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ThemeApplicationName(void);
  HRESULT         __fastcall set_ThemeApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Docking(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Docking(void);
  HRESULT         __fastcall get_Layering(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Layering(void);
  HRESULT         __fastcall set_OnClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDblClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKeyUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseEnter(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseLeave(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseUp(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseDown(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnResize(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDestroy(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnShow(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnHide(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnEnabledChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnSetFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnKillFocus(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnMouseWheel(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnBeginDock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDockControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndockQuery(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnUndock(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall Repaint();
  HRESULT         __fastcall get_Debug(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Debug(void);
  HRESULT         __fastcall set_Debug(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_ParentMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentMouseWheel(void);
  HRESULT         __fastcall set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_StopMouseWheel(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StopMouseWheel(void);
  HRESULT         __fastcall set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_ExtendedProperties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_MaskEvents(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MaskEvents(void);
  HRESULT         __fastcall set_MaskEvents(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/, 
                                              VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PropertyHasValue(BSTR PropertyName/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   LPDISPATCH      Items = {read = get_Items};
  __property   unsigned_long   ValueColor = {read = get_ValueColor, write = set_ValueColor};
  __property   LPDISPATCH      Property = {read = get_Property, write = set_Property};
  __property   LPDISPATCH      SelectedItem = {read = get_SelectedItem, write = set_SelectedItem};

  __property   LPDISPATCH      Controls = {read = get_Controls};
  __property   unsigned_long   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_long   BevelWidth = {read = get_BevelWidth, write = set_BevelWidth};
  __property   long            BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   long            BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   LPDISPATCH      GraphFont = {read = get_GraphFont, write = set_GraphFont};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    Tracking = {read = get_Tracking, write = set_Tracking};
  __property   unsigned_short  CaptureMouse = {read = get_CaptureMouse, write = set_CaptureMouse};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    BorderParentBackground = {read = get_BorderParentBackground, write = set_BorderParentBackground};
  __property   VARIANT_BOOL    AutoSplit = {read = get_AutoSplit, write = set_AutoSplit};
  __property   VARIANT_BOOL    GroupBox = {read = get_GroupBox, write = set_GroupBox};
  __property   unsigned_long   Margin = {read = get_Margin, write = set_Margin};
  __property   unsigned_long   MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   unsigned_long   MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   unsigned_long   MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   unsigned_long   MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Root = {read = get_Root};
  __property   LPDISPATCH      Form = {read = get_Form};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   unsigned_short  MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   unsigned_short  MinHeight = {read = get_MinHeight, write = set_MinHeight};
  __property   unsigned_short  MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   unsigned_short  MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   unsigned_short  Align = {read = get_Align, write = set_Align};
  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   LPDISPATCH      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentFont = {read = get_ParentFont, write = set_ParentFont};
  __property   LPDISPATCH      Pen = {read = get_Pen, write = set_Pen};
  __property   LPDISPATCH      Brush = {read = get_Brush, write = set_Brush};
  __property   LPDISPATCH      PopupMenu = {read = get_PopupMenu, write = set_PopupMenu};
  __property   VARIANT_BOOL    Border = {read = get_Border, write = set_Border};
  __property   VARIANT_BOOL    Focused = {read = get_Focused};
  __property   long            TabOrder = {read = get_TabOrder, write = set_TabOrder};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   BSTR            ThemeApplicationName = {read = get_ThemeApplicationName, write = set_ThemeApplicationName};
  __property   LPDISPATCH      Docking = {read = get_Docking};
  __property   LPDISPATCH      Layering = {read = get_Layering};
  __property   unsigned_long   Debug = {read = get_Debug, write = set_Debug};
  __property   VARIANT_BOOL    ParentMouseWheel = {read = get_ParentMouseWheel, write = set_ParentMouseWheel};
  __property   VARIANT_BOOL    StopMouseWheel = {read = get_StopMouseWheel, write = set_StopMouseWheel};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      ExtendedProperties = {read = get_ExtendedProperties};
  __property   VARIANT_BOOL    MaskEvents = {read = get_MaskEvents, write = set_MaskEvents};

  __property   BSTR            Type = {read = get_Type};
};
typedef IPropertyGridDispT<IPropertyGrid> IPropertyGridDisp;

// *********************************************************************//
// DispIntf:  IConsole
// Flags:     (4096) Dispatchable
// GUID:      {501853C5-0B67-4372-866C-9D082B219BFE}
// *********************************************************************//
template<class T>
class IConsoleDispT : public TAutoDriver<IConsole>
{
public:
  IConsoleDispT(){}

  IConsoleDispT(IConsole *pintf)
  {
    TAutoDriver<IConsole>::Bind(pintf, false);
  }

  IConsoleDispT(IConsolePtr pintf)
  {
    TAutoDriver<IConsole>::Bind(pintf, true);
  }

  IConsoleDispT& operator=(IConsole *pintf)
  {
    TAutoDriver<IConsole>::Bind(pintf, false);
    return *this;
  }

  IConsoleDispT& operator=(IConsolePtr pintf)
  {
    TAutoDriver<IConsole>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Console));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Console);
  }

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall WriteLine(BSTR Text/*[in]*/);
  HRESULT         __fastcall Write(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};

  __property   BSTR            Type = {read = get_Type};
};
typedef IConsoleDispT<IConsole> IConsoleDisp;

// *********************************************************************//
// DispIntf:  IDocking
// Flags:     (4096) Dispatchable
// GUID:      {7C323E2F-57F2-46DB-BAD5-CBCFD7CCE9C8}
// *********************************************************************//
template<class T>
class IDockingDispT : public TAutoDriver<IDocking>
{
public:
  IDockingDispT(){}

  IDockingDispT(IDocking *pintf)
  {
    TAutoDriver<IDocking>::Bind(pintf, false);
  }

  IDockingDispT(IDockingPtr pintf)
  {
    TAutoDriver<IDocking>::Bind(pintf, true);
  }

  IDockingDispT& operator=(IDocking *pintf)
  {
    TAutoDriver<IDocking>::Bind(pintf, false);
    return *this;
  }

  IDockingDispT& operator=(IDockingPtr pintf)
  {
    TAutoDriver<IDocking>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Docking));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Docking);
  }

  HRESULT         __fastcall get_UniqueId(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UniqueId(void);
  HRESULT         __fastcall set_UniqueId(BSTR pVal/*[in]*/);
  HRESULT         __fastcall DockAsChild(LPDISPATCH Control/*[in]*/, 
                                         unsigned_short ControlAlign/*[in]*/);
  HRESULT         __fastcall DockAsNeighbour(LPDISPATCH Control/*[in]*/, 
                                             unsigned_short ControlAlign/*[in,def,opt]*/);
  HRESULT         __fastcall UnDock(VARIANT_BOOL ControlVisible/*[in,def,opt]*/);
  HRESULT         __fastcall get_AllowDockAsChild(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDockAsChild(void);
  HRESULT         __fastcall set_AllowDockAsChild(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowDockAsNeighbour(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDockAsNeighbour(void);
  HRESULT         __fastcall set_AllowDockAsNeighbour(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AlwaysDockTab(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlwaysDockTab(void);
  HRESULT         __fastcall set_AlwaysDockTab(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AlwaysDockPage(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlwaysDockPage(void);
  HRESULT         __fastcall set_AlwaysDockPage(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DockToolWindow(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DockToolWindow(void);
  HRESULT         __fastcall set_DockToolWindow(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AutoCreated(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoCreated(void);
  HRESULT         __fastcall set_AutoCreated(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_PageControlTag(long* pVal/*[out,retval]*/);
  long            __fastcall get_PageControlTag(void);
  HRESULT         __fastcall set_PageControlTag(long pVal/*[in]*/);

  __property   BSTR            UniqueId = {read = get_UniqueId, write = set_UniqueId};
  __property   VARIANT_BOOL    AllowDockAsChild = {read = get_AllowDockAsChild, write = set_AllowDockAsChild};
  __property   VARIANT_BOOL    AllowDockAsNeighbour = {read = get_AllowDockAsNeighbour, write = set_AllowDockAsNeighbour};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   VARIANT_BOOL    AlwaysDockTab = {read = get_AlwaysDockTab, write = set_AlwaysDockTab};
  __property   VARIANT_BOOL    AlwaysDockPage = {read = get_AlwaysDockPage, write = set_AlwaysDockPage};
  __property   VARIANT_BOOL    DockToolWindow = {read = get_DockToolWindow, write = set_DockToolWindow};
  __property   VARIANT_BOOL    AutoCreated = {read = get_AutoCreated, write = set_AutoCreated};
  __property   long            PageControlTag = {read = get_PageControlTag, write = set_PageControlTag};
};
typedef IDockingDispT<IDocking> IDockingDisp;

// *********************************************************************//
// DispIntf:  IGraphicElement
// Flags:     (4096) Dispatchable
// GUID:      {73A618A4-D771-4BE2-BFE6-4ADB0B0C3703}
// *********************************************************************//
template<class T>
class IGraphicElementDispT : public TAutoDriver<IGraphicElement>
{
public:
  IGraphicElementDispT(){}

  IGraphicElementDispT(IGraphicElement *pintf)
  {
    TAutoDriver<IGraphicElement>::Bind(pintf, false);
  }

  IGraphicElementDispT(IGraphicElementPtr pintf)
  {
    TAutoDriver<IGraphicElement>::Bind(pintf, true);
  }

  IGraphicElementDispT& operator=(IGraphicElement *pintf)
  {
    TAutoDriver<IGraphicElement>::Bind(pintf, false);
    return *this;
  }

  IGraphicElementDispT& operator=(IGraphicElementPtr pintf)
  {
    TAutoDriver<IGraphicElement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_GraphicElement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_GraphicElement);
  }

  HRESULT         __fastcall get_Color(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_FontColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_FontColor(void);
  HRESULT         __fastcall set_FontColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Normal(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Normal(void);
  HRESULT         __fastcall get_Selected(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Selected(void);
  HRESULT         __fastcall get_Hot(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Hot(void);
  HRESULT         __fastcall get_ControlFocused(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ControlFocused(void);

  __property   unsigned_long   Color = {read = get_Color, write = set_Color};
  __property   unsigned_long   FontColor = {read = get_FontColor, write = set_FontColor};
  __property   LPDISPATCH      Normal = {read = get_Normal};
  __property   LPDISPATCH      Selected = {read = get_Selected};
  __property   LPDISPATCH      Hot = {read = get_Hot};
  __property   LPDISPATCH      ControlFocused = {read = get_ControlFocused};
};
typedef IGraphicElementDispT<IGraphicElement> IGraphicElementDisp;

// *********************************************************************//
// DispIntf:  IBeginDockContext
// Flags:     (4096) Dispatchable
// GUID:      {A93F1DA9-1F87-41F2-93F7-56F33DE002D5}
// *********************************************************************//
template<class T>
class IBeginDockContextDispT : public TAutoDriver<IBeginDockContext>
{
public:
  IBeginDockContextDispT(){}

  IBeginDockContextDispT(IBeginDockContext *pintf)
  {
    TAutoDriver<IBeginDockContext>::Bind(pintf, false);
  }

  IBeginDockContextDispT(IBeginDockContextPtr pintf)
  {
    TAutoDriver<IBeginDockContext>::Bind(pintf, true);
  }

  IBeginDockContextDispT& operator=(IBeginDockContext *pintf)
  {
    TAutoDriver<IBeginDockContext>::Bind(pintf, false);
    return *this;
  }

  IBeginDockContextDispT& operator=(IBeginDockContextPtr pintf)
  {
    TAutoDriver<IBeginDockContext>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BeginDockContext));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BeginDockContext);
  }

  HRESULT         __fastcall get_AllowDropTargetPageControlType(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDropTargetPageControlType(void);
  HRESULT         __fastcall set_AllowDropTargetPageControlType(VARIANT_BOOL pVal/*[in]*/);

  __property   VARIANT_BOOL    AllowDropTargetPageControlType = {read = get_AllowDropTargetPageControlType, write = set_AllowDropTargetPageControlType};
};
typedef IBeginDockContextDispT<IBeginDockContext> IBeginDockContextDisp;

// *********************************************************************//
// DispIntf:  IDockControlCreateContext
// Flags:     (4096) Dispatchable
// GUID:      {AE0D893C-7F42-466A-8F50-3D2216828B4C}
// *********************************************************************//
template<class T>
class IDockControlCreateContextDispT : public TAutoDriver<IDockControlCreateContext>
{
public:
  IDockControlCreateContextDispT(){}

  IDockControlCreateContextDispT(IDockControlCreateContext *pintf)
  {
    TAutoDriver<IDockControlCreateContext>::Bind(pintf, false);
  }

  IDockControlCreateContextDispT(IDockControlCreateContextPtr pintf)
  {
    TAutoDriver<IDockControlCreateContext>::Bind(pintf, true);
  }

  IDockControlCreateContextDispT& operator=(IDockControlCreateContext *pintf)
  {
    TAutoDriver<IDockControlCreateContext>::Bind(pintf, false);
    return *this;
  }

  IDockControlCreateContextDispT& operator=(IDockControlCreateContextPtr pintf)
  {
    TAutoDriver<IDockControlCreateContext>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DockControlCreateContext));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DockControlCreateContext);
  }

  HRESULT         __fastcall get_UseDropTargetPageControlType(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseDropTargetPageControlType(void);
  HRESULT         __fastcall set_UseDropTargetPageControlType(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Target(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Target(void);

  __property   VARIANT_BOOL    UseDropTargetPageControlType = {read = get_UseDropTargetPageControlType, write = set_UseDropTargetPageControlType};
  __property   LPDISPATCH      Target = {read = get_Target};
};
typedef IDockControlCreateContextDispT<IDockControlCreateContext> IDockControlCreateContextDisp;

// *********************************************************************//
// DispIntf:  IUndockContext
// Flags:     (4096) Dispatchable
// GUID:      {92FAA2DB-8F11-4A1F-8B05-CCD1A97098E3}
// *********************************************************************//
template<class T>
class IUndockContextDispT : public TAutoDriver<IUndockContext>
{
public:
  IUndockContextDispT(){}

  IUndockContextDispT(IUndockContext *pintf)
  {
    TAutoDriver<IUndockContext>::Bind(pintf, false);
  }

  IUndockContextDispT(IUndockContextPtr pintf)
  {
    TAutoDriver<IUndockContext>::Bind(pintf, true);
  }

  IUndockContextDispT& operator=(IUndockContext *pintf)
  {
    TAutoDriver<IUndockContext>::Bind(pintf, false);
    return *this;
  }

  IUndockContextDispT& operator=(IUndockContextPtr pintf)
  {
    TAutoDriver<IUndockContext>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_UndockContext));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_UndockContext);
  }

  HRESULT         __fastcall get_ControlVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ControlVisible(void);
  HRESULT         __fastcall Put(VARIANT newVal/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pVal/*[in]*/);

  __property   VARIANT_BOOL    ControlVisible = {read = get_ControlVisible};

};
typedef IUndockContextDispT<IUndockContext> IUndockContextDisp;

// *********************************************************************//
// DispIntf:  IColor
// Flags:     (4096) Dispatchable
// GUID:      {C5EE68E8-EB57-491A-B7A9-50AC5EA07B79}
// *********************************************************************//
template<class T>
class IColorDispT : public TAutoDriver<IColor>
{
public:
  IColorDispT(){}

  IColorDispT(IColor *pintf)
  {
    TAutoDriver<IColor>::Bind(pintf, false);
  }

  IColorDispT(IColorPtr pintf)
  {
    TAutoDriver<IColor>::Bind(pintf, true);
  }

  IColorDispT& operator=(IColor *pintf)
  {
    TAutoDriver<IColor>::Bind(pintf, false);
    return *this;
  }

  IColorDispT& operator=(IColorPtr pintf)
  {
    TAutoDriver<IColor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Color));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Color);
  }

  HRESULT         __fastcall Light(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/, 
                                   unsigned_long* Result/*[out,retval]*/);
  unsigned_long   __fastcall Light(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/);
  HRESULT         __fastcall Dark(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/, 
                                  unsigned_long* Result/*[out,retval]*/);
  unsigned_long   __fastcall Dark(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/);
  HRESULT         __fastcall Invert(unsigned_long Color/*[in]*/, 
                                    unsigned_long* Result/*[out,retval]*/);
  unsigned_long   __fastcall Invert(unsigned_long Color/*[in]*/);

};
typedef IColorDispT<IColor> IColorDisp;

// *********************************************************************//
// DispIntf:  ILayering
// Flags:     (4096) Dispatchable
// GUID:      {B23A2C07-3A36-4ADC-B695-94B8814AAF80}
// *********************************************************************//
template<class T>
class ILayeringDispT : public TAutoDriver<ILayering>
{
public:
  ILayeringDispT(){}

  ILayeringDispT(ILayering *pintf)
  {
    TAutoDriver<ILayering>::Bind(pintf, false);
  }

  ILayeringDispT(ILayeringPtr pintf)
  {
    TAutoDriver<ILayering>::Bind(pintf, true);
  }

  ILayeringDispT& operator=(ILayering *pintf)
  {
    TAutoDriver<ILayering>::Bind(pintf, false);
    return *this;
  }

  ILayeringDispT& operator=(ILayeringPtr pintf)
  {
    TAutoDriver<ILayering>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Layering));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Layering);
  }

  HRESULT         __fastcall get_Layered(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Layered(void);
  HRESULT         __fastcall set_Layered(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Alpha(unsigned_char* pVal/*[out,retval]*/);
  unsigned_char   __fastcall get_Alpha(void);
  HRESULT         __fastcall set_Alpha(unsigned_char pVal/*[in]*/);
  HRESULT         __fastcall get_TransparentColor(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_TransparentColor(void);
  HRESULT         __fastcall set_TransparentColor(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Flags(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Flags(void);
  HRESULT         __fastcall set_Flags(unsigned_long pVal/*[in]*/);

  __property   VARIANT_BOOL    Layered = {read = get_Layered, write = set_Layered};
  __property   unsigned_char   Alpha = {read = get_Alpha, write = set_Alpha};
  __property   unsigned_long   TransparentColor = {read = get_TransparentColor, write = set_TransparentColor};
  __property   unsigned_long   Flags = {read = get_Flags, write = set_Flags};
};
typedef ILayeringDispT<ILayering> ILayeringDisp;

// *********************************************************************//
// DispIntf:  IMessageDialog
// Flags:     (4096) Dispatchable
// GUID:      {FA9F97C8-A273-412E-A708-285BEB3CABC5}
// *********************************************************************//
template<class T>
class IMessageDialogDispT : public TAutoDriver<IMessageDialog>
{
public:
  IMessageDialogDispT(){}

  IMessageDialogDispT(IMessageDialog *pintf)
  {
    TAutoDriver<IMessageDialog>::Bind(pintf, false);
  }

  IMessageDialogDispT(IMessageDialogPtr pintf)
  {
    TAutoDriver<IMessageDialog>::Bind(pintf, true);
  }

  IMessageDialogDispT& operator=(IMessageDialog *pintf)
  {
    TAutoDriver<IMessageDialog>::Bind(pintf, false);
    return *this;
  }

  IMessageDialogDispT& operator=(IMessageDialogPtr pintf)
  {
    TAutoDriver<IMessageDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MessageDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MessageDialog);
  }

  HRESULT         __fastcall AddButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall AddIcon(unsigned_long ID);
  HRESULT         __fastcall Execute(long* Result/*[out,retval]*/);
  long            __fastcall Execute(void);
  HRESULT         __fastcall get_DefaultButton(long* pVal/*[out,retval]*/);
  long            __fastcall get_DefaultButton(void);
  HRESULT         __fastcall set_DefaultButton(long pVal/*[in]*/);
  HRESULT         __fastcall get_CancelButton(long* pVal/*[out,retval]*/);
  long            __fastcall get_CancelButton(void);
  HRESULT         __fastcall set_CancelButton(long pVal/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   long            DefaultButton = {read = get_DefaultButton, write = set_DefaultButton};
  __property   long            CancelButton = {read = get_CancelButton, write = set_CancelButton};

  __property   BSTR            Type = {read = get_Type};
};
typedef IMessageDialogDispT<IMessageDialog> IMessageDialogDisp;

// *********************************************************************//
// DispIntf:  ITaskDialog
// Flags:     (4096) Dispatchable
// GUID:      {AE2631CE-2F75-4936-92D2-F2FD0097954C}
// *********************************************************************//
template<class T>
class ITaskDialogDispT : public TAutoDriver<ITaskDialog>
{
public:
  ITaskDialogDispT(){}

  ITaskDialogDispT(ITaskDialog *pintf)
  {
    TAutoDriver<ITaskDialog>::Bind(pintf, false);
  }

  ITaskDialogDispT(ITaskDialogPtr pintf)
  {
    TAutoDriver<ITaskDialog>::Bind(pintf, true);
  }

  ITaskDialogDispT& operator=(ITaskDialog *pintf)
  {
    TAutoDriver<ITaskDialog>::Bind(pintf, false);
    return *this;
  }

  ITaskDialogDispT& operator=(ITaskDialogPtr pintf)
  {
    TAutoDriver<ITaskDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TaskDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TaskDialog);
  }

  HRESULT         __fastcall AddButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall AddCommandLinkButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall AddRadioButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall Execute(long* Result/*[out,retval]*/);
  long            __fastcall Execute(void);
  HRESULT         __fastcall get_Icon(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Icon(void);
  HRESULT         __fastcall set_Icon(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_MainInstruction(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MainInstruction(void);
  HRESULT         __fastcall set_MainInstruction(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExpandedInformation(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpandedInformation(void);
  HRESULT         __fastcall set_ExpandedInformation(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Footer(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Footer(void);
  HRESULT         __fastcall set_Footer(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExpandedControlText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpandedControlText(void);
  HRESULT         __fastcall set_ExpandedControlText(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CollapsedControlText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CollapsedControlText(void);
  HRESULT         __fastcall set_CollapsedControlText(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_VerificationText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_VerificationText(void);
  HRESULT         __fastcall set_VerificationText(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FooterIcon(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_FooterIcon(void);
  HRESULT         __fastcall set_FooterIcon(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_RadioButton(long* pVal/*[out,retval]*/);
  long            __fastcall get_RadioButton(void);
  HRESULT         __fastcall set_RadioButton(long pVal/*[in]*/);
  HRESULT         __fastcall get_AllowDialogCancellation(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDialogCancellation(void);
  HRESULT         __fastcall set_AllowDialogCancellation(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_UseCommandLinks(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseCommandLinks(void);
  HRESULT         __fastcall set_UseCommandLinks(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_UseCommandLinksNoIcon(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseCommandLinksNoIcon(void);
  HRESULT         __fastcall set_UseCommandLinksNoIcon(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ExpandFooterArea(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ExpandFooterArea(void);
  HRESULT         __fastcall set_ExpandFooterArea(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ExpandedByDefault(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ExpandedByDefault(void);
  HRESULT         __fastcall set_ExpandedByDefault(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_VerificationFlagChecked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_VerificationFlagChecked(void);
  HRESULT         __fastcall set_VerificationFlagChecked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ShowProgressBar(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowProgressBar(void);
  HRESULT         __fastcall set_ShowProgressBar(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ShowMarqueeProgressBar(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowMarqueeProgressBar(void);
  HRESULT         __fastcall set_ShowMarqueeProgressBar(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CallbackTimer(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallbackTimer(void);
  HRESULT         __fastcall set_CallbackTimer(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_PositionRelativeToWindow(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PositionRelativeToWindow(void);
  HRESULT         __fastcall set_PositionRelativeToWindow(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NoDefaultRadioButton(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NoDefaultRadioButton(void);
  HRESULT         __fastcall set_NoDefaultRadioButton(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CanBeMinimized(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanBeMinimized(void);
  HRESULT         __fastcall set_CanBeMinimized(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DefaultButton(long* pVal/*[out,retval]*/);
  long            __fastcall get_DefaultButton(void);
  HRESULT         __fastcall set_DefaultButton(long pVal/*[in]*/);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(long pVal/*[in]*/);
  HRESULT         __fastcall set_OnTimer(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnButtonClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   unsigned_long   Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            MainInstruction = {read = get_MainInstruction, write = set_MainInstruction};
  __property   BSTR            ExpandedInformation = {read = get_ExpandedInformation, write = set_ExpandedInformation};
  __property   BSTR            Footer = {read = get_Footer, write = set_Footer};
  __property   BSTR            ExpandedControlText = {read = get_ExpandedControlText, write = set_ExpandedControlText};
  __property   BSTR            CollapsedControlText = {read = get_CollapsedControlText, write = set_CollapsedControlText};
  __property   BSTR            VerificationText = {read = get_VerificationText, write = set_VerificationText};
  __property   unsigned_long   FooterIcon = {read = get_FooterIcon, write = set_FooterIcon};
  __property   long            RadioButton = {read = get_RadioButton, write = set_RadioButton};
  __property   VARIANT_BOOL    AllowDialogCancellation = {read = get_AllowDialogCancellation, write = set_AllowDialogCancellation};
  __property   VARIANT_BOOL    UseCommandLinks = {read = get_UseCommandLinks, write = set_UseCommandLinks};
  __property   VARIANT_BOOL    UseCommandLinksNoIcon = {read = get_UseCommandLinksNoIcon, write = set_UseCommandLinksNoIcon};
  __property   VARIANT_BOOL    ExpandFooterArea = {read = get_ExpandFooterArea, write = set_ExpandFooterArea};
  __property   VARIANT_BOOL    ExpandedByDefault = {read = get_ExpandedByDefault, write = set_ExpandedByDefault};
  __property   VARIANT_BOOL    VerificationFlagChecked = {read = get_VerificationFlagChecked, write = set_VerificationFlagChecked};
  __property   VARIANT_BOOL    ShowProgressBar = {read = get_ShowProgressBar, write = set_ShowProgressBar};
  __property   VARIANT_BOOL    ShowMarqueeProgressBar = {read = get_ShowMarqueeProgressBar, write = set_ShowMarqueeProgressBar};
  __property   VARIANT_BOOL    CallbackTimer = {read = get_CallbackTimer, write = set_CallbackTimer};
  __property   VARIANT_BOOL    PositionRelativeToWindow = {read = get_PositionRelativeToWindow, write = set_PositionRelativeToWindow};
  __property   VARIANT_BOOL    NoDefaultRadioButton = {read = get_NoDefaultRadioButton, write = set_NoDefaultRadioButton};
  __property   VARIANT_BOOL    CanBeMinimized = {read = get_CanBeMinimized, write = set_CanBeMinimized};
  __property   long            DefaultButton = {read = get_DefaultButton, write = set_DefaultButton};
  __property   long            Position = {read = get_Position, write = set_Position};

  __property   BSTR            Type = {read = get_Type};
};
typedef ITaskDialogDispT<ITaskDialog> ITaskDialogDisp;

// *********************************************************************//
// DispIntf:  ITaskDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {58A2A29A-ABEB-4AAB-ABD4-03CC83B59915}
// *********************************************************************//
template<class T>
class ITaskDialogEventsDispT : public TAutoDriver<ITaskDialogEvents>
{
public:
  ITaskDialogEventsDispT(){}

  ITaskDialogEventsDispT(ITaskDialogEvents *pintf)
  {
    TAutoDriver<ITaskDialogEvents>::Bind(pintf, false);
  }

  ITaskDialogEventsDispT(ITaskDialogEventsPtr pintf)
  {
    TAutoDriver<ITaskDialogEvents>::Bind(pintf, true);
  }

  ITaskDialogEventsDispT& operator=(ITaskDialogEvents *pintf)
  {
    TAutoDriver<ITaskDialogEvents>::Bind(pintf, false);
    return *this;
  }

  ITaskDialogEventsDispT& operator=(ITaskDialogEventsPtr pintf)
  {
    TAutoDriver<ITaskDialogEvents>::Bind(pintf, true);
    return *this;
  }

  void            __fastcall OnTimer(LPDISPATCH Sender/*[in]*/, unsigned_long Elapsed/*[in]*/);
  void            __fastcall OnButtonClick(LPDISPATCH Sender/*[in]*/, long ID/*[in]*/, 
                                           LPDISPATCH ResultPtr/*[in]*/);

};
typedef ITaskDialogEventsDispT<ITaskDialogEvents> ITaskDialogEventsDisp;

// *********************************************************************//
// DispIntf:  TaskDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {FEA1F5D3-2AF5-41A3-B732-59BB92E999AA}
// *********************************************************************//
template<class T>
class TaskDialogEventsDispT : public TAutoDriver<TaskDialogEvents>
{
public:
  TaskDialogEventsDispT(){}

  TaskDialogEventsDispT(TaskDialogEvents *pintf)
  {
    TAutoDriver<TaskDialogEvents>::Bind(pintf, false);
  }

  TaskDialogEventsDispT(TaskDialogEventsPtr pintf)
  {
    TAutoDriver<TaskDialogEvents>::Bind(pintf, true);
  }

  TaskDialogEventsDispT& operator=(TaskDialogEvents *pintf)
  {
    TAutoDriver<TaskDialogEvents>::Bind(pintf, false);
    return *this;
  }

  TaskDialogEventsDispT& operator=(TaskDialogEventsPtr pintf)
  {
    TAutoDriver<TaskDialogEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnTimer(LPDISPATCH Sender/*[in]*/, unsigned_long Elapsed/*[in]*/);
  HRESULT         __fastcall OnButtonClick(LPDISPATCH Sender/*[in]*/, long ID/*[in]*/, 
                                           LPDISPATCH ResultPtr/*[in]*/);

};
typedef TaskDialogEventsDispT<TaskDialogEvents> TaskDialogEventsDisp;

// *********************************************************************//
// DispIntf:  IIcon
// Flags:     (4096) Dispatchable
// GUID:      {8EF324A3-C801-49E1-B07C-D32A0589746F}
// *********************************************************************//
template<class T>
class IIconDispT : public TAutoDriver<IIcon>
{
public:
  IIconDispT(){}

  IIconDispT(IIcon *pintf)
  {
    TAutoDriver<IIcon>::Bind(pintf, false);
  }

  IIconDispT(IIconPtr pintf)
  {
    TAutoDriver<IIcon>::Bind(pintf, true);
  }

  IIconDispT& operator=(IIcon *pintf)
  {
    TAutoDriver<IIcon>::Bind(pintf, false);
    return *this;
  }

  IIconDispT& operator=(IIconPtr pintf)
  {
    TAutoDriver<IIcon>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Icon));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Icon);
  }


};
typedef IIconDispT<IIcon> IIconDisp;

// *********************************************************************//
// DispIntf:  IRect
// Flags:     (4096) Dispatchable
// GUID:      {85BCA1CF-0215-432E-B290-13947A00DA8F}
// *********************************************************************//
template<class T>
class IRectDispT : public TAutoDriver<IRect>
{
public:
  IRectDispT(){}

  IRectDispT(IRect *pintf)
  {
    TAutoDriver<IRect>::Bind(pintf, false);
  }

  IRectDispT(IRectPtr pintf)
  {
    TAutoDriver<IRect>::Bind(pintf, true);
  }

  IRectDispT& operator=(IRect *pintf)
  {
    TAutoDriver<IRect>::Bind(pintf, false);
    return *this;
  }

  IRectDispT& operator=(IRectPtr pintf)
  {
    TAutoDriver<IRect>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Rect));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Rect);
  }

  HRESULT         __fastcall get_Left(long* pVal/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pVal/*[in]*/);
  HRESULT         __fastcall get_Top(long* pVal/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pVal/*[in]*/);
  HRESULT         __fastcall get_Width(long* pVal/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pVal/*[in]*/);
  HRESULT         __fastcall get_Height(long* pVal/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pVal/*[in]*/);
  HRESULT         __fastcall get_Right(long* pVal/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long pVal/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long pVal/*[in]*/);

  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
};
typedef IRectDispT<IRect> IRectDisp;

// *********************************************************************//
// DispIntf:  IIconBuilder
// Flags:     (4096) Dispatchable
// GUID:      {362DA7FC-F126-4E3B-BB58-14C126CEB063}
// *********************************************************************//
template<class T>
class IIconBuilderDispT : public TAutoDriver<IIconBuilder>
{
public:
  IIconBuilderDispT(){}

  IIconBuilderDispT(IIconBuilder *pintf)
  {
    TAutoDriver<IIconBuilder>::Bind(pintf, false);
  }

  IIconBuilderDispT(IIconBuilderPtr pintf)
  {
    TAutoDriver<IIconBuilder>::Bind(pintf, true);
  }

  IIconBuilderDispT& operator=(IIconBuilder *pintf)
  {
    TAutoDriver<IIconBuilder>::Bind(pintf, false);
    return *this;
  }

  IIconBuilderDispT& operator=(IIconBuilderPtr pintf)
  {
    TAutoDriver<IIconBuilder>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_IconBuilder));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_IconBuilder);
  }

  HRESULT         __fastcall Add(VARIANT Image/*[in]*/, VARIANT_BOOL Transparent/*[in,def,opt]*/, 
                                 unsigned_long x/*[in,def,opt]*/, unsigned_long y/*[in,def,opt]*/);
  HRESULT         __fastcall Save(BSTR FileName/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall get_Cursor(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Cursor(void);
  HRESULT         __fastcall set_Cursor(VARIANT_BOOL pVal/*[in]*/);

  __property   VARIANT_BOOL    Cursor = {read = get_Cursor, write = set_Cursor};
};
typedef IIconBuilderDispT<IIconBuilder> IIconBuilderDisp;

// *********************************************************************//
// DispIntf:  IDesignReference
// Flags:     (4096) Dispatchable
// GUID:      {7C5DD379-4C1A-4F52-B04B-6D0972964779}
// *********************************************************************//
template<class T>
class IDesignReferenceDispT : public TAutoDriver<IDesignReference>
{
public:
  IDesignReferenceDispT(){}

  IDesignReferenceDispT(IDesignReference *pintf)
  {
    TAutoDriver<IDesignReference>::Bind(pintf, false);
  }

  IDesignReferenceDispT(IDesignReferencePtr pintf)
  {
    TAutoDriver<IDesignReference>::Bind(pintf, true);
  }

  IDesignReferenceDispT& operator=(IDesignReference *pintf)
  {
    TAutoDriver<IDesignReference>::Bind(pintf, false);
    return *this;
  }

  IDesignReferenceDispT& operator=(IDesignReferencePtr pintf)
  {
    TAutoDriver<IDesignReference>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DesignReference));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DesignReference);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ReferenceType(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ReferenceType(void);
  HRESULT         __fastcall set_ReferenceType(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall Add(BSTR Text/*[in]*/, BSTR CurrentAbsoluteFileName/*[in,def,opt]*/, 
                                 LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR Text/*[in]*/, BSTR CurrentAbsoluteFileName/*[in,def,opt]*/);
  HRESULT         __fastcall Find(BSTR Text/*[in]*/, LPDISPATCH* Result/*[out,retval]*/);
  LPDISPATCH      __fastcall Find(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Main(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Main(void);
  HRESULT         __fastcall set_Main(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Design(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Design(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Lookup(BSTR Value/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall Lookup(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_FileName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT         __fastcall set_FileName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Remove(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/);

  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   unsigned_long   ReferenceType = {read = get_ReferenceType, write = set_ReferenceType};
  __property   VARIANT_BOOL    Main = {read = get_Main, write = set_Main};
  __property   LPDISPATCH      Design = {read = get_Design};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IDesignReferenceDispT<IDesignReference> IDesignReferenceDisp;

// *********************************************************************//
// DispIntf:  IDesign
// Flags:     (4096) Dispatchable
// GUID:      {FBE98002-0D8F-4AC8-808C-22DEDE52BF1F}
// *********************************************************************//
template<class T>
class IDesignDispT : public TAutoDriver<IDesign>
{
public:
  IDesignDispT(){}

  IDesignDispT(IDesign *pintf)
  {
    TAutoDriver<IDesign>::Bind(pintf, false);
  }

  IDesignDispT(IDesignPtr pintf)
  {
    TAutoDriver<IDesign>::Bind(pintf, true);
  }

  IDesignDispT& operator=(IDesign *pintf)
  {
    TAutoDriver<IDesign>::Bind(pintf, false);
    return *this;
  }

  IDesignDispT& operator=(IDesignPtr pintf)
  {
    TAutoDriver<IDesign>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Design));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Design);
  }

  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_NewControlType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_NewControlType(void);
  HRESULT         __fastcall set_NewControlType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_NewControlCreationFlags(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_NewControlCreationFlags(void);
  HRESULT         __fastcall set_NewControlCreationFlags(unsigned_long pVal/*[in]*/);
  HRESULT         __fastcall get_Properties(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Properties(void);
  HRESULT         __fastcall get_ShowDetailsButton(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowDetailsButton(void);
  HRESULT         __fastcall set_ShowDetailsButton(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Save(BSTR* Layout/*[out,retval]*/);
  BSTR            __fastcall Save(void);
  HRESULT         __fastcall Load(BSTR Layout/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                  VARIANT Resources/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Open(BSTR FileName/*[in]*/, unsigned_long Flags/*[in,def,opt]*/);
  HRESULT         __fastcall get_References(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_References(void);
  HRESULT         __fastcall set_OnActiveControlChange(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnControlCreate(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDetailsButtonClick(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDesignerAdd(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall set_OnDesignerRemove(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   BSTR            NewControlType = {read = get_NewControlType, write = set_NewControlType};
  __property   unsigned_long   NewControlCreationFlags = {read = get_NewControlCreationFlags, write = set_NewControlCreationFlags};
  __property   LPDISPATCH      Properties = {read = get_Properties};
  __property   VARIANT_BOOL    ShowDetailsButton = {read = get_ShowDetailsButton, write = set_ShowDetailsButton};
  __property   LPDISPATCH      References = {read = get_References};

  __property   BSTR            Type = {read = get_Type};
};
typedef IDesignDispT<IDesign> IDesignDisp;

// *********************************************************************//
// DispIntf:  IDesignEvents
// Flags:     (4096) Dispatchable
// GUID:      {8C46AC3B-00A3-42F5-B82F-E292FD49F53D}
// *********************************************************************//
template<class T>
class IDesignEventsDispT : public TAutoDriver<IDesignEvents>
{
public:
  IDesignEventsDispT(){}

  IDesignEventsDispT(IDesignEvents *pintf)
  {
    TAutoDriver<IDesignEvents>::Bind(pintf, false);
  }

  IDesignEventsDispT(IDesignEventsPtr pintf)
  {
    TAutoDriver<IDesignEvents>::Bind(pintf, true);
  }

  IDesignEventsDispT& operator=(IDesignEvents *pintf)
  {
    TAutoDriver<IDesignEvents>::Bind(pintf, false);
    return *this;
  }

  IDesignEventsDispT& operator=(IDesignEventsPtr pintf)
  {
    TAutoDriver<IDesignEvents>::Bind(pintf, true);
    return *this;
  }

  void            __fastcall OnActiveControlChange(LPDISPATCH Sender/*[in]*/, 
                                                   LPDISPATCH Control/*[in]*/);
  void            __fastcall OnControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/);
  void            __fastcall OnDetailsButtonClick(LPDISPATCH Sender/*[in]*/);
  void            __fastcall OnDesignerAdd(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/);
  void            __fastcall OnDesignerRemove(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/);

};
typedef IDesignEventsDispT<IDesignEvents> IDesignEventsDisp;

// *********************************************************************//
// DispIntf:  DesignEvents
// Flags:     (4096) Dispatchable
// GUID:      {FAE90BDF-6BDD-4C3C-8433-5C0DFEC216DC}
// *********************************************************************//
template<class T>
class DesignEventsDispT : public TAutoDriver<DesignEvents>
{
public:
  DesignEventsDispT(){}

  DesignEventsDispT(DesignEvents *pintf)
  {
    TAutoDriver<DesignEvents>::Bind(pintf, false);
  }

  DesignEventsDispT(DesignEventsPtr pintf)
  {
    TAutoDriver<DesignEvents>::Bind(pintf, true);
  }

  DesignEventsDispT& operator=(DesignEvents *pintf)
  {
    TAutoDriver<DesignEvents>::Bind(pintf, false);
    return *this;
  }

  DesignEventsDispT& operator=(DesignEventsPtr pintf)
  {
    TAutoDriver<DesignEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnActiveControlChange(LPDISPATCH Sender/*[in]*/, 
                                                   LPDISPATCH Control/*[in]*/);
  HRESULT         __fastcall OnControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/);
  HRESULT         __fastcall OnDetailsButtonClick(LPDISPATCH Sender/*[in]*/);
  HRESULT         __fastcall OnDesignerAdd(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/);
  HRESULT         __fastcall OnDesignerRemove(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/);

};
typedef DesignEventsDispT<DesignEvents> DesignEventsDisp;

// *********************************************************************//
// DispIntf:  IExecutor
// Flags:     (4096) Dispatchable
// GUID:      {F17D5798-9B71-46B9-B6D3-3FA3AA87C423}
// *********************************************************************//
template<class T>
class IExecutorDispT : public TAutoDriver<IExecutor>
{
public:
  IExecutorDispT(){}

  IExecutorDispT(IExecutor *pintf)
  {
    TAutoDriver<IExecutor>::Bind(pintf, false);
  }

  IExecutorDispT(IExecutorPtr pintf)
  {
    TAutoDriver<IExecutor>::Bind(pintf, true);
  }

  IExecutorDispT& operator=(IExecutor *pintf)
  {
    TAutoDriver<IExecutor>::Bind(pintf, false);
    return *this;
  }

  IExecutorDispT& operator=(IExecutorPtr pintf)
  {
    TAutoDriver<IExecutor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Executor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Executor);
  }

  HRESULT         __fastcall get_ApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ApplicationName(void);
  HRESULT         __fastcall set_ApplicationName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CommandLine(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CommandLine(void);
  HRESULT         __fastcall set_CommandLine(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Execute(VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Execute(void);
  HRESULT         __fastcall Wait(unsigned_long Timeout/*[in,def,opt]*/, 
                                  VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Wait(unsigned_long Timeout/*[in,def,opt]*/);
  HRESULT         __fastcall get_ExitCode(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ExitCode(void);
  HRESULT         __fastcall get_IntegrityLevel(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IntegrityLevel(void);
  HRESULT         __fastcall set_IntegrityLevel(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Error(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Error(void);
  HRESULT         __fastcall Terminate(unsigned_long ProcessExitCode/*[in,def,opt]*/, 
                                       VARIANT_BOOL* Result/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Terminate(unsigned_long ProcessExitCode/*[in,def,opt]*/);
  HRESULT         __fastcall set_OnComplete(VARIANT Param1/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_UserData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);
  HRESULT         __fastcall RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/);

  __property   BSTR            ApplicationName = {read = get_ApplicationName, write = set_ApplicationName};
  __property   BSTR            CommandLine = {read = get_CommandLine, write = set_CommandLine};
  __property   unsigned_long   ExitCode = {read = get_ExitCode};
  __property   BSTR            IntegrityLevel = {read = get_IntegrityLevel, write = set_IntegrityLevel};
  __property   LPDISPATCH      Error = {read = get_Error};

  __property   BSTR            Type = {read = get_Type};
};
typedef IExecutorDispT<IExecutor> IExecutorDisp;

// *********************************************************************//
// DispIntf:  IExecutorEvents
// Flags:     (4096) Dispatchable
// GUID:      {885A7D58-B7A1-4CA6-BC6F-7C58C09C7812}
// *********************************************************************//
template<class T>
class IExecutorEventsDispT : public TAutoDriver<IExecutorEvents>
{
public:
  IExecutorEventsDispT(){}

  IExecutorEventsDispT(IExecutorEvents *pintf)
  {
    TAutoDriver<IExecutorEvents>::Bind(pintf, false);
  }

  IExecutorEventsDispT(IExecutorEventsPtr pintf)
  {
    TAutoDriver<IExecutorEvents>::Bind(pintf, true);
  }

  IExecutorEventsDispT& operator=(IExecutorEvents *pintf)
  {
    TAutoDriver<IExecutorEvents>::Bind(pintf, false);
    return *this;
  }

  IExecutorEventsDispT& operator=(IExecutorEventsPtr pintf)
  {
    TAutoDriver<IExecutorEvents>::Bind(pintf, true);
    return *this;
  }

  void            __fastcall OnComplete(LPDISPATCH Sender/*[in]*/);

};
typedef IExecutorEventsDispT<IExecutorEvents> IExecutorEventsDisp;

// *********************************************************************//
// DispIntf:  ExecutorEvents
// Flags:     (4096) Dispatchable
// GUID:      {9D263BBD-9C2D-4825-B6AF-12110F16D8BB}
// *********************************************************************//
template<class T>
class ExecutorEventsDispT : public TAutoDriver<ExecutorEvents>
{
public:
  ExecutorEventsDispT(){}

  ExecutorEventsDispT(ExecutorEvents *pintf)
  {
    TAutoDriver<ExecutorEvents>::Bind(pintf, false);
  }

  ExecutorEventsDispT(ExecutorEventsPtr pintf)
  {
    TAutoDriver<ExecutorEvents>::Bind(pintf, true);
  }

  ExecutorEventsDispT& operator=(ExecutorEvents *pintf)
  {
    TAutoDriver<ExecutorEvents>::Bind(pintf, false);
    return *this;
  }

  ExecutorEventsDispT& operator=(ExecutorEventsPtr pintf)
  {
    TAutoDriver<ExecutorEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall OnComplete(LPDISPATCH Sender/*[in]*/);

};
typedef ExecutorEventsDispT<ExecutorEvents> ExecutorEventsDisp;

// *********************************************************************//
// DispIntf:  IControlExtendedProperties
// Flags:     (4096) Dispatchable
// GUID:      {EEB664B4-E288-4CC3-B9C2-ACAB3EFA0ECA}
// *********************************************************************//
template<class T>
class IControlExtendedPropertiesDispT : public TAutoDriver<IControlExtendedProperties>
{
public:
  IControlExtendedPropertiesDispT(){}

  IControlExtendedPropertiesDispT(IControlExtendedProperties *pintf)
  {
    TAutoDriver<IControlExtendedProperties>::Bind(pintf, false);
  }

  IControlExtendedPropertiesDispT(IControlExtendedPropertiesPtr pintf)
  {
    TAutoDriver<IControlExtendedProperties>::Bind(pintf, true);
  }

  IControlExtendedPropertiesDispT& operator=(IControlExtendedProperties *pintf)
  {
    TAutoDriver<IControlExtendedProperties>::Bind(pintf, false);
    return *this;
  }

  IControlExtendedPropertiesDispT& operator=(IControlExtendedPropertiesPtr pintf)
  {
    TAutoDriver<IControlExtendedProperties>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ControlExtendedProperties));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ControlExtendedProperties);
  }

  HRESULT         __fastcall get_AllowLeftButtonDown(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowLeftButtonDown(void);
  HRESULT         __fastcall set_AllowLeftButtonDown(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowRightButtonDown(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowRightButtonDown(void);
  HRESULT         __fastcall set_AllowRightButtonDown(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowMiddleButtonDown(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowMiddleButtonDown(void);
  HRESULT         __fastcall set_AllowMiddleButtonDown(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowLeftButtonDoubleClick(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowLeftButtonDoubleClick(void);
  HRESULT         __fastcall set_AllowLeftButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowRightButtonDoubleClick(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowRightButtonDoubleClick(void);
  HRESULT         __fastcall set_AllowRightButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AllowMiddleButtonDoubleClick(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowMiddleButtonDoubleClick(void);
  HRESULT         __fastcall set_AllowMiddleButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/);

  __property   VARIANT_BOOL    AllowLeftButtonDown = {read = get_AllowLeftButtonDown, write = set_AllowLeftButtonDown};
  __property   VARIANT_BOOL    AllowRightButtonDown = {read = get_AllowRightButtonDown, write = set_AllowRightButtonDown};
  __property   VARIANT_BOOL    AllowMiddleButtonDown = {read = get_AllowMiddleButtonDown, write = set_AllowMiddleButtonDown};
  __property   VARIANT_BOOL    AllowLeftButtonDoubleClick = {read = get_AllowLeftButtonDoubleClick, write = set_AllowLeftButtonDoubleClick};
  __property   VARIANT_BOOL    AllowRightButtonDoubleClick = {read = get_AllowRightButtonDoubleClick, write = set_AllowRightButtonDoubleClick};
  __property   VARIANT_BOOL    AllowMiddleButtonDoubleClick = {read = get_AllowMiddleButtonDoubleClick, write = set_AllowMiddleButtonDoubleClick};
};
typedef IControlExtendedPropertiesDispT<IControlExtendedProperties> IControlExtendedPropertiesDisp;

// *********************************************************************//
// DispIntf:  IError
// Flags:     (4096) Dispatchable
// GUID:      {7190AE34-CBEA-432A-8044-D9B496B7778E}
// *********************************************************************//
template<class T>
class IErrorDispT : public TAutoDriver<IError>
{
public:
  IErrorDispT(){}

  IErrorDispT(IError *pintf)
  {
    TAutoDriver<IError>::Bind(pintf, false);
  }

  IErrorDispT(IErrorPtr pintf)
  {
    TAutoDriver<IError>::Bind(pintf, true);
  }

  IErrorDispT& operator=(IError *pintf)
  {
    TAutoDriver<IError>::Bind(pintf, false);
    return *this;
  }

  IErrorDispT& operator=(IErrorPtr pintf)
  {
    TAutoDriver<IError>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Error));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Error);
  }

  HRESULT         __fastcall get_Number(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Number(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall get_Comment(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Comment(void);

  __property   unsigned_long   Number = {read = get_Number};
  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            Comment = {read = get_Comment};
};
typedef IErrorDispT<IError> IErrorDisp;

// *********************************************************************//
// DispIntf:  IPropertyInformation
// Flags:     (4096) Dispatchable
// GUID:      {EC6D466C-E844-4FD0-8521-6AE08E452DCA}
// *********************************************************************//
template<class T>
class IPropertyInformationDispT : public TAutoDriver<IPropertyInformation>
{
public:
  IPropertyInformationDispT(){}

  IPropertyInformationDispT(IPropertyInformation *pintf)
  {
    TAutoDriver<IPropertyInformation>::Bind(pintf, false);
  }

  IPropertyInformationDispT(IPropertyInformationPtr pintf)
  {
    TAutoDriver<IPropertyInformation>::Bind(pintf, true);
  }

  IPropertyInformationDispT& operator=(IPropertyInformation *pintf)
  {
    TAutoDriver<IPropertyInformation>::Bind(pintf, false);
    return *this;
  }

  IPropertyInformationDispT& operator=(IPropertyInformationPtr pintf)
  {
    TAutoDriver<IPropertyInformation>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PropertyInformation));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PropertyInformation);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pcount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall get_Type(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Type(void);
  HRESULT         __fastcall get_ExType(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_ExType(void);
  HRESULT         __fastcall get_DesignDefault(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_DesignDefault(void);
  HRESULT         __fastcall get_SymbolicValues(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SymbolicValues(void);
  HRESULT         __fastcall get_Combination(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Combination(void);
  HRESULT         __fastcall get_Priority(unsigned_long* pVal/*[out,retval]*/);
  unsigned_long   __fastcall get_Priority(void);
  HRESULT         __fastcall get_DefaultValueAsString(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValueAsString(void);
  HRESULT         __fastcall get_DesignReadOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DesignReadOnly(void);
  HRESULT         __fastcall get_Options(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Options(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   BSTR            Text = {read = get_Text};
  __property   unsigned_long   Type = {read = get_Type};
  __property   unsigned_long   ExType = {read = get_ExType};
  __property   LPDISPATCH      SymbolicValues = {read = get_SymbolicValues};
  __property   VARIANT_BOOL    Combination = {read = get_Combination};
  __property   unsigned_long   Priority = {read = get_Priority};
  __property   BSTR            DefaultValueAsString = {read = get_DefaultValueAsString};
  __property   VARIANT_BOOL    DesignReadOnly = {read = get_DesignReadOnly};
  __property   LPDISPATCH      Options = {read = get_Options};
};
typedef IPropertyInformationDispT<IPropertyInformation> IPropertyInformationDisp;

// *********************************************************************//
// DispIntf:  IFileManager
// Flags:     (4096) Dispatchable
// GUID:      {FEA423F8-BE89-4285-9279-194AC034221A}
// *********************************************************************//
template<class T>
class IFileManagerDispT : public TAutoDriver<IFileManager>
{
public:
  IFileManagerDispT(){}

  IFileManagerDispT(IFileManager *pintf)
  {
    TAutoDriver<IFileManager>::Bind(pintf, false);
  }

  IFileManagerDispT(IFileManagerPtr pintf)
  {
    TAutoDriver<IFileManager>::Bind(pintf, true);
  }

  IFileManagerDispT& operator=(IFileManager *pintf)
  {
    TAutoDriver<IFileManager>::Bind(pintf, false);
    return *this;
  }

  IFileManagerDispT& operator=(IFileManagerPtr pintf)
  {
    TAutoDriver<IFileManager>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FileManager));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FileManager);
  }

  HRESULT         __fastcall GetRelativeFileName(BSTR BaseAbsolutePath/*[in]*/, BSTR Path/*[in]*/, 
                                                 BSTR* Result/*[out,retval]*/);
  BSTR            __fastcall GetRelativeFileName(BSTR BaseAbsolutePath/*[in]*/, BSTR Path/*[in]*/);
  HRESULT         __fastcall GetCanonicalFileName(BSTR Path/*[in]*/, 
                                                  VARIANT_BOOL ShortNames/*[in,def,opt]*/, 
                                                  BSTR* Result/*[out,retval]*/);
  BSTR            __fastcall GetCanonicalFileName(BSTR Path/*[in]*/, 
                                                  VARIANT_BOOL ShortNames/*[in,def,opt]*/);
  HRESULT         __fastcall GetCurrentDirectory(BSTR* Result/*[out,retval]*/);
  BSTR            __fastcall GetCurrentDirectory(void);
  HRESULT         __fastcall NPath(BSTR Path/*[in]*/, BSTR* Result/*[out,retval]*/);
  BSTR            __fastcall NPath(BSTR Path/*[in]*/);
  HRESULT         __fastcall DPath(BSTR Path/*[in]*/, BSTR* Result/*[out,retval]*/);
  BSTR            __fastcall DPath(BSTR Path/*[in]*/);

};
typedef IFileManagerDispT<IFileManager> IFileManagerDisp;

// *********************************************************************//
// DispIntf:  IControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {EE85ACDD-7499-4719-A173-FCC56CE6FA1D}
// *********************************************************************//
template <class T> void __fastcall
IControlEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyUp */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                    long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                    long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                  long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMove */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDestroy */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnShow */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHide */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSetFocus */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnKillFocus */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                     long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                    LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDock */ DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                            LPDISPATCH DockTarget/*[in]*/, 
                                            LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IControlEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUndock */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IFormEvents
// Flags:     (4096) Dispatchable
// GUID:      {E83611E0-B0CD-4087-887B-4A0454176AA9}
// *********************************************************************//
template <class T> void __fastcall
IFormEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyUp */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                 long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                 long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                               long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMove */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDestroy */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnShow */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHide */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSetFocus */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnKillFocus */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/, 
                                  long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                 LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDock */ DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                         LPDISPATCH DockTarget/*[in]*/, 
                                         LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUndock */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnCloseQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnCloseQuery */ DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnClose(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClose */ DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnActiveControlChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnActiveControlChange */ DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnHitTest(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                               LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnHitTest */ DISPID(22));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnHint(LPDISPATCH Sender/*[in]*/, LPDISPATCH Object/*[in]*/)
{
  _TDispID _dispid(/* OnHint */ DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Object /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMinimize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnMinimize */ DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnMaximize(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnMaximize */ DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnRestore(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnRestore */ DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnCopyData(LPDISPATCH Sender/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(/* OnCopyData */ DISPID(27));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Data /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnActivate(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnActivate */ DISPID(28));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnEnterSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnEnterSizeMove */ DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFormEventsDispT<T>::OnExitSizeMove(LPDISPATCH Sender/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnExitSizeMove */ DISPID(30));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IActionEvents
// Flags:     (4096) Dispatchable
// GUID:      {EFCC7766-9D3D-48CE-94B0-F0EAC186B763}
// *********************************************************************//
template <class T> void __fastcall
IActionEventsDispT<T>::OnExecute(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnExecute */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IActionEventsDispT<T>::OnUpdate(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUpdate */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITimerEvents
// Flags:     (4096) Dispatchable
// GUID:      {E00E8E3D-8933-4679-B250-257A46743389}
// *********************************************************************//
template <class T> void __fastcall
ITimerEventsDispT<T>::OnExecute(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnExecute */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IHeaderItemEvents
// Flags:     (4096) Dispatchable
// GUID:      {A71BDEAC-05C9-4594-854D-671071B3C110}
// *********************************************************************//
template <class T> void __fastcall
IHeaderItemEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderItemEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderItemEventsDispT<T>::OnBeginTrack(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                        LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnBeginTrack */ DISPID(3));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Button /*[VT_I4:0]*/;
  _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderItemEventsDispT<T>::OnTrack(LPDISPATCH Sender/*[in]*/, long Width/*[in]*/, 
                                   long Button/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnTrack */ DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Button /*[VT_I4:0]*/;
  _args[4] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderItemEventsDispT<T>::OnDividerDblClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnDividerDblClick */ DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderItemEventsDispT<T>::OnBeginDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                       LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDrag */ DISPID(6));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Button /*[VT_I4:0]*/;
  _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderItemEventsDispT<T>::OnEndDrag(LPDISPATCH Sender/*[in]*/, long Button/*[in]*/, 
                                     LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnEndDrag */ DISPID(7));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Button /*[VT_I4:0]*/;
  _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IHeaderEvents
// Flags:     (4096) Dispatchable
// GUID:      {09D9EF1F-9DA1-4E05-9557-B3F692E5775B}
// *********************************************************************//
template <class T> void __fastcall
IHeaderEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                  long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyUp */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                 long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMove */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDestroy */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnShow */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHide */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSetFocus */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnKillFocus */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, long Delta/*[in]*/
                                    , long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                   LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDock */ DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                           LPDISPATCH DockTarget/*[in]*/, 
                                           LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUndock */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnColumnClick */ DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHeaderEventsDispT<T>::OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnColumnResize */ DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IListViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {A55B1FD3-30D4-479B-8F33-3978EB403A0B}
// *********************************************************************//
template <class T> void __fastcall
IListViewEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                    long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyUp */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMove */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDestroy */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnShow */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHide */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSetFocus */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnKillFocus */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                      long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                     LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDock */ DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                             LPDISPATCH DockTarget/*[in]*/, 
                                             LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUndock */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnColumnClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnColumnClick */ DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnColumnResize(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnColumnResize */ DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnData(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnData */ DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnItemCheck */ DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                  Wsolib_tlb::IResult* NewText/*[in]*/)
{
  _TDispID _dispid(/* OnEdited */ DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)NewText /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                     Wsolib_tlb::IResult* ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnBeginEdit */ DISPID(24));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)ResultPtr /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnGroupLinkClick(LPDISPATCH Sender/*[in]*/, LPDISPATCH Group/*[in]*/)
{
  _TDispID _dispid(/* OnGroupLinkClick */ DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Group /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnDrawItem */ DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnSubItemEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                         long SubItem/*[in]*/, Wsolib_tlb::IResult* NewText/*[in]*/)
{
  _TDispID _dispid(/* OnSubItemEdited */ DISPID(27));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  _args[3] = SubItem /*[VT_I4:0]*/;
  _args[4] = (LPDISPATCH)(Wsolib_tlb::IResult*)NewText /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListViewEventsDispT<T>::OnBeginSubItemEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                            long SubItem/*[in]*/, 
                                            Wsolib_tlb::IResult* ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnBeginSubItemEdit */ DISPID(28));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  _args[3] = SubItem /*[VT_I4:0]*/;
  _args[4] = (LPDISPATCH)(Wsolib_tlb::IResult*)ResultPtr /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITreeViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {FFC21772-F6D8-4AFC-A2F4-362C11DF0019}
// *********************************************************************//
template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                    long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyUp */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMove */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDestroy */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnShow */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHide */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSetFocus */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnKillFocus */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                      long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                     LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDock */ DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                             LPDISPATCH DockTarget/*[in]*/, 
                                             LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUndock */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnEdited(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                  Wsolib_tlb::IResult* NewText/*[in]*/)
{
  _TDispID _dispid(/* OnEdited */ DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)NewText /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnExpanding(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnExpanding */ DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnExpanded(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnExpanded */ DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnCollapsing(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnCollapsing */ DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnCollapsed(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnCollapsed */ DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnItemCheck(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnItemCheck */ DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnBeginEdit(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/, 
                                     Wsolib_tlb::IResult* ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnBeginEdit */ DISPID(25));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  _args[3] = (LPDISPATCH)(Wsolib_tlb::IResult*)ResultPtr /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITreeViewEventsDispT<T>::OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnDrawItem */ DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRichEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {B93AF23C-1D4E-48A4-9A5C-BC835FD0F39A}
// *********************************************************************//
template <class T> void __fastcall
IRichEditEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                    long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyUp */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMove */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDestroy */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnShow */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHide */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSetFocus */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnKillFocus */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                      long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                     LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDock */ DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                             LPDISPATCH DockTarget/*[in]*/, 
                                             LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUndock */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRichEditEventsDispT<T>::OnSelChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSelChange */ DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IComboBoxEvents
// Flags:     (4096) Dispatchable
// GUID:      {B8A6F3A3-EE81-4472-938E-F1B42513B7D2}
// *********************************************************************//
template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                    long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnKeyUp */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseEnter */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMouseLeave */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnResize */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnMove */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDestroy */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnShow */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHide */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnEnabledChange */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnSetFocus */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnKillFocus */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                      long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseWheel */ DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                     LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(/* OnBeginDock */ DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/, 
                                             LPDISPATCH DockTarget/*[in]*/, 
                                             LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(/* OnDockControlCreate */ DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(/* OnUndockQuery */ DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnUndock */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* OnDrawItem */ DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IComboBoxEventsDispT<T>::OnDropDown(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnDropDown */ DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IFindReplaceDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {5CD2D30B-5F65-4529-9A7F-9DCAB56B5310}
// *********************************************************************//
template <class T> void __fastcall
IFindReplaceDialogEventsDispT<T>::OnFind(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnFind */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFindReplaceDialogEventsDispT<T>::OnReplace(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnReplace */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFindReplaceDialogEventsDispT<T>::OnReplaceAll(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnReplaceAll */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFindReplaceDialogEventsDispT<T>::OnClose(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClose */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFindReplaceDialogEventsDispT<T>::OnHelp(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHelp */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IFileOpenSaveDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {BAE2B02E-9BD5-4D6D-824E-197CC72CF040}
// *********************************************************************//
template <class T> void __fastcall
IFileOpenSaveDialogEventsDispT<T>::OnCloseQuery(LPDISPATCH Sender/*[in]*/, 
                                                LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(/* OnCloseQuery */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFileOpenSaveDialogEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFileOpenSaveDialogEventsDispT<T>::OnFolderChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnFolderChange */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFileOpenSaveDialogEventsDispT<T>::OnTypeChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnTypeChange */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFileOpenSaveDialogEventsDispT<T>::OnHelp(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHelp */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISelectFolderDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {C5A781AE-2868-4470-972D-39BEAE4721FC}
// *********************************************************************//
template <class T> void __fastcall
ISelectFolderDialogEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITrayIconEvents
// Flags:     (4096) Dispatchable
// GUID:      {0EE395DB-AF4D-4493-861E-B0E1966FD5DB}
// *********************************************************************//
template <class T> void __fastcall
ITrayIconEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITrayIconEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                    long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnDblClick */ DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITrayIconEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                     long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(3));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITrayIconEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                   long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(5));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IEventHandlerEvents
// Flags:     (4096) Dispatchable
// GUID:      {A3BE55F5-A954-45E5-8419-CB249B836ABA}
// *********************************************************************//
template <class T> void __fastcall
IEventHandlerEventsDispT<T>::OnExecute(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnExecute */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IFontDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {57ACC027-05B0-48A5-ACC3-AB2E31C34D28}
// *********************************************************************//
template <class T> void __fastcall
IFontDialogEventsDispT<T>::OnHelp(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHelp */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFontDialogEventsDispT<T>::OnApply(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnApply */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IColorDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {F3B57D51-7823-4E4F-907D-70E73A2C9E72}
// *********************************************************************//
template <class T> void __fastcall
IColorDialogEventsDispT<T>::OnHelp(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnHelp */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IListControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {DDB41E4E-78C4-4E80-9065-0D20B278E837}
// *********************************************************************//
template <class T> void __fastcall
IListControlEventsDispT<T>::OnClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnDblClick(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                       long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChange"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnKeyDown(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, 
                                      long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnKeyUp(LPDISPATCH Sender/*[in]*/, long Key/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Key /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnMouseEnter(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseEnter"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnMouseLeave(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseLeave"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnMouseDown(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnMouseMove(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                        long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnMouseUp(LPDISPATCH Sender/*[in]*/, long x/*[in]*/, long y/*[in]*/, 
                                      long Button/*[in]*/, long Flags/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  _args[4] = Button /*[VT_I4:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnResize(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnResize"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnMove(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMove"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnDestroy(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDestroy"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnShow(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnShow"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnHide(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnHide"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnEnabledChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnabledChange"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnSetFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnKillFocus(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnMouseWheel(LPDISPATCH Sender/*[in]*/, long Keys/*[in]*/, 
                                         long Delta/*[in]*/, long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseWheel"), DISPID(100));
  TAutoArgs<5> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Keys /*[VT_I4:0]*/;
  _args[3] = Delta /*[VT_I4:0]*/;
  _args[4] = x /*[VT_I4:0]*/;
  _args[5] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnBeginDock(LPDISPATCH Sender/*[in]*/, LPDISPATCH DockTarget/*[in]*/, 
                                        LPDISPATCH BeginDockContext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnBeginDock"), DISPID(101));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[3] = BeginDockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnDockControlCreate(LPDISPATCH Sender/*[in]*/, 
                                                LPDISPATCH Control/*[in]*/, 
                                                LPDISPATCH DockTarget/*[in]*/, 
                                                LPDISPATCH DockControlCreateContext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDockControlCreate"), DISPID(102));
  TAutoArgs<4> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  _args[3] = DockTarget /*[VT_DISPATCH:0]*/;
  _args[4] = DockControlCreateContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnUndockQuery(LPDISPATCH Sender/*[in]*/, 
                                          LPDISPATCH UndockContext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUndockQuery"), DISPID(103));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = UndockContext /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnUndock(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUndock"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IListControlEventsDispT<T>::OnDrawItem(LPDISPATCH Sender/*[in]*/, LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDrawItem"), DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRegion
// Interface: IRegion
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRegionT<T>::get_Value(unsigned_long* pVal/*[out,retval]*/)
{
  return (*this)->get_Value(pVal);
}

template <class T> unsigned_long __fastcall
TCOMIRegionT<T>::get_Value(void)
{
  unsigned_long pVal;
  OLECHECK(this->get_Value((unsigned_long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IRegion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB9FCB6F-2C14-4568-BADF-E7C0B022A654}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRegionDispT<T>::get_Value(unsigned_long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IRegionDispT<T>::get_Value(void)
{
  unsigned_long pVal;
  this->get_Value((unsigned_long*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IClipboardEvents
// Flags:     (4096) Dispatchable
// GUID:      {FBAA7B25-99FF-4B15-832D-5A85EF97F814}
// *********************************************************************//
template <class T> void __fastcall
IClipboardEventsDispT<T>::OnChange(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(/* OnChange */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITaskDialogEvents
// Flags:     (4096) Dispatchable
// GUID:      {58A2A29A-ABEB-4AAB-ABD4-03CC83B59915}
// *********************************************************************//
template <class T> void __fastcall
ITaskDialogEventsDispT<T>::OnTimer(LPDISPATCH Sender/*[in]*/, unsigned_long Elapsed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTimer"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Elapsed /*[VT_UI4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ITaskDialogEventsDispT<T>::OnButtonClick(LPDISPATCH Sender/*[in]*/, long ID/*[in]*/, 
                                         LPDISPATCH ResultPtr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnButtonClick"), DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = ID /*[VT_I4:0]*/;
  _args[3] = ResultPtr /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IDesignEvents
// Flags:     (4096) Dispatchable
// GUID:      {8C46AC3B-00A3-42F5-B82F-E292FD49F53D}
// *********************************************************************//
template <class T> void __fastcall
IDesignEventsDispT<T>::OnActiveControlChange(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActiveControlChange"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDesignEventsDispT<T>::OnControlCreate(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnControlCreate"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDesignEventsDispT<T>::OnDetailsButtonClick(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDetailsButtonClick"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDesignEventsDispT<T>::OnDesignerAdd(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDesignerAdd"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDesignEventsDispT<T>::OnDesignerRemove(LPDISPATCH Sender/*[in]*/, LPDISPATCH Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDesignerRemove"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  _args[2] = Control /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IExecutorEvents
// Flags:     (4096) Dispatchable
// GUID:      {885A7D58-B7A1-4CA6-BC6F-7C58C09C7812}
// *********************************************************************//
template <class T> void __fastcall
IExecutorEventsDispT<T>::OnComplete(LPDISPATCH Sender/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnComplete"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Sender /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WindowSystemObject
// Interface: IWindowSystemObjectDisp
// *********************************************************************//
typedef TCoClassCreatorT<IWindowSystemObjectDisp, IWindowSystemObject, &CLSID_WindowSystemObject, &IID_IWindowSystemObject> CoWindowSystemObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Version
// Interface: IVersionDisp
// *********************************************************************//
typedef TCoClassCreatorT<IVersionDisp, IVersion, &CLSID_Version, &IID_IVersion> CoVersion;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Control
// Interface: IControlDisp
// *********************************************************************//
typedef TCoClassCreatorT<IControlDisp, IControl, &CLSID_Control, &IID_IControl> CoControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Frame
// Interface: IFrameDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFrameDisp, IFrame, &CLSID_Frame, &IID_IFrame> CoFrame;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Form
// Interface: IFormDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFormDisp, IForm, &CLSID_Form, &IID_IForm> CoForm;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Collection
// Interface: ICollectionDisp
// *********************************************************************//
typedef TCoClassCreatorT<ICollectionDisp, ICollection, &CLSID_Collection, &IID_ICollection> CoCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : StringCollection
// Interface: IStringCollectionDisp
// *********************************************************************//
typedef TCoClassCreatorT<IStringCollectionDisp, IStringCollection, &CLSID_StringCollection, &IID_IStringCollection> CoStringCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ImageList
// Interface: IImageListDisp
// *********************************************************************//
typedef TCoClassCreatorT<IImageListDisp, IImageList, &CLSID_ImageList, &IID_IImageList> CoImageList;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Pen
// Interface: IPenDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPenDisp, IPen, &CLSID_Pen, &IID_IPen> CoPen;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Brush
// Interface: IBrushDisp
// *********************************************************************//
typedef TCoClassCreatorT<IBrushDisp, IBrush, &CLSID_Brush, &IID_IBrush> CoBrush;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Font
// Interface: IFontExDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFontExDisp, IFontEx, &CLSID_Font, &IID_IFontEx> CoFont;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Action
// Interface: IActionDisp
// *********************************************************************//
typedef TCoClassCreatorT<IActionDisp, IAction, &CLSID_Action, &IID_IAction> CoAction;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListControlItem
// Interface: IListControlItemDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListControlItemDisp, IListControlItem, &CLSID_ListControlItem, &IID_IListControlItem> CoListControlItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListBox
// Interface: IListBoxDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListBoxDisp, IListBox, &CLSID_ListBox, &IID_IListBox> CoListBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComboBox
// Interface: IComboBoxDisp
// *********************************************************************//
typedef TCoClassCreatorT<IComboBoxDisp, IComboBox, &CLSID_ComboBox, &IID_IComboBox> CoComboBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Edit
// Interface: IEditDisp
// *********************************************************************//
typedef TCoClassCreatorT<IEditDisp, IEdit, &CLSID_Edit, &IID_IEdit> CoEdit;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Button
// Interface: IButtonDisp
// *********************************************************************//
typedef TCoClassCreatorT<IButtonDisp, IButton, &CLSID_Button, &IID_IButton> CoButton;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CheckBox
// Interface: ICheckBoxDisp
// *********************************************************************//
typedef TCoClassCreatorT<ICheckBoxDisp, ICheckBox, &CLSID_CheckBox, &IID_ICheckBox> CoCheckBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RadioButton
// Interface: IRadioButtonDisp
// *********************************************************************//
typedef TCoClassCreatorT<IRadioButtonDisp, IRadioButton, &CLSID_RadioButton, &IID_IRadioButton> CoRadioButton;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : StatusItem
// Interface: IStatusItemDisp
// *********************************************************************//
typedef TCoClassCreatorT<IStatusItemDisp, IStatusItem, &CLSID_StatusItem, &IID_IStatusItem> CoStatusItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : StatusBar
// Interface: IStatusBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<IStatusBarDisp, IStatusBar, &CLSID_StatusBar, &IID_IStatusBar> CoStatusBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ProgressBar
// Interface: IProgressBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<IProgressBarDisp, IProgressBar, &CLSID_ProgressBar, &IID_IProgressBar> CoProgressBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ScrollBar
// Interface: IScrollBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<IScrollBarDisp, IScrollBar, &CLSID_ScrollBar, &IID_IScrollBar> CoScrollBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Tab
// Interface: ITabDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITabDisp, ITab, &CLSID_Tab, &IID_ITab> CoTab;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TabControl
// Interface: ITabControlDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITabControlDisp, ITabControl, &CLSID_TabControl, &IID_ITabControl> CoTabControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PageControl
// Interface: IPageControlDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPageControlDisp, IPageControl, &CLSID_PageControl, &IID_IPageControl> CoPageControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolBar
// Interface: IToolBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<IToolBarDisp, IToolBar, &CLSID_ToolBar, &IID_IToolBar> CoToolBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MenuBar
// Interface: IMenuBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<IMenuBarDisp, IMenuBar, &CLSID_MenuBar, &IID_IMenuBar> CoMenuBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ReBarBand
// Interface: IReBarBandDisp
// *********************************************************************//
typedef TCoClassCreatorT<IReBarBandDisp, IReBarBand, &CLSID_ReBarBand, &IID_IReBarBand> CoReBarBand;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ReBar
// Interface: IReBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<IReBarDisp, IReBar, &CLSID_ReBar, &IID_IReBar> CoReBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : HyperLink
// Interface: IHyperLinkDisp
// *********************************************************************//
typedef TCoClassCreatorT<IHyperLinkDisp, IHyperLink, &CLSID_HyperLink, &IID_IHyperLink> CoHyperLink;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Pager
// Interface: IPagerDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPagerDisp, IPager, &CLSID_Pager, &IID_IPager> CoPager;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : COMConnectionPoint
// Interface: ICOMConnectionPointDisp
// *********************************************************************//
typedef TCoClassCreatorT<ICOMConnectionPointDisp, ICOMConnectionPoint, &CLSID_COMConnectionPoint, &IID_ICOMConnectionPoint> CoCOMConnectionPoint;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : COMEvents
// Interface: ICOMEventsDisp
// *********************************************************************//
typedef TCoClassCreatorT<ICOMEventsDisp, ICOMEvents, &CLSID_COMEvents, &IID_ICOMEvents> CoCOMEvents;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ActiveXControl
// Interface: IActiveXControlDisp
// *********************************************************************//
typedef TCoClassCreatorT<IActiveXControlDisp, IActiveXControl, &CLSID_ActiveXControl, &IID_IActiveXControl> CoActiveXControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : HeaderItem
// Interface: IHeaderItemDisp
// *********************************************************************//
typedef TCoClassCreatorT<IHeaderItemDisp, IHeaderItem, &CLSID_HeaderItem, &IID_IHeaderItem> CoHeaderItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Header
// Interface: IHeaderDisp
// *********************************************************************//
typedef TCoClassCreatorT<IHeaderDisp, IHeader, &CLSID_Header, &IID_IHeader> CoHeader;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListSubItem
// Interface: IListSubItemDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListSubItemDisp, IListSubItem, &CLSID_ListSubItem, &IID_IListSubItem> CoListSubItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListItem
// Interface: IListItemDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListItemDisp, IListItem, &CLSID_ListItem, &IID_IListItem> CoListItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListViewColumns
// Interface: IListViewColumnsDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListViewColumnsDisp, IListViewColumns, &CLSID_ListViewColumns, &IID_IListViewColumns> CoListViewColumns;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WorkArea
// Interface: IWorkAreaDisp
// *********************************************************************//
typedef TCoClassCreatorT<IWorkAreaDisp, IWorkArea, &CLSID_WorkArea, &IID_IWorkArea> CoWorkArea;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WorkAreas
// Interface: IWorkAreasDisp
// *********************************************************************//
typedef TCoClassCreatorT<IWorkAreasDisp, IWorkAreas, &CLSID_WorkAreas, &IID_IWorkAreas> CoWorkAreas;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListViewGroup
// Interface: IListViewGroupDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListViewGroupDisp, IListViewGroup, &CLSID_ListViewGroup, &IID_IListViewGroup> CoListViewGroup;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListViewGroups
// Interface: IListViewGroupsDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListViewGroupsDisp, IListViewGroups, &CLSID_ListViewGroups, &IID_IListViewGroups> CoListViewGroups;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListView
// Interface: IListViewDisp
// *********************************************************************//
typedef TCoClassCreatorT<IListViewDisp, IListView, &CLSID_ListView, &IID_IListView> CoListView;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TreeItem
// Interface: ITreeItemDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITreeItemDisp, ITreeItem, &CLSID_TreeItem, &IID_ITreeItem> CoTreeItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TreeView
// Interface: ITreeViewDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITreeViewDisp, ITreeView, &CLSID_TreeView, &IID_ITreeView> CoTreeView;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Paragraph
// Interface: IParagraphDisp
// *********************************************************************//
typedef TCoClassCreatorT<IParagraphDisp, IParagraph, &CLSID_Paragraph, &IID_IParagraph> CoParagraph;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RichEdit
// Interface: IRichEditDisp
// *********************************************************************//
typedef TCoClassCreatorT<IRichEditDisp, IRichEdit, &CLSID_RichEdit, &IID_IRichEdit> CoRichEdit;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : UpDown
// Interface: IUpDownDisp
// *********************************************************************//
typedef TCoClassCreatorT<IUpDownDisp, IUpDown, &CLSID_UpDown, &IID_IUpDown> CoUpDown;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TrackBar
// Interface: ITrackBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITrackBarDisp, ITrackBar, &CLSID_TrackBar, &IID_ITrackBar> CoTrackBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : HotKey
// Interface: IHotKeyDisp
// *********************************************************************//
typedef TCoClassCreatorT<IHotKeyDisp, IHotKey, &CLSID_HotKey, &IID_IHotKey> CoHotKey;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Animate
// Interface: IAnimateDisp
// *********************************************************************//
typedef TCoClassCreatorT<IAnimateDisp, IAnimate, &CLSID_Animate, &IID_IAnimate> CoAnimate;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : IPAddress
// Interface: IIPAddressDisp
// *********************************************************************//
typedef TCoClassCreatorT<IIPAddressDisp, IIPAddress, &CLSID_IPAddress, &IID_IIPAddress> CoIPAddress;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DateTime
// Interface: IDateTimeDisp
// *********************************************************************//
typedef TCoClassCreatorT<IDateTimeDisp, IDateTime, &CLSID_DateTime, &IID_IDateTime> CoDateTime;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DateTimePicker
// Interface: IDateTimePickerDisp
// *********************************************************************//
typedef TCoClassCreatorT<IDateTimePickerDisp, IDateTimePicker, &CLSID_DateTimePicker, &IID_IDateTimePicker> CoDateTimePicker;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Calendar
// Interface: ICalendarDisp
// *********************************************************************//
typedef TCoClassCreatorT<ICalendarDisp, ICalendar, &CLSID_Calendar, &IID_ICalendar> CoCalendar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Splitter
// Interface: ISplitterDisp
// *********************************************************************//
typedef TCoClassCreatorT<ISplitterDisp, ISplitter, &CLSID_Splitter, &IID_ISplitter> CoSplitter;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SplitPanel
// Interface: ISplitPanelDisp
// *********************************************************************//
typedef TCoClassCreatorT<ISplitPanelDisp, ISplitPanel, &CLSID_SplitPanel, &IID_ISplitPanel> CoSplitPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PolygonGraphic
// Interface: IPolygonDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPolygonDisp, IPolygon, &CLSID_PolygonGraphic, &IID_IPolygon> CoPolygonGraphic;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ImageGraphic
// Interface: IImageDisp
// *********************************************************************//
typedef TCoClassCreatorT<IImageDisp, IImage, &CLSID_ImageGraphic, &IID_IImage> CoImageGraphic;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : LineGraphic
// Interface: ILineDisp
// *********************************************************************//
typedef TCoClassCreatorT<ILineDisp, ILine, &CLSID_LineGraphic, &IID_ILine> CoLineGraphic;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PrintDialogBase
// Interface: IPrintDialogBaseDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPrintDialogBaseDisp, IPrintDialogBase, &CLSID_PrintDialogBase, &IID_IPrintDialogBase> CoPrintDialogBase;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PrintDialog
// Interface: IPrintDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPrintDialogDisp, IPrintDialog, &CLSID_PrintDialog, &IID_IPrintDialog> CoPrintDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PageSetupDialog
// Interface: IPageSetupDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPageSetupDialogDisp, IPageSetupDialog, &CLSID_PageSetupDialog, &IID_IPageSetupDialog> CoPageSetupDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FindReplaceDialog
// Interface: IFindReplaceDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFindReplaceDialogDisp, IFindReplaceDialog, &CLSID_FindReplaceDialog, &IID_IFindReplaceDialog> CoFindReplaceDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FontDialog
// Interface: IFontDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFontDialogDisp, IFontDialog, &CLSID_FontDialog, &IID_IFontDialog> CoFontDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ColorDialog
// Interface: IColorDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<IColorDialogDisp, IColorDialog, &CLSID_ColorDialog, &IID_IColorDialog> CoColorDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FileOpenSaveDialog
// Interface: IFileOpenSaveDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFileOpenSaveDialogDisp, IFileOpenSaveDialog, &CLSID_FileOpenSaveDialog, &IID_IFileOpenSaveDialog> CoFileOpenSaveDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SelectFolderDialog
// Interface: ISelectFolderDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<ISelectFolderDialogDisp, ISelectFolderDialog, &CLSID_SelectFolderDialog, &IID_ISelectFolderDialog> CoSelectFolderDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Timer
// Interface: ITimerDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITimerDisp, ITimer, &CLSID_Timer, &IID_ITimer> CoTimer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Result
// Interface: IResultDisp
// *********************************************************************//
typedef TCoClassCreatorT<IResultDisp, IResult, &CLSID_Result, &IID_IResult> CoResult;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TrayIcon
// Interface: ITrayIconDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITrayIconDisp, ITrayIcon, &CLSID_TrayIcon, &IID_ITrayIcon> CoTrayIcon;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Regions
// Interface: IRegionsDisp
// *********************************************************************//
typedef TCoClassCreatorT<IRegionsDisp, IRegions, &CLSID_Regions, &IID_IRegions> CoRegions;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Region
// Interface: TCOMIRegion
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRegion, IRegion, &CLSID_Region, &IID_IRegion> CoRegion;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Screen
// Interface: IScreenDisp
// *********************************************************************//
typedef TCoClassCreatorT<IScreenDisp, IScreen, &CLSID_Screen, &IID_IScreen> CoScreen;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Hint
// Interface: IHintDisp
// *********************************************************************//
typedef TCoClassCreatorT<IHintDisp, IHint, &CLSID_Hint, &IID_IHint> CoHint;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EventHandler
// Interface: IEventHandlerDisp
// *********************************************************************//
typedef TCoClassCreatorT<IEventHandlerDisp, IEventHandler, &CLSID_EventHandler, &IID_IEventHandler> CoEventHandler;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WindowSystemObjectExtensions
// Interface: IWindowSystemObjectExtensionsDisp
// *********************************************************************//
typedef TCoClassCreatorT<IWindowSystemObjectExtensionsDisp, IWindowSystemObjectExtensions, &CLSID_WindowSystemObjectExtensions, &IID_IWindowSystemObjectExtensions> CoWindowSystemObjectExtensions;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PrintInfo
// Interface: IPrintInfoDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPrintInfoDisp, IPrintInfo, &CLSID_PrintInfo, &IID_IPrintInfo> CoPrintInfo;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : StdDispatch
// Interface: IStdDispatchDisp
// *********************************************************************//
typedef TCoClassCreatorT<IStdDispatchDisp, IStdDispatch, &CLSID_StdDispatch, &IID_IStdDispatch> CoStdDispatch;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BalloonTip
// Interface: IBalloonTipDisp
// *********************************************************************//
typedef TCoClassCreatorT<IBalloonTipDisp, IBalloonTip, &CLSID_BalloonTip, &IID_IBalloonTip> CoBalloonTip;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Window
// Interface: IWindowDisp
// *********************************************************************//
typedef TCoClassCreatorT<IWindowDisp, IWindow, &CLSID_Window, &IID_IWindow> CoWindow;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Clipboard
// Interface: IClipboardDisp
// *********************************************************************//
typedef TCoClassCreatorT<IClipboardDisp, IClipboard, &CLSID_Clipboard, &IID_IClipboard> CoClipboard;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TaskBar
// Interface: ITaskBarDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITaskBarDisp, ITaskBar, &CLSID_TaskBar, &IID_ITaskBar> CoTaskBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ResourceUsageGraph
// Interface: IResourceUsageGraphDisp
// *********************************************************************//
typedef TCoClassCreatorT<IResourceUsageGraphDisp, IResourceUsageGraph, &CLSID_ResourceUsageGraph, &IID_IResourceUsageGraph> CoResourceUsageGraph;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Property
// Interface: IPropertyDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPropertyDisp, IProperty, &CLSID_Property, &IID_IProperty> CoProperty;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PropertyGrid
// Interface: IPropertyGridDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPropertyGridDisp, IPropertyGrid, &CLSID_PropertyGrid, &IID_IPropertyGrid> CoPropertyGrid;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Console
// Interface: IConsoleDisp
// *********************************************************************//
typedef TCoClassCreatorT<IConsoleDisp, IConsole, &CLSID_Console, &IID_IConsole> CoConsole;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Docking
// Interface: IDockingDisp
// *********************************************************************//
typedef TCoClassCreatorT<IDockingDisp, IDocking, &CLSID_Docking, &IID_IDocking> CoDocking;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : GraphicElement
// Interface: IGraphicElementDisp
// *********************************************************************//
typedef TCoClassCreatorT<IGraphicElementDisp, IGraphicElement, &CLSID_GraphicElement, &IID_IGraphicElement> CoGraphicElement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BeginDockContext
// Interface: IBeginDockContextDisp
// *********************************************************************//
typedef TCoClassCreatorT<IBeginDockContextDisp, IBeginDockContext, &CLSID_BeginDockContext, &IID_IBeginDockContext> CoBeginDockContext;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DockControlCreateContext
// Interface: IDockControlCreateContextDisp
// *********************************************************************//
typedef TCoClassCreatorT<IDockControlCreateContextDisp, IDockControlCreateContext, &CLSID_DockControlCreateContext, &IID_IDockControlCreateContext> CoDockControlCreateContext;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : UndockContext
// Interface: IUndockContextDisp
// *********************************************************************//
typedef TCoClassCreatorT<IUndockContextDisp, IUndockContext, &CLSID_UndockContext, &IID_IUndockContext> CoUndockContext;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Color
// Interface: IColorDisp
// *********************************************************************//
typedef TCoClassCreatorT<IColorDisp, IColor, &CLSID_Color, &IID_IColor> CoColor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Layering
// Interface: ILayeringDisp
// *********************************************************************//
typedef TCoClassCreatorT<ILayeringDisp, ILayering, &CLSID_Layering, &IID_ILayering> CoLayering;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MessageDialog
// Interface: IMessageDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<IMessageDialogDisp, IMessageDialog, &CLSID_MessageDialog, &IID_IMessageDialog> CoMessageDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TaskDialog
// Interface: ITaskDialogDisp
// *********************************************************************//
typedef TCoClassCreatorT<ITaskDialogDisp, ITaskDialog, &CLSID_TaskDialog, &IID_ITaskDialog> CoTaskDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Icon
// Interface: IIconDisp
// *********************************************************************//
typedef TCoClassCreatorT<IIconDisp, IIcon, &CLSID_Icon, &IID_IIcon> CoIcon;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Rect
// Interface: IRectDisp
// *********************************************************************//
typedef TCoClassCreatorT<IRectDisp, IRect, &CLSID_Rect, &IID_IRect> CoRect;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : IconBuilder
// Interface: IIconBuilderDisp
// *********************************************************************//
typedef TCoClassCreatorT<IIconBuilderDisp, IIconBuilder, &CLSID_IconBuilder, &IID_IIconBuilder> CoIconBuilder;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DesignReference
// Interface: IDesignReferenceDisp
// *********************************************************************//
typedef TCoClassCreatorT<IDesignReferenceDisp, IDesignReference, &CLSID_DesignReference, &IID_IDesignReference> CoDesignReference;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Design
// Interface: IDesignDisp
// *********************************************************************//
typedef TCoClassCreatorT<IDesignDisp, IDesign, &CLSID_Design, &IID_IDesign> CoDesign;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Executor
// Interface: IExecutorDisp
// *********************************************************************//
typedef TCoClassCreatorT<IExecutorDisp, IExecutor, &CLSID_Executor, &IID_IExecutor> CoExecutor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ControlExtendedProperties
// Interface: IControlExtendedPropertiesDisp
// *********************************************************************//
typedef TCoClassCreatorT<IControlExtendedPropertiesDisp, IControlExtendedProperties, &CLSID_ControlExtendedProperties, &IID_IControlExtendedProperties> CoControlExtendedProperties;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Error
// Interface: IErrorDisp
// *********************************************************************//
typedef TCoClassCreatorT<IErrorDisp, IError, &CLSID_Error, &IID_IError> CoError;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PropertyInformation
// Interface: IPropertyInformationDisp
// *********************************************************************//
typedef TCoClassCreatorT<IPropertyInformationDisp, IPropertyInformation, &CLSID_PropertyInformation, &IID_IPropertyInformation> CoPropertyInformation;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FileManager
// Interface: IFileManagerDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFileManagerDisp, IFileManager, &CLSID_FileManager, &IID_IFileManager> CoFileManager;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Control
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Control : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Control<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Control<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Control<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Control<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                       unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                     LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                             LPDISPATCH DockTarget, 
                                             LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Frame
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Frame : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Frame<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Frame<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Frame<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Frame<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Form
// Event Interface : IFormEvents
// *********************************************************************//
template <class T>
class TEvents_Form : public IConnectionPointImpl<T,
                                                 &DIID_IFormEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
  void            Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnClose(LPDISPATCH Sender);
  void            Fire_OnActiveControlChange(LPDISPATCH Sender);
  void            Fire_OnHitTest(LPDISPATCH Sender, long x, long y, LPDISPATCH ResultPtr);
  void            Fire_OnHint(LPDISPATCH Sender, LPDISPATCH Object);
  void            Fire_OnMinimize(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnMaximize(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnRestore(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnCopyData(LPDISPATCH Sender, BSTR Data);
  void            Fire_OnActivate(LPDISPATCH Sender, long Flags);
  void            Fire_OnEnterSizeMove(LPDISPATCH Sender, long Flags);
  void            Fire_OnExitSizeMove(LPDISPATCH Sender, long Flags);
protected:
  IFormEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Form<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Form<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Form<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Form<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                    unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                             unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                             EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                  LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                          LPDISPATCH DockTarget, LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCloseQuery(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnClose(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClose(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnActiveControlChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActiveControlChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnHitTest(LPDISPATCH Sender, long x, long y, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHitTest(Sender, x, y, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnHint(LPDISPATCH Sender, LPDISPATCH Object)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHint(Sender, Object);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMinimize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMinimize(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnMaximize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMaximize(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnRestore(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRestore(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnCopyData(LPDISPATCH Sender, BSTR Data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCopyData(Sender, Data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnActivate(LPDISPATCH Sender, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate(Sender, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnEnterSizeMove(LPDISPATCH Sender, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterSizeMove(Sender, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Form<T>::Fire_OnExitSizeMove(LPDISPATCH Sender, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExitSizeMove(Sender, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Action
// Event Interface : IActionEvents
// *********************************************************************//
template <class T>
class TEvents_Action : public IConnectionPointImpl<T,
                                                 &DIID_IActionEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnExecute(LPDISPATCH Sender);
  void            Fire_OnUpdate(LPDISPATCH Sender);
protected:
  IActionEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Action<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Action<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Action<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Action<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Action<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Action<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                      unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Action<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                               unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                               EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Action<T>::Fire_OnExecute(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExecute(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Action<T>::Fire_OnUpdate(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUpdate(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ListBox
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ListBox : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ListBox<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ListBox<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ListBox<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ListBox<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                       unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                     LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                             LPDISPATCH DockTarget, 
                                             LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ComboBox
// Event Interface : IComboBoxEvents
// *********************************************************************//
template <class T>
class TEvents_ComboBox : public IConnectionPointImpl<T,
                                                 &DIID_IComboBoxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
  void            Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnDropDown(LPDISPATCH Sender);
protected:
  IComboBoxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ComboBox<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ComboBox<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ComboBox<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ComboBox<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDrawItem(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_OnDropDown(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDropDown(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Edit
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Edit : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Edit<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Edit<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Edit<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Edit<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                    unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                             unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                             EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                  LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                          LPDISPATCH DockTarget, LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Edit<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Button
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Button : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Button<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Button<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Button<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Button<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                      unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                               unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                               EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                    LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                            LPDISPATCH DockTarget, 
                                            LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Button<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CheckBox
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_CheckBox : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_CheckBox<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_CheckBox<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_CheckBox<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_CheckBox<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RadioButton
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_RadioButton : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_RadioButton<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_RadioButton<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_RadioButton<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_RadioButton<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                           unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                    unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                    VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                         LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                 LPDISPATCH DockTarget, 
                                                 LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RadioButton<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : StatusBar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_StatusBar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_StatusBar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_StatusBar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_StatusBar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_StatusBar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                         unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                  unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                  VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                       LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                               LPDISPATCH DockTarget, 
                                               LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ProgressBar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ProgressBar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ProgressBar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ProgressBar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ProgressBar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ProgressBar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                           unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                    unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                    VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                         LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                 LPDISPATCH DockTarget, 
                                                 LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ScrollBar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ScrollBar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ScrollBar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ScrollBar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ScrollBar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ScrollBar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                         unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                  unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                  VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                       LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                               LPDISPATCH DockTarget, 
                                               LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Tab
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Tab : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Tab<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Tab<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Tab<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Tab<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                   unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                            unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                            EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                 LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                         LPDISPATCH DockTarget, LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tab<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TabControl
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_TabControl : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TabControl<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_TabControl<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_TabControl<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_TabControl<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                          unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                   unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                   VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                        LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                LPDISPATCH DockTarget, 
                                                LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabControl<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PageControl
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_PageControl : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_PageControl<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_PageControl<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_PageControl<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_PageControl<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                           unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                    unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                    VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                         LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                 LPDISPATCH DockTarget, 
                                                 LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageControl<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ToolBar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ToolBar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ToolBar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ToolBar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ToolBar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ToolBar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                       unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                     LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                             LPDISPATCH DockTarget, 
                                             LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToolBar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MenuBar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_MenuBar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MenuBar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_MenuBar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_MenuBar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_MenuBar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                       unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                     LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                             LPDISPATCH DockTarget, 
                                             LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MenuBar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ReBar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ReBar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ReBar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ReBar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ReBar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ReBar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReBar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HyperLink
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_HyperLink : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_HyperLink<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_HyperLink<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_HyperLink<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_HyperLink<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                         unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                  unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                  VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                       LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                               LPDISPATCH DockTarget, 
                                               LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HyperLink<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Pager
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Pager : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Pager<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Pager<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Pager<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Pager<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Pager<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ActiveXControl
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ActiveXControl : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ActiveXControl<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ActiveXControl<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ActiveXControl<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                              unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                       unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                       VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                                       unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, 
                                           long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, 
                                            long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, 
                                             long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                            LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                    LPDISPATCH DockTarget, 
                                                    LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveXControl<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HeaderItem
// Event Interface : IHeaderItemEvents
// *********************************************************************//
template <class T>
class TEvents_HeaderItem : public IConnectionPointImpl<T,
                                                 &DIID_IHeaderItemEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnBeginTrack(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr);
  void            Fire_OnTrack(LPDISPATCH Sender, long Width, long Button, LPDISPATCH ResultPtr);
  void            Fire_OnDividerDblClick(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnBeginDrag(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr);
  void            Fire_OnEndDrag(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr);
protected:
  IHeaderItemEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_HeaderItem<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_HeaderItem<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_HeaderItem<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_HeaderItem<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                          unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                   unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                   VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_OnBeginTrack(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginTrack(Sender, Button, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_OnTrack(LPDISPATCH Sender, long Width, long Button, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnTrack(Sender, Width, Button, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_OnDividerDblClick(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDividerDblClick(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_OnBeginDrag(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDrag(Sender, Button, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HeaderItem<T>::Fire_OnEndDrag(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEndDrag(Sender, Button, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Header
// Event Interface : IHeaderEvents
// *********************************************************************//
template <class T>
class TEvents_Header : public IConnectionPointImpl<T,
                                                 &DIID_IHeaderEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
  void            Fire_OnColumnClick(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnColumnResize(LPDISPATCH Sender, LPDISPATCH Item);
protected:
  IHeaderEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Header<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Header<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Header<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Header<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                      unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                               unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                               EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                    LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                            LPDISPATCH DockTarget, 
                                            LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnColumnClick(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnColumnClick(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Header<T>::Fire_OnColumnResize(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnColumnResize(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ListView
// Event Interface : IListViewEvents
// *********************************************************************//
template <class T>
class TEvents_ListView : public IConnectionPointImpl<T,
                                                 &DIID_IListViewEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
  void            Fire_OnColumnClick(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnColumnResize(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnData(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnItemCheck(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnEdited(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* NewText);
  void            Fire_OnBeginEdit(LPDISPATCH Sender, LPDISPATCH Item, 
                                   Wsolib_tlb::IResult* ResultPtr);
  void            Fire_OnGroupLinkClick(LPDISPATCH Sender, LPDISPATCH Group);
  void            Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnSubItemEdited(LPDISPATCH Sender, LPDISPATCH Item, long SubItem, 
                                       Wsolib_tlb::IResult* NewText);
  void            Fire_OnBeginSubItemEdit(LPDISPATCH Sender, LPDISPATCH Item, long SubItem, 
                                          Wsolib_tlb::IResult* ResultPtr);
protected:
  IListViewEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ListView<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ListView<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ListView<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ListView<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnColumnClick(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnColumnClick(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnColumnResize(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnColumnResize(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnData(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnData(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnItemCheck(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnItemCheck(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnEdited(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* NewText)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEdited(Sender, Item, NewText);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnBeginEdit(LPDISPATCH Sender, LPDISPATCH Item, 
                                      Wsolib_tlb::IResult* ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginEdit(Sender, Item, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnGroupLinkClick(LPDISPATCH Sender, LPDISPATCH Group)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnGroupLinkClick(Sender, Group);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDrawItem(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnSubItemEdited(LPDISPATCH Sender, LPDISPATCH Item, long SubItem, 
                                          Wsolib_tlb::IResult* NewText)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSubItemEdited(Sender, Item, SubItem, NewText);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OnBeginSubItemEdit(LPDISPATCH Sender, LPDISPATCH Item, long SubItem, 
                                             Wsolib_tlb::IResult* ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginSubItemEdit(Sender, Item, SubItem, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TreeView
// Event Interface : ITreeViewEvents
// *********************************************************************//
template <class T>
class TEvents_TreeView : public IConnectionPointImpl<T,
                                                 &DIID_ITreeViewEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
  void            Fire_OnEdited(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* NewText);
  void            Fire_OnExpanding(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnExpanded(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnCollapsing(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnCollapsed(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnItemCheck(LPDISPATCH Sender, LPDISPATCH Item);
  void            Fire_OnBeginEdit(LPDISPATCH Sender, LPDISPATCH Item, 
                                   Wsolib_tlb::IResult* ResultPtr);
  void            Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item);
protected:
  ITreeViewEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TreeView<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_TreeView<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_TreeView<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_TreeView<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnEdited(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* NewText)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEdited(Sender, Item, NewText);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnExpanding(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExpanding(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnExpanded(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExpanded(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnCollapsing(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCollapsing(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnCollapsed(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCollapsed(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnItemCheck(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnItemCheck(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnBeginEdit(LPDISPATCH Sender, LPDISPATCH Item, 
                                      Wsolib_tlb::IResult* ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginEdit(Sender, Item, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDrawItem(Sender, Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RichEdit
// Event Interface : IRichEditEvents
// *********************************************************************//
template <class T>
class TEvents_RichEdit : public IConnectionPointImpl<T,
                                                 &DIID_IRichEditEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
  void            Fire_OnSelChange(LPDISPATCH Sender);
protected:
  IRichEditEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_RichEdit<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_RichEdit<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_RichEdit<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_RichEdit<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RichEdit<T>::Fire_OnSelChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSelChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : UpDown
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_UpDown : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_UpDown<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_UpDown<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_UpDown<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_UpDown<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                      unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                               unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                               EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                    LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                            LPDISPATCH DockTarget, 
                                            LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UpDown<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TrackBar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_TrackBar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TrackBar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_TrackBar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_TrackBar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_TrackBar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrackBar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HotKey
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_HotKey : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_HotKey<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_HotKey<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_HotKey<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_HotKey<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                      unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                               unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                               EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                    LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                            LPDISPATCH DockTarget, 
                                            LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HotKey<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Animate
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Animate : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Animate<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Animate<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Animate<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Animate<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                       unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                     LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                             LPDISPATCH DockTarget, 
                                             LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Animate<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : IPAddress
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_IPAddress : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_IPAddress<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_IPAddress<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_IPAddress<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_IPAddress<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                         unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                  unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                  VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                       LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                               LPDISPATCH DockTarget, 
                                               LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_IPAddress<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DateTimePicker
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_DateTimePicker : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_DateTimePicker<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_DateTimePicker<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_DateTimePicker<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                              unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                       unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                       VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                                       unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, 
                                           long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, 
                                            long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, 
                                             long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                            LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                    LPDISPATCH DockTarget, 
                                                    LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DateTimePicker<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Calendar
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Calendar : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Calendar<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Calendar<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Calendar<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Calendar<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Calendar<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Splitter
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_Splitter : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Splitter<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Splitter<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Splitter<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Splitter<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                      LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                              LPDISPATCH DockTarget, 
                                              LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Splitter<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SplitPanel
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_SplitPanel : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_SplitPanel<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_SplitPanel<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_SplitPanel<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_SplitPanel<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                          unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                   unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                   VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                        LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                LPDISPATCH DockTarget, 
                                                LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SplitPanel<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PolygonGraphic
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_PolygonGraphic : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_PolygonGraphic<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_PolygonGraphic<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_PolygonGraphic<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                              unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                       unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                       VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                                       unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, 
                                           long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, 
                                            long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, 
                                             long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                            LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                    LPDISPATCH DockTarget, 
                                                    LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PolygonGraphic<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ImageGraphic
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ImageGraphic : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ImageGraphic<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ImageGraphic<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ImageGraphic<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                            unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                     unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                     VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                          LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                  LPDISPATCH DockTarget, 
                                                  LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageGraphic<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : LineGraphic
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_LineGraphic : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_LineGraphic<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_LineGraphic<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_LineGraphic<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_LineGraphic<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                           unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                    unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                    VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                         LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                 LPDISPATCH DockTarget, 
                                                 LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LineGraphic<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : FindReplaceDialog
// Event Interface : IFindReplaceDialogEvents
// *********************************************************************//
template <class T>
class TEvents_FindReplaceDialog : public IConnectionPointImpl<T,
                                                 &DIID_IFindReplaceDialogEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnFind(LPDISPATCH Sender);
  void            Fire_OnReplace(LPDISPATCH Sender);
  void            Fire_OnReplaceAll(LPDISPATCH Sender);
  void            Fire_OnClose(LPDISPATCH Sender);
  void            Fire_OnHelp(LPDISPATCH Sender);
protected:
  IFindReplaceDialogEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_FindReplaceDialog<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_FindReplaceDialog<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                                 unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                          unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                          VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                                          unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_OnFind(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFind(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_OnReplace(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReplace(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_OnReplaceAll(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReplaceAll(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_OnClose(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClose(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FindReplaceDialog<T>::Fire_OnHelp(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHelp(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : FontDialog
// Event Interface : IFontDialogEvents
// *********************************************************************//
template <class T>
class TEvents_FontDialog : public IConnectionPointImpl<T,
                                                 &DIID_IFontDialogEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnHelp(LPDISPATCH Sender);
  void            Fire_OnApply(LPDISPATCH Sender);
protected:
  IFontDialogEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_FontDialog<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_FontDialog<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_FontDialog<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_FontDialog<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FontDialog<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FontDialog<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                          unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FontDialog<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                   unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                   VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FontDialog<T>::Fire_OnHelp(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHelp(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FontDialog<T>::Fire_OnApply(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnApply(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ColorDialog
// Event Interface : IColorDialogEvents
// *********************************************************************//
template <class T>
class TEvents_ColorDialog : public IConnectionPointImpl<T,
                                                 &DIID_IColorDialogEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnHelp(LPDISPATCH Sender);
protected:
  IColorDialogEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ColorDialog<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ColorDialog<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ColorDialog<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ColorDialog<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ColorDialog<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ColorDialog<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                           unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ColorDialog<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                    unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                    VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ColorDialog<T>::Fire_OnHelp(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHelp(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : FileOpenSaveDialog
// Event Interface : IFileOpenSaveDialogEvents
// *********************************************************************//
template <class T>
class TEvents_FileOpenSaveDialog : public IConnectionPointImpl<T,
                                                 &DIID_IFileOpenSaveDialogEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnFolderChange(LPDISPATCH Sender);
  void            Fire_OnTypeChange(LPDISPATCH Sender);
  void            Fire_OnHelp(LPDISPATCH Sender);
protected:
  IFileOpenSaveDialogEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_FileOpenSaveDialog<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_FileOpenSaveDialog<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                                  unsigned cNames, unsigned_long lcid, 
                                                  long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, 
                                           unsigned_long lcid, unsigned_short wFlags, 
                                           DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                           EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCloseQuery(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_OnFolderChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFolderChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_OnTypeChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnTypeChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_FileOpenSaveDialog<T>::Fire_OnHelp(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHelp(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SelectFolderDialog
// Event Interface : ISelectFolderDialogEvents
// *********************************************************************//
template <class T>
class TEvents_SelectFolderDialog : public IConnectionPointImpl<T,
                                                 &DIID_ISelectFolderDialogEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnChange(LPDISPATCH Sender);
protected:
  ISelectFolderDialogEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_SelectFolderDialog<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_SelectFolderDialog<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_SelectFolderDialog<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_SelectFolderDialog<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SelectFolderDialog<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SelectFolderDialog<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                                  unsigned cNames, unsigned_long lcid, 
                                                  long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SelectFolderDialog<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, 
                                           unsigned_long lcid, unsigned_short wFlags, 
                                           DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                           EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SelectFolderDialog<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Timer
// Event Interface : ITimerEvents
// *********************************************************************//
template <class T>
class TEvents_Timer : public IConnectionPointImpl<T,
                                                 &DIID_ITimerEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnExecute(LPDISPATCH Sender);
protected:
  ITimerEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Timer<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Timer<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Timer<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Timer<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Timer<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Timer<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Timer<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Timer<T>::Fire_OnExecute(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExecute(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WindowSystemControl
// Event Interface : IFormEvents
// *********************************************************************//
template <class T>
class TEvents_WindowSystemControl : public IConnectionPointImpl<T,
                                                 &DIID_IFormEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
  void            Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnClose(LPDISPATCH Sender);
  void            Fire_OnActiveControlChange(LPDISPATCH Sender);
  void            Fire_OnHitTest(LPDISPATCH Sender, long x, long y, LPDISPATCH ResultPtr);
  void            Fire_OnHint(LPDISPATCH Sender, LPDISPATCH Object);
  void            Fire_OnMinimize(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnMaximize(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnRestore(LPDISPATCH Sender, LPDISPATCH ResultPtr);
  void            Fire_OnCopyData(LPDISPATCH Sender, BSTR Data);
  void            Fire_OnActivate(LPDISPATCH Sender, long Flags);
  void            Fire_OnEnterSizeMove(LPDISPATCH Sender, long Flags);
  void            Fire_OnExitSizeMove(LPDISPATCH Sender, long Flags);
protected:
  IFormEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_WindowSystemControl<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_WindowSystemControl<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_WindowSystemControl<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                                   unsigned cNames, unsigned_long lcid, 
                                                   long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, 
                                            unsigned_long lcid, unsigned_short wFlags, 
                                            DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                            EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, 
                                                long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, 
                                                 long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, 
                                               long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, 
                                                  long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                                 LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                         LPDISPATCH DockTarget, 
                                                         LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCloseQuery(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnClose(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClose(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnActiveControlChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActiveControlChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnHitTest(LPDISPATCH Sender, long x, long y, 
                                               LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHitTest(Sender, x, y, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnHint(LPDISPATCH Sender, LPDISPATCH Object)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHint(Sender, Object);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMinimize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMinimize(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnMaximize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMaximize(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnRestore(LPDISPATCH Sender, LPDISPATCH ResultPtr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRestore(Sender, ResultPtr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnCopyData(LPDISPATCH Sender, BSTR Data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCopyData(Sender, Data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnActivate(LPDISPATCH Sender, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate(Sender, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnEnterSizeMove(LPDISPATCH Sender, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterSizeMove(Sender, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowSystemControl<T>::Fire_OnExitSizeMove(LPDISPATCH Sender, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExitSizeMove(Sender, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TrayIcon
// Event Interface : ITrayIconEvents
// *********************************************************************//
template <class T>
class TEvents_TrayIcon : public IConnectionPointImpl<T,
                                                 &DIID_ITrayIconEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
protected:
  ITrayIconEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TrayIcon<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_TrayIcon<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_TrayIcon<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_TrayIcon<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrayIcon<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrayIcon<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                        unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrayIcon<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                 unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                 EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrayIcon<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrayIcon<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrayIcon<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TrayIcon<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : EventHandler
// Event Interface : IEventHandlerEvents
// *********************************************************************//
template <class T>
class TEvents_EventHandler : public IConnectionPointImpl<T,
                                                 &DIID_IEventHandlerEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnExecute(LPDISPATCH Sender);
protected:
  IEventHandlerEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_EventHandler<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_EventHandler<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_EventHandler<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_EventHandler<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_EventHandler<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_EventHandler<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                            unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_EventHandler<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                     unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                     VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_EventHandler<T>::Fire_OnExecute(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExecute(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Clipboard
// Event Interface : IClipboardEvents
// *********************************************************************//
template <class T>
class TEvents_Clipboard : public IConnectionPointImpl<T,
                                                 &DIID_IClipboardEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnChange(LPDISPATCH Sender);
protected:
  IClipboardEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Clipboard<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_Clipboard<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_Clipboard<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_Clipboard<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Clipboard<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Clipboard<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                         unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Clipboard<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                  unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                  VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Clipboard<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ResourceUsageGraph
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_ResourceUsageGraph : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_ResourceUsageGraph<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_ResourceUsageGraph<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                                  unsigned cNames, unsigned_long lcid, 
                                                  long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, 
                                           unsigned_long lcid, unsigned_short wFlags, 
                                           DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                                           EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, 
                                               long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, 
                                                long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, 
                                              long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, 
                                                 long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                                LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                        LPDISPATCH DockTarget, 
                                                        LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ResourceUsageGraph<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PropertyGrid
// Event Interface : IControlEvents
// *********************************************************************//
template <class T>
class TEvents_PropertyGrid : public IConnectionPointImpl<T,
                                                 &DIID_IControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_QueryInterface(System::TGUID* riid, void** ppvObj);
  unsigned_long   Fire_AddRef(void);
  unsigned_long   Fire_Release(void);
  void            Fire_GetTypeInfoCount(unsigned* pctinfo);
  void            Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo);
  void            Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                                     unsigned_long lcid, long* rgdispid);
  void            Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                              unsigned_short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, 
                              EXCEPINFO* pexcepinfo, unsigned* puArgErr);
  void            Fire_OnClick(LPDISPATCH Sender);
  void            Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnChange(LPDISPATCH Sender);
  void            Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags);
  void            Fire_OnMouseEnter(LPDISPATCH Sender);
  void            Fire_OnMouseLeave(LPDISPATCH Sender);
  void            Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags);
  void            Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags);
  void            Fire_OnResize(LPDISPATCH Sender);
  void            Fire_OnMove(LPDISPATCH Sender);
  void            Fire_OnDestroy(LPDISPATCH Sender);
  void            Fire_OnShow(LPDISPATCH Sender);
  void            Fire_OnHide(LPDISPATCH Sender);
  void            Fire_OnEnabledChange(LPDISPATCH Sender);
  void            Fire_OnSetFocus(LPDISPATCH Sender);
  void            Fire_OnKillFocus(LPDISPATCH Sender);
  void            Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y);
  void            Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                   LPDISPATCH BeginDockContext);
  void            Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                           LPDISPATCH DockTarget, 
                                           LPDISPATCH DockControlCreateContext);
  void            Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext);
  void            Fire_OnUndock(LPDISPATCH Sender);
protected:
  IControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_PropertyGrid<T>::Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryInterface(riid, ppvObj);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> unsigned_long
TEvents_PropertyGrid<T>::Fire_AddRef(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddRef();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> unsigned_long
TEvents_PropertyGrid<T>::Fire_Release(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Release();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return 0;
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_GetTypeInfoCount(unsigned* pctinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfoCount(pctinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetTypeInfo(itinfo, lcid, pptinfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, 
                                            unsigned cNames, unsigned_long lcid, long* rgdispid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, 
                                     unsigned_short wFlags, DISPPARAMS* pdispparams, 
                                     VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned* puArgErr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                            puArgErr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnClick(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyUp(Sender, Key, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnMouseEnter(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseEnter(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnMouseLeave(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseLeave(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(Sender, x, y, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(Sender, x, y, Button, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnResize(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnMove(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMove(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnDestroy(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnShow(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnShow(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnHide(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnHide(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnEnabledChange(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnabledChange(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnSetFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSetFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnKillFocus(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKillFocus(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseWheel(Sender, Keys, Delta, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, 
                                          LPDISPATCH BeginDockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeginDock(Sender, DockTarget, BeginDockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, 
                                                  LPDISPATCH DockTarget, 
                                                  LPDISPATCH DockControlCreateContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndockQuery(Sender, UndockContext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PropertyGrid<T>::Fire_OnUndock(LPDISPATCH Sender)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUndock(Sender);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Control
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IControl_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Frame
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IFrame_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Form
// Event Interface : IFormEvents
// *********************************************************************//
template <typename T>
class IForm_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

  void Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnCloseQuery(Sender, ResultPtr);
      }
    }
  }

  void Fire_OnClose(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClose(Sender);
      }
    }
  }

  void Fire_OnActiveControlChange(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnActiveControlChange(Sender);
      }
    }
  }

  void Fire_OnHitTest(LPDISPATCH Sender, long x, long y, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHitTest(Sender, x, y, ResultPtr);
      }
    }
  }

  void Fire_OnHint(LPDISPATCH Sender, LPDISPATCH Object)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHint(Sender, Object);
      }
    }
  }

  void Fire_OnMinimize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMinimize(Sender, ResultPtr);
      }
    }
  }

  void Fire_OnMaximize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMaximize(Sender, ResultPtr);
      }
    }
  }

  void Fire_OnRestore(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRestore(Sender, ResultPtr);
      }
    }
  }

  void Fire_OnCopyData(LPDISPATCH Sender, BSTR Data)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnCopyData(Sender, Data);
      }
    }
  }

  void Fire_OnActivate(LPDISPATCH Sender, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnActivate(Sender, Flags);
      }
    }
  }

  void Fire_OnEnterSizeMove(LPDISPATCH Sender, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnterSizeMove(Sender, Flags);
      }
    }
  }

  void Fire_OnExitSizeMove(LPDISPATCH Sender, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnExitSizeMove(Sender, Flags);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Action
// Event Interface : IActionEvents
// *********************************************************************//
template <typename T>
class IAction_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnExecute(LPDISPATCH Sender)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnExecute(Sender);
      }
    }
  }

  void Fire_OnUpdate(LPDISPATCH Sender)
  {
    IActionEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUpdate(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ListBox
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IListBox_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ComboBox
// Event Interface : IComboBoxEvents
// *********************************************************************//
template <typename T>
class IComboBox_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

  void Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDrawItem(Sender, Item);
      }
    }
  }

  void Fire_OnDropDown(LPDISPATCH Sender)
  {
    IComboBoxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDropDown(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Edit
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IEdit_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Button
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IButton_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CheckBox
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ICheckBox_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RadioButton
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IRadioButton_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : StatusBar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IStatusBar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ProgressBar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IProgressBar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ScrollBar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IScrollBar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Tab
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ITab_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TabControl
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ITabControl_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PageControl
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IPageControl_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ToolBar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IToolBar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MenuBar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IMenuBar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ReBar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IReBar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HyperLink
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IHyperLink_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Pager
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IPager_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ActiveXControl
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IActiveXControl_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HeaderItem
// Event Interface : IHeaderItemEvents
// *********************************************************************//
template <typename T>
class IHeaderItem_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnBeginTrack(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginTrack(Sender, Button, ResultPtr);
      }
    }
  }

  void Fire_OnTrack(LPDISPATCH Sender, long Width, long Button, LPDISPATCH ResultPtr)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnTrack(Sender, Width, Button, ResultPtr);
      }
    }
  }

  void Fire_OnDividerDblClick(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDividerDblClick(Sender, ResultPtr);
      }
    }
  }

  void Fire_OnBeginDrag(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDrag(Sender, Button, ResultPtr);
      }
    }
  }

  void Fire_OnEndDrag(LPDISPATCH Sender, long Button, LPDISPATCH ResultPtr)
  {
    IHeaderItemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEndDrag(Sender, Button, ResultPtr);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Header
// Event Interface : IHeaderEvents
// *********************************************************************//
template <typename T>
class IHeader_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

  void Fire_OnColumnClick(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnColumnClick(Sender, Item);
      }
    }
  }

  void Fire_OnColumnResize(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IHeaderEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnColumnResize(Sender, Item);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ListView
// Event Interface : IListViewEvents
// *********************************************************************//
template <typename T>
class IListView_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

  void Fire_OnColumnClick(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnColumnClick(Sender, Item);
      }
    }
  }

  void Fire_OnColumnResize(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnColumnResize(Sender, Item);
      }
    }
  }

  void Fire_OnData(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnData(Sender, Item);
      }
    }
  }

  void Fire_OnItemCheck(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnItemCheck(Sender, Item);
      }
    }
  }

  void Fire_OnEdited(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* NewText)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEdited(Sender, Item, NewText);
      }
    }
  }

  void Fire_OnBeginEdit(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* ResultPtr)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginEdit(Sender, Item, ResultPtr);
      }
    }
  }

  void Fire_OnGroupLinkClick(LPDISPATCH Sender, LPDISPATCH Group)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnGroupLinkClick(Sender, Group);
      }
    }
  }

  void Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDrawItem(Sender, Item);
      }
    }
  }

  void Fire_OnSubItemEdited(LPDISPATCH Sender, LPDISPATCH Item, long SubItem, 
                            Wsolib_tlb::IResult* NewText)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSubItemEdited(Sender, Item, SubItem, NewText);
      }
    }
  }

  void Fire_OnBeginSubItemEdit(LPDISPATCH Sender, LPDISPATCH Item, long SubItem, 
                               Wsolib_tlb::IResult* ResultPtr)
  {
    IListViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginSubItemEdit(Sender, Item, SubItem, ResultPtr);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TreeView
// Event Interface : ITreeViewEvents
// *********************************************************************//
template <typename T>
class ITreeView_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

  void Fire_OnEdited(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* NewText)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEdited(Sender, Item, NewText);
      }
    }
  }

  void Fire_OnExpanding(LPDISPATCH Sender, LPDISPATCH Item)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnExpanding(Sender, Item);
      }
    }
  }

  void Fire_OnExpanded(LPDISPATCH Sender, LPDISPATCH Item)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnExpanded(Sender, Item);
      }
    }
  }

  void Fire_OnCollapsing(LPDISPATCH Sender, LPDISPATCH Item)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnCollapsing(Sender, Item);
      }
    }
  }

  void Fire_OnCollapsed(LPDISPATCH Sender, LPDISPATCH Item)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnCollapsed(Sender, Item);
      }
    }
  }

  void Fire_OnItemCheck(LPDISPATCH Sender, LPDISPATCH Item)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnItemCheck(Sender, Item);
      }
    }
  }

  void Fire_OnBeginEdit(LPDISPATCH Sender, LPDISPATCH Item, Wsolib_tlb::IResult* ResultPtr)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginEdit(Sender, Item, ResultPtr);
      }
    }
  }

  void Fire_OnDrawItem(LPDISPATCH Sender, LPDISPATCH Item)
  {
    ITreeViewEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDrawItem(Sender, Item);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RichEdit
// Event Interface : IRichEditEvents
// *********************************************************************//
template <typename T>
class IRichEdit_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

  void Fire_OnSelChange(LPDISPATCH Sender)
  {
    IRichEditEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSelChange(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : UpDown
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IUpDown_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TrackBar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ITrackBar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HotKey
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IHotKey_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Animate
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IAnimate_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : IPAddress
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IIPAddress_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DateTimePicker
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IDateTimePicker_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Calendar
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ICalendar_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Splitter
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ISplitter_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SplitPanel
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ISplitPanel_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PolygonGraphic
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IPolygonGraphic_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ImageGraphic
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IImageGraphic_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : LineGraphic
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class ILineGraphic_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : FindReplaceDialog
// Event Interface : IFindReplaceDialogEvents
// *********************************************************************//
template <typename T>
class IFindReplaceDialog_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnFind(LPDISPATCH Sender)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnFind(Sender);
      }
    }
  }

  void Fire_OnReplace(LPDISPATCH Sender)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnReplace(Sender);
      }
    }
  }

  void Fire_OnReplaceAll(LPDISPATCH Sender)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnReplaceAll(Sender);
      }
    }
  }

  void Fire_OnClose(LPDISPATCH Sender)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClose(Sender);
      }
    }
  }

  void Fire_OnHelp(LPDISPATCH Sender)
  {
    IFindReplaceDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHelp(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : FontDialog
// Event Interface : IFontDialogEvents
// *********************************************************************//
template <typename T>
class IFontDialog_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnHelp(LPDISPATCH Sender)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHelp(Sender);
      }
    }
  }

  void Fire_OnApply(LPDISPATCH Sender)
  {
    IFontDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnApply(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ColorDialog
// Event Interface : IColorDialogEvents
// *********************************************************************//
template <typename T>
class IColorDialog_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnHelp(LPDISPATCH Sender)
  {
    IColorDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHelp(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : FileOpenSaveDialog
// Event Interface : IFileOpenSaveDialogEvents
// *********************************************************************//
template <typename T>
class IFileOpenSaveDialog_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnCloseQuery(Sender, ResultPtr);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnFolderChange(LPDISPATCH Sender)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnFolderChange(Sender);
      }
    }
  }

  void Fire_OnTypeChange(LPDISPATCH Sender)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnTypeChange(Sender);
      }
    }
  }

  void Fire_OnHelp(LPDISPATCH Sender)
  {
    IFileOpenSaveDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHelp(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SelectFolderDialog
// Event Interface : ISelectFolderDialogEvents
// *********************************************************************//
template <typename T>
class ISelectFolderDialog_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    ISelectFolderDialogEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Timer
// Event Interface : ITimerEvents
// *********************************************************************//
template <typename T>
class ITimer_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnExecute(LPDISPATCH Sender)
  {
    ITimerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnExecute(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WindowSystemControl
// Event Interface : IFormEvents
// *********************************************************************//
template <typename T>
class IWindowSystemControl_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.QueryInterface(riid, ppvObj);
  }

  unsigned_long Fire_AddRef(void)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.AddRef();
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Release();
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.GetTypeInfoCount(pctinfo);
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                         puArgErr);
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnClick(Sender);
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChange(Sender);
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnKeyDown(Sender, Key, Flags);
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnKeyUp(Sender, Key, Flags);
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseEnter(Sender);
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseLeave(Sender);
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseMove(Sender, x, y, Flags);
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnResize(Sender);
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMove(Sender);
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDestroy(Sender);
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnShow(Sender);
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnHide(Sender);
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnabledChange(Sender);
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnSetFocus(Sender);
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnKillFocus(Sender);
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUndockQuery(Sender, UndockContext);
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUndock(Sender);
  }

  void Fire_OnCloseQuery(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnCloseQuery(Sender, ResultPtr);
  }

  void Fire_OnClose(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnClose(Sender);
  }

  void Fire_OnActiveControlChange(LPDISPATCH Sender)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnActiveControlChange(Sender);
  }

  void Fire_OnHitTest(LPDISPATCH Sender, long x, long y, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnHitTest(Sender, x, y, ResultPtr);
  }

  void Fire_OnHint(LPDISPATCH Sender, LPDISPATCH Object)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnHint(Sender, Object);
  }

  void Fire_OnMinimize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMinimize(Sender, ResultPtr);
  }

  void Fire_OnMaximize(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMaximize(Sender, ResultPtr);
  }

  void Fire_OnRestore(LPDISPATCH Sender, LPDISPATCH ResultPtr)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRestore(Sender, ResultPtr);
  }

  void Fire_OnCopyData(LPDISPATCH Sender, BSTR Data)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnCopyData(Sender, Data);
  }

  void Fire_OnActivate(LPDISPATCH Sender, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnActivate(Sender, Flags);
  }

  void Fire_OnEnterSizeMove(LPDISPATCH Sender, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterSizeMove(Sender, Flags);
  }

  void Fire_OnExitSizeMove(LPDISPATCH Sender, long Flags)
  {
    IFormEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnExitSizeMove(Sender, Flags);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TrayIcon
// Event Interface : ITrayIconEvents
// *********************************************************************//
template <typename T>
class ITrayIcon_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    ITrayIconEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : EventHandler
// Event Interface : IEventHandlerEvents
// *********************************************************************//
template <typename T>
class IEventHandler_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnExecute(LPDISPATCH Sender)
  {
    IEventHandlerEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnExecute(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Clipboard
// Event Interface : IClipboardEvents
// *********************************************************************//
template <typename T>
class IClipboard_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IClipboardEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ResourceUsageGraph
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IResourceUsageGraph_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PropertyGrid
// Event Interface : IControlEvents
// *********************************************************************//
template <typename T>
class IPropertyGrid_EventsDispatcher : public IUnknown
{
public:
  void Fire_QueryInterface(System::TGUID* riid, void** ppvObj)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.QueryInterface(riid, ppvObj);
      }
    }
  }

  unsigned_long Fire_AddRef(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.AddRef();
      }
    }
    return 0;
  }

  unsigned_long Fire_Release(void)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Release();
      }
    }
    return 0;
  }

  void Fire_GetTypeInfoCount(unsigned* pctinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfoCount(pctinfo);
      }
    }
  }

  void Fire_GetTypeInfo(unsigned itinfo, unsigned_long lcid, void** pptinfo)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetTypeInfo(itinfo, lcid, pptinfo);
      }
    }
  }

  void Fire_GetIDsOfNames(System::TGUID* riid, signed_char** rgszNames, unsigned cNames, 
                          unsigned_long lcid, long* rgdispid)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
      }
    }
  }

  void Fire_Invoke(long dispidMember, System::TGUID* riid, unsigned_long lcid, unsigned_short wFlags, 
                   DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, 
                   unsigned* puArgErr)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, 
                             puArgErr);
      }
    }
  }

  void Fire_OnClick(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClick(Sender);
      }
    }
  }

  void Fire_OnDblClick(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDblClick(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChange(Sender);
      }
    }
  }

  void Fire_OnKeyDown(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyDown(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnKeyUp(LPDISPATCH Sender, long Key, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKeyUp(Sender, Key, Flags);
      }
    }
  }

  void Fire_OnMouseEnter(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseEnter(Sender);
      }
    }
  }

  void Fire_OnMouseLeave(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseLeave(Sender);
      }
    }
  }

  void Fire_OnMouseDown(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseDown(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnMouseMove(LPDISPATCH Sender, long x, long y, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseMove(Sender, x, y, Flags);
      }
    }
  }

  void Fire_OnMouseUp(LPDISPATCH Sender, long x, long y, long Button, long Flags)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseUp(Sender, x, y, Button, Flags);
      }
    }
  }

  void Fire_OnResize(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnResize(Sender);
      }
    }
  }

  void Fire_OnMove(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMove(Sender);
      }
    }
  }

  void Fire_OnDestroy(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDestroy(Sender);
      }
    }
  }

  void Fire_OnShow(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnShow(Sender);
      }
    }
  }

  void Fire_OnHide(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnHide(Sender);
      }
    }
  }

  void Fire_OnEnabledChange(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnabledChange(Sender);
      }
    }
  }

  void Fire_OnSetFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnSetFocus(Sender);
      }
    }
  }

  void Fire_OnKillFocus(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnKillFocus(Sender);
      }
    }
  }

  void Fire_OnMouseWheel(LPDISPATCH Sender, long Keys, long Delta, long x, long y)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseWheel(Sender, Keys, Delta, x, y);
      }
    }
  }

  void Fire_OnBeginDock(LPDISPATCH Sender, LPDISPATCH DockTarget, LPDISPATCH BeginDockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBeginDock(Sender, DockTarget, BeginDockContext);
      }
    }
  }

  void Fire_OnDockControlCreate(LPDISPATCH Sender, LPDISPATCH Control, LPDISPATCH DockTarget, 
                                LPDISPATCH DockControlCreateContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDockControlCreate(Sender, Control, DockTarget, DockControlCreateContext);
      }
    }
  }

  void Fire_OnUndockQuery(LPDISPATCH Sender, LPDISPATCH UndockContext)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndockQuery(Sender, UndockContext);
      }
    }
  }

  void Fire_OnUndock(LPDISPATCH Sender)
  {
    IControlEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUndock(Sender);
      }
    }
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Wsolib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Wsolib_tlb;
#endif

#pragma option pop

#endif // WSOLib_TLBH
