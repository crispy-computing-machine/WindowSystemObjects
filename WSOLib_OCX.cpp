// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 87174 $
// File generated on 1/10/2019 3:45:50 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: wso.dll (1)
// LIBID: {40CC9252-A25A-4D28-A906-9BD3F752934A}
// LCID: 0
// Helpfile: 
// HelpString: WSO 1.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWow64\stdole2.tlb)
// SYS_KIND: SYS_WIN64
// Errors:
//   Error creating palette bitmap of (TWindowSystemObject) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TVersion) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFrame) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TForm) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCollection) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStringCollection) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TImageList) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPen) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TBrush) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFont) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TAction) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListControlItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListBox) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TComboBox) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TEdit) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TButton) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCheckBox) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRadioButton) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStatusItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStatusBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TProgressBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TScrollBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTab) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTabControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPageControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TToolBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TMenuBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TReBarBand) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TReBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THyperLink) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPager) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCOMConnectionPoint) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCOMEvents) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TActiveXControl) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THeaderItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THeader) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListSubItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListViewColumns) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWorkArea) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWorkAreas) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListViewGroup) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListViewGroups) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TListView) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTreeItem) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTreeView) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TParagraph) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRichEdit) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TUpDown) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTrackBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THotKey) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TAnimate) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TIPAddress) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDateTime) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDateTimePicker) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TCalendar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TSplitter) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TSplitPanel) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPolygonGraphic) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TImageGraphic) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TLineGraphic) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPrintDialogBase) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPrintDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPageSetupDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFindReplaceDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFontDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TColorDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFileOpenSaveDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TSelectFolderDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTimer) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TResult) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTrayIcon) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRegions) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRegion) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TScreen) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (THint) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TEventHandler) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWindowSystemObjectExtensions) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPrintInfo) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TStdDispatch) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TBalloonTip) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TWindow) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TClipboard) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTaskBar) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TResourceUsageGraph) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TProperty) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPropertyGrid) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TConsole) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDocking) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TGraphicElement) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TBeginDockContext) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDockControlCreateContext) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TUndockContext) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TColor) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TLayering) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TMessageDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TTaskDialog) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TIcon) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TRect) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TIconBuilder) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDesignReference) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TDesign) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TExecutor) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TControlExtendedProperties) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TError) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TPropertyInformation) : Server C:\Program Files\WSO\wso.dll contains no icons
//   Error creating palette bitmap of (TFileManager) : Server C:\Program Files\WSO\wso.dll contains no icons
//   WARN: Could not find file 'C:\temp\Delphi\tlibimp.sym, C:\temp\Delphi\tlibimp.sym, C:\temp\Delphi\..\bin\tlibimp.sym'
// Cmdline:
//   tlibimp  -C wso.dll
// ************************************************************************ //

#include <vcl.h>
#pragma hdrstop

#include <olectrls.hpp>
#include <oleserver.hpp>
#if defined(USING_ATL)
#include <atl\atlvcl.h>
#endif

#pragma option -w-8122
#include "WSOLib_OCX.h"

#if !defined(__PRAGMA_PACKAGE_SMART_INIT)
#define      __PRAGMA_PACKAGE_SMART_INIT
#pragma package(smart_init)
#endif

namespace Wsolib_tlb
{

IWindowSystemObjectPtr& TWindowSystemObject::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TWindowSystemObject::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TWindowSystemObject::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TWindowSystemObject::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TWindowSystemObject::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TWindowSystemObject::ConnectTo(IWindowSystemObjectPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TWindowSystemObject::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_WindowSystemObject;
  sd.IntfIID = __uuidof(IWindowSystemObject);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateForm(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateForm(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateDialogForm(long Left/*[in,def,opt]*/, 
                                                            long Top/*[in,def,opt]*/, 
                                                            long Width/*[in,def,opt]*/, 
                                                            long Height/*[in,def,opt]*/, 
                                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDialogForm(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateImageList(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateImageList((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateTimer(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTimer((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateCOMEvents(LPDISPATCH COMObject/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCOMEvents(COMObject, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                                            unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateFindDialog(FindText, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                               BSTR ReplaceText/*[in,def,opt]*/, 
                                                               unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateReplaceDialog(FindText, ReplaceText, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateTrayIcon(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrayIcon((LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TWindowSystemObject::Run(void)
{
  GetDefaultInterface()->Run();
}

void __fastcall TWindowSystemObject::Stop(void)
{
  GetDefaultInterface()->Stop();
}

VARIANT __fastcall TWindowSystemObject::Translate(BSTR Text/*[in]*/)
{
  VARIANT pResult;
  OLECHECK(GetDefaultInterface()->Translate(Text, (VARIANT*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemObject::LoadImage(BSTR Path/*[in]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->LoadImage(Path, (LPDISPATCH*)&pResult));
  return pResult;
}

void __fastcall TWindowSystemObject::About(void)
{
  GetDefaultInterface()->About();
}

LPDISPATCH __fastcall TWindowSystemObject::CreateEventHandler(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEventHandler((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::CreatePrintInfo(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePrintInfo((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::CreateStdDispatch(BSTR TypeLibrary/*[in]*/, 
                                                             long Major/*[in]*/, long Minor/*[in]*/, 
                                                             BSTR Guid/*[in]*/, 
                                                             LPUNKNOWN Object/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStdDispatch(TypeLibrary, Major, Minor, Guid, Object, (LPDISPATCH*)&pControl));
  return pControl;
}

BSTR __fastcall TWindowSystemObject::VirtualKeyCodeToString(unsigned_long VirtualKey/*[in]*/, 
                                                            VARIANT_BOOL UseKeyboardState/*[in,def,opt]*/)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->VirtualKeyCodeToString(VirtualKey, UseKeyboardState, (BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TWindowSystemObject::SaveLayout(void)
{
  BSTR Layout = 0;
  OLECHECK(GetDefaultInterface()->SaveLayout((BSTR*)&Layout));
  return Layout;
}

void __fastcall TWindowSystemObject::LoadLayout(BSTR Layout/*[in]*/)
{
  GetDefaultInterface()->LoadLayout(Layout/*[in]*/);
}

LPDISPATCH __fastcall TWindowSystemObject::LoadIcon(BSTR FileName/*[in]*/)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->LoadIcon(FileName, (LPDISPATCH*)&Result));
  return Result;
}

LPDISPATCH __fastcall TWindowSystemObject::LoadSysIcon(long ID/*[in]*/)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->LoadSysIcon(ID, (LPDISPATCH*)&Result));
  return Result;
}

unsigned_long __fastcall TWindowSystemObject::GetIconCount(BSTR FileName/*[in]*/)
{
  unsigned_long Result;
  OLECHECK(GetDefaultInterface()->GetIconCount(FileName, (unsigned_long*)&Result));
  return Result;
}

LPDISPATCH __fastcall TWindowSystemObject::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemObject::get_Version(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Version((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemObject::get_Debug(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TWindowSystemObject::set_Debug(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

LPDISPATCH __fastcall TWindowSystemObject::get_Regions(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Regions((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemObject::get_PixelsPerInch(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_PixelsPerInch((long*)&pVal));
  return pVal;
}

void __fastcall TWindowSystemObject::set_PixelsPerInch(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_PixelsPerInch(pVal/*[in]*/);
}

LPDISPATCH __fastcall TWindowSystemObject::get_Screen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Screen((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemObject::get_EnableVisualStyles(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_EnableVisualStyles((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TWindowSystemObject::set_EnableVisualStyles(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_EnableVisualStyles(pVal/*[in]*/);
}

LPDISPATCH __fastcall TWindowSystemObject::get_Console(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->get_Console((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemObject::get_ActiveForm(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ActiveForm((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemObject::get_ForegroundForm(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ForegroundForm((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemObject::get_Color(void)
{
  LPDISPATCH Color;
  OLECHECK(GetDefaultInterface()->get_Color((LPDISPATCH*)&Color));
  return Color;
}

VARIANT_BOOL __fastcall TWindowSystemObject::get_EnableVistaFileDialog(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_EnableVistaFileDialog((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TWindowSystemObject::set_EnableVistaFileDialog(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_EnableVistaFileDialog(pVal/*[in]*/);
}

IVersionPtr& TVersion::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TVersion::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TVersion::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TVersion::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TVersion::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TVersion::ConnectTo(IVersionPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TVersion::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Version;
  sd.IntfIID = __uuidof(IVersion);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

long __fastcall TVersion::get_Major(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Major((long*)&pVal));
  return pVal;
}

long __fastcall TVersion::get_Minor(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Minor((long*)&pVal));
  return pVal;
}

long __fastcall TVersion::get_BuildNumber(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BuildNumber((long*)&pVal));
  return pVal;
}

BSTR __fastcall TVersion::get_String(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_String((BSTR*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TVersion::get_Trial(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Trial((VARIANT_BOOL*)&pVal));
  return pVal;
}

BSTR __fastcall TVersion::get_Url(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Url((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TVersion::get_Copyright(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Copyright((BSTR*)&pVal));
  return pVal;
}

IControlPtr& TControl::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TControl::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TControl::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TControl::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TControl::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TControl::ConnectTo(IControlPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TControl::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Control;
  sd.IntfIID = __uuidof(IControl);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TControl::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TControl::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TControl::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TControl::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TControl::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TControl::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TControl::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                    long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TControl::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TControl::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TControl::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TControl::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TControl::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TControl::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TControl::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TControl::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TControl::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TControl::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TControl::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TControl::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TControl::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TControl::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TControl::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TControl::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TControl::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TControl::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TControl::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TControl::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TControl::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TControl::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TControl::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TControl::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TControl::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TControl::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TControl::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TControl::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TControl::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TControl::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TControl::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TControl::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TControl::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TControl::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TControl::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TControl::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TControl::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TControl::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TControl::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TControl::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TControl::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TControl::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TControl::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TControl::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TControl::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TControl::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TControl::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TControl::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TControl::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TControl::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TControl::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TControl::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TControl::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TControl::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TControl::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TControl::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TControl::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TControl::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TControl::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TControl::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TControl::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TControl::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TControl::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TControl::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TControl::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TControl::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TControl::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TControl::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TControl::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TControl::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TControl::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TControl::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TControl::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControl::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TControl::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TControl::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TControl::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControl::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

IFramePtr& TFrame::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TFrame::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TFrame::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TFrame::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TFrame::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TFrame::ConnectTo(IFramePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TFrame::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Frame;
  sd.IntfIID = __uuidof(IFrame);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TFrame::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TFrame::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TFrame::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TFrame::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TFrame::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TFrame::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TFrame::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                  long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TFrame::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TFrame::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TFrame::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TFrame::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TFrame::CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Text/*[in,def,opt]*/, 
                                             VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, BSTR Url/*[in,def,opt]*/, 
                                              BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                   long Width/*[in]*/, long Height/*[in]*/, 
                                                   BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                           long Width/*[in]*/, long Height/*[in]*/, 
                                                           BSTR ID/*[in]*/, BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/, 
                                             long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, 
                                   long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/, long nWidth/*[in]*/, 
                                        long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                  long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                  long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                    long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                    long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                  long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                  long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, BSTR Text/*[in]*/, 
                                       unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/, VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                         unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TFrame::Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                    long BevelInner/*[in,def,opt]*/, 
                                    unsigned_long BorderWidth/*[in,def,opt]*/, 
                                    unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TFrame::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TFrame::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TFrame::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

BSTR __fastcall TFrame::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TFrame::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TFrame::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TFrame::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TFrame::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TFrame::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TFrame::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TFrame::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TFrame::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TFrame::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TFrame::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TFrame::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TFrame::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TFrame::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TFrame::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TFrame::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TFrame::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TFrame::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TFrame::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TFrame::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TFrame::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TFrame::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TFrame::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TFrame::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TFrame::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TFrame::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TFrame::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TFrame::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TFrame::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TFrame::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TFrame::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TFrame::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TFrame::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TFrame::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TFrame::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_BorderWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TFrame::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_BevelWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelWidth(pVal/*[in]*/);
}

long __fastcall TFrame::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_BevelOuter(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelOuter(pVal/*[in]*/);
}

long __fastcall TFrame::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_BevelInner(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelInner(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFrame::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GraphFont(pVal/*[in]*/);
}

void __fastcall TFrame::_set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GraphFont(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_AutoScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoScroll(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

unsigned_short __fastcall TFrame::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_CaptureMouse(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CaptureMouse(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_ParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_AutoSplit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFrame::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_GroupBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupBox(pVal/*[in]*/);
}

unsigned_long __fastcall TFrame::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_Margin(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Margin(pVal/*[in]*/);
}

unsigned_long __fastcall TFrame::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MarginLeft(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginLeft(pVal/*[in]*/);
}

unsigned_long __fastcall TFrame::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MarginTop(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginTop(pVal/*[in]*/);
}

unsigned_long __fastcall TFrame::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MarginRight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginRight(pVal/*[in]*/);
}

unsigned_long __fastcall TFrame::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFrame::set_MarginBottom(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginBottom(pVal/*[in]*/);
}

IFormPtr& TForm::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TForm::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TForm::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TForm::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TForm::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TForm::ConnectTo(IFormPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TForm::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Form;
  sd.IntfIID = __uuidof(IForm);
  sd.EventIID= __uuidof(IFormEvents);
  ServerData = &sd;
}

void __fastcall TForm::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    case 19: {
      if (OnCloseQuery1) {
        (OnCloseQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 20: {
      if (OnClose1) {
        (OnClose1)(this, params[0].pdispVal);
      }
      break;
      }
    case 21: {
      if (OnActiveControlChange1) {
        (OnActiveControlChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 22: {
      if (OnHitTest1) {
        (OnHitTest1)(this, params[0].pdispVal, params[1], params[2], params[3].pdispVal);
      }
      break;
      }
    case 23: {
      if (OnHint1) {
        (OnHint1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 24: {
      if (OnMinimize1) {
        (OnMinimize1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 25: {
      if (OnMaximize1) {
        (OnMaximize1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 26: {
      if (OnRestore1) {
        (OnRestore1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 27: {
      if (OnCopyData1) {
        (OnCopyData1)(this, params[0].pdispVal, params[1].bstrVal);
      }
      break;
      }
    case 28: {
      if (OnActivate1) {
        (OnActivate1)(this, params[0].pdispVal, params[1]);
      }
      break;
      }
    case 29: {
      if (OnEnterSizeMove1) {
        (OnEnterSizeMove1)(this, params[0].pdispVal, params[1]);
      }
      break;
      }
    case 30: {
      if (OnExitSizeMove1) {
        (OnExitSizeMove1)(this, params[0].pdispVal, params[1]);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TForm::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TForm::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TForm::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TForm::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TForm::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TForm::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TForm::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TForm::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TForm::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TForm::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TForm::CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Text/*[in,def,opt]*/, 
                                            VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/, BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nWidth/*[in]*/, 
                                       long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                 long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                 long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                   long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                   long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                 long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                 long nXRadial2/*[in]*/, long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, BSTR Text/*[in]*/, 
                                      unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                        unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                   long BevelInner/*[in,def,opt]*/, 
                                   unsigned_long BorderWidth/*[in,def,opt]*/, 
                                   unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TForm::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TForm::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TForm::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

void __fastcall TForm::Minimize(void)
{
  GetDefaultInterface()->Minimize();
}

void __fastcall TForm::Restore(void)
{
  GetDefaultInterface()->Restore();
}

void __fastcall TForm::Maximize(void)
{
  GetDefaultInterface()->Maximize();
}

void __fastcall TForm::Close(void)
{
  GetDefaultInterface()->Close();
}

void __fastcall TForm::ShowModal(void)
{
  GetDefaultInterface()->ShowModal();
}

long __fastcall TForm::MessageBox(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                  long Flags/*[in,def,opt]*/)
{
  long pResult;
  OLECHECK(GetDefaultInterface()->MessageBox(Text, Caption, Flags, (long*)&pResult));
  return pResult;
}

unsigned_long __fastcall TForm::ColorDialog(unsigned_long StartColor/*[in,def,opt]*/, 
                                            unsigned_long Flags/*[in,def,opt]*/)
{
  unsigned_long pColor;
  OLECHECK(GetDefaultInterface()->ColorDialog(StartColor, Flags, (unsigned_long*)&pColor));
  return pColor;
}

LPDISPATCH __fastcall TForm::FontDialog(LPDISPATCH StartValue/*[in]*/, 
                                        unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->FontDialog(StartValue, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

BSTR __fastcall TForm::OpenDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                  BSTR StartFile/*[in,def,opt]*/, 
                                  unsigned_long Flags/*[in,def,opt]*/)
{
  BSTR pFileName = 0;
  OLECHECK(GetDefaultInterface()->OpenDialog(DefaultExt, Filter, StartFile, Flags, (BSTR*)&pFileName));
  return pFileName;
}

BSTR __fastcall TForm::SaveDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                  BSTR StartFile/*[in,def,opt]*/, 
                                  unsigned_long Flags/*[in,def,opt]*/)
{
  BSTR pFileName = 0;
  OLECHECK(GetDefaultInterface()->SaveDialog(DefaultExt, Filter, StartFile, Flags, (BSTR*)&pFileName));
  return pFileName;
}

BSTR __fastcall TForm::SelectFolderDialog(BSTR Title/*[in]*/, unsigned_long Flags/*[in,def,opt]*/)
{
  BSTR pFolder = 0;
  OLECHECK(GetDefaultInterface()->SelectFolderDialog(Title, Flags, (BSTR*)&pFolder));
  return pFolder;
}

LPDISPATCH __fastcall TForm::PrintDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                         unsigned_short MinPage/*[in,def,opt]*/, 
                                         unsigned_short MaxPage/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->PrintDialog(Flags, MinPage, MaxPage, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::PrinterSetupDialog(unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->PrinterSetupDialog(Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::PageSetupDialog(unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->PageSetupDialog(Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                              unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateFindDialog(FindText, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                 BSTR ReplaceText/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateReplaceDialog(FindText, ReplaceText, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateFontDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateFontDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateColorDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateColorDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateOpenDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateOpenDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateSaveDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateSaveDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateSelectFolderDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateSelectFolderDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateForm(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateDialogForm(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDialogForm(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TForm::CreateMessageDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateMessageDialog(Text, Caption, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TForm::CreateTaskDialog(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateTaskDialog(Text, Caption, (LPDISPATCH*)&pResult));
  return pResult;
}

BSTR __fastcall TForm::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TForm::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TForm::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TForm::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TForm::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TForm::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TForm::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TForm::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TForm::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TForm::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TForm::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TForm::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TForm::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TForm::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TForm::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TForm::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TForm::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TForm::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TForm::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TForm::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TForm::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TForm::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TForm::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TForm::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TForm::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TForm::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TForm::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TForm::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TForm::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TForm::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TForm::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TForm::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TForm::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TForm::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TForm::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TForm::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TForm::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TForm::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TForm::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TForm::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TForm::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TForm::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TForm::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TForm::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TForm::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TForm::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TForm::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TForm::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TForm::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TForm::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_BorderWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TForm::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_BevelWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelWidth(pVal/*[in]*/);
}

long __fastcall TForm::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_BevelOuter(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelOuter(pVal/*[in]*/);
}

long __fastcall TForm::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_BevelInner(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelInner(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GraphFont(pVal/*[in]*/);
}

void __fastcall TForm::_set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GraphFont(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_AutoScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoScroll(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

unsigned_short __fastcall TForm::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TForm::set_CaptureMouse(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CaptureMouse(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_AutoSplit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_GroupBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupBox(pVal/*[in]*/);
}

unsigned_long __fastcall TForm::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Margin(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Margin(pVal/*[in]*/);
}

unsigned_long __fastcall TForm::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MarginLeft(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginLeft(pVal/*[in]*/);
}

unsigned_long __fastcall TForm::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MarginTop(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginTop(pVal/*[in]*/);
}

unsigned_long __fastcall TForm::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MarginRight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginRight(pVal/*[in]*/);
}

unsigned_long __fastcall TForm::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MarginBottom(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginBottom(pVal/*[in]*/);
}

void __fastcall TForm::set_Icon(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_Icon(Param1/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_Menu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Menu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Menu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Menu(pVal/*[in]*/);
}

void __fastcall TForm::_set_Menu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Menu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_KeyPreview(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_KeyPreview((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_KeyPreview(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_KeyPreview(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_MaximizeBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaximizeBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MaximizeBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaximizeBox(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_MinimizeBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MinimizeBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_MinimizeBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinimizeBox(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_ControlBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ControlBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ControlBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ControlBox(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_SizeGrip(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_SizeGrip((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_SizeGrip(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_SizeGrip(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_TopMost(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TopMost((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_TopMost(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TopMost(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_ToolWindow(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ToolWindow((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ToolWindow(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ToolWindow(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_Caption(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Caption((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Caption(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Caption(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_AcceptButton(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_AcceptButton((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_AcceptButton(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_AcceptButton(pVal/*[in]*/);
}

void __fastcall TForm::_set_AcceptButton(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_AcceptButton(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_CancelButton(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_CancelButton((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_CancelButton(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_CancelButton(pVal/*[in]*/);
}

void __fastcall TForm::_set_CancelButton(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_CancelButton(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_HelpButton(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_HelpButton((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_HelpButton(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_HelpButton(pVal/*[in]*/);
}

void __fastcall TForm::_set_HelpButton(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_HelpButton(pVal/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_ActiveControl(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ActiveControl((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TForm::set_ActiveControl(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_ActiveControl(pVal/*[in]*/);
}

void __fastcall TForm::_set_ActiveControl(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_ActiveControl(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_CanClose(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanClose((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_CanClose(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CanClose(pVal/*[in]*/);
}

void __fastcall TForm::set_Region(unsigned_long Param1/*[in]*/)
{
  GetDefaultInterface()->set_Region(Param1/*[in]*/);
}

LPDISPATCH __fastcall TForm::get_TaskBar(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_TaskBar((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TForm::get_Active(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Active((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Active(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Active(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TForm::get_Foreground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Foreground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TForm::set_Foreground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Foreground(pVal/*[in]*/);
}

void __fastcall TForm::set_OnCloseQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnCloseQuery(Param1/*[in]*/);
}

void __fastcall TForm::set_OnClose(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClose(Param1/*[in]*/);
}

void __fastcall TForm::set_OnActiveControlChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnActiveControlChange(Param1/*[in]*/);
}

void __fastcall TForm::set_OnHitTest(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHitTest(Param1/*[in]*/);
}

void __fastcall TForm::set_OnHint(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHint(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMinimize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMinimize(Param1/*[in]*/);
}

void __fastcall TForm::set_OnMaximize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMaximize(Param1/*[in]*/);
}

void __fastcall TForm::set_OnRestore(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnRestore(Param1/*[in]*/);
}

void __fastcall TForm::set_OnCopyData(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnCopyData(Param1/*[in]*/);
}

void __fastcall TForm::set_OnActivate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnActivate(Param1/*[in]*/);
}

void __fastcall TForm::set_OnEnterSizeMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnterSizeMove(Param1/*[in]*/);
}

void __fastcall TForm::set_OnExitSizeMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnExitSizeMove(Param1/*[in]*/);
}

ICollectionPtr& TCollection::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TCollection::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TCollection::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TCollection::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TCollection::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TCollection::ConnectTo(ICollectionPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TCollection::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Collection;
  sd.IntfIID = __uuidof(ICollection);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TCollection::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TCollection::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TCollection::ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

LPUNKNOWN __fastcall TCollection::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TCollection::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TCollection::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

IStringCollectionPtr& TStringCollection::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TStringCollection::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TStringCollection::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TStringCollection::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TStringCollection::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TStringCollection::ConnectTo(IStringCollectionPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TStringCollection::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_StringCollection;
  sd.IntfIID = __uuidof(IStringCollection);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TStringCollection::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TStringCollection::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TStringCollection::ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

void __fastcall TStringCollection::Add(BSTR Value/*[in]*/)
{
  GetDefaultInterface()->Add(Value/*[in]*/);
}

LPUNKNOWN __fastcall TStringCollection::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TStringCollection::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TStringCollection::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

IImageListPtr& TImageList::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TImageList::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TImageList::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TImageList::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TImageList::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TImageList::ConnectTo(IImageListPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TImageList::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ImageList;
  sd.IntfIID = __uuidof(IImageList);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TImageList::Load(VARIANT Image/*[in]*/)
{
  GetDefaultInterface()->Load(Image/*[in]*/);
}

void __fastcall TImageList::Add(VARIANT Image/*[in]*/)
{
  GetDefaultInterface()->Add(Image/*[in]*/);
}

void __fastcall TImageList::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TImageList::Remove(long Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

unsigned_long __fastcall TImageList::get_Width(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TImageList::set_Width(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

unsigned_long __fastcall TImageList::get_Height(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TImageList::set_Height(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TImageList::get_Count(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pVal));
  return pVal;
}

long __fastcall TImageList::get_BitsPerPixel(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BitsPerPixel((long*)&pVal));
  return pVal;
}

void __fastcall TImageList::set_BitsPerPixel(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BitsPerPixel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageList::get_References(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_References((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TImageList::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

IPenPtr& TPen::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPen::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPen::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPen::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPen::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPen::ConnectTo(IPenPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPen::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Pen;
  sd.IntfIID = __uuidof(IPen);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TPen::Default(void)
{
  GetDefaultInterface()->Default();
}

unsigned_long __fastcall TPen::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPen::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

long __fastcall TPen::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TPen::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TPen::get_Style(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Style((long*)&pVal));
  return pVal;
}

void __fastcall TPen::set_Style(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Style(pVal/*[in]*/);
}

IBrushPtr& TBrush::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TBrush::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TBrush::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TBrush::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TBrush::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TBrush::ConnectTo(IBrushPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TBrush::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Brush;
  sd.IntfIID = __uuidof(IBrush);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TBrush::Default(void)
{
  GetDefaultInterface()->Default();
}

unsigned_long __fastcall TBrush::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TBrush::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

long __fastcall TBrush::get_Style(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Style((long*)&pVal));
  return pVal;
}

void __fastcall TBrush::set_Style(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Style(pVal/*[in]*/);
}

void __fastcall TBrush::set_Image(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_Image(Param1/*[in]*/);
}

unsigned_long __fastcall TBrush::get_GradientColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_GradientColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TBrush::set_GradientColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_GradientColor(pVal/*[in]*/);
}

IFontExPtr& TFont::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TFont::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TFont::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TFont::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TFont::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TFont::ConnectTo(IFontExPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TFont::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Font;
  sd.IntfIID = __uuidof(IFontEx);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TFont::Default(void)
{
  GetDefaultInterface()->Default();
}

unsigned_long __fastcall TFont::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFont::get_Italic(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Italic((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Italic(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Italic(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFont::get_Underline(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Underline((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Underline(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Underline(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFont::get_Strikethrough(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Strikethrough((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Strikethrough(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Strikethrough(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFont::get_Bold(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Bold((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Bold(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bold(pVal/*[in]*/);
}

short __fastcall TFont::get_Weight(void)
{
  short pVal;
  OLECHECK(GetDefaultInterface()->get_Weight((short*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Weight(short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Weight(pVal/*[in]*/);
}

BSTR __fastcall TFont::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

CURRENCY __fastcall TFont::get_Size(void)
{
  CURRENCY pVal;
  OLECHECK(GetDefaultInterface()->get_Size((CURRENCY*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Size(CURRENCY pVal/*[in]*/)
{
  GetDefaultInterface()->set_Size(pVal/*[in]*/);
}

short __fastcall TFont::get_CharSet(void)
{
  short pVal;
  OLECHECK(GetDefaultInterface()->get_CharSet((short*)&pVal));
  return pVal;
}

void __fastcall TFont::set_CharSet(short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CharSet(pVal/*[in]*/);
}

long __fastcall TFont::get_Angle(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Angle((long*)&pVal));
  return pVal;
}

void __fastcall TFont::set_Angle(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Angle(pVal/*[in]*/);
}

IActionPtr& TAction::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TAction::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TAction::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TAction::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TAction::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TAction::ConnectTo(IActionPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TAction::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Action;
  sd.IntfIID = __uuidof(IAction);
  sd.EventIID= __uuidof(IActionEvents);
  ServerData = &sd;
}

void __fastcall TAction::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnExecute1) {
        (OnExecute1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnUpdate1) {
        (OnUpdate1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TAction::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TAction::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TAction::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TAction::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TAction::ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

LPDISPATCH __fastcall TAction::Add(VARIANT Item/*[in]*/, VARIANT Key/*[in,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Add(Item, Key, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TAction::Insert(long Index/*[in]*/, VARIANT Item/*[in]*/, 
                                      VARIANT Key/*[in,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Insert(Index, Item, Key, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TAction::NewLine(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->NewLine((LPDISPATCH*)&pControl));
  return pControl;
}

VARIANT_BOOL __fastcall TAction::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TAction::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TAction::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TAction::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TAction::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TAction::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

void __fastcall TAction::set_Item(long Index/*[in]*/, VARIANT pvar/*[in]*/)
{
  GetDefaultInterface()->set_Item(Index/*[in]*/, pvar/*[in]*/);
}

long __fastcall TAction::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

LPDISPATCH __fastcall TAction::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TAction::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

BSTR __fastcall TAction::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall TAction::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TAction::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_Checked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Checked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Checked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Checked(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_CheckBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CheckBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_CheckBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CheckBox(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_RadioCheck(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_RadioCheck((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_RadioCheck(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_RadioCheck(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_AllowAllUp(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowAllUp((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_AllowAllUp(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowAllUp(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_Default(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Default((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Default(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Default(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAction::get_Control(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Control((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TAction::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TAction::get_Items(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Items((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT __fastcall TAction::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_Break(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Break((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Break(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Break(pVal/*[in]*/);
}

VARIANT __fastcall TAction::get_Key(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Key((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Key(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Key(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_DismissonClick(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DismissonClick((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_DismissonClick(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DismissonClick(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_Noninteractive(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Noninteractive((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Noninteractive(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Noninteractive(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_Nobackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Nobackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_Nobackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Nobackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAction::get_WholeDropDown(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_WholeDropDown((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAction::set_WholeDropDown(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_WholeDropDown(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAction::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TAction::set_OnExecute(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnExecute(Param1/*[in]*/);
}

void __fastcall TAction::set_OnUpdate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUpdate(Param1/*[in]*/);
}

IListControlItemPtr& TListControlItem::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListControlItem::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListControlItem::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListControlItem::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListControlItem::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListControlItem::ConnectTo(IListControlItemPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListControlItem::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListControlItem;
  sd.IntfIID = __uuidof(IListControlItem);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TListControlItem::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

long __fastcall TListControlItem::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TListControlItem::get_Selected(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Selected((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TListControlItem::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TListControlItem::get_Index(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Index((long*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListControlItem::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListControlItem::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TListControlItem::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

unsigned_long __fastcall TListControlItem::get_TextBkColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TextBkColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListControlItem::set_TextBkColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TextBkColor(pVal/*[in]*/);
}

VARIANT __fastcall TListControlItem::get_ItemData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_ItemData((VARIANT*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListControlItem::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListControlItem::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TListControlItem::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

unsigned_long __fastcall TListControlItem::get_Indent(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Indent((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListControlItem::set_Indent(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Indent(pVal/*[in]*/);
}

IListBoxPtr& TListBox::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListBox::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListBox::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListBox::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListBox::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListBox::ConnectTo(IListBoxPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListBox::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListBox;
  sd.IntfIID = __uuidof(IListBox);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TListBox::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TListBox::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TListBox::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TListBox::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TListBox::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TListBox::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TListBox::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                    long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TListBox::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TListBox::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TListBox::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TListBox::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

long __fastcall TListBox::Add(BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Add(Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TListBox::Remove(long Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

long __fastcall TListBox::Insert(long Index/*[in]*/, BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Insert(Index, Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TListBox::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TListBox::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TListBox::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

void __fastcall TListBox::ExChange(long A/*[in]*/, long B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

void __fastcall TListBox::Sort(long DataType/*[in,def,opt]*/, VARIANT_BOOL Reverse/*[in,def,opt]*/)
{
  GetDefaultInterface()->Sort(DataType/*[in,def,opt]*/, Reverse/*[in,def,opt]*/);
}

long __fastcall TListBox::Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                               VARIANT_BOOL IgnoreCase/*[in,def,opt]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Find(Text, Start, IgnoreCase, (long*)&pItemIndex));
  return pItemIndex;
}

long __fastcall TListBox::ItemFromPoint(unsigned_short x/*[in]*/, unsigned_short y/*[in]*/)
{
  long pIndex;
  OLECHECK(GetDefaultInterface()->ItemFromPoint(x, y, (long*)&pIndex));
  return pIndex;
}

BSTR __fastcall TListBox::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TListBox::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TListBox::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListBox::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListBox::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TListBox::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TListBox::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TListBox::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TListBox::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TListBox::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TListBox::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TListBox::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TListBox::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TListBox::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TListBox::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TListBox::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TListBox::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TListBox::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TListBox::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TListBox::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TListBox::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TListBox::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TListBox::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TListBox::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TListBox::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TListBox::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TListBox::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TListBox::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TListBox::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListBox::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TListBox::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TListBox::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListBox::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TListBox::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TListBox::get_TopIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TopIndex((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_TopIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TopIndex(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TListBox::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

BSTR __fastcall TListBox::get_Item(long Index/*[in]*/)
{
  BSTR pvar = 0;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (BSTR*)&pvar));
  return pvar;
}

void __fastcall TListBox::set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/)
{
  GetDefaultInterface()->set_Item(Index/*[in]*/, pvar/*[in]*/);
}

long __fastcall TListBox::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

long __fastcall TListBox::get_ItemIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ItemIndex((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ItemIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemIndex(pVal/*[in]*/);
}

long __fastcall TListBox::get_ItemHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ItemHeight((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ItemHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemHeight(pVal/*[in]*/);
}

VARIANT __fastcall TListBox::get_ItemData(long Index/*[in]*/)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_ItemData(Index, (VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ItemData(long Index/*[in]*/, VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemData(Index/*[in]*/, pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_Sorted(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Sorted((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Sorted(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Sorted(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_IntegralHeight(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IntegralHeight((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_IntegralHeight(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_IntegralHeight(pVal/*[in]*/);
}

long __fastcall TListBox::get_HorizontalExtent(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_HorizontalExtent((long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_HorizontalExtent(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_HorizontalExtent(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListBox::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TListBox::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

long __fastcall TListBox::get_ImageIndex(long Index/*[in]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex(Index, (long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ImageIndex(long Index/*[in]*/, long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(Index/*[in]*/, pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_CustomDraw(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CustomDraw((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_CustomDraw(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CustomDraw(pVal/*[in]*/);
}

void __fastcall TListBox::set_OnDrawItem(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDrawItem(Param1/*[in]*/);
}

void __fastcall TListBox::set_BackgroundImage(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_BackgroundImage(Param1/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_CustomDrawSelection(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CustomDrawSelection((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_CustomDrawSelection(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CustomDrawSelection(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_Selected(long Index/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Selected(Index, (VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_Selected(long Index/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Selected(Index/*[in]*/, pVal/*[in]*/);
}

long __fastcall TListBox::get_SelCount(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelCount((long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TListBox::get_MultiSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MultiSelect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_MultiSelect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MultiSelect(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListBox::get_ExtendedSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedSelect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ExtendedSelect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ExtendedSelect(pVal/*[in]*/);
}

unsigned_short __fastcall TListBox::get_ColumnCount(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_ColumnCount((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ColumnCount(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_ColumnCount(pVal/*[in]*/);
}

unsigned_short __fastcall TListBox::get_ColumnWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_ColumnWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ColumnWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_ColumnWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TListBox::get_ScrollBars(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ScrollBars((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListBox::set_ScrollBars(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ScrollBars(pVal/*[in]*/);
}

IComboBoxPtr& TComboBox::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TComboBox::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TComboBox::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TComboBox::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TComboBox::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TComboBox::ConnectTo(IComboBoxPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TComboBox::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ComboBox;
  sd.IntfIID = __uuidof(IComboBox);
  sd.EventIID= __uuidof(IComboBoxEvents);
  ServerData = &sd;
}

void __fastcall TComboBox::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    case 19: {
      if (OnDrawItem1) {
        (OnDrawItem1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 20: {
      if (OnDropDown1) {
        (OnDropDown1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TComboBox::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TComboBox::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TComboBox::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TComboBox::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TComboBox::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TComboBox::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TComboBox::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TComboBox::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TComboBox::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TComboBox::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

long __fastcall TComboBox::Add(BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Add(Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TComboBox::Remove(long Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

long __fastcall TComboBox::Insert(long Index/*[in]*/, BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Insert(Index, Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TComboBox::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TComboBox::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TComboBox::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

void __fastcall TComboBox::ExChange(long A/*[in]*/, long B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

void __fastcall TComboBox::Sort(long DataType/*[in,def,opt]*/, VARIANT_BOOL Reverse/*[in,def,opt]*/)
{
  GetDefaultInterface()->Sort(DataType/*[in,def,opt]*/, Reverse/*[in,def,opt]*/);
}

long __fastcall TComboBox::Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                VARIANT_BOOL IgnoreCase/*[in,def,opt]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Find(Text, Start, IgnoreCase, (long*)&pItemIndex));
  return pItemIndex;
}

BSTR __fastcall TComboBox::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TComboBox::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TComboBox::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TComboBox::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TComboBox::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TComboBox::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TComboBox::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TComboBox::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TComboBox::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TComboBox::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TComboBox::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TComboBox::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TComboBox::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TComboBox::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TComboBox::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TComboBox::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TComboBox::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TComboBox::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TComboBox::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TComboBox::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TComboBox::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TComboBox::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TComboBox::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TComboBox::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TComboBox::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TComboBox::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TComboBox::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TComboBox::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TComboBox::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TComboBox::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TComboBox::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TComboBox::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TComboBox::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TComboBox::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TComboBox::get_TopIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TopIndex((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_TopIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TopIndex(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TComboBox::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

BSTR __fastcall TComboBox::get_Item(long Index/*[in]*/)
{
  BSTR pvar = 0;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (BSTR*)&pvar));
  return pvar;
}

void __fastcall TComboBox::set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/)
{
  GetDefaultInterface()->set_Item(Index/*[in]*/, pvar/*[in]*/);
}

long __fastcall TComboBox::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

long __fastcall TComboBox::get_ItemIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ItemIndex((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ItemIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemIndex(pVal/*[in]*/);
}

long __fastcall TComboBox::get_ItemHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ItemHeight((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ItemHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemHeight(pVal/*[in]*/);
}

VARIANT __fastcall TComboBox::get_ItemData(long Index/*[in]*/)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_ItemData(Index, (VARIANT*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ItemData(long Index/*[in]*/, VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemData(Index/*[in]*/, pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_Sorted(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Sorted((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Sorted(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Sorted(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_IntegralHeight(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IntegralHeight((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_IntegralHeight(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_IntegralHeight(pVal/*[in]*/);
}

long __fastcall TComboBox::get_HorizontalExtent(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_HorizontalExtent((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_HorizontalExtent(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_HorizontalExtent(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TComboBox::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

long __fastcall TComboBox::get_ImageIndex(long Index/*[in]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex(Index, (long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ImageIndex(long Index/*[in]*/, long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(Index/*[in]*/, pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_CustomDraw(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CustomDraw((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_CustomDraw(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CustomDraw(pVal/*[in]*/);
}

void __fastcall TComboBox::set_OnDrawItem(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDrawItem(Param1/*[in]*/);
}

void __fastcall TComboBox::set_BackgroundImage(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_BackgroundImage(Param1/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_CustomDrawSelection(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CustomDrawSelection((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_CustomDrawSelection(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CustomDrawSelection(pVal/*[in]*/);
}

unsigned_long __fastcall TComboBox::get_DropDownCount(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_DropDownCount((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_DropDownCount(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_DropDownCount(pVal/*[in]*/);
}

long __fastcall TComboBox::get_Style(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Style((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_Style(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Style(pVal/*[in]*/);
}

long __fastcall TComboBox::get_CharCase(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_CharCase((long*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_CharCase(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_CharCase(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_ReadOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ReadOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_ReadOnly(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ReadOnly(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_DroppedDown(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DroppedDown((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_DroppedDown(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DroppedDown(pVal/*[in]*/);
}

BSTR __fastcall TComboBox::get_CueBanner(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_CueBanner((BSTR*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_CueBanner(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_CueBanner(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TComboBox::get_CueBannerAlwaysVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CueBannerAlwaysVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CueBannerAlwaysVisible(pVal/*[in]*/);
}

LPDISPATCH __fastcall TComboBox::get_BalloonTip(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_BalloonTip((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TComboBox::set_OnDropDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDropDown(Param1/*[in]*/);
}

IEditPtr& TEdit::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TEdit::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TEdit::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TEdit::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TEdit::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TEdit::ConnectTo(IEditPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TEdit::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Edit;
  sd.IntfIID = __uuidof(IEdit);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TEdit::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TEdit::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TEdit::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TEdit::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TEdit::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TEdit::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TEdit::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                 long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TEdit::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TEdit::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TEdit::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TEdit::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

long __fastcall TEdit::Add(BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Add(Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TEdit::Remove(long Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

long __fastcall TEdit::Insert(long Index/*[in]*/, BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Insert(Index, Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TEdit::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TEdit::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TEdit::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

void __fastcall TEdit::ExChange(long A/*[in]*/, long B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

void __fastcall TEdit::Sort(long DataType/*[in,def,opt]*/, VARIANT_BOOL Reverse/*[in,def,opt]*/)
{
  GetDefaultInterface()->Sort(DataType/*[in,def,opt]*/, Reverse/*[in,def,opt]*/);
}

long __fastcall TEdit::Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                            VARIANT_BOOL IgnoreCase/*[in,def,opt]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Find(Text, Start, IgnoreCase, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TEdit::SelectAll(void)
{
  GetDefaultInterface()->SelectAll();
}

void __fastcall TEdit::ClearSelection(void)
{
  GetDefaultInterface()->ClearSelection();
}

void __fastcall TEdit::ReplaceSelection(BSTR NewText/*[in]*/, VARIANT_BOOL CanUndo/*[in,def,opt]*/)
{
  GetDefaultInterface()->ReplaceSelection(NewText/*[in]*/, CanUndo/*[in,def,opt]*/);
}

void __fastcall TEdit::Undo(void)
{
  GetDefaultInterface()->Undo();
}

void __fastcall TEdit::Cut(void)
{
  GetDefaultInterface()->Cut();
}

void __fastcall TEdit::Copy(void)
{
  GetDefaultInterface()->Copy();
}

void __fastcall TEdit::Paste(void)
{
  GetDefaultInterface()->Paste();
}

BSTR __fastcall TEdit::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TEdit::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TEdit::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TEdit::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TEdit::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TEdit::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TEdit::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TEdit::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TEdit::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TEdit::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TEdit::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TEdit::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TEdit::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TEdit::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TEdit::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TEdit::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TEdit::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TEdit::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TEdit::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TEdit::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TEdit::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TEdit::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TEdit::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TEdit::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TEdit::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TEdit::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TEdit::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TEdit::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TEdit::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TEdit::get_TopIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TopIndex((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_TopIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TopIndex(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TEdit::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

BSTR __fastcall TEdit::get_Item(long Index/*[in]*/)
{
  BSTR pvar = 0;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (BSTR*)&pvar));
  return pvar;
}

void __fastcall TEdit::set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/)
{
  GetDefaultInterface()->set_Item(Index/*[in]*/, pvar/*[in]*/);
}

long __fastcall TEdit::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

VARIANT_BOOL __fastcall TEdit::get_ReadOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ReadOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ReadOnly(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ReadOnly(pVal/*[in]*/);
}

long __fastcall TEdit::get_MaxLength(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_MaxLength((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_MaxLength(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxLength(pVal/*[in]*/);
}

long __fastcall TEdit::get_CharCase(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_CharCase((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_CharCase(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_CharCase(pVal/*[in]*/);
}

BSTR __fastcall TEdit::get_PasswordChar(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_PasswordChar((BSTR*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_PasswordChar(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_PasswordChar(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_HideSelection(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HideSelection((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_HideSelection(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HideSelection(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_MultiLine(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MultiLine((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_MultiLine(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MultiLine(pVal/*[in]*/);
}

unsigned_long __fastcall TEdit::get_ScrollBars(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ScrollBars((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_ScrollBars(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ScrollBars(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_AutoSize(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSize((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_AutoSize(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSize(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_Modified(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Modified((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Modified(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Modified(pVal/*[in]*/);
}

long __fastcall TEdit::get_SelStart(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelStart((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_SelStart(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelStart(pVal/*[in]*/);
}

long __fastcall TEdit::get_SelEnd(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelEnd((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_SelEnd(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelEnd(pVal/*[in]*/);
}

long __fastcall TEdit::get_SelLength(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelLength((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_SelLength(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelLength(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_LeftMargin(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_LeftMargin((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_LeftMargin(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_LeftMargin(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_RightMargin(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_RightMargin((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_RightMargin(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_RightMargin(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_WordWrap(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_WordWrap((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_WordWrap(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_WordWrap(pVal/*[in]*/);
}

unsigned_short __fastcall TEdit::get_TextAlign(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_TextAlign((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_TextAlign(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_TextAlign(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_CanUndo(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanUndo((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_CanUndo(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CanUndo(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_CanPaste(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanPaste((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TEdit::get_DataType(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_DataType((long*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_DataType(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_DataType(pVal/*[in]*/);
}

VARIANT __fastcall TEdit::get_Min(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Min((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Min(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Min(pVal/*[in]*/);
}

VARIANT __fastcall TEdit::get_Max(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Max((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_Max(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Max(pVal/*[in]*/);
}

long __fastcall TEdit::get_LineFromChar(long Index/*[in,def,opt]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_LineFromChar(Index, (long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TEdit::get_AcceptsReturn(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AcceptsReturn((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_AcceptsReturn(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AcceptsReturn(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_AcceptsTab(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AcceptsTab((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_AcceptsTab(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AcceptsTab(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_AutoHeight(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoHeight((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_AutoHeight(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoHeight(pVal/*[in]*/);
}

BSTR __fastcall TEdit::get_CueBanner(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_CueBanner((BSTR*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_CueBanner(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_CueBanner(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TEdit::get_CueBannerAlwaysVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CueBannerAlwaysVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TEdit::set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CueBannerAlwaysVisible(pVal/*[in]*/);
}

LPDISPATCH __fastcall TEdit::get_BalloonTip(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_BalloonTip((LPDISPATCH*)&pVal));
  return pVal;
}

IButtonPtr& TButton::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TButton::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TButton::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TButton::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TButton::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TButton::ConnectTo(IButtonPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TButton::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Button;
  sd.IntfIID = __uuidof(IButton);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TButton::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TButton::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TButton::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TButton::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TButton::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TButton::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TButton::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                   long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TButton::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TButton::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TButton::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TButton::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TButton::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TButton::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TButton::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TButton::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TButton::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TButton::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TButton::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TButton::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TButton::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TButton::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TButton::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TButton::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TButton::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TButton::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TButton::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TButton::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TButton::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TButton::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TButton::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TButton::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TButton::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TButton::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TButton::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TButton::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TButton::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TButton::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TButton::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TButton::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TButton::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TButton::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TButton::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TButton::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TButton::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TButton::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TButton::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TButton::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TButton::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TButton::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TButton::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TButton::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TButton::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TButton::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TButton::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TButton::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TButton::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TButton::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TButton::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TButton::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TButton::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TButton::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TButton::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TButton::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TButton::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TButton::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TButton::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TButton::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TButton::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TButton::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TButton::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TButton::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TButton::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TButton::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TButton::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TButton::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TButton::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TButton::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TButton::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TButton::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TButton::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TButton::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TButton::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Flat(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Flat((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Flat(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flat(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Default(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Default((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Default(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Default(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Cancel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Cancel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Cancel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cancel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_CommandLinkButton(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CommandLinkButton((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_CommandLinkButton(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CommandLinkButton(pVal/*[in]*/);
}

BSTR __fastcall TButton::get_Note(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Note((BSTR*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Note(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Note(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TButton::get_Shield(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Shield((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TButton::set_Shield(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Shield(pVal/*[in]*/);
}

ICheckBoxPtr& TCheckBox::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TCheckBox::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TCheckBox::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TCheckBox::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TCheckBox::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TCheckBox::ConnectTo(ICheckBoxPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TCheckBox::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_CheckBox;
  sd.IntfIID = __uuidof(ICheckBox);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TCheckBox::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TCheckBox::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TCheckBox::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TCheckBox::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TCheckBox::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TCheckBox::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TCheckBox::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TCheckBox::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TCheckBox::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TCheckBox::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TCheckBox::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TCheckBox::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TCheckBox::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TCheckBox::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCheckBox::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCheckBox::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCheckBox::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TCheckBox::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TCheckBox::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TCheckBox::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TCheckBox::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TCheckBox::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TCheckBox::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TCheckBox::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCheckBox::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TCheckBox::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCheckBox::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TCheckBox::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCheckBox::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TCheckBox::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCheckBox::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TCheckBox::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TCheckBox::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TCheckBox::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TCheckBox::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TCheckBox::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TCheckBox::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TCheckBox::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCheckBox::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCheckBox::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TCheckBox::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TCheckBox::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCheckBox::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCheckBox::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TCheckBox::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_Flat(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Flat((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Flat(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flat(pVal/*[in]*/);
}

long __fastcall TCheckBox::get_State(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_State((long*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_State(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_State(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_AllowGrayed(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowGrayed((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_AllowGrayed(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowGrayed(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCheckBox::get_Checked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Checked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCheckBox::set_Checked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Checked(pVal/*[in]*/);
}

IRadioButtonPtr& TRadioButton::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TRadioButton::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TRadioButton::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TRadioButton::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TRadioButton::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TRadioButton::ConnectTo(IRadioButtonPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TRadioButton::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_RadioButton;
  sd.IntfIID = __uuidof(IRadioButton);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TRadioButton::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TRadioButton::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TRadioButton::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TRadioButton::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TRadioButton::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TRadioButton::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TRadioButton::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TRadioButton::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TRadioButton::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TRadioButton::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TRadioButton::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TRadioButton::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TRadioButton::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TRadioButton::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRadioButton::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRadioButton::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRadioButton::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TRadioButton::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TRadioButton::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TRadioButton::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TRadioButton::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TRadioButton::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TRadioButton::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TRadioButton::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRadioButton::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TRadioButton::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRadioButton::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TRadioButton::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRadioButton::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TRadioButton::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRadioButton::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TRadioButton::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TRadioButton::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TRadioButton::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TRadioButton::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TRadioButton::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TRadioButton::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TRadioButton::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRadioButton::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRadioButton::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TRadioButton::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TRadioButton::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRadioButton::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRadioButton::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TRadioButton::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_Flat(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Flat((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Flat(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flat(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRadioButton::get_Checked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Checked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Checked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Checked(pVal/*[in]*/);
}

long __fastcall TRadioButton::get_Group(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Group((long*)&pVal));
  return pVal;
}

void __fastcall TRadioButton::set_Group(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Group(pVal/*[in]*/);
}

IStatusItemPtr& TStatusItem::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TStatusItem::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TStatusItem::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TStatusItem::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TStatusItem::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TStatusItem::ConnectTo(IStatusItemPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TStatusItem::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_StatusItem;
  sd.IntfIID = __uuidof(IStatusItem);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TStatusItem::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TStatusItem::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall TStatusItem::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TStatusItem::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TStatusItem::get_Border(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Border((long*)&pVal));
  return pVal;
}

void __fastcall TStatusItem::set_Border(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusItem::get_AutoSize(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSize((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusItem::set_AutoSize(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSize(pVal/*[in]*/);
}

long __fastcall TStatusItem::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TStatusItem::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusItem::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

IStatusBarPtr& TStatusBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TStatusBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TStatusBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TStatusBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TStatusBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TStatusBar::ConnectTo(IStatusBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TStatusBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_StatusBar;
  sd.IntfIID = __uuidof(IStatusBar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TStatusBar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TStatusBar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TStatusBar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TStatusBar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TStatusBar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TStatusBar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TStatusBar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                      long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TStatusBar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TStatusBar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TStatusBar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TStatusBar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TStatusBar::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TStatusBar::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TStatusBar::ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::Add(long Width/*[in]*/, long Border/*[in,def,opt]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Add(Width, Border, (LPDISPATCH*)&pItem));
  return pItem;
}

BSTR __fastcall TStatusBar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TStatusBar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TStatusBar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TStatusBar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TStatusBar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TStatusBar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TStatusBar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TStatusBar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TStatusBar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TStatusBar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TStatusBar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TStatusBar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TStatusBar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TStatusBar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TStatusBar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TStatusBar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TStatusBar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TStatusBar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TStatusBar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TStatusBar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TStatusBar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TStatusBar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TStatusBar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TStatusBar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TStatusBar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TStatusBar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TStatusBar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TStatusBar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TStatusBar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TStatusBar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TStatusBar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TStatusBar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TStatusBar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TStatusBar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TStatusBar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_Simple(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Simple((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Simple(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Simple(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TStatusBar::get_SizeGrip(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_SizeGrip((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_SizeGrip(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_SizeGrip(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TStatusBar::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TStatusBar::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TStatusBar::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

LPDISPATCH __fastcall TStatusBar::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TStatusBar::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TStatusBar::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

IProgressBarPtr& TProgressBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TProgressBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TProgressBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TProgressBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TProgressBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TProgressBar::ConnectTo(IProgressBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TProgressBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ProgressBar;
  sd.IntfIID = __uuidof(IProgressBar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TProgressBar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TProgressBar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TProgressBar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TProgressBar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TProgressBar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TProgressBar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TProgressBar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TProgressBar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TProgressBar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TProgressBar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TProgressBar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TProgressBar::StepIt(void)
{
  GetDefaultInterface()->StepIt();
}

void __fastcall TProgressBar::StepBy(long Delta/*[in]*/)
{
  GetDefaultInterface()->StepBy(Delta/*[in]*/);
}

BSTR __fastcall TProgressBar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TProgressBar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TProgressBar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProgressBar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TProgressBar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TProgressBar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TProgressBar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TProgressBar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TProgressBar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TProgressBar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TProgressBar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TProgressBar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TProgressBar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProgressBar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TProgressBar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProgressBar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TProgressBar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProgressBar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TProgressBar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProgressBar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TProgressBar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TProgressBar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TProgressBar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TProgressBar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TProgressBar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TProgressBar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TProgressBar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProgressBar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TProgressBar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TProgressBar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TProgressBar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProgressBar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TProgressBar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TProgressBar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Min(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Min((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Min(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Min(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Max(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Max((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Max(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Max(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Position(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Position((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Position(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Position(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_Step(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Step((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Step(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Step(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_Smooth(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Smooth((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Smooth(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Smooth(pVal/*[in]*/);
}

long __fastcall TProgressBar::get_State(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_State((long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_State(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_State(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_Marquee(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Marquee((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_Marquee(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Marquee(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_MarqueeActive(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MarqueeActive((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_MarqueeActive(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarqueeActive(pVal/*[in]*/);
}

unsigned_long __fastcall TProgressBar::get_MarqueeInterval(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarqueeInterval((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_MarqueeInterval(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarqueeInterval(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProgressBar::get_SmoothReverse(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_SmoothReverse((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_SmoothReverse(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_SmoothReverse(pVal/*[in]*/);
}

unsigned_long __fastcall TProgressBar::get_BarColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BarColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TProgressBar::set_BarColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BarColor(pVal/*[in]*/);
}

IScrollBarPtr& TScrollBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TScrollBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TScrollBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TScrollBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TScrollBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TScrollBar::ConnectTo(IScrollBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TScrollBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ScrollBar;
  sd.IntfIID = __uuidof(IScrollBar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TScrollBar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TScrollBar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TScrollBar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TScrollBar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TScrollBar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TScrollBar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TScrollBar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                      long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TScrollBar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TScrollBar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TScrollBar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TScrollBar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TScrollBar::StepIt(void)
{
  GetDefaultInterface()->StepIt();
}

void __fastcall TScrollBar::StepBy(long Delta/*[in]*/)
{
  GetDefaultInterface()->StepBy(Delta/*[in]*/);
}

BSTR __fastcall TScrollBar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TScrollBar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TScrollBar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TScrollBar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TScrollBar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TScrollBar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TScrollBar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TScrollBar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TScrollBar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TScrollBar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TScrollBar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TScrollBar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TScrollBar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TScrollBar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TScrollBar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TScrollBar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TScrollBar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TScrollBar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TScrollBar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TScrollBar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TScrollBar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TScrollBar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TScrollBar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TScrollBar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TScrollBar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TScrollBar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TScrollBar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TScrollBar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TScrollBar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TScrollBar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TScrollBar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TScrollBar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TScrollBar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TScrollBar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Min(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Min((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Min(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Min(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Max(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Max((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Max(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Max(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Position(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Position((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Position(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Position(pVal/*[in]*/);
}

long __fastcall TScrollBar::get_Step(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Step((long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Step(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Step(pVal/*[in]*/);
}

unsigned_long __fastcall TScrollBar::get_Page(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Page((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Page(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Page(pVal/*[in]*/);
}

unsigned_long __fastcall TScrollBar::get_SmallChange(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_SmallChange((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_SmallChange(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SmallChange(pVal/*[in]*/);
}

unsigned_long __fastcall TScrollBar::get_LargeChange(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_LargeChange((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_LargeChange(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_LargeChange(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TScrollBar::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TScrollBar::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

ITabPtr& TTab::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTab::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTab::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTab::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTab::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTab::ConnectTo(ITabPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTab::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Tab;
  sd.IntfIID = __uuidof(ITab);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TTab::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TTab::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTab::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTab::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TTab::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TTab::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TTab::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TTab::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TTab::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TTab::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TTab::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TTab::CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           BSTR Text/*[in,def,opt]*/, 
                                           VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                       long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            BSTR Url/*[in,def,opt]*/, BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                 long Width/*[in]*/, long Height/*[in]*/, 
                                                 BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                         long Width/*[in]*/, long Height/*[in]*/, 
                                                         BSTR ID/*[in]*/, BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/, long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateDateTimePicker(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/, 
                                                 long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                     long Top/*[in,def,opt]*/, 
                                                     long Width/*[in,def,opt]*/, 
                                                     long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                        long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, long nWidth/*[in]*/, long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                  long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                  long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                long Height/*[in]*/, long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                long nXRadial2/*[in]*/, long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                     long Height/*[in]*/, BSTR Text/*[in]*/, 
                                     unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/, VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                       unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TTab::Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                  long BevelInner/*[in,def,opt]*/, 
                                  unsigned_long BorderWidth/*[in,def,opt]*/, 
                                  unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TTab::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TTab::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TTab::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

BSTR __fastcall TTab::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TTab::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTab::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TTab::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTab::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTab::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TTab::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TTab::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TTab::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TTab::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TTab::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TTab::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TTab::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTab::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTab::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTab::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTab::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TTab::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TTab::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TTab::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TTab::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTab::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TTab::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TTab::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TTab::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TTab::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TTab::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TTab::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TTab::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TTab::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TTab::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTab::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTab::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TTab::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TTab::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TTab::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TTab::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TTab::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TTab::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TTab::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TTab::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TTab::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TTab::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TTab::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TTab::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TTab::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TTab::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TTab::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TTab::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TTab::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TTab::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TTab::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TTab::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TTab::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TTab::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TTab::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTab::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TTab::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TTab::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_BorderWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TTab::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_BevelWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelWidth(pVal/*[in]*/);
}

long __fastcall TTab::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_BevelOuter(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelOuter(pVal/*[in]*/);
}

long __fastcall TTab::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_BevelInner(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelInner(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTab::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTab::set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GraphFont(pVal/*[in]*/);
}

void __fastcall TTab::_set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GraphFont(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_AutoScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoScroll(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

unsigned_short __fastcall TTab::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTab::set_CaptureMouse(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CaptureMouse(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_AutoSplit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTab::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTab::set_GroupBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupBox(pVal/*[in]*/);
}

unsigned_long __fastcall TTab::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_Margin(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Margin(pVal/*[in]*/);
}

unsigned_long __fastcall TTab::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MarginLeft(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginLeft(pVal/*[in]*/);
}

unsigned_long __fastcall TTab::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MarginTop(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginTop(pVal/*[in]*/);
}

unsigned_long __fastcall TTab::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MarginRight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginRight(pVal/*[in]*/);
}

unsigned_long __fastcall TTab::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_MarginBottom(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginBottom(pVal/*[in]*/);
}

long __fastcall TTab::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TTab::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

ITabControlPtr& TTabControl::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTabControl::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTabControl::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTabControl::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTabControl::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTabControl::ConnectTo(ITabControlPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTabControl::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_TabControl;
  sd.IntfIID = __uuidof(ITabControl);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TTabControl::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TTabControl::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTabControl::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTabControl::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TTabControl::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TTabControl::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TTabControl::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TTabControl::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TTabControl::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TTabControl::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TTabControl::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TTabControl::CreateTab(BSTR Text/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTab(Text, (LPDISPATCH*)&pControl));
  return pControl;
}

BSTR __fastcall TTabControl::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TTabControl::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TTabControl::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTabControl::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTabControl::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TTabControl::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TTabControl::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TTabControl::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TTabControl::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TTabControl::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TTabControl::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TTabControl::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTabControl::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTabControl::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTabControl::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTabControl::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TTabControl::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TTabControl::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TTabControl::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TTabControl::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TTabControl::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TTabControl::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TTabControl::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TTabControl::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TTabControl::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TTabControl::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TTabControl::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TTabControl::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TTabControl::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTabControl::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TTabControl::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TTabControl::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTabControl::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TTabControl::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTabControl::get_ActiveControl(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ActiveControl((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ActiveControl(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_ActiveControl(pVal/*[in]*/);
}

void __fastcall TTabControl::_set_ActiveControl(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_ActiveControl(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_Buttons(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Buttons((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Buttons(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Buttons(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_MultiLine(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MultiLine((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_MultiLine(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MultiLine(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_HotTrack(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HotTrack((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_HotTrack(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HotTrack(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_FlatButtons(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FlatButtons((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_FlatButtons(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FlatButtons(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_RaggedRight(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_RaggedRight((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_RaggedRight(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_RaggedRight(pVal/*[in]*/);
}

long __fastcall TTabControl::get_TabWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabWidth((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_TabWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabWidth(pVal/*[in]*/);
}

long __fastcall TTabControl::get_TabHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabHeight((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_TabHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabHeight(pVal/*[in]*/);
}

long __fastcall TTabControl::get_ItemIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ItemIndex((long*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_ItemIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemIndex(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTabControl::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TTabControl::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTabControl::get_TabsVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabsVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTabControl::set_TabsVisible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabsVisible(pVal/*[in]*/);
}

IPageControlPtr& TPageControl::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPageControl::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPageControl::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPageControl::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPageControl::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPageControl::ConnectTo(IPageControlPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPageControl::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PageControl;
  sd.IntfIID = __uuidof(IPageControl);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TPageControl::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TPageControl::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPageControl::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPageControl::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TPageControl::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TPageControl::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TPageControl::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TPageControl::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TPageControl::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TPageControl::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TPageControl::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TPageControl::CreateTab(BSTR Text/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTab(Text, (LPDISPATCH*)&pControl));
  return pControl;
}

BSTR __fastcall TPageControl::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TPageControl::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TPageControl::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TPageControl::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TPageControl::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TPageControl::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TPageControl::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TPageControl::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TPageControl::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TPageControl::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPageControl::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPageControl::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPageControl::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPageControl::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TPageControl::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TPageControl::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TPageControl::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TPageControl::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TPageControl::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TPageControl::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TPageControl::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TPageControl::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TPageControl::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TPageControl::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TPageControl::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TPageControl::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TPageControl::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TPageControl::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TPageControl::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPageControl::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_ActiveControl(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ActiveControl((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ActiveControl(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_ActiveControl(pVal/*[in]*/);
}

void __fastcall TPageControl::_set_ActiveControl(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_ActiveControl(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_Buttons(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Buttons((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Buttons(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Buttons(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_MultiLine(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MultiLine((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_MultiLine(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MultiLine(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_HotTrack(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HotTrack((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_HotTrack(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HotTrack(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_FlatButtons(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FlatButtons((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_FlatButtons(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FlatButtons(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_RaggedRight(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_RaggedRight((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_RaggedRight(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_RaggedRight(pVal/*[in]*/);
}

long __fastcall TPageControl::get_TabWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabWidth((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabWidth(pVal/*[in]*/);
}

long __fastcall TPageControl::get_TabHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabHeight((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabHeight(pVal/*[in]*/);
}

long __fastcall TPageControl::get_ItemIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ItemIndex((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ItemIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemIndex(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TPageControl::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_TabsVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabsVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabsVisible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabsVisible(pVal/*[in]*/);
}

long __fastcall TPageControl::get_TabsAlign(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabsAlign((long*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabsAlign(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabsAlign(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_HeaderVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HeaderVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_HeaderVisible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HeaderVisible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_TabCloseButton(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabCloseButton((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabCloseButton(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabCloseButton(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_ShowSingleTab(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ShowSingleTab((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_ShowSingleTab(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ShowSingleTab(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_HideClippedTabs(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HideClippedTabs((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_HideClippedTabs(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HideClippedTabs(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPageControl::get_TabsDragDrop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabsDragDrop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPageControl::set_TabsDragDrop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabsDragDrop(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPageControl::get_HeaderColors(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_HeaderColors((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_TabColors(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_TabColors((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_CloseButtonColors(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_CloseButtonColors((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPageControl::get_ChevronColors(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ChevronColors((LPDISPATCH*)&pVal));
  return pVal;
}

IToolBarPtr& TToolBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TToolBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TToolBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TToolBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TToolBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TToolBar::ConnectTo(IToolBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TToolBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ToolBar;
  sd.IntfIID = __uuidof(IToolBar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TToolBar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TToolBar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TToolBar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TToolBar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TToolBar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TToolBar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TToolBar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                    long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TToolBar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TToolBar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TToolBar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TToolBar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TToolBar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TToolBar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TToolBar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TToolBar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TToolBar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TToolBar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TToolBar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TToolBar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TToolBar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TToolBar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TToolBar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TToolBar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TToolBar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TToolBar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TToolBar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TToolBar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TToolBar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TToolBar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TToolBar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TToolBar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TToolBar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TToolBar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TToolBar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TToolBar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TToolBar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TToolBar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TToolBar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TToolBar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TToolBar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TToolBar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TToolBar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TToolBar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TToolBar::get_Buttons(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Buttons((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Buttons(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Buttons(pVal/*[in]*/);
}

void __fastcall TToolBar::_set_Buttons(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Buttons(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_Flat(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Flat((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Flat(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flat(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_ShowText(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ShowText((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ShowText(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ShowText(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_ButtonWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ButtonWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ButtonWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ButtonWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_ButtonHeight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ButtonHeight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ButtonHeight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ButtonHeight(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_AutoSizeButtons(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSizeButtons((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_AutoSizeButtons(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSizeButtons(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_List(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_List((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_List(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_List(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_Wrapable(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Wrapable((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Wrapable(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Wrapable(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_AutoSize(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSize((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_AutoSize(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSize(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TToolBar::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_MinButtonWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MinButtonWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MinButtonWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinButtonWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_MaxButtonWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MaxButtonWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MaxButtonWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxButtonWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_MaxTextRows(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MaxTextRows((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_MaxTextRows(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxTextRows(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_PaddingX(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_PaddingX((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_PaddingX(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_PaddingX(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_PaddingY(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_PaddingY((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_PaddingY(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_PaddingY(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_ButtonSpacingX(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ButtonSpacingX((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ButtonSpacingX(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ButtonSpacingX(pVal/*[in]*/);
}

unsigned_long __fastcall TToolBar::get_ButtonSpacingY(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ButtonSpacingY((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TToolBar::set_ButtonSpacingY(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ButtonSpacingY(pVal/*[in]*/);
}

IMenuBarPtr& TMenuBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TMenuBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TMenuBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TMenuBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TMenuBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TMenuBar::ConnectTo(IMenuBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TMenuBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_MenuBar;
  sd.IntfIID = __uuidof(IMenuBar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TMenuBar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TMenuBar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TMenuBar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TMenuBar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TMenuBar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TMenuBar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TMenuBar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                    long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TMenuBar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TMenuBar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TMenuBar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TMenuBar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TMenuBar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TMenuBar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TMenuBar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TMenuBar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TMenuBar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TMenuBar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TMenuBar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TMenuBar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TMenuBar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TMenuBar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TMenuBar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TMenuBar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TMenuBar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TMenuBar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TMenuBar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TMenuBar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TMenuBar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TMenuBar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TMenuBar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TMenuBar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TMenuBar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TMenuBar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TMenuBar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TMenuBar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TMenuBar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TMenuBar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TMenuBar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TMenuBar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TMenuBar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TMenuBar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TMenuBar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TMenuBar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TMenuBar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TMenuBar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TMenuBar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TMenuBar::get_Menu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Menu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TMenuBar::set_Menu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Menu(pVal/*[in]*/);
}

void __fastcall TMenuBar::_set_Menu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Menu(pVal/*[in]*/);
}

IReBarBandPtr& TReBarBand::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TReBarBand::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TReBarBand::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TReBarBand::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TReBarBand::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TReBarBand::ConnectTo(IReBarBandPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TReBarBand::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ReBarBand;
  sd.IntfIID = __uuidof(IReBarBand);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TReBarBand::Maximize(void)
{
  GetDefaultInterface()->Maximize();
}

void __fastcall TReBarBand::Minimize(void)
{
  GetDefaultInterface()->Minimize();
}

BSTR __fastcall TReBarBand::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall TReBarBand::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

long __fastcall TReBarBand::get_Color(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((long*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_Color(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

void __fastcall TReBarBand::set_Image(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_Image(Param1/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_ParentImage(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentImage((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_ParentImage(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentImage(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_FixedImage(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FixedImage((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_FixedImage(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FixedImage(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_FixedSize(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FixedSize((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_FixedSize(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FixedSize(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_Break(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Break((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_Break(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Break(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_GripperAlways(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GripperAlways((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_GripperAlways(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GripperAlways(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_Locked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Locked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_Locked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Locked(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBarBand::get_Chevron(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Chevron((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_Chevron(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Chevron(pVal/*[in]*/);
}

unsigned_long __fastcall TReBarBand::get_MinWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_MinWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TReBarBand::get_IdealWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_IdealWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_IdealWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_IdealWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TReBarBand::get_Width(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBarBand::set_Width(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

IReBarPtr& TReBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TReBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TReBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TReBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TReBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TReBar::ConnectTo(IReBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TReBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ReBar;
  sd.IntfIID = __uuidof(IReBar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TReBar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TReBar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TReBar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TReBar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TReBar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TReBar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TReBar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                  long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TReBar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TReBar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TReBar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TReBar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TReBar::CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Text/*[in,def,opt]*/, 
                                             VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, BSTR Url/*[in,def,opt]*/, 
                                              BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                   long Width/*[in]*/, long Height/*[in]*/, 
                                                   BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                           long Width/*[in]*/, long Height/*[in]*/, 
                                                           BSTR ID/*[in]*/, BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/, 
                                             long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, 
                                   long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/, long nWidth/*[in]*/, 
                                        long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                  long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                  long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                    long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                    long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                  long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                  long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, BSTR Text/*[in]*/, 
                                       unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/, VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                         unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TReBar::Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                    long BevelInner/*[in,def,opt]*/, 
                                    unsigned_long BorderWidth/*[in,def,opt]*/, 
                                    unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TReBar::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TReBar::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TReBar::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

BSTR __fastcall TReBar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TReBar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TReBar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TReBar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TReBar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TReBar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TReBar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TReBar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TReBar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TReBar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TReBar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TReBar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TReBar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TReBar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TReBar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TReBar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TReBar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TReBar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TReBar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TReBar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TReBar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TReBar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TReBar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TReBar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TReBar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TReBar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TReBar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TReBar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TReBar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TReBar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TReBar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TReBar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TReBar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TReBar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TReBar::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_BorderWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TReBar::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_BevelWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelWidth(pVal/*[in]*/);
}

long __fastcall TReBar::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_BevelOuter(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelOuter(pVal/*[in]*/);
}

long __fastcall TReBar::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_BevelInner(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelInner(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GraphFont(pVal/*[in]*/);
}

void __fastcall TReBar::_set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GraphFont(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_AutoScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoScroll(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

unsigned_short __fastcall TReBar::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_CaptureMouse(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CaptureMouse(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_ParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_AutoSplit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_GroupBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupBox(pVal/*[in]*/);
}

unsigned_long __fastcall TReBar::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Margin(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Margin(pVal/*[in]*/);
}

unsigned_long __fastcall TReBar::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MarginLeft(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginLeft(pVal/*[in]*/);
}

unsigned_long __fastcall TReBar::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MarginTop(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginTop(pVal/*[in]*/);
}

unsigned_long __fastcall TReBar::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MarginRight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginRight(pVal/*[in]*/);
}

unsigned_long __fastcall TReBar::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_MarginBottom(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginBottom(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_Locked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Locked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Locked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Locked(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_InsertNewRow(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_InsertNewRow((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_InsertNewRow(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_InsertNewRow(pVal/*[in]*/);
}

LPDISPATCH __fastcall TReBar::get_Band(LPDISPATCH Control/*[in]*/)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Band(Control, (LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TReBar::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TReBar::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

void __fastcall TReBar::set_Image(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_Image(Param1/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_FixedOrder(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FixedOrder((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_FixedOrder(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FixedOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_VarHeight(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_VarHeight((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_VarHeight(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_VarHeight(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_BandBorders(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BandBorders((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_BandBorders(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BandBorders(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_DblClkToggle(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DblClkToggle((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_DblClkToggle(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DblClkToggle(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_VerticalGripper(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_VerticalGripper((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_VerticalGripper(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_VerticalGripper(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TReBar::get_AutoLayout(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoLayout((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TReBar::set_AutoLayout(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoLayout(pVal/*[in]*/);
}

long __fastcall TReBar::get_RowCount(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_RowCount((long*)&pVal));
  return pVal;
}

long __fastcall TReBar::get_RowHeight(long Index/*[in]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_RowHeight(Index, (long*)&pVal));
  return pVal;
}

long __fastcall TReBar::get_BandCount(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BandCount((long*)&pVal));
  return pVal;
}

IHyperLinkPtr& THyperLink::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall THyperLink::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall THyperLink::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall THyperLink::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall THyperLink::BeforeDestruction()
{
  Disconnect();
}

void __fastcall THyperLink::ConnectTo(IHyperLinkPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall THyperLink::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_HyperLink;
  sd.IntfIID = __uuidof(IHyperLink);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall THyperLink::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall THyperLink::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall THyperLink::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall THyperLink::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall THyperLink::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall THyperLink::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall THyperLink::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                      long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall THyperLink::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall THyperLink::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall THyperLink::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall THyperLink::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall THyperLink::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall THyperLink::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall THyperLink::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall THyperLink::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THyperLink::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THyperLink::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall THyperLink::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall THyperLink::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall THyperLink::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall THyperLink::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall THyperLink::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall THyperLink::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall THyperLink::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall THyperLink::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall THyperLink::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall THyperLink::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall THyperLink::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall THyperLink::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall THyperLink::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall THyperLink::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall THyperLink::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall THyperLink::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall THyperLink::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall THyperLink::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall THyperLink::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall THyperLink::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall THyperLink::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall THyperLink::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall THyperLink::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall THyperLink::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall THyperLink::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall THyperLink::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall THyperLink::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall THyperLink::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall THyperLink::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THyperLink::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall THyperLink::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall THyperLink::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THyperLink::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall THyperLink::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THyperLink::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall THyperLink::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

BSTR __fastcall THyperLink::get_Url(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Url((BSTR*)&pVal));
  return pVal;
}

void __fastcall THyperLink::set_Url(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Url(pVal/*[in]*/);
}

IPagerPtr& TPager::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPager::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPager::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPager::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPager::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPager::ConnectTo(IPagerPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPager::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Pager;
  sd.IntfIID = __uuidof(IPager);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TPager::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TPager::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPager::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPager::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TPager::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TPager::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TPager::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                  long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TPager::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TPager::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TPager::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TPager::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TPager::CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateCheckBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             BSTR Text/*[in,def,opt]*/, 
                                             VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateRadioButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateComboBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateGroupBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateProgressBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateTabControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateHyperLink(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, BSTR Url/*[in,def,opt]*/, 
                                              BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateScrollBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                   long Width/*[in]*/, long Height/*[in]*/, 
                                                   BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                           long Width/*[in]*/, long Height/*[in]*/, 
                                                           BSTR ID/*[in]*/, BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateListView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateTreeView(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateRichEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/, 
                                             long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                            long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateTrackBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateCalendar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                             long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateIPAddress(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateSplitPanel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreatePropertyGrid(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                          long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/, 
                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreatePageControl(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, 
                                   long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/, long nWidth/*[in]*/, 
                                        long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                  long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                  long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                    long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                    long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                  long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                  long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                  long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, BSTR Text/*[in]*/, 
                                       unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                        long Height/*[in]*/, VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                         unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPager::Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                    long BevelInner/*[in,def,opt]*/, 
                                    unsigned_long BorderWidth/*[in,def,opt]*/, 
                                    unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TPager::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TPager::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TPager::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

BSTR __fastcall TPager::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TPager::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPager::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TPager::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPager::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPager::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TPager::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TPager::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TPager::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TPager::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TPager::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TPager::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TPager::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPager::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPager::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPager::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPager::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TPager::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TPager::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TPager::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPager::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TPager::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TPager::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TPager::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TPager::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TPager::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TPager::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TPager::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TPager::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TPager::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPager::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPager::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TPager::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TPager::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TPager::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TPager::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TPager::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TPager::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TPager::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TPager::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TPager::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TPager::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TPager::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TPager::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TPager::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TPager::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TPager::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TPager::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TPager::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TPager::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TPager::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TPager::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TPager::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TPager::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TPager::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPager::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPager::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TPager::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_BorderWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_BevelWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelWidth(pVal/*[in]*/);
}

long __fastcall TPager::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_BevelOuter(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelOuter(pVal/*[in]*/);
}

long __fastcall TPager::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_BevelInner(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelInner(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPager::set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GraphFont(pVal/*[in]*/);
}

void __fastcall TPager::_set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GraphFont(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_AutoScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoScroll(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

unsigned_short __fastcall TPager::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPager::set_CaptureMouse(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CaptureMouse(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_AutoSplit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_GroupBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupBox(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Margin(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Margin(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MarginLeft(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginLeft(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MarginTop(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginTop(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MarginRight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginRight(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_MarginBottom(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginBottom(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPager::get_Control(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Control((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Control(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Control(pVal/*[in]*/);
}

void __fastcall TPager::_set_Control(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Control(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPager::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

unsigned_long __fastcall TPager::get_ButtonSize(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ButtonSize((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_ButtonSize(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ButtonSize(pVal/*[in]*/);
}

long __fastcall TPager::get_Position(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Position((long*)&pVal));
  return pVal;
}

void __fastcall TPager::set_Position(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Position(pVal/*[in]*/);
}

ICOMConnectionPointPtr& TCOMConnectionPoint::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TCOMConnectionPoint::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TCOMConnectionPoint::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TCOMConnectionPoint::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TCOMConnectionPoint::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TCOMConnectionPoint::ConnectTo(ICOMConnectionPointPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TCOMConnectionPoint::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_COMConnectionPoint;
  sd.IntfIID = __uuidof(ICOMConnectionPoint);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TCOMConnectionPoint::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TCOMConnectionPoint::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

BSTR __fastcall TCOMConnectionPoint::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TCOMConnectionPoint::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCOMConnectionPoint::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TCOMConnectionPoint::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TCOMConnectionPoint::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TCOMConnectionPoint::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

ICOMEventsPtr& TCOMEvents::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TCOMEvents::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TCOMEvents::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TCOMEvents::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TCOMEvents::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TCOMEvents::ConnectTo(ICOMEventsPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TCOMEvents::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_COMEvents;
  sd.IntfIID = __uuidof(ICOMEvents);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TCOMEvents::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TCOMEvents::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

BSTR __fastcall TCOMEvents::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TCOMEvents::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCOMEvents::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TCOMEvents::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TCOMEvents::get_Item(VARIANT Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TCOMEvents::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

IActiveXControlPtr& TActiveXControl::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TActiveXControl::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TActiveXControl::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TActiveXControl::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TActiveXControl::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TActiveXControl::ConnectTo(IActiveXControlPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TActiveXControl::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ActiveXControl;
  sd.IntfIID = __uuidof(IActiveXControl);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TActiveXControl::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TActiveXControl::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TActiveXControl::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TActiveXControl::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TActiveXControl::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TActiveXControl::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TActiveXControl::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TActiveXControl::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TActiveXControl::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TActiveXControl::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TActiveXControl::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TActiveXControl::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TActiveXControl::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TActiveXControl::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TActiveXControl::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TActiveXControl::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TActiveXControl::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TActiveXControl::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TActiveXControl::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TActiveXControl::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TActiveXControl::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TActiveXControl::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TActiveXControl::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TActiveXControl::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TActiveXControl::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TActiveXControl::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TActiveXControl::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TActiveXControl::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TActiveXControl::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TActiveXControl::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TActiveXControl::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TActiveXControl::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TActiveXControl::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TActiveXControl::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TActiveXControl::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TActiveXControl::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TActiveXControl::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TActiveXControl::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TActiveXControl::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TActiveXControl::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TActiveXControl::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TActiveXControl::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TActiveXControl::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TActiveXControl::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TActiveXControl::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TActiveXControl::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TActiveXControl::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TActiveXControl::get_Control(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Control((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TActiveXControl::get_Events(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Events((LPDISPATCH*)&pVal));
  return pVal;
}

IHeaderItemPtr& THeaderItem::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall THeaderItem::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall THeaderItem::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall THeaderItem::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall THeaderItem::BeforeDestruction()
{
  Disconnect();
}

void __fastcall THeaderItem::ConnectTo(IHeaderItemPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall THeaderItem::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_HeaderItem;
  sd.IntfIID = __uuidof(IHeaderItem);
  sd.EventIID= __uuidof(IHeaderItemEvents);
  ServerData = &sd;
}

void __fastcall THeaderItem::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 3: {
      if (OnBeginTrack1) {
        (OnBeginTrack1)(this, params[0].pdispVal, params[1], params[2].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnTrack1) {
        (OnTrack1)(this, params[0].pdispVal, params[1], params[2], params[3].pdispVal);
      }
      break;
      }
    case 5: {
      if (OnDividerDblClick1) {
        (OnDividerDblClick1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 6: {
      if (OnBeginDrag1) {
        (OnBeginDrag1)(this, params[0].pdispVal, params[1], params[2].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnEndDrag1) {
        (OnEndDrag1)(this, params[0].pdispVal, params[1], params[2].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall THeaderItem::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall THeaderItem::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

BSTR __fastcall THeaderItem::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall THeaderItem::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall THeaderItem::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall THeaderItem::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall THeaderItem::get_TextAlign(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TextAlign((long*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_TextAlign(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TextAlign(pVal/*[in]*/);
}

long __fastcall THeaderItem::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

long __fastcall THeaderItem::get_DataType(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_DataType((long*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_DataType(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_DataType(pVal/*[in]*/);
}

long __fastcall THeaderItem::get_SortType(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SortType((long*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_SortType(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SortType(pVal/*[in]*/);
}

long __fastcall THeaderItem::get_Index(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Index((long*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THeaderItem::get_Owner(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Owner((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall THeaderItem::get_Order(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Order((long*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_Order(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Order(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeaderItem::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeaderItem::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THeaderItem::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall THeaderItem::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall THeaderItem::set_OnBeginTrack(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginTrack(Param1/*[in]*/);
}

void __fastcall THeaderItem::set_OnTrack(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnTrack(Param1/*[in]*/);
}

void __fastcall THeaderItem::set_OnDividerDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDividerDblClick(Param1/*[in]*/);
}

void __fastcall THeaderItem::set_OnBeginDrag(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDrag(Param1/*[in]*/);
}

void __fastcall THeaderItem::set_OnEndDrag(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEndDrag(Param1/*[in]*/);
}

IHeaderPtr& THeader::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall THeader::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall THeader::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall THeader::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall THeader::BeforeDestruction()
{
  Disconnect();
}

void __fastcall THeader::ConnectTo(IHeaderPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall THeader::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Header;
  sd.IntfIID = __uuidof(IHeader);
  sd.EventIID= __uuidof(IHeaderEvents);
  ServerData = &sd;
}

void __fastcall THeader::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    case 19: {
      if (OnColumnClick1) {
        (OnColumnClick1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 20: {
      if (OnColumnResize1) {
        (OnColumnResize1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall THeader::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall THeader::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall THeader::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall THeader::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall THeader::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall THeader::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                   long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall THeader::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall THeader::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall THeader::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall THeader::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall THeader::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall THeader::Clear(void)
{
  GetDefaultInterface()->Clear();
}

LPDISPATCH __fastcall THeader::Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                   long TextAlign/*[in,def,opt]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Add(Text, Width, TextAlign, (LPDISPATCH*)&pItem));
  return pItem;
}

BSTR __fastcall THeader::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall THeader::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THeader::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall THeader::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeader::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THeader::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THeader::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall THeader::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall THeader::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall THeader::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall THeader::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall THeader::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall THeader::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall THeader::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THeader::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall THeader::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THeader::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall THeader::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THeader::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall THeader::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THeader::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall THeader::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall THeader::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeader::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall THeader::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeader::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall THeader::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeader::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall THeader::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeader::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THeader::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall THeader::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall THeader::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall THeader::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall THeader::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall THeader::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall THeader::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall THeader::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall THeader::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall THeader::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall THeader::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall THeader::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeader::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THeader::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THeader::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall THeader::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall THeader::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall THeader::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall THeader::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall THeader::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall THeader::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall THeader::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall THeader::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall THeader::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall THeader::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall THeader::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall THeader::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall THeader::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall THeader::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall THeader::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall THeader::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall THeader::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall THeader::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall THeader::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall THeader::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall THeader::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall THeader::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall THeader::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall THeader::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THeader::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall THeader::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPUNKNOWN __fastcall THeader::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall THeader::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall THeader::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

LPDISPATCH __fastcall THeader::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall THeader::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_HotTrack(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HotTrack((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_HotTrack(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HotTrack(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_Flat(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Flat((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_Flat(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flat(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THeader::get_DragDrop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DragDrop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THeader::set_DragDrop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DragDrop(pVal/*[in]*/);
}

void __fastcall THeader::set_OnColumnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnColumnClick(Param1/*[in]*/);
}

void __fastcall THeader::set_OnColumnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnColumnResize(Param1/*[in]*/);
}

IListSubItemPtr& TListSubItem::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListSubItem::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListSubItem::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListSubItem::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListSubItem::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListSubItem::ConnectTo(IListSubItemPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListSubItem::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListSubItem;
  sd.IntfIID = __uuidof(IListSubItem);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TListSubItem::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListSubItem::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall TListSubItem::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TListSubItem::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListSubItem::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListSubItem::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TListSubItem::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListSubItem::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListSubItem::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

IListItemPtr& TListItem::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListItem::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListItem::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListItem::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListItem::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListItem::ConnectTo(IListItemPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListItem::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListItem;
  sd.IntfIID = __uuidof(IListItem);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TListItem::SetPosition(unsigned_long Left/*[in]*/, unsigned_long Top/*[in]*/)
{
  GetDefaultInterface()->SetPosition(Left/*[in]*/, Top/*[in]*/);
}

BSTR __fastcall TListItem::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TListItem::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall TListItem::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListItem::get_Selected(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Selected((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Selected(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Selected(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListItem::get_Checked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Checked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Checked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Checked(pVal/*[in]*/);
}

BSTR __fastcall TListItem::get_SubItems(long Index/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_SubItems(Index, (BSTR*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_SubItems(long Index/*[in]*/, BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_SubItems(Index/*[in]*/, pVal/*[in]*/);
}

long __fastcall TListItem::get_SubItemImage(long Index/*[in]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SubItemImage(Index, (long*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_SubItemImage(long Index/*[in]*/, long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SubItemImage(Index/*[in]*/, pVal/*[in]*/);
}

long __fastcall TListItem::get_Index(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Index((long*)&pVal));
  return pVal;
}

VARIANT __fastcall TListItem::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TListItem::get_Hint(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Hint((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Hint(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

unsigned_long __fastcall TListItem::get_Group(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Group((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Group(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Group(pVal/*[in]*/);
}

long __fastcall TListItem::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TListItem::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListItem::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TListItem::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

unsigned_long __fastcall TListItem::get_TextBkColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TextBkColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListItem::set_TextBkColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TextBkColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListItem::get_SubItemsEx(long Index/*[in]*/)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SubItemsEx(Index, (LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListItem::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

IListViewColumnsPtr& TListViewColumns::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListViewColumns::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListViewColumns::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListViewColumns::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListViewColumns::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListViewColumns::ConnectTo(IListViewColumnsPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListViewColumns::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListViewColumns;
  sd.IntfIID = __uuidof(IListViewColumns);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TListViewColumns::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TListViewColumns::Clear(void)
{
  GetDefaultInterface()->Clear();
}

LPDISPATCH __fastcall TListViewColumns::Add(BSTR Text/*[in]*/, long Width/*[in,def,opt]*/, 
                                            long TextAlign/*[in,def,opt]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Add(Text, Width, TextAlign, (LPDISPATCH*)&pItem));
  return pItem;
}

LPUNKNOWN __fastcall TListViewColumns::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TListViewColumns::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TListViewColumns::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

VARIANT_BOOL __fastcall TListViewColumns::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListViewColumns::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListViewColumns::get_Flat(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Flat((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListViewColumns::set_Flat(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flat(pVal/*[in]*/);
}

IWorkAreaPtr& TWorkArea::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TWorkArea::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TWorkArea::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TWorkArea::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TWorkArea::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TWorkArea::ConnectTo(IWorkAreaPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TWorkArea::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_WorkArea;
  sd.IntfIID = __uuidof(IWorkArea);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

long __fastcall TWorkArea::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TWorkArea::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TWorkArea::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TWorkArea::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TWorkArea::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TWorkArea::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TWorkArea::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TWorkArea::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

IWorkAreasPtr& TWorkAreas::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TWorkAreas::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TWorkAreas::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TWorkAreas::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TWorkAreas::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TWorkAreas::ConnectTo(IWorkAreasPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TWorkAreas::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_WorkAreas;
  sd.IntfIID = __uuidof(IWorkAreas);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TWorkAreas::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TWorkAreas::Clear(void)
{
  GetDefaultInterface()->Clear();
}

LPDISPATCH __fastcall TWorkAreas::Add(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                      long Height/*[in]*/)
{
  LPDISPATCH Item;
  OLECHECK(GetDefaultInterface()->Add(Left, Top, Width, Height, (LPDISPATCH*)&Item));
  return Item;
}

LPUNKNOWN __fastcall TWorkAreas::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TWorkAreas::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TWorkAreas::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

IListViewGroupPtr& TListViewGroup::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListViewGroup::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListViewGroup::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListViewGroup::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListViewGroup::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListViewGroup::ConnectTo(IListViewGroupPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListViewGroup::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListViewGroup;
  sd.IntfIID = __uuidof(IListViewGroup);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TListViewGroup::get_Header(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Header((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_Header(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Header(pVal/*[in]*/);
}

BSTR __fastcall TListViewGroup::get_SubTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_SubTitle((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_SubTitle(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_SubTitle(pVal/*[in]*/);
}

BSTR __fastcall TListViewGroup::get_Task(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Task((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_Task(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Task(pVal/*[in]*/);
}

BSTR __fastcall TListViewGroup::get_DescriptionTop(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_DescriptionTop((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_DescriptionTop(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_DescriptionTop(pVal/*[in]*/);
}

BSTR __fastcall TListViewGroup::get_DescriptionBottom(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_DescriptionBottom((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_DescriptionBottom(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_DescriptionBottom(pVal/*[in]*/);
}

BSTR __fastcall TListViewGroup::get_SubsetTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_SubsetTitle((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_SubsetTitle(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_SubsetTitle(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListViewGroup::get_Subseted(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Subseted((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_Subseted(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Subseted(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListViewGroup::get_NoHeader(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoHeader((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_NoHeader(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoHeader(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListViewGroup::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListViewGroup::get_Expanded(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Expanded((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_Expanded(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Expanded(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListViewGroup::get_Collapsible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Collapsible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_Collapsible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Collapsible(pVal/*[in]*/);
}

long __fastcall TListViewGroup::get_HeaderAlign(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_HeaderAlign((long*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_HeaderAlign(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_HeaderAlign(pVal/*[in]*/);
}

long __fastcall TListViewGroup::get_TitleImage(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TitleImage((long*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_TitleImage(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TitleImage(pVal/*[in]*/);
}

long __fastcall TListViewGroup::get_ExtendedImage(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedImage((long*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_ExtendedImage(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ExtendedImage(pVal/*[in]*/);
}

BSTR __fastcall TListViewGroup::get_Footer(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Footer((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_Footer(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Footer(pVal/*[in]*/);
}

long __fastcall TListViewGroup::get_FooterAlign(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_FooterAlign((long*)&pVal));
  return pVal;
}

void __fastcall TListViewGroup::set_FooterAlign(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_FooterAlign(pVal/*[in]*/);
}

IListViewGroupsPtr& TListViewGroups::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListViewGroups::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListViewGroups::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListViewGroups::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListViewGroups::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListViewGroups::ConnectTo(IListViewGroupsPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListViewGroups::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListViewGroups;
  sd.IntfIID = __uuidof(IListViewGroups);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TListViewGroups::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TListViewGroups::Clear(void)
{
  GetDefaultInterface()->Clear();
}

LPDISPATCH __fastcall TListViewGroups::Add(BSTR Name/*[in]*/)
{
  LPDISPATCH Item;
  OLECHECK(GetDefaultInterface()->Add(Name, (LPDISPATCH*)&Item));
  return Item;
}

LPUNKNOWN __fastcall TListViewGroups::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TListViewGroups::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TListViewGroups::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

IListViewPtr& TListView::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TListView::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TListView::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TListView::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TListView::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TListView::ConnectTo(IListViewPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TListView::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ListView;
  sd.IntfIID = __uuidof(IListView);
  sd.EventIID= __uuidof(IListViewEvents);
  ServerData = &sd;
}

void __fastcall TListView::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    case 19: {
      if (OnColumnClick1) {
        (OnColumnClick1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 20: {
      if (OnColumnResize1) {
        (OnColumnResize1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 21: {
      if (OnData1) {
        (OnData1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 22: {
      if (OnItemCheck1) {
        (OnItemCheck1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 23: {
      if (OnEdited1) {
        (OnEdited1)(this, params[0].pdispVal, params[1].pdispVal, (Wsolib_tlb::IResultPtr)(LPDISPATCH)(params[2].pdispVal));
      }
      break;
      }
    case 24: {
      if (OnBeginEdit1) {
        (OnBeginEdit1)(this, params[0].pdispVal, params[1].pdispVal, (Wsolib_tlb::IResultPtr)(LPDISPATCH)(params[2].pdispVal));
      }
      break;
      }
    case 25: {
      if (OnGroupLinkClick1) {
        (OnGroupLinkClick1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 26: {
      if (OnDrawItem1) {
        (OnDrawItem1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 27: {
      if (OnSubItemEdited1) {
        (OnSubItemEdited1)(this, params[0].pdispVal, params[1].pdispVal, params[2], (Wsolib_tlb::IResultPtr)(LPDISPATCH)(params[3].pdispVal));
      }
      break;
      }
    case 28: {
      if (OnBeginSubItemEdit1) {
        (OnBeginSubItemEdit1)(this, params[0].pdispVal, params[1].pdispVal, params[2], (Wsolib_tlb::IResultPtr)(LPDISPATCH)(params[3].pdispVal));
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TListView::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TListView::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TListView::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TListView::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TListView::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TListView::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TListView::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TListView::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TListView::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TListView::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TListView::Add(BSTR Text/*[in]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Add(Text, (LPDISPATCH*)&pItem));
  return pItem;
}

LPDISPATCH __fastcall TListView::Insert(long Index/*[in]*/, BSTR Text/*[in]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Insert(Index, Text, (LPDISPATCH*)&pItem));
  return pItem;
}

void __fastcall TListView::Remove(long Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TListView::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TListView::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TListView::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

void __fastcall TListView::SelectAll(void)
{
  GetDefaultInterface()->SelectAll();
}

void __fastcall TListView::ClearSelection(void)
{
  GetDefaultInterface()->ClearSelection();
}

void __fastcall TListView::EditItem(long Index/*[in]*/)
{
  GetDefaultInterface()->EditItem(Index/*[in]*/);
}

void __fastcall TListView::Sort(long DataType/*[in,def,opt]*/, VARIANT_BOOL Reverse/*[in,def,opt]*/, 
                                unsigned_long Column/*[in,def,opt]*/)
{
  GetDefaultInterface()->Sort(DataType/*[in,def,opt]*/, Reverse/*[in,def,opt]*/, 
                              Column/*[in,def,opt]*/);
}

void __fastcall TListView::Arrange(void)
{
  GetDefaultInterface()->Arrange();
}

BSTR __fastcall TListView::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TListView::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListView::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TListView::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListView::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListView::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TListView::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TListView::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TListView::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TListView::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TListView::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TListView::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TListView::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListView::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TListView::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListView::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TListView::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListView::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TListView::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListView::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TListView::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TListView::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TListView::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TListView::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TListView::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TListView::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TListView::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TListView::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TListView::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TListView::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TListView::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TListView::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TListView::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TListView::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListView::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TListView::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TListView::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TListView::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TListView::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TListView::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TListView::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TListView::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TListView::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TListView::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TListView::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TListView::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TListView::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TListView::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TListView::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TListView::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TListView::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TListView::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TListView::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TListView::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TListView::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TListView::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TListView::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TListView::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListView::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TListView::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TListView::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TListView::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TListView::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

void __fastcall TListView::set_Count(long pcount/*[in]*/)
{
  GetDefaultInterface()->set_Count(pcount/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_LargeImages(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_LargeImages((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_LargeImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_LargeImages(pVal/*[in]*/);
}

void __fastcall TListView::_set_LargeImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_LargeImages(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_SmallImages(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SmallImages((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_SmallImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_SmallImages(pVal/*[in]*/);
}

void __fastcall TListView::_set_SmallImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_SmallImages(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_StateImages(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_StateImages((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_StateImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_StateImages(pVal/*[in]*/);
}

void __fastcall TListView::_set_StateImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_StateImages(pVal/*[in]*/);
}

long __fastcall TListView::get_Style(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Style((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Style(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Style(pVal/*[in]*/);
}

unsigned_long __fastcall TListView::get_TextBkColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TextBkColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_TextBkColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TextBkColor(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_MultiSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MultiSelect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_MultiSelect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MultiSelect(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_HideSelection(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HideSelection((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_HideSelection(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HideSelection(pVal/*[in]*/);
}

long __fastcall TListView::get_SelCount(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelCount((long*)&pVal));
  return pVal;
}

long __fastcall TListView::get_ItemIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ItemIndex((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ItemIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ItemIndex(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_Columns(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Columns((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TListView::get_CheckBoxes(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CheckBoxes((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_CheckBoxes(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CheckBoxes(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_GridLines(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GridLines((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_GridLines(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GridLines(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_HotTrack(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HotTrack((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_HotTrack(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HotTrack(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_RowSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_RowSelect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_RowSelect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_RowSelect(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_BorderSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderSelect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_BorderSelect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderSelect(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_FlatScrollBars(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FlatScrollBars((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_FlatScrollBars(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FlatScrollBars(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_OwnerData(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_OwnerData((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_OwnerData(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_OwnerData(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_ReadOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ReadOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ReadOnly(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ReadOnly(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_WrapText(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_WrapText((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_WrapText(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_WrapText(pVal/*[in]*/);
}

long __fastcall TListView::get_Arrangement(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Arrangement((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_Arrangement(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Arrangement(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_HeaderDragDrop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HeaderDragDrop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_HeaderDragDrop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HeaderDragDrop(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_InfoTip(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_InfoTip((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_InfoTip(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_InfoTip(pVal/*[in]*/);
}

void __fastcall TListView::set_BackgroundImage(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_BackgroundImage(Param1/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_WorkAreas(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_WorkAreas((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TListView::get_Groups(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Groups((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TListView::get_TileLines(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TileLines((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_TileLines(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TileLines(pVal/*[in]*/);
}

unsigned_long __fastcall TListView::get_TileWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TileWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_TileWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TileWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TListView::get_TileHeight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TileHeight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_TileHeight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TileHeight(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_DoubleBuffering(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DoubleBuffering((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_DoubleBuffering(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DoubleBuffering(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_TransparentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TransparentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_TransparentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TransparentBackground(pVal/*[in]*/);
}

LPDISPATCH __fastcall TListView::get_GroupHeaderImages(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GroupHeaderImages((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TListView::set_GroupHeaderImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupHeaderImages(pVal/*[in]*/);
}

void __fastcall TListView::_set_GroupHeaderImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GroupHeaderImages(pVal/*[in]*/);
}

long __fastcall TListView::get_IconSpacingWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_IconSpacingWidth((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_IconSpacingWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_IconSpacingWidth(pVal/*[in]*/);
}

long __fastcall TListView::get_IconSpacingHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_IconSpacingHeight((long*)&pVal));
  return pVal;
}

void __fastcall TListView::set_IconSpacingHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_IconSpacingHeight(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_CustomDraw(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CustomDraw((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_CustomDraw(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CustomDraw(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_ReadOnlySubItems(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ReadOnlySubItems((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_ReadOnlySubItems(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ReadOnlySubItems(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_QuickEdit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_QuickEdit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_QuickEdit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_QuickEdit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TListView::get_CheckByMouse(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CheckByMouse((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TListView::set_CheckByMouse(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CheckByMouse(pVal/*[in]*/);
}

void __fastcall TListView::set_OnColumnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnColumnClick(Param1/*[in]*/);
}

void __fastcall TListView::set_OnColumnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnColumnResize(Param1/*[in]*/);
}

void __fastcall TListView::set_OnData(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnData(Param1/*[in]*/);
}

void __fastcall TListView::set_OnItemCheck(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnItemCheck(Param1/*[in]*/);
}

void __fastcall TListView::set_OnEdited(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEdited(Param1/*[in]*/);
}

void __fastcall TListView::set_OnBeginEdit(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginEdit(Param1/*[in]*/);
}

void __fastcall TListView::set_OnGroupLinkClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnGroupLinkClick(Param1/*[in]*/);
}

void __fastcall TListView::set_OnDrawItem(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDrawItem(Param1/*[in]*/);
}

void __fastcall TListView::set_OnSubItemEdited(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSubItemEdited(Param1/*[in]*/);
}

void __fastcall TListView::set_OnBeginSubItemEdit(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginSubItemEdit(Param1/*[in]*/);
}

ITreeItemPtr& TTreeItem::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTreeItem::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTreeItem::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTreeItem::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTreeItem::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTreeItem::ConnectTo(ITreeItemPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTreeItem::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_TreeItem;
  sd.IntfIID = __uuidof(ITreeItem);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

LPDISPATCH __fastcall TTreeItem::Add(BSTR Text/*[in]*/, long ImageIndex/*[in,def,opt]*/, 
                                     long SelectedImageIndex/*[in,def,opt]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Add(Text, ImageIndex, SelectedImageIndex, (LPDISPATCH*)&pItem));
  return pItem;
}

LPDISPATCH __fastcall TTreeItem::Insert(long Index/*[in]*/, BSTR Text/*[in]*/, 
                                        long ImageIndex/*[in,def,opt]*/, 
                                        long SelectedImageIndex/*[in,def,opt]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Insert(Index, Text, ImageIndex, SelectedImageIndex, (LPDISPATCH*)&pItem));
  return pItem;
}

void __fastcall TTreeItem::Remove(long Index/*[in,def,opt]*/)
{
  GetDefaultInterface()->Remove(Index/*[in,def,opt]*/);
}

void __fastcall TTreeItem::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TTreeItem::Expand(VARIANT_BOOL Recurse/*[in,def,opt]*/)
{
  GetDefaultInterface()->Expand(Recurse/*[in,def,opt]*/);
}

void __fastcall TTreeItem::Collapse(void)
{
  GetDefaultInterface()->Collapse();
}

void __fastcall TTreeItem::EditLabel(void)
{
  GetDefaultInterface()->EditLabel();
}

void __fastcall TTreeItem::Sort(VARIANT_BOOL Recurse/*[in,def,opt]*/)
{
  GetDefaultInterface()->Sort(Recurse/*[in,def,opt]*/);
}

void __fastcall TTreeItem::MakeVisible(void)
{
  GetDefaultInterface()->MakeVisible();
}

void __fastcall TTreeItem::ShowHint(void)
{
  GetDefaultInterface()->ShowHint();
}

LPUNKNOWN __fastcall TTreeItem::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TTreeItem::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TTreeItem::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

BSTR __fastcall TTreeItem::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall TTreeItem::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

long __fastcall TTreeItem::get_SelectedImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelectedImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_SelectedImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelectedImageIndex(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeItem::get_Selected(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Selected((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_Selected(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Selected(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeItem::get_Expanded(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Expanded((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_Expanded(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Expanded(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeItem::get_Bold(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Bold((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_Bold(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bold(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeItem::get_Checked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Checked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_Checked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Checked(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeItem::get_HasChildren(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HasChildren((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeItem::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeItem::get_NextSibling(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_NextSibling((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeItem::get_PrevSibling(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PrevSibling((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeItem::get_FirstChild(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_FirstChild((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeItem::get_LastChild(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_LastChild((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT __fastcall TTreeItem::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TTreeItem::get_Hint(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Hint((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_Hint(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeItem::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TTreeItem::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

unsigned_long __fastcall TTreeItem::get_TextBkColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TextBkColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTreeItem::set_TextBkColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TextBkColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeItem::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

ITreeViewPtr& TTreeView::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTreeView::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTreeView::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTreeView::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTreeView::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTreeView::ConnectTo(ITreeViewPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTreeView::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_TreeView;
  sd.IntfIID = __uuidof(ITreeView);
  sd.EventIID= __uuidof(ITreeViewEvents);
  ServerData = &sd;
}

void __fastcall TTreeView::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    case 19: {
      if (OnEdited1) {
        (OnEdited1)(this, params[0].pdispVal, params[1].pdispVal, (Wsolib_tlb::IResultPtr)(LPDISPATCH)(params[2].pdispVal));
      }
      break;
      }
    case 20: {
      if (OnExpanding1) {
        (OnExpanding1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 21: {
      if (OnExpanded1) {
        (OnExpanded1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 22: {
      if (OnCollapsing1) {
        (OnCollapsing1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 23: {
      if (OnCollapsed1) {
        (OnCollapsed1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 24: {
      if (OnItemCheck1) {
        (OnItemCheck1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 25: {
      if (OnBeginEdit1) {
        (OnBeginEdit1)(this, params[0].pdispVal, params[1].pdispVal, (Wsolib_tlb::IResultPtr)(LPDISPATCH)(params[2].pdispVal));
      }
      break;
      }
    case 26: {
      if (OnDrawItem1) {
        (OnDrawItem1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TTreeView::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTreeView::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTreeView::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TTreeView::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TTreeView::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TTreeView::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TTreeView::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TTreeView::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TTreeView::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TTreeView::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TTreeView::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TTreeView::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

BSTR __fastcall TTreeView::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TTreeView::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TTreeView::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeView::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeView::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TTreeView::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TTreeView::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TTreeView::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TTreeView::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TTreeView::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TTreeView::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TTreeView::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTreeView::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTreeView::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTreeView::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTreeView::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TTreeView::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TTreeView::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TTreeView::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TTreeView::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TTreeView::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TTreeView::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TTreeView::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TTreeView::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TTreeView::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TTreeView::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TTreeView::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TTreeView::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TTreeView::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeView::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TTreeView::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeView::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TTreeView::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_Items(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Items((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeView::get_SelectedItem(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SelectedItem((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTreeView::get_TopItem(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_TopItem((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TTreeView::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

LPDISPATCH __fastcall TTreeView::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TTreeView::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTreeView::get_StateImages(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_StateImages((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_StateImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_StateImages(pVal/*[in]*/);
}

void __fastcall TTreeView::_set_StateImages(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_StateImages(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_HasButtons(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HasButtons((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_HasButtons(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HasButtons(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_HasLines(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HasLines((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_HasLines(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HasLines(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_LinesAtRoot(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_LinesAtRoot((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_LinesAtRoot(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_LinesAtRoot(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_ReadOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ReadOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_ReadOnly(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ReadOnly(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_CheckBoxes(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CheckBoxes((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_CheckBoxes(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CheckBoxes(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_HotTrack(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HotTrack((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_HotTrack(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HotTrack(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_RowSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_RowSelect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_RowSelect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_RowSelect(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_HideSelection(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HideSelection((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_HideSelection(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HideSelection(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_AutoExpand(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoExpand((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_AutoExpand(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoExpand(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_InfoTip(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_InfoTip((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_InfoTip(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_InfoTip(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_CustomDraw(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CustomDraw((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_CustomDraw(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CustomDraw(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_DoubleBuffering(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DoubleBuffering((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_DoubleBuffering(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DoubleBuffering(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_NoIndentState(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoIndentState((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_NoIndentState(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoIndentState(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTreeView::get_AutoHScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoHScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTreeView::set_AutoHScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoHScroll(pVal/*[in]*/);
}

void __fastcall TTreeView::set_OnEdited(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEdited(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnExpanding(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnExpanding(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnExpanded(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnExpanded(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnCollapsing(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnCollapsing(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnCollapsed(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnCollapsed(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnItemCheck(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnItemCheck(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnBeginEdit(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginEdit(Param1/*[in]*/);
}

void __fastcall TTreeView::set_OnDrawItem(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDrawItem(Param1/*[in]*/);
}

IParagraphPtr& TParagraph::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TParagraph::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TParagraph::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TParagraph::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TParagraph::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TParagraph::ConnectTo(IParagraphPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TParagraph::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Paragraph;
  sd.IntfIID = __uuidof(IParagraph);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

unsigned_short __fastcall TParagraph::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TParagraph::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TParagraph::get_Numbering(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Numbering((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TParagraph::set_Numbering(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Numbering(pVal/*[in]*/);
}

long __fastcall TParagraph::get_StartIndent(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_StartIndent((long*)&pVal));
  return pVal;
}

void __fastcall TParagraph::set_StartIndent(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_StartIndent(pVal/*[in]*/);
}

long __fastcall TParagraph::get_LeftIndent(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_LeftIndent((long*)&pVal));
  return pVal;
}

void __fastcall TParagraph::set_LeftIndent(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_LeftIndent(pVal/*[in]*/);
}

long __fastcall TParagraph::get_RightIndent(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_RightIndent((long*)&pVal));
  return pVal;
}

void __fastcall TParagraph::set_RightIndent(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_RightIndent(pVal/*[in]*/);
}

IRichEditPtr& TRichEdit::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TRichEdit::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TRichEdit::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TRichEdit::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TRichEdit::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TRichEdit::ConnectTo(IRichEditPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TRichEdit::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_RichEdit;
  sd.IntfIID = __uuidof(IRichEdit);
  sd.EventIID= __uuidof(IRichEditEvents);
  ServerData = &sd;
}

void __fastcall TRichEdit::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    case 19: {
      if (OnSelChange1) {
        (OnSelChange1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TRichEdit::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TRichEdit::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TRichEdit::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TRichEdit::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TRichEdit::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TRichEdit::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TRichEdit::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TRichEdit::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TRichEdit::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TRichEdit::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

long __fastcall TRichEdit::Add(BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Add(Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TRichEdit::Remove(long Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

long __fastcall TRichEdit::Insert(long Index/*[in]*/, BSTR Item/*[in]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Insert(Index, Item, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TRichEdit::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TRichEdit::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TRichEdit::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

void __fastcall TRichEdit::ExChange(long A/*[in]*/, long B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

void __fastcall TRichEdit::Sort(long DataType/*[in,def,opt]*/, VARIANT_BOOL Reverse/*[in,def,opt]*/)
{
  GetDefaultInterface()->Sort(DataType/*[in,def,opt]*/, Reverse/*[in,def,opt]*/);
}

long __fastcall TRichEdit::Find(BSTR Text/*[in]*/, long Start/*[in,def,opt]*/, 
                                VARIANT_BOOL IgnoreCase/*[in,def,opt]*/)
{
  long pItemIndex;
  OLECHECK(GetDefaultInterface()->Find(Text, Start, IgnoreCase, (long*)&pItemIndex));
  return pItemIndex;
}

void __fastcall TRichEdit::SelectAll(void)
{
  GetDefaultInterface()->SelectAll();
}

void __fastcall TRichEdit::ClearSelection(void)
{
  GetDefaultInterface()->ClearSelection();
}

void __fastcall TRichEdit::ReplaceSelection(BSTR NewText/*[in]*/, 
                                            VARIANT_BOOL CanUndo/*[in,def,opt]*/)
{
  GetDefaultInterface()->ReplaceSelection(NewText/*[in]*/, CanUndo/*[in,def,opt]*/);
}

void __fastcall TRichEdit::Undo(void)
{
  GetDefaultInterface()->Undo();
}

void __fastcall TRichEdit::Cut(void)
{
  GetDefaultInterface()->Cut();
}

void __fastcall TRichEdit::Copy(void)
{
  GetDefaultInterface()->Copy();
}

void __fastcall TRichEdit::Paste(void)
{
  GetDefaultInterface()->Paste();
}

long __fastcall TRichEdit::FindText(BSTR Text/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                                    long MinPos/*[in,def,opt]*/, long MaxPos/*[in,def,opt]*/)
{
  long pResult;
  OLECHECK(GetDefaultInterface()->FindText(Text, Flags, MinPos, MaxPos, (long*)&pResult));
  return pResult;
}

VARIANT_BOOL __fastcall TRichEdit::Load(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->Load(Stream, Flags, (VARIANT_BOOL*)&pResult));
  return pResult;
}

VARIANT_BOOL __fastcall TRichEdit::Save(VARIANT Stream/*[in]*/, unsigned_long Flags/*[in,def,opt]*/)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->Save(Stream, Flags, (VARIANT_BOOL*)&pResult));
  return pResult;
}

void __fastcall TRichEdit::Redo(void)
{
  GetDefaultInterface()->Redo();
}

void __fastcall TRichEdit::Print(BSTR Driver/*[in]*/, BSTR Device/*[in]*/, 
                                 LPDISPATCH PrintInfo/*[in]*/, 
                                 VARIANT_BOOL Selection/*[in,def,opt]*/)
{
  GetDefaultInterface()->Print(Driver/*[in]*/, Device/*[in]*/, PrintInfo/*[in]*/, 
                               Selection/*[in,def,opt]*/);
}

BSTR __fastcall TRichEdit::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TRichEdit::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TRichEdit::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRichEdit::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRichEdit::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TRichEdit::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TRichEdit::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TRichEdit::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TRichEdit::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TRichEdit::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TRichEdit::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TRichEdit::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TRichEdit::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TRichEdit::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TRichEdit::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TRichEdit::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TRichEdit::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRichEdit::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TRichEdit::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TRichEdit::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRichEdit::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TRichEdit::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_TopIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TopIndex((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_TopIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TopIndex(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TRichEdit::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

BSTR __fastcall TRichEdit::get_Item(long Index/*[in]*/)
{
  BSTR pvar = 0;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (BSTR*)&pvar));
  return pvar;
}

void __fastcall TRichEdit::set_Item(long Index/*[in]*/, BSTR pvar/*[in]*/)
{
  GetDefaultInterface()->set_Item(Index/*[in]*/, pvar/*[in]*/);
}

long __fastcall TRichEdit::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

VARIANT_BOOL __fastcall TRichEdit::get_ReadOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ReadOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ReadOnly(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ReadOnly(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_MaxLength(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_MaxLength((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_MaxLength(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxLength(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_CharCase(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_CharCase((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_CharCase(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_CharCase(pVal/*[in]*/);
}

BSTR __fastcall TRichEdit::get_PasswordChar(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_PasswordChar((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_PasswordChar(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_PasswordChar(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_HideSelection(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HideSelection((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_HideSelection(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HideSelection(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_MultiLine(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MultiLine((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_MultiLine(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MultiLine(pVal/*[in]*/);
}

unsigned_long __fastcall TRichEdit::get_ScrollBars(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ScrollBars((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_ScrollBars(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ScrollBars(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_AutoSize(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSize((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_AutoSize(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSize(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_Modified(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Modified((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Modified(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Modified(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_SelStart(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelStart((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_SelStart(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelStart(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_SelEnd(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelEnd((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_SelEnd(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelEnd(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_SelLength(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelLength((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_SelLength(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelLength(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_LeftMargin(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_LeftMargin((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_LeftMargin(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_LeftMargin(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_RightMargin(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_RightMargin((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_RightMargin(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_RightMargin(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_WordWrap(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_WordWrap((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_WordWrap(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_WordWrap(pVal/*[in]*/);
}

unsigned_short __fastcall TRichEdit::get_TextAlign(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_TextAlign((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_TextAlign(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_TextAlign(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_CanUndo(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanUndo((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_CanUndo(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CanUndo(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_CanPaste(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanPaste((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TRichEdit::get_DataType(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_DataType((long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_DataType(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_DataType(pVal/*[in]*/);
}

VARIANT __fastcall TRichEdit::get_Min(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Min((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Min(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Min(pVal/*[in]*/);
}

VARIANT __fastcall TRichEdit::get_Max(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Max((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_Max(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Max(pVal/*[in]*/);
}

long __fastcall TRichEdit::get_LineFromChar(long Index/*[in,def,opt]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_LineFromChar(Index, (long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TRichEdit::get_AcceptsReturn(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AcceptsReturn((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_AcceptsReturn(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AcceptsReturn(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_AcceptsTab(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AcceptsTab((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_AcceptsTab(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AcceptsTab(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_AutoHeight(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoHeight((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_AutoHeight(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoHeight(pVal/*[in]*/);
}

BSTR __fastcall TRichEdit::get_CueBanner(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_CueBanner((BSTR*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_CueBanner(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_CueBanner(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_CueBannerAlwaysVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CueBannerAlwaysVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_CueBannerAlwaysVisible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CueBannerAlwaysVisible(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_BalloonTip(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_BalloonTip((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TRichEdit::get_SelFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SelFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_SelFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelFont(pVal/*[in]*/);
}

void __fastcall TRichEdit::_set_SelFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_SelFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TRichEdit::get_Paragraph(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Paragraph((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TRichEdit::get_AutoURLDetect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoURLDetect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_AutoURLDetect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoURLDetect(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TRichEdit::get_CanRedo(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanRedo((VARIANT_BOOL*)&pVal));
  return pVal;
}

unsigned_long __fastcall TRichEdit::get_UndoLimit(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_UndoLimit((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_UndoLimit(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_UndoLimit(pVal/*[in]*/);
}

void __fastcall TRichEdit::set_OnSelChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSelChange(Param1/*[in]*/);
}

unsigned_long __fastcall TRichEdit::get_PageRotate(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_PageRotate((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TRichEdit::set_PageRotate(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_PageRotate(pVal/*[in]*/);
}

unsigned_long __fastcall TRichEdit::get_UndoName(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_UndoName((unsigned_long*)&pVal));
  return pVal;
}

BSTR __fastcall TRichEdit::get_UndoNameString(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_UndoNameString((BSTR*)&pVal));
  return pVal;
}

IUpDownPtr& TUpDown::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TUpDown::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TUpDown::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TUpDown::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TUpDown::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TUpDown::ConnectTo(IUpDownPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TUpDown::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_UpDown;
  sd.IntfIID = __uuidof(IUpDown);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TUpDown::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TUpDown::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TUpDown::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TUpDown::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TUpDown::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TUpDown::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TUpDown::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                   long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TUpDown::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TUpDown::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TUpDown::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TUpDown::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TUpDown::StepIt(void)
{
  GetDefaultInterface()->StepIt();
}

void __fastcall TUpDown::StepBy(long Delta/*[in]*/)
{
  GetDefaultInterface()->StepBy(Delta/*[in]*/);
}

BSTR __fastcall TUpDown::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TUpDown::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TUpDown::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TUpDown::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TUpDown::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TUpDown::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TUpDown::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TUpDown::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TUpDown::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TUpDown::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TUpDown::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TUpDown::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TUpDown::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TUpDown::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TUpDown::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TUpDown::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TUpDown::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TUpDown::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TUpDown::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TUpDown::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TUpDown::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TUpDown::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TUpDown::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TUpDown::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TUpDown::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TUpDown::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TUpDown::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TUpDown::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TUpDown::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TUpDown::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TUpDown::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TUpDown::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TUpDown::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TUpDown::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TUpDown::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TUpDown::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Min(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Min((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Min(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Min(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Max(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Max((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Max(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Max(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Position(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Position((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Position(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Position(pVal/*[in]*/);
}

long __fastcall TUpDown::get_Step(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Step((long*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Step(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Step(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUpDown::get_HotTrack(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HotTrack((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TUpDown::set_HotTrack(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HotTrack(pVal/*[in]*/);
}

ITrackBarPtr& TTrackBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTrackBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTrackBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTrackBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTrackBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTrackBar::ConnectTo(ITrackBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTrackBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_TrackBar;
  sd.IntfIID = __uuidof(ITrackBar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TTrackBar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TTrackBar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTrackBar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTrackBar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TTrackBar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TTrackBar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TTrackBar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TTrackBar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TTrackBar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TTrackBar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TTrackBar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TTrackBar::StepIt(void)
{
  GetDefaultInterface()->StepIt();
}

void __fastcall TTrackBar::StepBy(long Delta/*[in]*/)
{
  GetDefaultInterface()->StepBy(Delta/*[in]*/);
}

void __fastcall TTrackBar::SelectAll(void)
{
  GetDefaultInterface()->SelectAll();
}

void __fastcall TTrackBar::ClearSelection(void)
{
  GetDefaultInterface()->ClearSelection();
}

BSTR __fastcall TTrackBar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TTrackBar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TTrackBar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrackBar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTrackBar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTrackBar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TTrackBar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TTrackBar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTrackBar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTrackBar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TTrackBar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TTrackBar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TTrackBar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrackBar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TTrackBar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrackBar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TTrackBar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrackBar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TTrackBar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrackBar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TTrackBar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TTrackBar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TTrackBar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TTrackBar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TTrackBar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TTrackBar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TTrackBar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrackBar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTrackBar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TTrackBar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TTrackBar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrackBar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TTrackBar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TTrackBar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Min(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Min((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Min(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Min(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Max(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Max((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Max(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Max(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Position(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Position((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Position(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Position(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_Step(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Step((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Step(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Step(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_TickMarks(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TickMarks((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_TickMarks(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TickMarks(pVal/*[in]*/);
}

unsigned_long __fastcall TTrackBar::get_SmallChange(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_SmallChange((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_SmallChange(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SmallChange(pVal/*[in]*/);
}

unsigned_long __fastcall TTrackBar::get_LargeChange(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_LargeChange((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_LargeChange(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_LargeChange(pVal/*[in]*/);
}

unsigned_long __fastcall TTrackBar::get_ThumbLength(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ThumbLength((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_ThumbLength(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThumbLength(pVal/*[in]*/);
}

unsigned_long __fastcall TTrackBar::get_TickFrequency(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TickFrequency((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_TickFrequency(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TickFrequency(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrackBar::get_EnableSelRange(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_EnableSelRange((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_EnableSelRange(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_EnableSelRange(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_SelStart(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelStart((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_SelStart(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelStart(pVal/*[in]*/);
}

long __fastcall TTrackBar::get_SelEnd(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelEnd((long*)&pVal));
  return pVal;
}

void __fastcall TTrackBar::set_SelEnd(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelEnd(pVal/*[in]*/);
}

IHotKeyPtr& THotKey::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall THotKey::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall THotKey::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall THotKey::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall THotKey::BeforeDestruction()
{
  Disconnect();
}

void __fastcall THotKey::ConnectTo(IHotKeyPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall THotKey::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_HotKey;
  sd.IntfIID = __uuidof(IHotKey);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall THotKey::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall THotKey::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall THotKey::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall THotKey::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall THotKey::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall THotKey::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall THotKey::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                   long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall THotKey::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall THotKey::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall THotKey::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall THotKey::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall THotKey::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall THotKey::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall THotKey::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall THotKey::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THotKey::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THotKey::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall THotKey::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall THotKey::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall THotKey::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall THotKey::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall THotKey::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall THotKey::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall THotKey::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall THotKey::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall THotKey::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall THotKey::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall THotKey::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall THotKey::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall THotKey::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall THotKey::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall THotKey::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall THotKey::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall THotKey::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall THotKey::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall THotKey::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall THotKey::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall THotKey::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall THotKey::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall THotKey::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall THotKey::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall THotKey::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall THotKey::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall THotKey::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall THotKey::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall THotKey::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THotKey::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall THotKey::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall THotKey::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THotKey::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall THotKey::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall THotKey::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall THotKey::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

VARIANT __fastcall THotKey::get_Key(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Key((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_Key(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Key(pVal/*[in]*/);
}

long __fastcall THotKey::get_InvalidKeys(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_InvalidKeys((long*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_InvalidKeys(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_InvalidKeys(pVal/*[in]*/);
}

VARIANT __fastcall THotKey::get_DefaultKey(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_DefaultKey((VARIANT*)&pVal));
  return pVal;
}

void __fastcall THotKey::set_DefaultKey(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_DefaultKey(pVal/*[in]*/);
}

IAnimatePtr& TAnimate::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TAnimate::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TAnimate::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TAnimate::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TAnimate::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TAnimate::ConnectTo(IAnimatePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TAnimate::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Animate;
  sd.IntfIID = __uuidof(IAnimate);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TAnimate::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TAnimate::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TAnimate::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TAnimate::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TAnimate::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TAnimate::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TAnimate::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                    long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TAnimate::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TAnimate::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TAnimate::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TAnimate::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

VARIANT_BOOL __fastcall TAnimate::Open(VARIANT newVal/*[in]*/, 
                                       VARIANT_BOOL StartPlay/*[in,def,opt]*/)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->Open(newVal, StartPlay, (VARIANT_BOOL*)&pResult));
  return pResult;
}

void __fastcall TAnimate::Play(void)
{
  GetDefaultInterface()->Play();
}

void __fastcall TAnimate::Stop(void)
{
  GetDefaultInterface()->Stop();
}

void __fastcall TAnimate::Close(void)
{
  GetDefaultInterface()->Close();
}

void __fastcall TAnimate::Seek(long Position/*[in]*/)
{
  GetDefaultInterface()->Seek(Position/*[in]*/);
}

BSTR __fastcall TAnimate::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TAnimate::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TAnimate::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAnimate::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TAnimate::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TAnimate::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TAnimate::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TAnimate::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TAnimate::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TAnimate::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TAnimate::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TAnimate::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TAnimate::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TAnimate::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TAnimate::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TAnimate::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TAnimate::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TAnimate::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAnimate::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TAnimate::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAnimate::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TAnimate::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAnimate::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TAnimate::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAnimate::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TAnimate::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TAnimate::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TAnimate::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TAnimate::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TAnimate::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TAnimate::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TAnimate::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TAnimate::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TAnimate::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAnimate::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TAnimate::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TAnimate::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TAnimate::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TAnimate::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TAnimate::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TAnimate::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_AutoRepeat(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoRepeat((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_AutoRepeat(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoRepeat(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_Transparent(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Transparent((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Transparent(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Transparent(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TAnimate::get_Center(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Center((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TAnimate::set_Center(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Center(pVal/*[in]*/);
}

IIPAddressPtr& TIPAddress::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TIPAddress::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TIPAddress::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TIPAddress::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TIPAddress::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TIPAddress::ConnectTo(IIPAddressPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TIPAddress::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_IPAddress;
  sd.IntfIID = __uuidof(IIPAddress);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TIPAddress::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TIPAddress::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TIPAddress::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TIPAddress::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TIPAddress::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TIPAddress::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TIPAddress::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                      long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TIPAddress::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TIPAddress::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TIPAddress::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TIPAddress::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TIPAddress::SetRange(long Index/*[in]*/, unsigned_char Min/*[in]*/, 
                                     unsigned_char Max/*[in]*/)
{
  GetDefaultInterface()->SetRange(Index/*[in]*/, Min/*[in]*/, Max/*[in]*/);
}

BSTR __fastcall TIPAddress::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TIPAddress::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TIPAddress::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TIPAddress::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TIPAddress::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TIPAddress::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TIPAddress::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TIPAddress::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TIPAddress::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TIPAddress::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TIPAddress::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TIPAddress::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TIPAddress::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TIPAddress::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TIPAddress::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TIPAddress::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TIPAddress::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TIPAddress::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TIPAddress::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TIPAddress::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TIPAddress::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TIPAddress::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TIPAddress::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TIPAddress::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TIPAddress::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TIPAddress::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TIPAddress::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TIPAddress::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TIPAddress::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TIPAddress::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TIPAddress::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TIPAddress::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TIPAddress::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TIPAddress::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TIPAddress::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TIPAddress::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TIPAddress::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TIPAddress::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TIPAddress::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TIPAddress::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TIPAddress::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

unsigned_long __fastcall TIPAddress::get_Value(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Value((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TIPAddress::set_Value(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Value(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TIPAddress::get_IsBlank(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IsBlank((VARIANT_BOOL*)&pVal));
  return pVal;
}

IDateTimePtr& TDateTime::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TDateTime::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TDateTime::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TDateTime::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TDateTime::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TDateTime::ConnectTo(IDateTimePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TDateTime::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_DateTime;
  sd.IntfIID = __uuidof(IDateTime);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

DATE __fastcall TDateTime::get_Value(void)
{
  DATE pVal;
  OLECHECK(GetDefaultInterface()->get_Value((DATE*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Value(DATE pVal/*[in]*/)
{
  GetDefaultInterface()->set_Value(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTime::get_Year(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Year((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Year(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Year(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTime::get_Month(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Month((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Month(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Month(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTime::get_Day(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Day((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Day(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Day(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTime::get_Hour(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Hour((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Hour(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hour(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTime::get_Minute(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Minute((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Minute(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Minute(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTime::get_Second(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Second((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Second(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Second(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTime::get_Milliseconds(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Milliseconds((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTime::set_Milliseconds(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Milliseconds(pVal/*[in]*/);
}

IDateTimePickerPtr& TDateTimePicker::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TDateTimePicker::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TDateTimePicker::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TDateTimePicker::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TDateTimePicker::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TDateTimePicker::ConnectTo(IDateTimePickerPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TDateTimePicker::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_DateTimePicker;
  sd.IntfIID = __uuidof(IDateTimePicker);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TDateTimePicker::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TDateTimePicker::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TDateTimePicker::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TDateTimePicker::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TDateTimePicker::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TDateTimePicker::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TDateTimePicker::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TDateTimePicker::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TDateTimePicker::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TDateTimePicker::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TDateTimePicker::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TDateTimePicker::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TDateTimePicker::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TDateTimePicker::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TDateTimePicker::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TDateTimePicker::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TDateTimePicker::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TDateTimePicker::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TDateTimePicker::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TDateTimePicker::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TDateTimePicker::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TDateTimePicker::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTimePicker::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTimePicker::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTimePicker::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTimePicker::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TDateTimePicker::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TDateTimePicker::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TDateTimePicker::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TDateTimePicker::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TDateTimePicker::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TDateTimePicker::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TDateTimePicker::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TDateTimePicker::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TDateTimePicker::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TDateTimePicker::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TDateTimePicker::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TDateTimePicker::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TDateTimePicker::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TDateTimePicker::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TDateTimePicker::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TDateTimePicker::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TDateTimePicker::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TDateTimePicker::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TDateTimePicker::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDateTimePicker::get_Value(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Value((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TDateTimePicker::get_Min(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Min((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TDateTimePicker::get_Max(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Max((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TDateTimePicker::get_Style(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Style((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_Style(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Style(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_ShowCheckBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ShowCheckBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ShowCheckBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ShowCheckBox(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_ShowUpDown(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ShowUpDown((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_ShowUpDown(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ShowUpDown(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDateTimePicker::get_DropDownRightAlign(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DropDownRightAlign((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_DropDownRightAlign(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DropDownRightAlign(pVal/*[in]*/);
}

BSTR __fastcall TDateTimePicker::get_CustomFormat(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_CustomFormat((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDateTimePicker::set_CustomFormat(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_CustomFormat(pVal/*[in]*/);
}

ICalendarPtr& TCalendar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TCalendar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TCalendar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TCalendar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TCalendar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TCalendar::ConnectTo(ICalendarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TCalendar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Calendar;
  sd.IntfIID = __uuidof(ICalendar);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TCalendar::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TCalendar::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TCalendar::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TCalendar::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TCalendar::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TCalendar::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TCalendar::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TCalendar::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TCalendar::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TCalendar::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TCalendar::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TCalendar::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TCalendar::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TCalendar::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TCalendar::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TCalendar::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TCalendar::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TCalendar::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TCalendar::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TCalendar::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TCalendar::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TCalendar::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TCalendar::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TCalendar::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TCalendar::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TCalendar::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TCalendar::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TCalendar::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TCalendar::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TCalendar::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TCalendar::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TCalendar::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TCalendar::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TCalendar::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TCalendar::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TCalendar::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TCalendar::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TCalendar::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TCalendar::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TCalendar::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TCalendar::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_Value(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Value((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_Min(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Min((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_Max(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Max((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TCalendar::get_MultiSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MultiSelect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MultiSelect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MultiSelect(pVal/*[in]*/);
}

LPDISPATCH __fastcall TCalendar::get_SelEnd(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SelEnd((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_SelStart(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SelStart((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TCalendar::get_Today(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Today((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TCalendar::get_MonthDelta(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MonthDelta((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MonthDelta(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MonthDelta(pVal/*[in]*/);
}

unsigned_long __fastcall TCalendar::get_MaxSelCount(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MaxSelCount((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_MaxSelCount(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxSelCount(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_TodayText(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TodayText((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_TodayText(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TodayText(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_TodayCircle(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TodayCircle((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_TodayCircle(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TodayCircle(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TCalendar::get_WeekNumbers(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_WeekNumbers((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TCalendar::set_WeekNumbers(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_WeekNumbers(pVal/*[in]*/);
}

ISplitterPtr& TSplitter::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TSplitter::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TSplitter::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TSplitter::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TSplitter::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TSplitter::ConnectTo(ISplitterPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TSplitter::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Splitter;
  sd.IntfIID = __uuidof(ISplitter);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TSplitter::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TSplitter::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TSplitter::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TSplitter::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TSplitter::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TSplitter::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TSplitter::SetBounds(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in,def,opt]*/, 
                                     long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TSplitter::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TSplitter::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TSplitter::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TSplitter::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TSplitter::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TSplitter::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TSplitter::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitter::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitter::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitter::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TSplitter::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TSplitter::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TSplitter::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TSplitter::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TSplitter::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TSplitter::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitter::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitter::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitter::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitter::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitter::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitter::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitter::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TSplitter::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitter::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TSplitter::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitter::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TSplitter::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitter::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TSplitter::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TSplitter::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TSplitter::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TSplitter::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TSplitter::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TSplitter::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TSplitter::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TSplitter::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TSplitter::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitter::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitter::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TSplitter::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TSplitter::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitter::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitter::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitter::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TSplitter::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitter::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

ISplitPanelPtr& TSplitPanel::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TSplitPanel::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TSplitPanel::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TSplitPanel::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TSplitPanel::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TSplitPanel::ConnectTo(ISplitPanelPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TSplitPanel::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_SplitPanel;
  sd.IntfIID = __uuidof(ISplitPanel);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TSplitPanel::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TSplitPanel::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TSplitPanel::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TSplitPanel::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TSplitPanel::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TSplitPanel::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TSplitPanel::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                       long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TSplitPanel::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TSplitPanel::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TSplitPanel::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TSplitPanel::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TSplitPanel::CreateButton(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateCheckBox(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  BSTR Text/*[in,def,opt]*/, 
                                                  VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateRadioButton(long Left/*[in,def,opt]*/, 
                                                     long Top/*[in,def,opt]*/, 
                                                     long Width/*[in,def,opt]*/, 
                                                     long Height/*[in,def,opt]*/, 
                                                     BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                              long Width/*[in,def,opt]*/, 
                                              long Height/*[in,def,opt]*/, 
                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateListBox(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/, 
                                                 long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateComboBox(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateGroupBox(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateProgressBar(long Left/*[in,def,opt]*/, 
                                                     long Top/*[in,def,opt]*/, 
                                                     long Width/*[in,def,opt]*/, 
                                                     long Height/*[in,def,opt]*/, 
                                                     long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateTabControl(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateToolBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateMenuBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateHyperLink(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   BSTR Url/*[in,def,opt]*/, 
                                                   BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateScrollBar(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                        long Width/*[in]*/, long Height/*[in]*/, 
                                                        BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateActiveXControlLicensed(long Left/*[in]*/, long Top/*[in]*/, 
                                                                long Width/*[in]*/, 
                                                                long Height/*[in]*/, BSTR ID/*[in]*/, 
                                                                BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateHeader(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateListView(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateTreeView(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateRichEdit(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/, 
                                                  long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateAnimate(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/, 
                                                 long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateHotKey(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateTrackBar(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateUpDown(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                        long Top/*[in,def,opt]*/, 
                                                        long Width/*[in,def,opt]*/, 
                                                        long Height/*[in,def,opt]*/, 
                                                        long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateCalendar(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateIPAddress(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateSplitPanel(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                            long Top/*[in,def,opt]*/, 
                                                            long Width/*[in,def,opt]*/, 
                                                            long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreatePropertyGrid(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreatePageControl(long Left/*[in,def,opt]*/, 
                                                     long Top/*[in,def,opt]*/, 
                                                     long Width/*[in,def,opt]*/, 
                                                     long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                        long Top/*[in,def,opt]*/, 
                                                        long Width/*[in,def,opt]*/, 
                                                        long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, 
                                        long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Rectangle(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                             long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::RoundRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                             long Height/*[in]*/, long nWidth/*[in]*/, 
                                             long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                           long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                       long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                       long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                         long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                         long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                         long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                       long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                       long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                       long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::TextOut(long x/*[in]*/, long y/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::TextRect(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                            long Height/*[in]*/, BSTR Text/*[in]*/, 
                                            unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::DrawImage(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                             long Height/*[in]*/, VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                              unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TSplitPanel::Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                         long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                         long BevelInner/*[in,def,opt]*/, 
                                         unsigned_long BorderWidth/*[in,def,opt]*/, 
                                         unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TSplitPanel::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TSplitPanel::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TSplitPanel::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

BSTR __fastcall TSplitPanel::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TSplitPanel::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TSplitPanel::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitPanel::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitPanel::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TSplitPanel::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitPanel::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitPanel::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitPanel::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitPanel::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitPanel::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TSplitPanel::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TSplitPanel::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TSplitPanel::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TSplitPanel::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TSplitPanel::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TSplitPanel::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TSplitPanel::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TSplitPanel::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TSplitPanel::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TSplitPanel::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitPanel::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TSplitPanel::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TSplitPanel::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TSplitPanel::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TSplitPanel::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_BorderWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_BevelWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelWidth(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_BevelOuter(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelOuter(pVal/*[in]*/);
}

long __fastcall TSplitPanel::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_BevelInner(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelInner(pVal/*[in]*/);
}

LPDISPATCH __fastcall TSplitPanel::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GraphFont(pVal/*[in]*/);
}

void __fastcall TSplitPanel::_set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GraphFont(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_AutoScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoScroll(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

unsigned_short __fastcall TSplitPanel::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_CaptureMouse(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CaptureMouse(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_ParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_AutoSplit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_GroupBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupBox(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Margin(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Margin(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MarginLeft(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginLeft(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MarginTop(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginTop(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MarginRight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginRight(pVal/*[in]*/);
}

unsigned_long __fastcall TSplitPanel::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_MarginBottom(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginBottom(pVal/*[in]*/);
}

double __fastcall TSplitPanel::get_DefaultSplit(void)
{
  double pVal;
  OLECHECK(GetDefaultInterface()->get_DefaultSplit((double*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_DefaultSplit(double pVal/*[in]*/)
{
  GetDefaultInterface()->set_DefaultSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_Live(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Live((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Live(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Live(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSplitPanel::get_Vertical(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Vertical((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSplitPanel::set_Vertical(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Vertical(pVal/*[in]*/);
}

IPolygonPtr& TPolygonGraphic::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPolygonGraphic::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPolygonGraphic::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPolygonGraphic::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPolygonGraphic::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPolygonGraphic::ConnectTo(IPolygonPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPolygonGraphic::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PolygonGraphic;
  sd.IntfIID = __uuidof(IPolygon);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TPolygonGraphic::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TPolygonGraphic::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPolygonGraphic::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPolygonGraphic::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TPolygonGraphic::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TPolygonGraphic::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TPolygonGraphic::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TPolygonGraphic::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TPolygonGraphic::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TPolygonGraphic::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TPolygonGraphic::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TPolygonGraphic::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TPolygonGraphic::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TPolygonGraphic::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPolygonGraphic::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPolygonGraphic::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPolygonGraphic::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TPolygonGraphic::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TPolygonGraphic::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TPolygonGraphic::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TPolygonGraphic::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TPolygonGraphic::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TPolygonGraphic::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TPolygonGraphic::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPolygonGraphic::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPolygonGraphic::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPolygonGraphic::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPolygonGraphic::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TPolygonGraphic::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPolygonGraphic::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TPolygonGraphic::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPolygonGraphic::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TPolygonGraphic::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPolygonGraphic::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TPolygonGraphic::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPolygonGraphic::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TPolygonGraphic::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TPolygonGraphic::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TPolygonGraphic::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TPolygonGraphic::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TPolygonGraphic::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TPolygonGraphic::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TPolygonGraphic::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TPolygonGraphic::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TPolygonGraphic::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPolygonGraphic::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPolygonGraphic::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TPolygonGraphic::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TPolygonGraphic::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPolygonGraphic::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPolygonGraphic::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPolygonGraphic::get_FillAll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FillAll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPolygonGraphic::set_FillAll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FillAll(pVal/*[in]*/);
}

IImagePtr& TImageGraphic::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TImageGraphic::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TImageGraphic::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TImageGraphic::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TImageGraphic::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TImageGraphic::ConnectTo(IImagePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TImageGraphic::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ImageGraphic;
  sd.IntfIID = __uuidof(IImage);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TImageGraphic::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TImageGraphic::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TImageGraphic::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TImageGraphic::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TImageGraphic::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TImageGraphic::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TImageGraphic::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TImageGraphic::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TImageGraphic::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TImageGraphic::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TImageGraphic::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TImageGraphic::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TImageGraphic::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TImageGraphic::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageGraphic::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TImageGraphic::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TImageGraphic::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TImageGraphic::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TImageGraphic::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TImageGraphic::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TImageGraphic::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TImageGraphic::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TImageGraphic::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TImageGraphic::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TImageGraphic::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TImageGraphic::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TImageGraphic::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TImageGraphic::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TImageGraphic::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageGraphic::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TImageGraphic::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageGraphic::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TImageGraphic::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageGraphic::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TImageGraphic::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageGraphic::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TImageGraphic::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TImageGraphic::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TImageGraphic::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TImageGraphic::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TImageGraphic::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TImageGraphic::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TImageGraphic::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TImageGraphic::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TImageGraphic::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageGraphic::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TImageGraphic::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TImageGraphic::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TImageGraphic::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TImageGraphic::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TImageGraphic::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TImageGraphic::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TImageGraphic::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

unsigned_long __fastcall TImageGraphic::get_DrawType(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_DrawType((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_DrawType(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_DrawType(pVal/*[in]*/);
}

unsigned_long __fastcall TImageGraphic::get_CopyMode(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_CopyMode((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_CopyMode(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_CopyMode(pVal/*[in]*/);
}

unsigned_long __fastcall TImageGraphic::get_ImageWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageWidth((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TImageGraphic::get_ImageHeight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageHeight((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TImageGraphic::get_AlphaBlend(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_AlphaBlend((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TImageGraphic::set_AlphaBlend(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_AlphaBlend(pVal/*[in]*/);
}

ILinePtr& TLineGraphic::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TLineGraphic::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TLineGraphic::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TLineGraphic::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TLineGraphic::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TLineGraphic::ConnectTo(ILinePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TLineGraphic::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_LineGraphic;
  sd.IntfIID = __uuidof(ILine);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TLineGraphic::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TLineGraphic::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TLineGraphic::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TLineGraphic::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TLineGraphic::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TLineGraphic::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TLineGraphic::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                        long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TLineGraphic::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TLineGraphic::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TLineGraphic::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TLineGraphic::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TLineGraphic::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TLineGraphic::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TLineGraphic::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TLineGraphic::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TLineGraphic::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TLineGraphic::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TLineGraphic::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TLineGraphic::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TLineGraphic::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TLineGraphic::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TLineGraphic::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TLineGraphic::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TLineGraphic::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TLineGraphic::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TLineGraphic::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TLineGraphic::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TLineGraphic::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TLineGraphic::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TLineGraphic::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TLineGraphic::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TLineGraphic::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TLineGraphic::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TLineGraphic::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TLineGraphic::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TLineGraphic::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TLineGraphic::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TLineGraphic::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TLineGraphic::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TLineGraphic::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TLineGraphic::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TLineGraphic::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TLineGraphic::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TLineGraphic::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TLineGraphic::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TLineGraphic::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_x(long Index/*[in]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_x(Index, (long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_x(long Index/*[in]*/, long pVal/*[in]*/)
{
  GetDefaultInterface()->set_x(Index/*[in]*/, pVal/*[in]*/);
}

long __fastcall TLineGraphic::get_y(long Index/*[in]*/)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_y(Index, (long*)&pVal));
  return pVal;
}

void __fastcall TLineGraphic::set_y(long Index/*[in]*/, long pVal/*[in]*/)
{
  GetDefaultInterface()->set_y(Index/*[in]*/, pVal/*[in]*/);
}

IPrintDialogBasePtr& TPrintDialogBase::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPrintDialogBase::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPrintDialogBase::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPrintDialogBase::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPrintDialogBase::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPrintDialogBase::ConnectTo(IPrintDialogBasePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPrintDialogBase::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PrintDialogBase;
  sd.IntfIID = __uuidof(IPrintDialogBase);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TPrintDialogBase::get_Driver(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Driver((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TPrintDialogBase::get_Device(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Device((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TPrintDialogBase::get_Port(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Port((BSTR*)&pVal));
  return pVal;
}

IPrintDialogPtr& TPrintDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPrintDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPrintDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPrintDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPrintDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPrintDialog::ConnectTo(IPrintDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPrintDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PrintDialog;
  sd.IntfIID = __uuidof(IPrintDialog);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TPrintDialog::get_Driver(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Driver((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TPrintDialog::get_Device(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Device((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TPrintDialog::get_Port(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Port((BSTR*)&pVal));
  return pVal;
}

long __fastcall TPrintDialog::get_Copies(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Copies((long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPrintDialog::get_Collate(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Collate((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPrintDialog::get_Selection(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Selection((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPrintDialog::get_All(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_All((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPrintDialog::get_Range(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Range((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPrintDialog::get_ToFile(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ToFile((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TPrintDialog::get_FromPage(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_FromPage((long*)&pVal));
  return pVal;
}

long __fastcall TPrintDialog::get_ToPage(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ToPage((long*)&pVal));
  return pVal;
}

IPageSetupDialogPtr& TPageSetupDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPageSetupDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPageSetupDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPageSetupDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPageSetupDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPageSetupDialog::ConnectTo(IPageSetupDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPageSetupDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PageSetupDialog;
  sd.IntfIID = __uuidof(IPageSetupDialog);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TPageSetupDialog::get_Driver(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Driver((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TPageSetupDialog::get_Device(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Device((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TPageSetupDialog::get_Port(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Port((BSTR*)&pVal));
  return pVal;
}

long __fastcall TPageSetupDialog::get_PaperWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_PaperWidth((long*)&pVal));
  return pVal;
}

long __fastcall TPageSetupDialog::get_PaperHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_PaperHeight((long*)&pVal));
  return pVal;
}

long __fastcall TPageSetupDialog::get_LeftMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_LeftMargin((long*)&pVal));
  return pVal;
}

long __fastcall TPageSetupDialog::get_RightMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_RightMargin((long*)&pVal));
  return pVal;
}

long __fastcall TPageSetupDialog::get_TopMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TopMargin((long*)&pVal));
  return pVal;
}

long __fastcall TPageSetupDialog::get_BottomMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BottomMargin((long*)&pVal));
  return pVal;
}

IFindReplaceDialogPtr& TFindReplaceDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TFindReplaceDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TFindReplaceDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TFindReplaceDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TFindReplaceDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TFindReplaceDialog::ConnectTo(IFindReplaceDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TFindReplaceDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_FindReplaceDialog;
  sd.IntfIID = __uuidof(IFindReplaceDialog);
  sd.EventIID= __uuidof(IFindReplaceDialogEvents);
  ServerData = &sd;
}

void __fastcall TFindReplaceDialog::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnFind1) {
        (OnFind1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnReplace1) {
        (OnReplace1)(this, params[0].pdispVal);
      }
      break;
      }
    case 3: {
      if (OnReplaceAll1) {
        (OnReplaceAll1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnClose1) {
        (OnClose1)(this, params[0].pdispVal);
      }
      break;
      }
    case 5: {
      if (OnHelp1) {
        (OnHelp1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TFindReplaceDialog::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TFindReplaceDialog::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TFindReplaceDialog::Close(void)
{
  GetDefaultInterface()->Close();
}

BSTR __fastcall TFindReplaceDialog::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TFindReplaceDialog::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TFindReplaceDialog::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TFindReplaceDialog::get_FindText(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_FindText((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TFindReplaceDialog::get_ReplaceText(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ReplaceText((BSTR*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TFindReplaceDialog::get_SearchDown(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_SearchDown((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TFindReplaceDialog::get_MatchCase(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MatchCase((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TFindReplaceDialog::get_WholeWord(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_WholeWord((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFindReplaceDialog::set_OnFind(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnFind(Param1/*[in]*/);
}

void __fastcall TFindReplaceDialog::set_OnReplace(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnReplace(Param1/*[in]*/);
}

void __fastcall TFindReplaceDialog::set_OnReplaceAll(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnReplaceAll(Param1/*[in]*/);
}

void __fastcall TFindReplaceDialog::set_OnClose(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClose(Param1/*[in]*/);
}

void __fastcall TFindReplaceDialog::set_OnHelp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHelp(Param1/*[in]*/);
}

IFontDialogPtr& TFontDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TFontDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TFontDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TFontDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TFontDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TFontDialog::ConnectTo(IFontDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TFontDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_FontDialog;
  sd.IntfIID = __uuidof(IFontDialog);
  sd.EventIID= __uuidof(IFontDialogEvents);
  ServerData = &sd;
}

void __fastcall TFontDialog::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnHelp1) {
        (OnHelp1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnApply1) {
        (OnApply1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TFontDialog::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TFontDialog::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

VARIANT_BOOL __fastcall TFontDialog::Execute(void)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->Execute((VARIANT_BOOL*)&pResult));
  return pResult;
}

BSTR __fastcall TFontDialog::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TFontDialog::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TFontDialog::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

unsigned_long __fastcall TFontDialog::get_Flags(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Flags((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFontDialog::set_Flags(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flags(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFontDialog::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TFontDialog::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TFontDialog::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

void __fastcall TFontDialog::set_OnHelp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHelp(Param1/*[in]*/);
}

void __fastcall TFontDialog::set_OnApply(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnApply(Param1/*[in]*/);
}

IColorDialogPtr& TColorDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TColorDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TColorDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TColorDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TColorDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TColorDialog::ConnectTo(IColorDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TColorDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ColorDialog;
  sd.IntfIID = __uuidof(IColorDialog);
  sd.EventIID= __uuidof(IColorDialogEvents);
  ServerData = &sd;
}

void __fastcall TColorDialog::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnHelp1) {
        (OnHelp1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TColorDialog::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TColorDialog::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

VARIANT_BOOL __fastcall TColorDialog::Execute(void)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->Execute((VARIANT_BOOL*)&pResult));
  return pResult;
}

BSTR __fastcall TColorDialog::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TColorDialog::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TColorDialog::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

unsigned_long __fastcall TColorDialog::get_Flags(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Flags((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TColorDialog::set_Flags(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flags(pVal/*[in]*/);
}

unsigned_long __fastcall TColorDialog::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TColorDialog::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

void __fastcall TColorDialog::set_OnHelp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHelp(Param1/*[in]*/);
}

IFileOpenSaveDialogPtr& TFileOpenSaveDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TFileOpenSaveDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TFileOpenSaveDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TFileOpenSaveDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TFileOpenSaveDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TFileOpenSaveDialog::ConnectTo(IFileOpenSaveDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TFileOpenSaveDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_FileOpenSaveDialog;
  sd.IntfIID = __uuidof(IFileOpenSaveDialog);
  sd.EventIID= __uuidof(IFileOpenSaveDialogEvents);
  ServerData = &sd;
}

void __fastcall TFileOpenSaveDialog::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnCloseQuery1) {
        (OnCloseQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 3: {
      if (OnFolderChange1) {
        (OnFolderChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnTypeChange1) {
        (OnTypeChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 5: {
      if (OnHelp1) {
        (OnHelp1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TFileOpenSaveDialog::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TFileOpenSaveDialog::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::Execute(void)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->Execute((VARIANT_BOOL*)&pResult));
  return pResult;
}

void __fastcall TFileOpenSaveDialog::AddPlace(BSTR Value/*[in]*/, BSTR Name/*[in,def,opt]*/, 
                                              long Placement/*[in,def,opt]*/)
{
  GetDefaultInterface()->AddPlace(Value/*[in]*/, Name/*[in,def,opt]*/, Placement/*[in,def,opt]*/);
}

BSTR __fastcall TFileOpenSaveDialog::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TFileOpenSaveDialog::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TFileOpenSaveDialog::get_DefaultExt(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_DefaultExt((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_DefaultExt(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_DefaultExt(pVal/*[in]*/);
}

BSTR __fastcall TFileOpenSaveDialog::get_Filter(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Filter((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_Filter(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Filter(pVal/*[in]*/);
}

BSTR __fastcall TFileOpenSaveDialog::get_FileName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_FileName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_FileName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_FileName(pVal/*[in]*/);
}

unsigned_long __fastcall TFileOpenSaveDialog::get_Flags(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Flags((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_Flags(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flags(pVal/*[in]*/);
}

BSTR __fastcall TFileOpenSaveDialog::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

unsigned_long __fastcall TFileOpenSaveDialog::get_FilterIndex(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_FilterIndex((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_FilterIndex(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_FilterIndex(pVal/*[in]*/);
}

BSTR __fastcall TFileOpenSaveDialog::get_Directory(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Directory((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_Directory(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Directory(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_OverwritePrompt(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_OverwritePrompt((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_OverwritePrompt(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_OverwritePrompt(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_AllowMultiselect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowMultiselect((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_AllowMultiselect(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowMultiselect(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_PathMustExist(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_PathMustExist((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_PathMustExist(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_PathMustExist(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_FileMustExist(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_FileMustExist((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_FileMustExist(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_FileMustExist(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_CreatePrompt(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CreatePrompt((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_CreatePrompt(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CreatePrompt(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_NoReadOnlyReturn(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoReadOnlyReturn((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_NoReadOnlyReturn(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoReadOnlyReturn(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_NoTestFileCreate(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoTestFileCreate((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_NoTestFileCreate(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoTestFileCreate(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_NoDereferenceLinks(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoDereferenceLinks((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_NoDereferenceLinks(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoDereferenceLinks(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_DontAddToRecent(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DontAddToRecent((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_DontAddToRecent(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DontAddToRecent(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_ForceShowHidden(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ForceShowHidden((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_ForceShowHidden(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ForceShowHidden(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_NoPlacesBar(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoPlacesBar((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_NoPlacesBar(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoPlacesBar(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_ForceFileSystem(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ForceFileSystem((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_ForceFileSystem(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ForceFileSystem(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_AllNonStorageItems(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllNonStorageItems((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_AllNonStorageItems(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllNonStorageItems(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_HideMRUPlaces(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HideMRUPlaces((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_HideMRUPlaces(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HideMRUPlaces(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_HidePinnedPlaces(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_HidePinnedPlaces((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_HidePinnedPlaces(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_HidePinnedPlaces(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_DefaultNoMiniMode(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DefaultNoMiniMode((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_DefaultNoMiniMode(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DefaultNoMiniMode(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TFileOpenSaveDialog::get_ForcePreviewPaneOn(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ForcePreviewPaneOn((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_ForcePreviewPaneOn(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ForcePreviewPaneOn(pVal/*[in]*/);
}

LPDISPATCH __fastcall TFileOpenSaveDialog::get_FileNames(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_FileNames((LPDISPATCH*)&pVal));
  return pVal;
}

BSTR __fastcall TFileOpenSaveDialog::get_ClientGuid(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ClientGuid((BSTR*)&pVal));
  return pVal;
}

void __fastcall TFileOpenSaveDialog::set_ClientGuid(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientGuid(pVal/*[in]*/);
}

void __fastcall TFileOpenSaveDialog::set_OnCloseQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnCloseQuery(Param1/*[in]*/);
}

void __fastcall TFileOpenSaveDialog::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TFileOpenSaveDialog::set_OnFolderChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnFolderChange(Param1/*[in]*/);
}

void __fastcall TFileOpenSaveDialog::set_OnTypeChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnTypeChange(Param1/*[in]*/);
}

void __fastcall TFileOpenSaveDialog::set_OnHelp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHelp(Param1/*[in]*/);
}

ISelectFolderDialogPtr& TSelectFolderDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TSelectFolderDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TSelectFolderDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TSelectFolderDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TSelectFolderDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TSelectFolderDialog::ConnectTo(ISelectFolderDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TSelectFolderDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_SelectFolderDialog;
  sd.IntfIID = __uuidof(ISelectFolderDialog);
  sd.EventIID= __uuidof(ISelectFolderDialogEvents);
  ServerData = &sd;
}

void __fastcall TSelectFolderDialog::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TSelectFolderDialog::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TSelectFolderDialog::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

VARIANT_BOOL __fastcall TSelectFolderDialog::Execute(void)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->Execute((VARIANT_BOOL*)&pResult));
  return pResult;
}

void __fastcall TSelectFolderDialog::Close(void)
{
  GetDefaultInterface()->Close();
}

BSTR __fastcall TSelectFolderDialog::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TSelectFolderDialog::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

unsigned_long __fastcall TSelectFolderDialog::get_Flags(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Flags((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_Flags(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flags(pVal/*[in]*/);
}

BSTR __fastcall TSelectFolderDialog::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

BSTR __fastcall TSelectFolderDialog::get_Value(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Value((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_Value(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Value(pVal/*[in]*/);
}

BSTR __fastcall TSelectFolderDialog::get_Root(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Root((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_Root(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Root(pVal/*[in]*/);
}

BSTR __fastcall TSelectFolderDialog::get_StatusText(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_StatusText((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_StatusText(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_StatusText(pVal/*[in]*/);
}

BSTR __fastcall TSelectFolderDialog::get_Title(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Title((BSTR*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_Title(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Title(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TSelectFolderDialog::get_EnableOK(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_EnableOK((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TSelectFolderDialog::set_EnableOK(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_EnableOK(pVal/*[in]*/);
}

void __fastcall TSelectFolderDialog::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

ITimerPtr& TTimer::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTimer::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTimer::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTimer::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTimer::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTimer::ConnectTo(ITimerPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTimer::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Timer;
  sd.IntfIID = __uuidof(ITimer);
  sd.EventIID= __uuidof(ITimerEvents);
  ServerData = &sd;
}

void __fastcall TTimer::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnExecute1) {
        (OnExecute1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TTimer::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTimer::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

BSTR __fastcall TTimer::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TTimer::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTimer::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTimer::get_Active(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Active((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTimer::set_Active(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Active(pVal/*[in]*/);
}

unsigned_long __fastcall TTimer::get_Interval(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Interval((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTimer::set_Interval(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Interval(pVal/*[in]*/);
}

void __fastcall TTimer::set_OnExecute(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnExecute(Param1/*[in]*/);
}



// *********************************************************************//
// OCX PROXY CLASS IMPLEMENTATION
// (The following variables/methods implement the class TWindowSystemControl which
// allows "" to be hosted in CBuilder IDE/apps).
// *********************************************************************//
int   TWindowSystemControl::EventDispIDs[42] = {
    0x60000000, 0x60000001, 0x60000002, 0x60010000, 0x60010001, 0x60010002,
    0x60010003, 0x00000001, 0x00000002, 0x00000003, 0x00000004, 0x00000005,
    0x00000006, 0x00000007, 0x00000008, 0x00000009, 0x0000000A, 0x0000000B,
    0x0000000C, 0x0000000D, 0x0000000E, 0x0000000F, 0x00000010, 0x00000011,
    0x00000012, 0x00000064, 0x00000065, 0x00000066, 0x00000067, 0x00000068,
    0x00000013, 0x00000014, 0x00000015, 0x00000016, 0x00000017, 0x00000018,
    0x00000019, 0x0000001A, 0x0000001B, 0x0000001C, 0x0000001D, 0x0000001E};

Vcl::Olectrls::TControlData2 TWindowSystemControl::CControlData =
{
  // GUID of CoClass and Event Interface of Control
  {0x8E57EFA4, 0xE91E, 0x44FC,{ 0xB6, 0x9E, 0x7A,0x3B, 0xC1, 0xF5,0xAB, 0x8D} }, // CoClass
  {0xE83611E0, 0xB0CD, 0x4087,{ 0x88, 0x7B, 0x4A,0x04, 0x54, 0x17,0x6A, 0xA9} }, // Events

  // Count of Events and array of their DISPIDs
  42, &EventDispIDs,

  // Pointer to Runtime License string
  NULL,  // HRESULT(0x80004002)

  // Flags for OnChanged PropertyNotification
  0x00000000,
  401,// (IDE Version)

  // Count of Font Prop and array of their DISPIDs
  0, Winapi::Activex::PDispIDList(NULL),

  // Count of Pict Prop and array of their DISPIDs
  0, Winapi::Activex::PDispIDList(NULL),
  0, // Reserved
  0, // Instance count (used internally)
  0, // List of Enum descriptions (internal)
};

GUID     TWindowSystemControl::DEF_CTL_INTF = {0x044B381D, 0xC581, 0x4B9E,{ 0x9C, 0x95, 0x08,0xB6, 0x6B, 0x38,0x46, 0x8F} };
TNoParam TWindowSystemControl::OptParam;

static inline void ValidCtrCheck(TWindowSystemControl *)
{
   delete new TWindowSystemControl((System::Classes::TComponent*)(0));
};

void __fastcall TWindowSystemControl::InitControlData()
{
  ControlData = (Vcl::Olectrls::TControlData*)&CControlData;
  CControlData.FirstEventOfs = System::PByte(&FOnClick) - System::PByte(this);
};

void __fastcall TWindowSystemControl::CreateControl()
{
  if (!m_OCXIntf)
  {
    _ASSERTE(DefaultDispatch);
    DefaultDispatch->QueryInterface(DEF_CTL_INTF, (LPVOID*)&m_OCXIntf);
  }
};

IFormDisp __fastcall TWindowSystemControl::GetDefaultInterface()
{
  CreateControl();
  return m_OCXIntf;
};

void __fastcall TWindowSystemControl::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TWindowSystemControl::RemoveEventHandler(BSTR EventName, 
                                                         VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TWindowSystemControl::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TWindowSystemControl::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TWindowSystemControl::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TWindowSystemControl::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TWindowSystemControl::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TWindowSystemControl::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TWindowSystemControl::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TWindowSystemControl::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateButton(long Left/*[in,def,opt]*/, 
                                                         long Top/*[in,def,opt]*/, 
                                                         long Width/*[in,def,opt]*/, 
                                                         long Height/*[in,def,opt]*/, 
                                                         BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateCheckBox(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/, 
                                                           BSTR Text/*[in,def,opt]*/, 
                                                           VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateRadioButton(long Left/*[in,def,opt]*/, 
                                                              long Top/*[in,def,opt]*/, 
                                                              long Width/*[in,def,opt]*/, 
                                                              long Height/*[in,def,opt]*/, 
                                                              BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateEdit(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/, 
                                                       long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateListBox(long Left/*[in,def,opt]*/, 
                                                          long Top/*[in,def,opt]*/, 
                                                          long Width/*[in,def,opt]*/, 
                                                          long Height/*[in,def,opt]*/, 
                                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateComboBox(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/, 
                                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateFrame(long Left/*[in,def,opt]*/, 
                                                        long Top/*[in,def,opt]*/, 
                                                        long Width/*[in,def,opt]*/, 
                                                        long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateGroupBox(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateProgressBar(long Left/*[in,def,opt]*/, 
                                                              long Top/*[in,def,opt]*/, 
                                                              long Width/*[in,def,opt]*/, 
                                                              long Height/*[in,def,opt]*/, 
                                                              long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateTabControl(long Left/*[in,def,opt]*/, 
                                                             long Top/*[in,def,opt]*/, 
                                                             long Width/*[in,def,opt]*/, 
                                                             long Height/*[in,def,opt]*/, 
                                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateToolBar(long Left/*[in,def,opt]*/, 
                                                          long Top/*[in,def,opt]*/, 
                                                          long Width/*[in,def,opt]*/, 
                                                          long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateMenuBar(long Left/*[in,def,opt]*/, 
                                                          long Top/*[in,def,opt]*/, 
                                                          long Width/*[in,def,opt]*/, 
                                                          long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateReBar(long Left/*[in,def,opt]*/, 
                                                        long Top/*[in,def,opt]*/, 
                                                        long Width/*[in,def,opt]*/, 
                                                        long Height/*[in,def,opt]*/, 
                                                        long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateHyperLink(long Left/*[in,def,opt]*/, 
                                                            long Top/*[in,def,opt]*/, 
                                                            long Width/*[in,def,opt]*/, 
                                                            long Height/*[in,def,opt]*/, 
                                                            BSTR Url/*[in,def,opt]*/, 
                                                            BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreatePager(long Left/*[in,def,opt]*/, 
                                                        long Top/*[in,def,opt]*/, 
                                                        long Width/*[in,def,opt]*/, 
                                                        long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateScrollBar(long Left/*[in,def,opt]*/, 
                                                            long Top/*[in,def,opt]*/, 
                                                            long Width/*[in,def,opt]*/, 
                                                            long Height/*[in,def,opt]*/, 
                                                            long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                                 long Width/*[in]*/, 
                                                                 long Height/*[in]*/, 
                                                                 BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateActiveXControlLicensed(long Left/*[in]*/, 
                                                                         long Top/*[in]*/, 
                                                                         long Width/*[in]*/, 
                                                                         long Height/*[in]*/, 
                                                                         BSTR ID/*[in]*/, 
                                                                         BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateHeader(long Left/*[in,def,opt]*/, 
                                                         long Top/*[in,def,opt]*/, 
                                                         long Width/*[in,def,opt]*/, 
                                                         long Height/*[in,def,opt]*/, 
                                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateListView(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/, 
                                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateTreeView(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/, 
                                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateRichEdit(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/, 
                                                           long Style/*[in,def,opt]*/, 
                                                           long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateAnimate(long Left/*[in,def,opt]*/, 
                                                          long Top/*[in,def,opt]*/, 
                                                          long Width/*[in,def,opt]*/, 
                                                          long Height/*[in,def,opt]*/, 
                                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateHotKey(long Left/*[in,def,opt]*/, 
                                                         long Top/*[in,def,opt]*/, 
                                                         long Width/*[in,def,opt]*/, 
                                                         long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateTrackBar(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/, 
                                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateUpDown(long Left/*[in,def,opt]*/, 
                                                         long Top/*[in,def,opt]*/, 
                                                         long Width/*[in,def,opt]*/, 
                                                         long Height/*[in,def,opt]*/, 
                                                         long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                                 long Top/*[in,def,opt]*/, 
                                                                 long Width/*[in,def,opt]*/, 
                                                                 long Height/*[in,def,opt]*/, 
                                                                 long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateCalendar(long Left/*[in,def,opt]*/, 
                                                           long Top/*[in,def,opt]*/, 
                                                           long Width/*[in,def,opt]*/, 
                                                           long Height/*[in,def,opt]*/, 
                                                           long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateIPAddress(long Left/*[in,def,opt]*/, 
                                                            long Top/*[in,def,opt]*/, 
                                                            long Width/*[in,def,opt]*/, 
                                                            long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateSplitPanel(long Left/*[in,def,opt]*/, 
                                                             long Top/*[in,def,opt]*/, 
                                                             long Width/*[in,def,opt]*/, 
                                                             long Height/*[in,def,opt]*/, 
                                                             VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                                     long Top/*[in,def,opt]*/, 
                                                                     long Width/*[in,def,opt]*/, 
                                                                     long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreatePropertyGrid(long Left/*[in,def,opt]*/, 
                                                               long Top/*[in,def,opt]*/, 
                                                               long Width/*[in,def,opt]*/, 
                                                               long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateLabel(long Left/*[in,def,opt]*/, 
                                                        long Top/*[in,def,opt]*/, 
                                                        long Width/*[in,def,opt]*/, 
                                                        long Height/*[in,def,opt]*/, 
                                                        long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreatePageControl(long Left/*[in,def,opt]*/, 
                                                              long Top/*[in,def,opt]*/, 
                                                              long Width/*[in,def,opt]*/, 
                                                              long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                                 long Top/*[in,def,opt]*/, 
                                                                 long Width/*[in,def,opt]*/, 
                                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, 
                                                 long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Rectangle(long Left/*[in]*/, long Top/*[in]*/, 
                                                      long Width/*[in]*/, long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::RoundRect(long Left/*[in]*/, long Top/*[in]*/, 
                                                      long Width/*[in]*/, long Height/*[in]*/, 
                                                      long nWidth/*[in]*/, long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Ellipse(long Left/*[in]*/, long Top/*[in]*/, 
                                                    long Width/*[in]*/, long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Arc(long Left/*[in]*/, long Top/*[in]*/, 
                                                long Width/*[in]*/, long Height/*[in]*/, 
                                                long nXStartArc/*[in]*/, long nYStartArc/*[in]*/, 
                                                long nXEndArc/*[in]*/, long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Chord(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                                  long nXRadial2/*[in]*/, long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Pie(long Left/*[in]*/, long Top/*[in]*/, 
                                                long Width/*[in]*/, long Height/*[in]*/, 
                                                long nXRadial1/*[in]*/, long nYRadial1/*[in]*/, 
                                                long nXRadial2/*[in]*/, long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::TextOut(long x/*[in]*/, long y/*[in]*/, 
                                                    BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::TextRect(long Left/*[in]*/, long Top/*[in]*/, 
                                                     long Width/*[in]*/, long Height/*[in]*/, 
                                                     BSTR Text/*[in]*/, 
                                                     unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::DrawImage(long Left/*[in]*/, long Top/*[in]*/, 
                                                      long Width/*[in]*/, long Height/*[in]*/, 
                                                      VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                                       unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::Bevel(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  long BevelOuter/*[in,def,opt]*/, 
                                                  long BevelInner/*[in,def,opt]*/, 
                                                  unsigned_long BorderWidth/*[in,def,opt]*/, 
                                                  unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TWindowSystemControl::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TWindowSystemControl::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TWindowSystemControl::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

void __fastcall TWindowSystemControl::Minimize(void)
{
  GetDefaultInterface()->Minimize();
}

void __fastcall TWindowSystemControl::Restore(void)
{
  GetDefaultInterface()->Restore();
}

void __fastcall TWindowSystemControl::Maximize(void)
{
  GetDefaultInterface()->Maximize();
}

void __fastcall TWindowSystemControl::Close(void)
{
  GetDefaultInterface()->Close();
}

void __fastcall TWindowSystemControl::ShowModal(void)
{
  GetDefaultInterface()->ShowModal();
}

long __fastcall TWindowSystemControl::MessageBox(BSTR Text/*[in]*/, BSTR Caption/*[in,def,opt]*/, 
                                                 long Flags/*[in,def,opt]*/)
{
  long pResult;
  OLECHECK(GetDefaultInterface()->MessageBox(Text, Caption, Flags, (long*)&pResult));
  return pResult;
}

unsigned_long __fastcall TWindowSystemControl::ColorDialog(unsigned_long StartColor/*[in,def,opt]*/, 
                                                           unsigned_long Flags/*[in,def,opt]*/)
{
  unsigned_long pColor;
  OLECHECK(GetDefaultInterface()->ColorDialog(StartColor, Flags, (unsigned_long*)&pColor));
  return pColor;
}

LPDISPATCH __fastcall TWindowSystemControl::FontDialog(LPDISPATCH StartValue/*[in]*/, 
                                                       unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->FontDialog(StartValue, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

BSTR __fastcall TWindowSystemControl::OpenDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                                 BSTR StartFile/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/)
{
  BSTR pFileName = 0;
  OLECHECK(GetDefaultInterface()->OpenDialog(DefaultExt, Filter, StartFile, Flags, (BSTR*)&pFileName));
  return pFileName;
}

BSTR __fastcall TWindowSystemControl::SaveDialog(BSTR DefaultExt/*[in]*/, BSTR Filter/*[in]*/, 
                                                 BSTR StartFile/*[in,def,opt]*/, 
                                                 unsigned_long Flags/*[in,def,opt]*/)
{
  BSTR pFileName = 0;
  OLECHECK(GetDefaultInterface()->SaveDialog(DefaultExt, Filter, StartFile, Flags, (BSTR*)&pFileName));
  return pFileName;
}

BSTR __fastcall TWindowSystemControl::SelectFolderDialog(BSTR Title/*[in]*/, 
                                                         unsigned_long Flags/*[in,def,opt]*/)
{
  BSTR pFolder = 0;
  OLECHECK(GetDefaultInterface()->SelectFolderDialog(Title, Flags, (BSTR*)&pFolder));
  return pFolder;
}

LPDISPATCH __fastcall TWindowSystemControl::PrintDialog(unsigned_long Flags/*[in,def,opt]*/, 
                                                        unsigned_short MinPage/*[in,def,opt]*/, 
                                                        unsigned_short MaxPage/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->PrintDialog(Flags, MinPage, MaxPage, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::PrinterSetupDialog(unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->PrinterSetupDialog(Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::PageSetupDialog(unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->PageSetupDialog(Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateFindDialog(BSTR FindText/*[in,def,opt]*/, 
                                                             unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateFindDialog(FindText, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateReplaceDialog(BSTR FindText/*[in,def,opt]*/, 
                                                                BSTR ReplaceText/*[in,def,opt]*/, 
                                                                unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateReplaceDialog(FindText, ReplaceText, Flags, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateFontDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateFontDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateColorDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateColorDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateOpenDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateOpenDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateSaveDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateSaveDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateSelectFolderDialog(void)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateSelectFolderDialog((LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateForm(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/, 
                                                       long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateForm(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateDialogForm(long Left/*[in,def,opt]*/, 
                                                             long Top/*[in,def,opt]*/, 
                                                             long Width/*[in,def,opt]*/, 
                                                             long Height/*[in,def,opt]*/, 
                                                             long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDialogForm(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateMessageDialog(BSTR Text/*[in]*/, 
                                                                BSTR Caption/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateMessageDialog(Text, Caption, (LPDISPATCH*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TWindowSystemControl::CreateTaskDialog(BSTR Text/*[in]*/, 
                                                             BSTR Caption/*[in,def,opt]*/)
{
  LPDISPATCH pResult;
  OLECHECK(GetDefaultInterface()->CreateTaskDialog(Text, Caption, (LPDISPATCH*)&pResult));
  return pResult;
}

BSTR __fastcall TWindowSystemControl::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TWindowSystemControl::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

BSTR __fastcall TWindowSystemControl::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

unsigned_short __fastcall TWindowSystemControl::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

unsigned_short __fastcall TWindowSystemControl::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

unsigned_short __fastcall TWindowSystemControl::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

unsigned_short __fastcall TWindowSystemControl::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

unsigned_short __fastcall TWindowSystemControl::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

BSTR __fastcall TWindowSystemControl::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TWindowSystemControl::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

VARIANT __fastcall TWindowSystemControl::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

VARIANT __fastcall TWindowSystemControl::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

BSTR __fastcall TWindowSystemControl::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

long __fastcall TWindowSystemControl::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

unsigned_short __fastcall TWindowSystemControl::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TWindowSystemControl::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_Menu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Menu((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_KeyPreview(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_KeyPreview((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_MaximizeBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaximizeBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_MinimizeBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MinimizeBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_ControlBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ControlBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_SizeGrip(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_SizeGrip((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_TopMost(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TopMost((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_ToolWindow(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ToolWindow((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Caption(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Caption((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_AcceptButton(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_AcceptButton((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_CancelButton(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_CancelButton((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_HelpButton(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_HelpButton((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_ActiveControl(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ActiveControl((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_CanClose(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanClose((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemControl::get_TaskBar(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_TaskBar((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Active(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Active((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemControl::get_Foreground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Foreground((VARIANT_BOOL*)&pVal));
  return pVal;
}

IResultPtr& TResult::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TResult::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TResult::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TResult::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TResult::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TResult::ConnectTo(IResultPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TResult::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Result;
  sd.IntfIID = __uuidof(IResult);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TResult::Put(VARIANT newVal/*[in]*/)
{
  GetDefaultInterface()->Put(newVal/*[in]*/);
}

VARIANT __fastcall TResult::get_Value(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Value((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TResult::set_Value(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Value(pVal/*[in]*/);
}

ITrayIconPtr& TTrayIcon::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTrayIcon::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTrayIcon::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTrayIcon::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTrayIcon::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTrayIcon::ConnectTo(ITrayIconPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTrayIcon::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_TrayIcon;
  sd.IntfIID = __uuidof(ITrayIcon);
  sd.EventIID= __uuidof(ITrayIconEvents);
  ServerData = &sd;
}

void __fastcall TTrayIcon::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 5: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TTrayIcon::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTrayIcon::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

BSTR __fastcall TTrayIcon::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TTrayIcon::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTrayIcon::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTrayIcon::get_Active(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Active((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTrayIcon::set_Active(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Active(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrayIcon::get_Images(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Images((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrayIcon::set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Images(pVal/*[in]*/);
}

void __fastcall TTrayIcon::_set_Images(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Images(pVal/*[in]*/);
}

long __fastcall TTrayIcon::get_ImageIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ImageIndex((long*)&pVal));
  return pVal;
}

void __fastcall TTrayIcon::set_ImageIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ImageIndex(pVal/*[in]*/);
}

BSTR __fastcall TTrayIcon::get_Hint(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Hint((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTrayIcon::set_Hint(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrayIcon::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrayIcon::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TTrayIcon::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

LPDISPATCH __fastcall TTrayIcon::get_BalloonTip(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_BalloonTip((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTrayIcon::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TTrayIcon::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TTrayIcon::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TTrayIcon::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

IRegionsPtr& TRegions::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TRegions::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TRegions::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TRegions::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TRegions::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TRegions::ConnectTo(IRegionsPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TRegions::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Regions;
  sd.IntfIID = __uuidof(IRegions);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

LPDISPATCH __fastcall TRegions::CombineRgn(unsigned_long hrgnSrc1/*[in]*/, 
                                           unsigned_long hrgnSrc2/*[in]*/, 
                                           long fnCombineMode/*[in]*/)
{
  LPDISPATCH pRegion;
  OLECHECK(GetDefaultInterface()->CombineRgn(hrgnSrc1, hrgnSrc2, fnCombineMode, (LPDISPATCH*)&pRegion));
  return pRegion;
}

LPDISPATCH __fastcall TRegions::CreateEllipticRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/)
{
  LPDISPATCH pRegion;
  OLECHECK(GetDefaultInterface()->CreateEllipticRgn(Left, Top, Width, Height, (LPDISPATCH*)&pRegion));
  return pRegion;
}

LPDISPATCH __fastcall TRegions::CreatePolygonRgn(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pRegion;
  OLECHECK(GetDefaultInterface()->CreatePolygonRgn(Data, (LPDISPATCH*)&pRegion));
  return pRegion;
}

LPDISPATCH __fastcall TRegions::CreateRectRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                              long Width/*[in]*/, long Height/*[in]*/)
{
  LPDISPATCH pRegion;
  OLECHECK(GetDefaultInterface()->CreateRectRgn(Left, Top, Width, Height, (LPDISPATCH*)&pRegion));
  return pRegion;
}

LPDISPATCH __fastcall TRegions::CreateRoundRectRgn(long Left/*[in]*/, long Top/*[in]*/, 
                                                   long Width/*[in]*/, long Height/*[in]*/, 
                                                   long nWidthEllipse/*[in]*/, 
                                                   long nHeightEllipse/*[in]*/)
{
  LPDISPATCH pRegion;
  OLECHECK(GetDefaultInterface()->CreateRoundRectRgn(Left, Top, Width, Height, nWidthEllipse, 
                                                     nHeightEllipse, (LPDISPATCH*)&pRegion));
  return pRegion;
}

LPDISPATCH __fastcall TRegions::TransformRgn(unsigned_long ARegion/*[in]*/, float eM11/*[in]*/, 
                                             float eM12/*[in]*/, float eM21/*[in]*/, 
                                             float eM22/*[in]*/, float eDx/*[in]*/, 
                                             float eDy/*[in]*/)
{
  LPDISPATCH pRegion;
  OLECHECK(GetDefaultInterface()->TransformRgn(ARegion, eM11, eM12, eM21, eM22, eDx, eDy, (LPDISPATCH*)&pRegion));
  return pRegion;
}

VARIANT_BOOL __fastcall TRegions::EqualRgn(unsigned_long hSrcRgn1/*[in]*/, 
                                           unsigned_long hSrcRgn2/*[in]*/)
{
  VARIANT_BOOL pResult;
  OLECHECK(GetDefaultInterface()->EqualRgn(hSrcRgn1, hSrcRgn2, (VARIANT_BOOL*)&pResult));
  return pResult;
}

LPDISPATCH __fastcall TRegions::CreateRgnFromImage(VARIANT Image/*[in]*/, 
                                                   unsigned_long MaskColor/*[in]*/)
{
  LPDISPATCH Region;
  OLECHECK(GetDefaultInterface()->CreateRgnFromImage(Image, MaskColor, (LPDISPATCH*)&Region));
  return Region;
}

IRegionPtr& TRegion::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TRegion::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TRegion::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TRegion::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TRegion::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TRegion::ConnectTo(IRegionPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TRegion::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Region;
  sd.IntfIID = __uuidof(IRegion);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

unsigned_long __fastcall TRegion::get_Value(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Value((unsigned_long*)&pVal));
  return pVal;
}

IScreenPtr& TScreen::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TScreen::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TScreen::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TScreen::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TScreen::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TScreen::ConnectTo(IScreenPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TScreen::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Screen;
  sd.IntfIID = __uuidof(IScreen);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

long __fastcall TScreen::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

long __fastcall TScreen::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

long __fastcall TScreen::get_PixelsPerInchX(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_PixelsPerInchX((long*)&pVal));
  return pVal;
}

long __fastcall TScreen::get_PixelsPerInchY(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_PixelsPerInchY((long*)&pVal));
  return pVal;
}

IHintPtr& THint::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall THint::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall THint::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall THint::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall THint::BeforeDestruction()
{
  Disconnect();
}

void __fastcall THint::ConnectTo(IHintPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall THint::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Hint;
  sd.IntfIID = __uuidof(IHint);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall THint::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall THint::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

BSTR __fastcall THint::get_Title(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Title((BSTR*)&pVal));
  return pVal;
}

void __fastcall THint::set_Title(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Title(pVal/*[in]*/);
}

long __fastcall THint::get_Image(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Image((long*)&pVal));
  return pVal;
}

void __fastcall THint::set_Image(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Image(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THint::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THint::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THint::get_Balloon(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Balloon((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THint::set_Balloon(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Balloon(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THint::get_AlwaysTip(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AlwaysTip((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THint::set_AlwaysTip(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AlwaysTip(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THint::get_NoPrefix(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoPrefix((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THint::set_NoPrefix(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoPrefix(pVal/*[in]*/);
}

long __fastcall THint::get_MaxWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((long*)&pVal));
  return pVal;
}

void __fastcall THint::set_MaxWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall THint::get_ParentData(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentData((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall THint::set_ParentData(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentData(pVal/*[in]*/);
}

IEventHandlerPtr& TEventHandler::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TEventHandler::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TEventHandler::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TEventHandler::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TEventHandler::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TEventHandler::ConnectTo(IEventHandlerPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TEventHandler::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_EventHandler;
  sd.IntfIID = __uuidof(IEventHandler);
  sd.EventIID= __uuidof(IEventHandlerEvents);
  ServerData = &sd;
}

void __fastcall TEventHandler::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnExecute1) {
        (OnExecute1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TEventHandler::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TEventHandler::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TEventHandler::Execute(void)
{
  GetDefaultInterface()->Execute();
}

BSTR __fastcall TEventHandler::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TEventHandler::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TEventHandler::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

void __fastcall TEventHandler::set_OnExecute(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnExecute(Param1/*[in]*/);
}

IWindowSystemObjectExtensionsPtr& TWindowSystemObjectExtensions::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TWindowSystemObjectExtensions::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TWindowSystemObjectExtensions::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TWindowSystemObjectExtensions::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TWindowSystemObjectExtensions::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TWindowSystemObjectExtensions::ConnectTo(IWindowSystemObjectExtensionsPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TWindowSystemObjectExtensions::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_WindowSystemObjectExtensions;
  sd.IntfIID = __uuidof(IWindowSystemObjectExtensions);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

VARIANT __fastcall TWindowSystemObjectExtensions::SendMessage(VARIANT Control/*[in]*/, 
                                                              long Message/*[in]*/, 
                                                              long wParam/*[in]*/, 
                                                              VARIANT lParam/*[in]*/)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->SendMessage(Control, Message, wParam, lParam, (VARIANT*)&pVal));
  return pVal;
}

VARIANT __fastcall TWindowSystemObjectExtensions::PostMessage(VARIANT Control/*[in]*/, 
                                                              long Message/*[in]*/, 
                                                              long wParam/*[in]*/, 
                                                              VARIANT lParam/*[in]*/)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->PostMessage(Control, Message, wParam, lParam, (VARIANT*)&pVal));
  return pVal;
}

void __fastcall TWindowSystemObjectExtensions::AddMessageHandler(LPDISPATCH Control/*[in]*/, 
                                                                 long Message/*[in]*/, 
                                                                 VARIANT MessageHandler/*[in]*/)
{
  GetDefaultInterface()->AddMessageHandler(Control/*[in]*/, Message/*[in]*/, MessageHandler/*[in]*/);
}

unsigned_long __fastcall TWindowSystemObjectExtensions::RegisterWindowMessage(BSTR Message/*[in]*/)
{
  unsigned_long MessageId;
  OLECHECK(GetDefaultInterface()->RegisterWindowMessage(Message, (unsigned_long*)&MessageId));
  return MessageId;
}

LPDISPATCH __fastcall TWindowSystemObjectExtensions::EnumWindows(void)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->EnumWindows((LPDISPATCH*)&Result));
  return Result;
}

VARIANT __fastcall TWindowSystemObjectExtensions::SendCopyData(VARIANT Control/*[in]*/, 
                                                               BSTR Data/*[in]*/)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->SendCopyData(Control, Data, (VARIANT*)&pVal));
  return pVal;
}

VARIANT __fastcall TWindowSystemObjectExtensions::PostCopyData(VARIANT Control/*[in]*/, 
                                                               BSTR Data/*[in]*/)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->PostCopyData(Control, Data, (VARIANT*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemObjectExtensions::CreateClipboard(VARIANT_BOOL ClipboardViewer/*[in,def,opt]*/)
{
  LPDISPATCH Clipboard;
  OLECHECK(GetDefaultInterface()->CreateClipboard(ClipboardViewer, (LPDISPATCH*)&Clipboard));
  return Clipboard;
}

unsigned_long __fastcall TWindowSystemObjectExtensions::GetFileSysIconIndexSmall(BSTR pVal/*[in]*/, 
                                                                                 unsigned_long FileAttributes/*[in,def,opt]*/)
{
  unsigned_long Result;
  OLECHECK(GetDefaultInterface()->GetFileSysIconIndexSmall(pVal, FileAttributes, (unsigned_long*)&Result));
  return Result;
}

unsigned_long __fastcall TWindowSystemObjectExtensions::GetFileSysIconIndexLarge(BSTR pVal/*[in]*/, 
                                                                                 unsigned_long FileAttributes/*[in,def,opt]*/)
{
  unsigned_long Result;
  OLECHECK(GetDefaultInterface()->GetFileSysIconIndexLarge(pVal, FileAttributes, (unsigned_long*)&Result));
  return Result;
}

BSTR __fastcall TWindowSystemObjectExtensions::UuidCreate(void)
{
  BSTR Result = 0;
  OLECHECK(GetDefaultInterface()->UuidCreate((BSTR*)&Result));
  return Result;
}

LPDISPATCH __fastcall TWindowSystemObjectExtensions::CreateIconBuilder(void)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->CreateIconBuilder((LPDISPATCH*)&Result));
  return Result;
}

LPDISPATCH __fastcall TWindowSystemObjectExtensions::CreateExecutor(void)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->CreateExecutor((LPDISPATCH*)&Result));
  return Result;
}

LPDISPATCH __fastcall TWindowSystemObjectExtensions::CreateFileManager(void)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->CreateFileManager((LPDISPATCH*)&Result));
  return Result;
}

LPDISPATCH __fastcall TWindowSystemObjectExtensions::get_SystemImageListSmall(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SystemImageListSmall((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TWindowSystemObjectExtensions::get_SystemImageListLarge(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SystemImageListLarge((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemObjectExtensions::get_IsWindowsXP(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IsWindowsXP((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemObjectExtensions::get_IsWindowsVista(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IsWindowsVista((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemObjectExtensions::get_IsWindows7(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IsWindows7((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemObjectExtensions::get_IsWindows8(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IsWindows8((VARIANT_BOOL*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TWindowSystemObjectExtensions::get_IsThemeActive(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_IsThemeActive((VARIANT_BOOL*)&pVal));
  return pVal;
}

IPrintInfoPtr& TPrintInfo::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPrintInfo::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPrintInfo::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPrintInfo::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPrintInfo::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPrintInfo::ConnectTo(IPrintInfoPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPrintInfo::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PrintInfo;
  sd.IntfIID = __uuidof(IPrintInfo);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TPrintInfo::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPrintInfo::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

BSTR __fastcall TPrintInfo::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TPrintInfo::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPrintInfo::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TPrintInfo::get_DocumentName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_DocumentName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPrintInfo::set_DocumentName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_DocumentName(pVal/*[in]*/);
}

long __fastcall TPrintInfo::get_LeftMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_LeftMargin((long*)&pVal));
  return pVal;
}

void __fastcall TPrintInfo::set_LeftMargin(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_LeftMargin(pVal/*[in]*/);
}

long __fastcall TPrintInfo::get_RightMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_RightMargin((long*)&pVal));
  return pVal;
}

void __fastcall TPrintInfo::set_RightMargin(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_RightMargin(pVal/*[in]*/);
}

long __fastcall TPrintInfo::get_TopMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TopMargin((long*)&pVal));
  return pVal;
}

void __fastcall TPrintInfo::set_TopMargin(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TopMargin(pVal/*[in]*/);
}

long __fastcall TPrintInfo::get_BottomMargin(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BottomMargin((long*)&pVal));
  return pVal;
}

void __fastcall TPrintInfo::set_BottomMargin(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BottomMargin(pVal/*[in]*/);
}

long __fastcall TPrintInfo::get_MarginMeasurement(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginMeasurement((long*)&pVal));
  return pVal;
}

void __fastcall TPrintInfo::set_MarginMeasurement(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginMeasurement(pVal/*[in]*/);
}

IStdDispatchPtr& TStdDispatch::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TStdDispatch::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TStdDispatch::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TStdDispatch::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TStdDispatch::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TStdDispatch::ConnectTo(IStdDispatchPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TStdDispatch::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_StdDispatch;
  sd.IntfIID = __uuidof(IStdDispatch);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

IBalloonTipPtr& TBalloonTip::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TBalloonTip::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TBalloonTip::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TBalloonTip::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TBalloonTip::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TBalloonTip::ConnectTo(IBalloonTipPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TBalloonTip::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_BalloonTip;
  sd.IntfIID = __uuidof(IBalloonTip);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TBalloonTip::get_Title(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Title((BSTR*)&pVal));
  return pVal;
}

void __fastcall TBalloonTip::set_Title(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Title(pVal/*[in]*/);
}

BSTR __fastcall TBalloonTip::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TBalloonTip::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

long __fastcall TBalloonTip::get_Icon(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Icon((long*)&pVal));
  return pVal;
}

void __fastcall TBalloonTip::set_Icon(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Icon(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TBalloonTip::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TBalloonTip::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

unsigned_long __fastcall TBalloonTip::get_Timeout(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Timeout((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TBalloonTip::set_Timeout(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Timeout(pVal/*[in]*/);
}

IWindowPtr& TWindow::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TWindow::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TWindow::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TWindow::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TWindow::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TWindow::ConnectTo(IWindowPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TWindow::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Window;
  sd.IntfIID = __uuidof(IWindow);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TWindow::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TWindow::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

BSTR __fastcall TWindow::get_ClassName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ClassName((BSTR*)&pVal));
  return pVal;
}

IClipboardPtr& TClipboard::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TClipboard::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TClipboard::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TClipboard::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TClipboard::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TClipboard::ConnectTo(IClipboardPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TClipboard::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Clipboard;
  sd.IntfIID = __uuidof(IClipboard);
  sd.EventIID= __uuidof(IClipboardEvents);
  ServerData = &sd;
}

void __fastcall TClipboard::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TClipboard::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TClipboard::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TClipboard::Empty(void)
{
  GetDefaultInterface()->Empty();
}

BSTR __fastcall TClipboard::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TClipboard::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TClipboard::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TClipboard::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TClipboard::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TClipboard::get_ClipboardViewer(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ClipboardViewer((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TClipboard::set_ClipboardViewer(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClipboardViewer(pVal/*[in]*/);
}

void __fastcall TClipboard::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

ITaskBarPtr& TTaskBar::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTaskBar::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTaskBar::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTaskBar::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTaskBar::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTaskBar::ConnectTo(ITaskBarPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTaskBar::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_TaskBar;
  sd.IntfIID = __uuidof(ITaskBar);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TTaskBar::AddImages(LPDISPATCH newVal/*[in]*/)
{
  GetDefaultInterface()->AddImages(newVal/*[in]*/);
}

void __fastcall TTaskBar::SetThumbnailClip(long Left, long Top, long Width, long Height)
{
  GetDefaultInterface()->SetThumbnailClip(Left, Top, Width, Height);
}

LPDISPATCH __fastcall TTaskBar::get_Buttons(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Buttons((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TTaskBar::set_Buttons(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Buttons(pVal/*[in]*/);
}

void __fastcall TTaskBar::_set_Buttons(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Buttons(pVal/*[in]*/);
}

long __fastcall TTaskBar::get_State(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_State((long*)&pVal));
  return pVal;
}

void __fastcall TTaskBar::set_State(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_State(pVal/*[in]*/);
}

unsigned_long __fastcall TTaskBar::get_Max(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Max((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTaskBar::set_Max(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Max(pVal/*[in]*/);
}

unsigned_long __fastcall TTaskBar::get_Position(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Position((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTaskBar::set_Position(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Position(pVal/*[in]*/);
}

IResourceUsageGraphPtr& TResourceUsageGraph::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TResourceUsageGraph::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TResourceUsageGraph::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TResourceUsageGraph::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TResourceUsageGraph::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TResourceUsageGraph::ConnectTo(IResourceUsageGraphPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TResourceUsageGraph::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ResourceUsageGraph;
  sd.IntfIID = __uuidof(IResourceUsageGraph);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TResourceUsageGraph::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TResourceUsageGraph::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TResourceUsageGraph::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TResourceUsageGraph::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TResourceUsageGraph::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TResourceUsageGraph::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TResourceUsageGraph::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TResourceUsageGraph::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TResourceUsageGraph::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TResourceUsageGraph::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TResourceUsageGraph::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

void __fastcall TResourceUsageGraph::Add(unsigned_long Offset/*[in]*/, double Value/*[in]*/)
{
  GetDefaultInterface()->Add(Offset/*[in]*/, Value/*[in]*/);
}

void __fastcall TResourceUsageGraph::AddEx(unsigned_long Offset/*[in]*/, double Value/*[in]*/, 
                                           BSTR Text/*[in,def,opt]*/)
{
  GetDefaultInterface()->AddEx(Offset/*[in]*/, Value/*[in]*/, Text/*[in,def,opt]*/);
}

void __fastcall TResourceUsageGraph::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TResourceUsageGraph::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TResourceUsageGraph::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

BSTR __fastcall TResourceUsageGraph::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TResourceUsageGraph::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TResourceUsageGraph::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TResourceUsageGraph::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TResourceUsageGraph::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TResourceUsageGraph::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TResourceUsageGraph::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TResourceUsageGraph::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TResourceUsageGraph::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TResourceUsageGraph::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TResourceUsageGraph::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TResourceUsageGraph::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TResourceUsageGraph::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TResourceUsageGraph::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TResourceUsageGraph::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TResourceUsageGraph::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TResourceUsageGraph::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TResourceUsageGraph::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TResourceUsageGraph::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TResourceUsageGraph::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TResourceUsageGraph::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TResourceUsageGraph::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TResourceUsageGraph::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TResourceUsageGraph::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TResourceUsageGraph::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TResourceUsageGraph::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TResourceUsageGraph::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TResourceUsageGraph::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TResourceUsageGraph::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TResourceUsageGraph::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Value(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Value((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Min(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Min((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TResourceUsageGraph::get_Max(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Max((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TResourceUsageGraph::get_Page(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Page((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Page(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Page(pVal/*[in]*/);
}

double __fastcall TResourceUsageGraph::get_MinYValue(void)
{
  double pVal;
  OLECHECK(GetDefaultInterface()->get_MinYValue((double*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_MinYValue(double pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinYValue(pVal/*[in]*/);
}

double __fastcall TResourceUsageGraph::get_MaxYValue(void)
{
  double pVal;
  OLECHECK(GetDefaultInterface()->get_MaxYValue((double*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_MaxYValue(double pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxYValue(pVal/*[in]*/);
}

LPDISPATCH __fastcall TResourceUsageGraph::get_BackgroundBrush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_BackgroundBrush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_BackgroundBrush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_BackgroundBrush(pVal/*[in]*/);
}

void __fastcall TResourceUsageGraph::_set_BackgroundBrush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_BackgroundBrush(pVal/*[in]*/);
}

unsigned_long __fastcall TResourceUsageGraph::get_PageControlWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_PageControlWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_PageControlWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_PageControlWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TResourceUsageGraph::get_SelectedValue(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_SelectedValue((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_SelectedValue(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelectedValue(pVal/*[in]*/);
}

double __fastcall TResourceUsageGraph::get_SelectedYValue(void)
{
  double pVal;
  OLECHECK(GetDefaultInterface()->get_SelectedYValue((double*)&pVal));
  return pVal;
}

long __fastcall TResourceUsageGraph::get_SelectedIndex(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_SelectedIndex((long*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_SelectedIndex(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelectedIndex(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_Approximation(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Approximation((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_Approximation(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Approximation(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_AlwaysFillWindow(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AlwaysFillWindow((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_AlwaysFillWindow(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AlwaysFillWindow(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TResourceUsageGraph::get_AutoRemove(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoRemove((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TResourceUsageGraph::set_AutoRemove(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoRemove(pVal/*[in]*/);
}

IPropertyPtr& TProperty::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TProperty::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TProperty::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TProperty::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TProperty::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TProperty::ConnectTo(IPropertyPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TProperty::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Property;
  sd.IntfIID = __uuidof(IProperty);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TProperty::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TProperty::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

LPDISPATCH __fastcall TProperty::Add(BSTR Text/*[in]*/)
{
  LPDISPATCH pItem;
  OLECHECK(GetDefaultInterface()->Add(Text, (LPDISPATCH*)&pItem));
  return pItem;
}

void __fastcall TProperty::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TProperty::Clear(void)
{
  GetDefaultInterface()->Clear();
}

BSTR __fastcall TProperty::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TProperty::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TProperty::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

LPUNKNOWN __fastcall TProperty::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TProperty::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TProperty::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

BSTR __fastcall TProperty::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TProperty::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProperty::get_Expanded(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Expanded((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProperty::set_Expanded(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Expanded(pVal/*[in]*/);
}

BSTR __fastcall TProperty::get_Value(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Value((BSTR*)&pVal));
  return pVal;
}

void __fastcall TProperty::set_Value(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Value(pVal/*[in]*/);
}

LPDISPATCH __fastcall TProperty::get_Control(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Control((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TProperty::get_Height(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TProperty::set_Height(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TProperty::get_Selected(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Selected((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TProperty::set_Selected(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Selected(pVal/*[in]*/);
}

IPropertyGridPtr& TPropertyGrid::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPropertyGrid::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPropertyGrid::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPropertyGrid::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPropertyGrid::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPropertyGrid::ConnectTo(IPropertyGridPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPropertyGrid::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PropertyGrid;
  sd.IntfIID = __uuidof(IPropertyGrid);
  sd.EventIID= __uuidof(IControlEvents);
  ServerData = &sd;
}

void __fastcall TPropertyGrid::InvokeEvent(int id, Vcl::Oleserver::TVariantArray& params)
{
  switch(id)
  {
    case 1: {
      if (OnClick1) {
        (OnClick1)(this, params[0].pdispVal);
      }
      break;
      }
    case 2: {
      if (OnDblClick1) {
        (OnDblClick1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 3: {
      if (OnChange1) {
        (OnChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 4: {
      if (OnKeyDown1) {
        (OnKeyDown1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 5: {
      if (OnKeyUp1) {
        (OnKeyUp1)(this, params[0].pdispVal, params[1], params[2]);
      }
      break;
      }
    case 6: {
      if (OnMouseEnter1) {
        (OnMouseEnter1)(this, params[0].pdispVal);
      }
      break;
      }
    case 7: {
      if (OnMouseLeave1) {
        (OnMouseLeave1)(this, params[0].pdispVal);
      }
      break;
      }
    case 8: {
      if (OnMouseDown1) {
        (OnMouseDown1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 9: {
      if (OnMouseMove1) {
        (OnMouseMove1)(this, params[0].pdispVal, params[1], params[2], params[3]);
      }
      break;
      }
    case 10: {
      if (OnMouseUp1) {
        (OnMouseUp1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 11: {
      if (OnResize1) {
        (OnResize1)(this, params[0].pdispVal);
      }
      break;
      }
    case 12: {
      if (OnMove1) {
        (OnMove1)(this, params[0].pdispVal);
      }
      break;
      }
    case 13: {
      if (OnDestroy1) {
        (OnDestroy1)(this, params[0].pdispVal);
      }
      break;
      }
    case 14: {
      if (OnShow1) {
        (OnShow1)(this, params[0].pdispVal);
      }
      break;
      }
    case 15: {
      if (OnHide1) {
        (OnHide1)(this, params[0].pdispVal);
      }
      break;
      }
    case 16: {
      if (OnEnabledChange1) {
        (OnEnabledChange1)(this, params[0].pdispVal);
      }
      break;
      }
    case 17: {
      if (OnSetFocus1) {
        (OnSetFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 18: {
      if (OnKillFocus1) {
        (OnKillFocus1)(this, params[0].pdispVal);
      }
      break;
      }
    case 100: {
      if (OnMouseWheel1) {
        (OnMouseWheel1)(this, params[0].pdispVal, params[1], params[2], params[3], params[4]);
      }
      break;
      }
    case 101: {
      if (OnBeginDock1) {
        (OnBeginDock1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal);
      }
      break;
      }
    case 102: {
      if (OnDockControlCreate1) {
        (OnDockControlCreate1)(this, params[0].pdispVal, params[1].pdispVal, params[2].pdispVal, params[3].pdispVal);
      }
      break;
      }
    case 103: {
      if (OnUndockQuery1) {
        (OnUndockQuery1)(this, params[0].pdispVal, params[1].pdispVal);
      }
      break;
      }
    case 104: {
      if (OnUndock1) {
        (OnUndock1)(this, params[0].pdispVal);
      }
      break;
      }
    default:
      break;
  }
}

void __fastcall TPropertyGrid::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPropertyGrid::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TPropertyGrid::Show(void)
{
  GetDefaultInterface()->Show();
}

void __fastcall TPropertyGrid::Hide(void)
{
  GetDefaultInterface()->Hide();
}

void __fastcall TPropertyGrid::Destroy(void)
{
  GetDefaultInterface()->Destroy();
}

void __fastcall TPropertyGrid::SetBounds(long Left/*[in]*/, long Top/*[in]*/, 
                                         long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  GetDefaultInterface()->SetBounds(Left/*[in]*/, Top/*[in]*/, Width/*[in,def,opt]*/, 
                                   Height/*[in,def,opt]*/);
}

void __fastcall TPropertyGrid::CenterControl(void)
{
  GetDefaultInterface()->CenterControl();
}

void __fastcall TPropertyGrid::SetFocus(void)
{
  GetDefaultInterface()->SetFocus();
}

void __fastcall TPropertyGrid::Repaint(void)
{
  GetDefaultInterface()->Repaint();
}

VARIANT_BOOL __fastcall TPropertyGrid::PropertyHasValue(BSTR PropertyName/*[in]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->PropertyHasValue(PropertyName, (VARIANT_BOOL*)&Result));
  return Result;
}

LPDISPATCH __fastcall TPropertyGrid::CreateButton(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateCheckBox(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    BSTR Text/*[in,def,opt]*/, 
                                                    VARIANT_BOOL Checked/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCheckBox(Left, Top, Width, Height, Text, Checked, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateRadioButton(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/, 
                                                       BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRadioButton(Left, Top, Width, Height, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateEdit(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                long Width/*[in,def,opt]*/, 
                                                long Height/*[in,def,opt]*/, 
                                                long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateEdit(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateListBox(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateComboBox(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateComboBox(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateFrame(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateGroupBox(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateGroupBox(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateProgressBar(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/, 
                                                       long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateProgressBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateTabControl(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTabControl(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateToolBar(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateToolBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateMenuBar(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateMenuBar(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateReBar(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/, 
                                                 long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateReBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateStatusBar(void)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateStatusBar((LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateHyperLink(long Left/*[in,def,opt]*/, 
                                                     long Top/*[in,def,opt]*/, 
                                                     long Width/*[in,def,opt]*/, 
                                                     long Height/*[in,def,opt]*/, 
                                                     BSTR Url/*[in,def,opt]*/, 
                                                     BSTR Label/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHyperLink(Left, Top, Width, Height, Url, Label, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreatePager(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePager(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateScrollBar(long Left/*[in,def,opt]*/, 
                                                     long Top/*[in,def,opt]*/, 
                                                     long Width/*[in,def,opt]*/, 
                                                     long Height/*[in,def,opt]*/, 
                                                     long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateScrollBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateActiveXControl(long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          BSTR ID/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControl(Left, Top, Width, Height, ID, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateActiveXControlLicensed(long Left/*[in]*/, 
                                                                  long Top/*[in]*/, 
                                                                  long Width/*[in]*/, 
                                                                  long Height/*[in]*/, 
                                                                  BSTR ID/*[in]*/, 
                                                                  BSTR LicKey/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateActiveXControlLicensed(Left, Top, Width, Height, ID, LicKey, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateHeader(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHeader(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateListView(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateListView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateTreeView(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTreeView(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateRichEdit(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    long Style/*[in,def,opt]*/, 
                                                    long Version/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateRichEdit(Left, Top, Width, Height, Style, Version, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateAnimate(long Left/*[in,def,opt]*/, 
                                                   long Top/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAnimate(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateHotKey(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateHotKey(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateTrackBar(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateTrackBar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateUpDown(long Left/*[in,def,opt]*/, 
                                                  long Top/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/, 
                                                  long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateUpDown(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateDateTimePicker(long Left/*[in,def,opt]*/, 
                                                          long Top/*[in,def,opt]*/, 
                                                          long Width/*[in,def,opt]*/, 
                                                          long Height/*[in,def,opt]*/, 
                                                          long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateDateTimePicker(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateCalendar(long Left/*[in,def,opt]*/, 
                                                    long Top/*[in,def,opt]*/, 
                                                    long Width/*[in,def,opt]*/, 
                                                    long Height/*[in,def,opt]*/, 
                                                    long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateCalendar(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateIPAddress(long Left/*[in,def,opt]*/, 
                                                     long Top/*[in,def,opt]*/, 
                                                     long Width/*[in,def,opt]*/, 
                                                     long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateIPAddress(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateSplitter(unsigned_short Align/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitter(Align, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateSplitPanel(long Left/*[in,def,opt]*/, 
                                                      long Top/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/, 
                                                      VARIANT_BOOL Vertical/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateSplitPanel(Left, Top, Width, Height, Vertical, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateResourceUsageGraph(long Left/*[in,def,opt]*/, 
                                                              long Top/*[in,def,opt]*/, 
                                                              long Width/*[in,def,opt]*/, 
                                                              long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateResourceUsageGraph(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreatePropertyGrid(long Left/*[in,def,opt]*/, 
                                                        long Top/*[in,def,opt]*/, 
                                                        long Width/*[in,def,opt]*/, 
                                                        long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePropertyGrid(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateLabel(long Left/*[in,def,opt]*/, long Top/*[in,def,opt]*/, 
                                                 long Width/*[in,def,opt]*/, 
                                                 long Height/*[in,def,opt]*/, 
                                                 long Style/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateLabel(Left, Top, Width, Height, Style, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreatePageControl(long Left/*[in,def,opt]*/, 
                                                       long Top/*[in,def,opt]*/, 
                                                       long Width/*[in,def,opt]*/, 
                                                       long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreatePageControl(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::CreateAutoSplitFrame(long Left/*[in,def,opt]*/, 
                                                          long Top/*[in,def,opt]*/, 
                                                          long Width/*[in,def,opt]*/, 
                                                          long Height/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->CreateAutoSplitFrame(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Line(long Ax/*[in]*/, long Ay/*[in]*/, long Bx/*[in]*/, 
                                          long By/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Line(Ax, Ay, Bx, By, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Rectangle(long Left/*[in]*/, long Top/*[in]*/, 
                                               long Width/*[in]*/, long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Rectangle(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::RoundRect(long Left/*[in]*/, long Top/*[in]*/, 
                                               long Width/*[in]*/, long Height/*[in]*/, 
                                               long nWidth/*[in]*/, long nHeight/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->RoundRect(Left, Top, Width, Height, nWidth, nHeight, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Circle(long x/*[in]*/, long y/*[in]*/, long r/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Circle(x, y, r, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Ellipse(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                             long Height/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Ellipse(Left, Top, Width, Height, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Arc(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                         long Height/*[in]*/, long nXStartArc/*[in]*/, 
                                         long nYStartArc/*[in]*/, long nXEndArc/*[in]*/, 
                                         long nYEndArc/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Arc(Left, Top, Width, Height, nXStartArc, nYStartArc, nXEndArc, 
                                      nYEndArc, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Chord(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                           long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                           long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                           long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Chord(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                        nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Pie(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                         long Height/*[in]*/, long nXRadial1/*[in]*/, 
                                         long nYRadial1/*[in]*/, long nXRadial2/*[in]*/, 
                                         long nYRadial2/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Pie(Left, Top, Width, Height, nXRadial1, nYRadial1, nXRadial2, 
                                      nYRadial2, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Polygon(LPSAFEARRAY Data/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Polygon(Data, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::TextOut(long x/*[in]*/, long y/*[in]*/, 
                                             BSTR Text/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextOut(x, y, Text, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::TextRect(long Left/*[in]*/, long Top/*[in]*/, 
                                              long Width/*[in]*/, long Height/*[in]*/, 
                                              BSTR Text/*[in]*/, unsigned_long Flags/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->TextRect(Left, Top, Width, Height, Text, Flags, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::DrawImage(long Left/*[in]*/, long Top/*[in]*/, 
                                               long Width/*[in]*/, long Height/*[in]*/, 
                                               VARIANT Image/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawImage(Left, Top, Width, Height, Image, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::DrawRegion(long Left/*[in]*/, long Top/*[in]*/, 
                                                unsigned_long Region/*[in]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->DrawRegion(Left, Top, Region, (LPDISPATCH*)&pControl));
  return pControl;
}

LPDISPATCH __fastcall TPropertyGrid::Bevel(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                           long Height/*[in]*/, long BevelOuter/*[in,def,opt]*/, 
                                           long BevelInner/*[in,def,opt]*/, 
                                           unsigned_long BorderWidth/*[in,def,opt]*/, 
                                           unsigned_long BevelWidth/*[in,def,opt]*/)
{
  LPDISPATCH pControl;
  OLECHECK(GetDefaultInterface()->Bevel(Left, Top, Width, Height, BevelOuter, BevelInner, 
                                        BorderWidth, BevelWidth, (LPDISPATCH*)&pControl));
  return pControl;
}

void __fastcall TPropertyGrid::BeginUpdate(void)
{
  GetDefaultInterface()->BeginUpdate();
}

void __fastcall TPropertyGrid::EndUpdate(void)
{
  GetDefaultInterface()->EndUpdate();
}

LPDISPATCH __fastcall TPropertyGrid::Get(BSTR Name/*[in]*/)
{
  LPDISPATCH Control;
  OLECHECK(GetDefaultInterface()->Get(Name, (LPDISPATCH*)&Control));
  return Control;
}

LPDISPATCH __fastcall TPropertyGrid::Lookup(VARIANT Value/*[in]*/)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->Lookup(Value, (LPDISPATCH*)&pVal));
  return pVal;
}

BSTR __fastcall TPropertyGrid::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TPropertyGrid::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TPropertyGrid::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPropertyGrid::get_Root(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Root((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPropertyGrid::get_Form(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Form((LPDISPATCH*)&pVal));
  return pVal;
}

long __fastcall TPropertyGrid::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

unsigned_short __fastcall TPropertyGrid::get_MinWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MinWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPropertyGrid::get_MinHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MinHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MinHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MinHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPropertyGrid::get_MaxWidth(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxWidth((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MaxWidth(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxWidth(pVal/*[in]*/);
}

unsigned_short __fastcall TPropertyGrid::get_MaxHeight(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_MaxHeight((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MaxHeight(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaxHeight(pVal/*[in]*/);
}

unsigned_short __fastcall TPropertyGrid::get_Align(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_Align((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Align(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_Align(pVal/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_ParentColor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentColor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ParentColor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Font(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Font((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Font(pVal/*[in]*/);
}

void __fastcall TPropertyGrid::_set_Font(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Font(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_ParentFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ParentFont(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentFont(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Pen(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Pen((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Pen(pVal/*[in]*/);
}

void __fastcall TPropertyGrid::_set_Pen(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Pen(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Brush(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Brush((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Brush(pVal/*[in]*/);
}

void __fastcall TPropertyGrid::_set_Brush(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_Brush(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_PopupMenu(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_PopupMenu((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_PopupMenu(pVal/*[in]*/);
}

void __fastcall TPropertyGrid::_set_PopupMenu(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_PopupMenu(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_Border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Border((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Border(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Border(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_Focused(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Focused((VARIANT_BOOL*)&pVal));
  return pVal;
}

long __fastcall TPropertyGrid::get_TabOrder(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_TabOrder((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_TabOrder(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabOrder(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_TabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_TabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_TabStop(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_TabStop(pVal/*[in]*/);
}

BSTR __fastcall TPropertyGrid::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Name((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Name(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Name(pVal/*[in]*/);
}

BSTR __fastcall TPropertyGrid::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_ClientWidth(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientWidth((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ClientWidth(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientWidth(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_ClientHeight(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_ClientHeight((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ClientHeight(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ClientHeight(pVal/*[in]*/);
}

VARIANT __fastcall TPropertyGrid::get_Cursor(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Cursor(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

VARIANT __fastcall TPropertyGrid::get_Hint(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Hint((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Hint(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Hint(pVal/*[in]*/);
}

BSTR __fastcall TPropertyGrid::get_ThemeApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ThemeApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ThemeApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ThemeApplicationName(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Docking(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Docking((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPropertyGrid::get_Layering(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Layering((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_OnClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnClick(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnDblClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDblClick(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnChange(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnKeyDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyDown(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnKeyUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKeyUp(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnMouseEnter(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseEnter(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnMouseLeave(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseLeave(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnMouseUp(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseUp(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnMouseMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseMove(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnMouseDown(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseDown(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnResize(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnResize(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnMove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMove(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnDestroy(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDestroy(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnShow(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnShow(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnHide(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnHide(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnEnabledChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnEnabledChange(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnSetFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnSetFocus(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnKillFocus(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnKillFocus(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnMouseWheel(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnMouseWheel(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnBeginDock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnBeginDock(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnDockControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDockControlCreate(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnUndockQuery(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndockQuery(Param1/*[in]*/);
}

void __fastcall TPropertyGrid::set_OnUndock(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnUndock(Param1/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_Debug(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Debug((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Debug(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Debug(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_ParentMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ParentMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentMouseWheel(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_StopMouseWheel(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_StopMouseWheel((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_StopMouseWheel(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_StopMouseWheel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPropertyGrid::get_ExtendedProperties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ExtendedProperties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPropertyGrid::get_MaskEvents(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_MaskEvents((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MaskEvents(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_MaskEvents(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Controls(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Controls((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TPropertyGrid::get_BorderWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BorderWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_BorderWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderWidth(pVal/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_BevelWidth(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelWidth((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_BevelWidth(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelWidth(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_BevelOuter(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelOuter((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_BevelOuter(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelOuter(pVal/*[in]*/);
}

long __fastcall TPropertyGrid::get_BevelInner(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_BevelInner((long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_BevelInner(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_BevelInner(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_GraphFont(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_GraphFont((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_GraphFont(pVal/*[in]*/);
}

void __fastcall TPropertyGrid::_set_GraphFont(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->_set_GraphFont(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_AutoScroll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoScroll((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_AutoScroll(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoScroll(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_Tracking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Tracking((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Tracking(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Tracking(pVal/*[in]*/);
}

unsigned_short __fastcall TPropertyGrid::get_CaptureMouse(void)
{
  unsigned_short pVal;
  OLECHECK(GetDefaultInterface()->get_CaptureMouse((unsigned_short*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_CaptureMouse(unsigned_short pVal/*[in]*/)
{
  GetDefaultInterface()->set_CaptureMouse(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_ParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_BorderParentBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_BorderParentBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_BorderParentBackground(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_BorderParentBackground(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_AutoSplit(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoSplit((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_AutoSplit(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoSplit(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TPropertyGrid::get_GroupBox(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_GroupBox((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_GroupBox(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_GroupBox(pVal/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_Margin(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Margin((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Margin(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Margin(pVal/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_MarginLeft(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginLeft((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MarginLeft(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginLeft(pVal/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_MarginTop(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginTop((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MarginTop(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginTop(pVal/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_MarginRight(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginRight((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MarginRight(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginRight(pVal/*[in]*/);
}

unsigned_long __fastcall TPropertyGrid::get_MarginBottom(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_MarginBottom((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_MarginBottom(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_MarginBottom(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Items(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Items((LPDISPATCH*)&pVal));
  return pVal;
}

unsigned_long __fastcall TPropertyGrid::get_ValueColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ValueColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_ValueColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ValueColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_Property(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Property((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_Property(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_Property(pVal/*[in]*/);
}

LPDISPATCH __fastcall TPropertyGrid::get_SelectedItem(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SelectedItem((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TPropertyGrid::set_SelectedItem(LPDISPATCH pVal/*[in]*/)
{
  GetDefaultInterface()->set_SelectedItem(pVal/*[in]*/);
}

IConsolePtr& TConsole::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TConsole::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TConsole::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TConsole::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TConsole::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TConsole::ConnectTo(IConsolePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TConsole::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Console;
  sd.IntfIID = __uuidof(IConsole);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TConsole::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TConsole::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TConsole::WriteLine(BSTR Text/*[in]*/)
{
  GetDefaultInterface()->WriteLine(Text/*[in]*/);
}

void __fastcall TConsole::Write(BSTR Text/*[in]*/)
{
  GetDefaultInterface()->Write(Text/*[in]*/);
}

BSTR __fastcall TConsole::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TConsole::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TConsole::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TConsole::get_Visible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Visible((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TConsole::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Visible(pVal/*[in]*/);
}

IDockingPtr& TDocking::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TDocking::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TDocking::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TDocking::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TDocking::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TDocking::ConnectTo(IDockingPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TDocking::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Docking;
  sd.IntfIID = __uuidof(IDocking);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TDocking::DockAsChild(LPDISPATCH Control/*[in]*/, 
                                      unsigned_short ControlAlign/*[in]*/)
{
  GetDefaultInterface()->DockAsChild(Control/*[in]*/, ControlAlign/*[in]*/);
}

void __fastcall TDocking::DockAsNeighbour(LPDISPATCH Control/*[in]*/, 
                                          unsigned_short ControlAlign/*[in,def,opt]*/)
{
  GetDefaultInterface()->DockAsNeighbour(Control/*[in]*/, ControlAlign/*[in,def,opt]*/);
}

void __fastcall TDocking::UnDock(VARIANT_BOOL ControlVisible/*[in,def,opt]*/)
{
  GetDefaultInterface()->UnDock(ControlVisible/*[in,def,opt]*/);
}

BSTR __fastcall TDocking::get_UniqueId(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_UniqueId((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_UniqueId(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_UniqueId(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDocking::get_AllowDockAsChild(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowDockAsChild((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_AllowDockAsChild(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowDockAsChild(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDocking::get_AllowDockAsNeighbour(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowDockAsNeighbour((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_AllowDockAsNeighbour(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowDockAsNeighbour(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDocking::get_DropTarget(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DropTarget((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_DropTarget(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DropTarget(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDocking::get_AlwaysDockTab(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AlwaysDockTab((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_AlwaysDockTab(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AlwaysDockTab(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDocking::get_AlwaysDockPage(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AlwaysDockPage((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_AlwaysDockPage(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AlwaysDockPage(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDocking::get_DockToolWindow(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DockToolWindow((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_DockToolWindow(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_DockToolWindow(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDocking::get_AutoCreated(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AutoCreated((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_AutoCreated(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AutoCreated(pVal/*[in]*/);
}

long __fastcall TDocking::get_PageControlTag(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_PageControlTag((long*)&pVal));
  return pVal;
}

void __fastcall TDocking::set_PageControlTag(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_PageControlTag(pVal/*[in]*/);
}

IGraphicElementPtr& TGraphicElement::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TGraphicElement::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TGraphicElement::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TGraphicElement::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TGraphicElement::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TGraphicElement::ConnectTo(IGraphicElementPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TGraphicElement::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_GraphicElement;
  sd.IntfIID = __uuidof(IGraphicElement);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

unsigned_long __fastcall TGraphicElement::get_Color(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Color((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TGraphicElement::set_Color(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Color(pVal/*[in]*/);
}

unsigned_long __fastcall TGraphicElement::get_FontColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_FontColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TGraphicElement::set_FontColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_FontColor(pVal/*[in]*/);
}

LPDISPATCH __fastcall TGraphicElement::get_Normal(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Normal((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TGraphicElement::get_Selected(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Selected((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TGraphicElement::get_Hot(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Hot((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TGraphicElement::get_ControlFocused(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_ControlFocused((LPDISPATCH*)&pVal));
  return pVal;
}

IBeginDockContextPtr& TBeginDockContext::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TBeginDockContext::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TBeginDockContext::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TBeginDockContext::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TBeginDockContext::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TBeginDockContext::ConnectTo(IBeginDockContextPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TBeginDockContext::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_BeginDockContext;
  sd.IntfIID = __uuidof(IBeginDockContext);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

VARIANT_BOOL __fastcall TBeginDockContext::get_AllowDropTargetPageControlType(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowDropTargetPageControlType((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TBeginDockContext::set_AllowDropTargetPageControlType(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowDropTargetPageControlType(pVal/*[in]*/);
}

IDockControlCreateContextPtr& TDockControlCreateContext::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TDockControlCreateContext::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TDockControlCreateContext::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TDockControlCreateContext::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TDockControlCreateContext::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TDockControlCreateContext::ConnectTo(IDockControlCreateContextPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TDockControlCreateContext::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_DockControlCreateContext;
  sd.IntfIID = __uuidof(IDockControlCreateContext);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

VARIANT_BOOL __fastcall TDockControlCreateContext::get_UseDropTargetPageControlType(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_UseDropTargetPageControlType((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDockControlCreateContext::set_UseDropTargetPageControlType(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_UseDropTargetPageControlType(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDockControlCreateContext::get_Target(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Target((LPDISPATCH*)&pVal));
  return pVal;
}

IUndockContextPtr& TUndockContext::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TUndockContext::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TUndockContext::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TUndockContext::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TUndockContext::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TUndockContext::ConnectTo(IUndockContextPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TUndockContext::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_UndockContext;
  sd.IntfIID = __uuidof(IUndockContext);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TUndockContext::Put(VARIANT newVal/*[in]*/)
{
  GetDefaultInterface()->Put(newVal/*[in]*/);
}

VARIANT __fastcall TUndockContext::get_Value(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_Value((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TUndockContext::set_Value(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_Value(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TUndockContext::get_ControlVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ControlVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

IColorPtr& TColor::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TColor::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TColor::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TColor::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TColor::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TColor::ConnectTo(IColorPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TColor::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Color;
  sd.IntfIID = __uuidof(IColor);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

unsigned_long __fastcall TColor::Light(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/)
{
  unsigned_long Result;
  OLECHECK(GetDefaultInterface()->Light(Color, Shift, (unsigned_long*)&Result));
  return Result;
}

unsigned_long __fastcall TColor::Dark(unsigned_long Color/*[in]*/, double Shift/*[in,def,opt]*/)
{
  unsigned_long Result;
  OLECHECK(GetDefaultInterface()->Dark(Color, Shift, (unsigned_long*)&Result));
  return Result;
}

unsigned_long __fastcall TColor::Invert(unsigned_long Color/*[in]*/)
{
  unsigned_long Result;
  OLECHECK(GetDefaultInterface()->Invert(Color, (unsigned_long*)&Result));
  return Result;
}

ILayeringPtr& TLayering::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TLayering::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TLayering::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TLayering::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TLayering::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TLayering::ConnectTo(ILayeringPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TLayering::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Layering;
  sd.IntfIID = __uuidof(ILayering);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

VARIANT_BOOL __fastcall TLayering::get_Layered(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Layered((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TLayering::set_Layered(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Layered(pVal/*[in]*/);
}

unsigned_char __fastcall TLayering::get_Alpha(void)
{
  unsigned_char pVal;
  OLECHECK(GetDefaultInterface()->get_Alpha((unsigned_char*)&pVal));
  return pVal;
}

void __fastcall TLayering::set_Alpha(unsigned_char pVal/*[in]*/)
{
  GetDefaultInterface()->set_Alpha(pVal/*[in]*/);
}

unsigned_long __fastcall TLayering::get_TransparentColor(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_TransparentColor((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TLayering::set_TransparentColor(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_TransparentColor(pVal/*[in]*/);
}

unsigned_long __fastcall TLayering::get_Flags(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Flags((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TLayering::set_Flags(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Flags(pVal/*[in]*/);
}

IMessageDialogPtr& TMessageDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TMessageDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TMessageDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TMessageDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TMessageDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TMessageDialog::ConnectTo(IMessageDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TMessageDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_MessageDialog;
  sd.IntfIID = __uuidof(IMessageDialog);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TMessageDialog::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TMessageDialog::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TMessageDialog::AddButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  GetDefaultInterface()->AddButton(ID/*[in]*/, Text/*[in,def,opt]*/);
}

void __fastcall TMessageDialog::AddIcon(unsigned_long ID)
{
  GetDefaultInterface()->AddIcon(ID);
}

long __fastcall TMessageDialog::Execute(void)
{
  long Result;
  OLECHECK(GetDefaultInterface()->Execute((long*)&Result));
  return Result;
}

BSTR __fastcall TMessageDialog::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TMessageDialog::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TMessageDialog::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

long __fastcall TMessageDialog::get_DefaultButton(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_DefaultButton((long*)&pVal));
  return pVal;
}

void __fastcall TMessageDialog::set_DefaultButton(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_DefaultButton(pVal/*[in]*/);
}

long __fastcall TMessageDialog::get_CancelButton(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_CancelButton((long*)&pVal));
  return pVal;
}

void __fastcall TMessageDialog::set_CancelButton(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_CancelButton(pVal/*[in]*/);
}

ITaskDialogPtr& TTaskDialog::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TTaskDialog::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TTaskDialog::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TTaskDialog::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TTaskDialog::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TTaskDialog::ConnectTo(ITaskDialogPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TTaskDialog::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_TaskDialog;
  sd.IntfIID = __uuidof(ITaskDialog);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TTaskDialog::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTaskDialog::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TTaskDialog::AddButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  GetDefaultInterface()->AddButton(ID/*[in]*/, Text/*[in,def,opt]*/);
}

void __fastcall TTaskDialog::AddCommandLinkButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  GetDefaultInterface()->AddCommandLinkButton(ID/*[in]*/, Text/*[in,def,opt]*/);
}

void __fastcall TTaskDialog::AddRadioButton(long ID/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  GetDefaultInterface()->AddRadioButton(ID/*[in]*/, Text/*[in,def,opt]*/);
}

long __fastcall TTaskDialog::Execute(void)
{
  long Result;
  OLECHECK(GetDefaultInterface()->Execute((long*)&Result));
  return Result;
}

BSTR __fastcall TTaskDialog::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TTaskDialog::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

unsigned_long __fastcall TTaskDialog::get_Icon(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Icon((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_Icon(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Icon(pVal/*[in]*/);
}

BSTR __fastcall TTaskDialog::get_MainInstruction(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_MainInstruction((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_MainInstruction(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_MainInstruction(pVal/*[in]*/);
}

BSTR __fastcall TTaskDialog::get_ExpandedInformation(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ExpandedInformation((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_ExpandedInformation(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ExpandedInformation(pVal/*[in]*/);
}

BSTR __fastcall TTaskDialog::get_Footer(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Footer((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_Footer(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Footer(pVal/*[in]*/);
}

BSTR __fastcall TTaskDialog::get_ExpandedControlText(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ExpandedControlText((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_ExpandedControlText(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ExpandedControlText(pVal/*[in]*/);
}

BSTR __fastcall TTaskDialog::get_CollapsedControlText(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_CollapsedControlText((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_CollapsedControlText(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_CollapsedControlText(pVal/*[in]*/);
}

BSTR __fastcall TTaskDialog::get_VerificationText(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_VerificationText((BSTR*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_VerificationText(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_VerificationText(pVal/*[in]*/);
}

unsigned_long __fastcall TTaskDialog::get_FooterIcon(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_FooterIcon((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_FooterIcon(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_FooterIcon(pVal/*[in]*/);
}

long __fastcall TTaskDialog::get_RadioButton(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_RadioButton((long*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_RadioButton(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_RadioButton(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_AllowDialogCancellation(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowDialogCancellation((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_AllowDialogCancellation(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowDialogCancellation(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_UseCommandLinks(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_UseCommandLinks((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_UseCommandLinks(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_UseCommandLinks(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_UseCommandLinksNoIcon(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_UseCommandLinksNoIcon((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_UseCommandLinksNoIcon(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_UseCommandLinksNoIcon(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_ExpandFooterArea(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ExpandFooterArea((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_ExpandFooterArea(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ExpandFooterArea(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_ExpandedByDefault(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ExpandedByDefault((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_ExpandedByDefault(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ExpandedByDefault(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_VerificationFlagChecked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_VerificationFlagChecked((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_VerificationFlagChecked(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_VerificationFlagChecked(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_ShowProgressBar(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ShowProgressBar((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_ShowProgressBar(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ShowProgressBar(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_ShowMarqueeProgressBar(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ShowMarqueeProgressBar((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_ShowMarqueeProgressBar(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ShowMarqueeProgressBar(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_CallbackTimer(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CallbackTimer((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_CallbackTimer(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CallbackTimer(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_PositionRelativeToWindow(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_PositionRelativeToWindow((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_PositionRelativeToWindow(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_PositionRelativeToWindow(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_NoDefaultRadioButton(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_NoDefaultRadioButton((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_NoDefaultRadioButton(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_NoDefaultRadioButton(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TTaskDialog::get_CanBeMinimized(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_CanBeMinimized((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_CanBeMinimized(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_CanBeMinimized(pVal/*[in]*/);
}

long __fastcall TTaskDialog::get_DefaultButton(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_DefaultButton((long*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_DefaultButton(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_DefaultButton(pVal/*[in]*/);
}

long __fastcall TTaskDialog::get_Position(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Position((long*)&pVal));
  return pVal;
}

void __fastcall TTaskDialog::set_Position(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Position(pVal/*[in]*/);
}

void __fastcall TTaskDialog::set_OnTimer(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnTimer(Param1/*[in]*/);
}

void __fastcall TTaskDialog::set_OnButtonClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnButtonClick(Param1/*[in]*/);
}

IIconPtr& TIcon::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TIcon::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TIcon::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TIcon::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TIcon::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TIcon::ConnectTo(IIconPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TIcon::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Icon;
  sd.IntfIID = __uuidof(IIcon);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

IRectPtr& TRect::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TRect::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TRect::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TRect::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TRect::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TRect::ConnectTo(IRectPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TRect::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Rect;
  sd.IntfIID = __uuidof(IRect);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

long __fastcall TRect::get_Left(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Left((long*)&pVal));
  return pVal;
}

void __fastcall TRect::set_Left(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Left(pVal/*[in]*/);
}

long __fastcall TRect::get_Top(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Top((long*)&pVal));
  return pVal;
}

void __fastcall TRect::set_Top(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Top(pVal/*[in]*/);
}

long __fastcall TRect::get_Width(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Width((long*)&pVal));
  return pVal;
}

void __fastcall TRect::set_Width(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Width(pVal/*[in]*/);
}

long __fastcall TRect::get_Height(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Height((long*)&pVal));
  return pVal;
}

void __fastcall TRect::set_Height(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Height(pVal/*[in]*/);
}

long __fastcall TRect::get_Right(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Right((long*)&pVal));
  return pVal;
}

void __fastcall TRect::set_Right(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Right(pVal/*[in]*/);
}

long __fastcall TRect::get_Bottom(void)
{
  long pVal;
  OLECHECK(GetDefaultInterface()->get_Bottom((long*)&pVal));
  return pVal;
}

void __fastcall TRect::set_Bottom(long pVal/*[in]*/)
{
  GetDefaultInterface()->set_Bottom(pVal/*[in]*/);
}

IIconBuilderPtr& TIconBuilder::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TIconBuilder::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TIconBuilder::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TIconBuilder::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TIconBuilder::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TIconBuilder::ConnectTo(IIconBuilderPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TIconBuilder::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_IconBuilder;
  sd.IntfIID = __uuidof(IIconBuilder);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TIconBuilder::Add(VARIANT Image/*[in]*/, VARIANT_BOOL Transparent/*[in,def,opt]*/, 
                                  unsigned_long x/*[in,def,opt]*/, unsigned_long y/*[in,def,opt]*/)
{
  GetDefaultInterface()->Add(Image/*[in]*/, Transparent/*[in,def,opt]*/, x/*[in,def,opt]*/, 
                             y/*[in,def,opt]*/);
}

void __fastcall TIconBuilder::Save(BSTR FileName/*[in]*/)
{
  GetDefaultInterface()->Save(FileName/*[in]*/);
}

void __fastcall TIconBuilder::Clear(void)
{
  GetDefaultInterface()->Clear();
}

VARIANT_BOOL __fastcall TIconBuilder::get_Cursor(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Cursor((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TIconBuilder::set_Cursor(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Cursor(pVal/*[in]*/);
}

IDesignReferencePtr& TDesignReference::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TDesignReference::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TDesignReference::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TDesignReference::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TDesignReference::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TDesignReference::ConnectTo(IDesignReferencePtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TDesignReference::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_DesignReference;
  sd.IntfIID = __uuidof(IDesignReference);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TDesignReference::Remove(VARIANT Index/*[in]*/)
{
  GetDefaultInterface()->Remove(Index/*[in]*/);
}

void __fastcall TDesignReference::Clear(void)
{
  GetDefaultInterface()->Clear();
}

void __fastcall TDesignReference::ExChange(VARIANT A/*[in]*/, VARIANT B/*[in]*/)
{
  GetDefaultInterface()->ExChange(A/*[in]*/, B/*[in]*/);
}

LPDISPATCH __fastcall TDesignReference::Add(BSTR Text/*[in]*/, 
                                            BSTR CurrentAbsoluteFileName/*[in,def,opt]*/)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->Add(Text, CurrentAbsoluteFileName, (LPDISPATCH*)&Result));
  return Result;
}

LPDISPATCH __fastcall TDesignReference::Find(BSTR Text/*[in]*/)
{
  LPDISPATCH Result;
  OLECHECK(GetDefaultInterface()->Find(Text, (LPDISPATCH*)&Result));
  return Result;
}

LPDISPATCH __fastcall TDesignReference::Lookup(BSTR Value/*[in]*/)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->Lookup(Value, (LPDISPATCH*)&pVal));
  return pVal;
}

LPUNKNOWN __fastcall TDesignReference::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TDesignReference::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TDesignReference::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

BSTR __fastcall TDesignReference::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDesignReference::set_Text(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_Text(pVal/*[in]*/);
}

unsigned_long __fastcall TDesignReference::get_ReferenceType(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ReferenceType((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TDesignReference::set_ReferenceType(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_ReferenceType(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDesignReference::get_Main(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Main((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDesignReference::set_Main(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Main(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDesignReference::get_Design(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Design((LPDISPATCH*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TDesignReference::get_Parent(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Parent((LPDISPATCH*)&pVal));
  return pVal;
}

BSTR __fastcall TDesignReference::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ID((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDesignReference::set_ID(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ID(pVal/*[in]*/);
}

BSTR __fastcall TDesignReference::get_FileName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_FileName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDesignReference::set_FileName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_FileName(pVal/*[in]*/);
}

IDesignPtr& TDesign::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TDesign::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TDesign::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TDesign::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TDesign::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TDesign::ConnectTo(IDesignPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TDesign::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Design;
  sd.IntfIID = __uuidof(IDesign);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TDesign::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TDesign::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

BSTR __fastcall TDesign::Save(void)
{
  BSTR Layout = 0;
  OLECHECK(GetDefaultInterface()->Save((BSTR*)&Layout));
  return Layout;
}

void __fastcall TDesign::Load(BSTR Layout/*[in]*/, unsigned_long Flags/*[in,def,opt]*/, 
                              VARIANT Resources/*[in,opt]*/)
{
  GetDefaultInterface()->Load(Layout/*[in]*/, Flags/*[in,def,opt]*/, Resources/*[in,opt]*/);
}

void __fastcall TDesign::Open(BSTR FileName/*[in]*/, unsigned_long Flags/*[in,def,opt]*/)
{
  GetDefaultInterface()->Open(FileName/*[in]*/, Flags/*[in,def,opt]*/);
}

BSTR __fastcall TDesign::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TDesign::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TDesign::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TDesign::get_Enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDesign::set_Enabled(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_Enabled(pVal/*[in]*/);
}

BSTR __fastcall TDesign::get_NewControlType(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_NewControlType((BSTR*)&pVal));
  return pVal;
}

void __fastcall TDesign::set_NewControlType(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_NewControlType(pVal/*[in]*/);
}

unsigned_long __fastcall TDesign::get_NewControlCreationFlags(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_NewControlCreationFlags((unsigned_long*)&pVal));
  return pVal;
}

void __fastcall TDesign::set_NewControlCreationFlags(unsigned_long pVal/*[in]*/)
{
  GetDefaultInterface()->set_NewControlCreationFlags(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDesign::get_Properties(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Properties((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TDesign::get_ShowDetailsButton(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_ShowDetailsButton((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TDesign::set_ShowDetailsButton(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_ShowDetailsButton(pVal/*[in]*/);
}

LPDISPATCH __fastcall TDesign::get_References(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_References((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TDesign::set_OnActiveControlChange(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnActiveControlChange(Param1/*[in]*/);
}

void __fastcall TDesign::set_OnControlCreate(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnControlCreate(Param1/*[in]*/);
}

void __fastcall TDesign::set_OnDetailsButtonClick(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDetailsButtonClick(Param1/*[in]*/);
}

void __fastcall TDesign::set_OnDesignerAdd(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDesignerAdd(Param1/*[in]*/);
}

void __fastcall TDesign::set_OnDesignerRemove(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnDesignerRemove(Param1/*[in]*/);
}

IExecutorPtr& TExecutor::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TExecutor::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TExecutor::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TExecutor::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TExecutor::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TExecutor::ConnectTo(IExecutorPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TExecutor::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Executor;
  sd.IntfIID = __uuidof(IExecutor);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

void __fastcall TExecutor::AddEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->AddEventHandler(EventName, EventHandler/*[in]*/);
}

void __fastcall TExecutor::RemoveEventHandler(BSTR EventName, VARIANT EventHandler/*[in]*/)
{
  GetDefaultInterface()->RemoveEventHandler(EventName, EventHandler/*[in]*/);
}

VARIANT_BOOL __fastcall TExecutor::Execute(void)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->Execute((VARIANT_BOOL*)&Result));
  return Result;
}

VARIANT_BOOL __fastcall TExecutor::Wait(unsigned_long Timeout/*[in,def,opt]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->Wait(Timeout, (VARIANT_BOOL*)&Result));
  return Result;
}

VARIANT_BOOL __fastcall TExecutor::Terminate(unsigned_long ProcessExitCode/*[in,def,opt]*/)
{
  VARIANT_BOOL Result;
  OLECHECK(GetDefaultInterface()->Terminate(ProcessExitCode, (VARIANT_BOOL*)&Result));
  return Result;
}

BSTR __fastcall TExecutor::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Type((BSTR*)&pVal));
  return pVal;
}

VARIANT __fastcall TExecutor::get_UserData(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_UserData((VARIANT*)&pVal));
  return pVal;
}

void __fastcall TExecutor::set_UserData(VARIANT pVal/*[in]*/)
{
  GetDefaultInterface()->set_UserData(pVal/*[in]*/);
}

BSTR __fastcall TExecutor::get_ApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_ApplicationName((BSTR*)&pVal));
  return pVal;
}

void __fastcall TExecutor::set_ApplicationName(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_ApplicationName(pVal/*[in]*/);
}

BSTR __fastcall TExecutor::get_CommandLine(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_CommandLine((BSTR*)&pVal));
  return pVal;
}

void __fastcall TExecutor::set_CommandLine(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_CommandLine(pVal/*[in]*/);
}

unsigned_long __fastcall TExecutor::get_ExitCode(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ExitCode((unsigned_long*)&pVal));
  return pVal;
}

BSTR __fastcall TExecutor::get_IntegrityLevel(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_IntegrityLevel((BSTR*)&pVal));
  return pVal;
}

void __fastcall TExecutor::set_IntegrityLevel(BSTR pVal/*[in]*/)
{
  GetDefaultInterface()->set_IntegrityLevel(pVal/*[in]*/);
}

LPDISPATCH __fastcall TExecutor::get_Error(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Error((LPDISPATCH*)&pVal));
  return pVal;
}

void __fastcall TExecutor::set_OnComplete(VARIANT Param1/*[in]*/)
{
  GetDefaultInterface()->set_OnComplete(Param1/*[in]*/);
}

IControlExtendedPropertiesPtr& TControlExtendedProperties::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TControlExtendedProperties::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TControlExtendedProperties::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TControlExtendedProperties::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TControlExtendedProperties::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TControlExtendedProperties::ConnectTo(IControlExtendedPropertiesPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TControlExtendedProperties::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_ControlExtendedProperties;
  sd.IntfIID = __uuidof(IControlExtendedProperties);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

VARIANT_BOOL __fastcall TControlExtendedProperties::get_AllowLeftButtonDown(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowLeftButtonDown((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControlExtendedProperties::set_AllowLeftButtonDown(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowLeftButtonDown(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControlExtendedProperties::get_AllowRightButtonDown(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowRightButtonDown((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControlExtendedProperties::set_AllowRightButtonDown(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowRightButtonDown(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControlExtendedProperties::get_AllowMiddleButtonDown(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowMiddleButtonDown((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControlExtendedProperties::set_AllowMiddleButtonDown(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowMiddleButtonDown(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControlExtendedProperties::get_AllowLeftButtonDoubleClick(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowLeftButtonDoubleClick((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControlExtendedProperties::set_AllowLeftButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowLeftButtonDoubleClick(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControlExtendedProperties::get_AllowRightButtonDoubleClick(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowRightButtonDoubleClick((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControlExtendedProperties::set_AllowRightButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowRightButtonDoubleClick(pVal/*[in]*/);
}

VARIANT_BOOL __fastcall TControlExtendedProperties::get_AllowMiddleButtonDoubleClick(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_AllowMiddleButtonDoubleClick((VARIANT_BOOL*)&pVal));
  return pVal;
}

void __fastcall TControlExtendedProperties::set_AllowMiddleButtonDoubleClick(VARIANT_BOOL pVal/*[in]*/)
{
  GetDefaultInterface()->set_AllowMiddleButtonDoubleClick(pVal/*[in]*/);
}

IErrorPtr& TError::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TError::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TError::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TError::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TError::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TError::ConnectTo(IErrorPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TError::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_Error;
  sd.IntfIID = __uuidof(IError);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

unsigned_long __fastcall TError::get_Number(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Number((unsigned_long*)&pVal));
  return pVal;
}

BSTR __fastcall TError::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Description((BSTR*)&pVal));
  return pVal;
}

BSTR __fastcall TError::get_Comment(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Comment((BSTR*)&pVal));
  return pVal;
}

IPropertyInformationPtr& TPropertyInformation::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TPropertyInformation::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TPropertyInformation::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TPropertyInformation::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TPropertyInformation::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TPropertyInformation::ConnectTo(IPropertyInformationPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TPropertyInformation::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_PropertyInformation;
  sd.IntfIID = __uuidof(IPropertyInformation);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

LPUNKNOWN __fastcall TPropertyInformation::get__NewEnum(void)
{
  LPUNKNOWN pUnk;
  OLECHECK(GetDefaultInterface()->get__NewEnum((LPUNKNOWN*)&pUnk));
  return pUnk;
}

VARIANT __fastcall TPropertyInformation::get_Item(long Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(GetDefaultInterface()->get_Item(Index, (VARIANT*)&pvar));
  return pvar;
}

long __fastcall TPropertyInformation::get_Count(void)
{
  long pcount;
  OLECHECK(GetDefaultInterface()->get_Count((long*)&pcount));
  return pcount;
}

BSTR __fastcall TPropertyInformation::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_Text((BSTR*)&pVal));
  return pVal;
}

unsigned_long __fastcall TPropertyInformation::get_Type(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Type((unsigned_long*)&pVal));
  return pVal;
}

unsigned_long __fastcall TPropertyInformation::get_ExType(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_ExType((unsigned_long*)&pVal));
  return pVal;
}

VARIANT __fastcall TPropertyInformation::get_DesignDefault(void)
{
  VARIANT pVal;
  OLECHECK(GetDefaultInterface()->get_DesignDefault((VARIANT*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPropertyInformation::get_SymbolicValues(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_SymbolicValues((LPDISPATCH*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPropertyInformation::get_Combination(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_Combination((VARIANT_BOOL*)&pVal));
  return pVal;
}

unsigned_long __fastcall TPropertyInformation::get_Priority(void)
{
  unsigned_long pVal;
  OLECHECK(GetDefaultInterface()->get_Priority((unsigned_long*)&pVal));
  return pVal;
}

BSTR __fastcall TPropertyInformation::get_DefaultValueAsString(void)
{
  BSTR pVal = 0;
  OLECHECK(GetDefaultInterface()->get_DefaultValueAsString((BSTR*)&pVal));
  return pVal;
}

VARIANT_BOOL __fastcall TPropertyInformation::get_DesignReadOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(GetDefaultInterface()->get_DesignReadOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

LPDISPATCH __fastcall TPropertyInformation::get_Options(void)
{
  LPDISPATCH pVal;
  OLECHECK(GetDefaultInterface()->get_Options((LPDISPATCH*)&pVal));
  return pVal;
}

IFileManagerPtr& TFileManager::GetDefaultInterface()
{
  if (!m_DefaultIntf)
    Connect();
  return m_DefaultIntf;
}

_di_IUnknown __fastcall TFileManager::GetDunk()
{
  _di_IUnknown diUnk;
  if (m_DefaultIntf) {
    IUnknownPtr punk = m_DefaultIntf;
    diUnk = LPUNKNOWN(punk);
  }
  return diUnk;
}

void __fastcall TFileManager::Connect()
{
  if (!m_DefaultIntf) {
    _di_IUnknown punk = GetServer();
    m_DefaultIntf = punk;
    if (ServerData->EventIID != GUID_NULL)
      ConnectEvents(GetDunk());
  }
}

void __fastcall TFileManager::Disconnect()
{
  if (m_DefaultIntf) {

    if (ServerData->EventIID != GUID_NULL)
      DisconnectEvents(GetDunk());
    m_DefaultIntf.Reset();
  }
}

void __fastcall TFileManager::BeforeDestruction()
{
  Disconnect();
}

void __fastcall TFileManager::ConnectTo(IFileManagerPtr intf)
{
  Disconnect();
  m_DefaultIntf = intf;
  if (ServerData->EventIID != GUID_NULL)
    ConnectEvents(GetDunk());
}

void __fastcall TFileManager::InitServerData()
{
  static Vcl::Oleserver::TServerData sd;
  sd.ClassID = CLSID_FileManager;
  sd.IntfIID = __uuidof(IFileManager);
  sd.EventIID= GUID_NULL;
  ServerData = &sd;
}

BSTR __fastcall TFileManager::GetRelativeFileName(BSTR BaseAbsolutePath/*[in]*/, BSTR Path/*[in]*/)
{
  BSTR Result = 0;
  OLECHECK(GetDefaultInterface()->GetRelativeFileName(BaseAbsolutePath, Path, (BSTR*)&Result));
  return Result;
}

BSTR __fastcall TFileManager::GetCanonicalFileName(BSTR Path/*[in]*/, 
                                                   VARIANT_BOOL ShortNames/*[in,def,opt]*/)
{
  BSTR Result = 0;
  OLECHECK(GetDefaultInterface()->GetCanonicalFileName(Path, ShortNames, (BSTR*)&Result));
  return Result;
}

BSTR __fastcall TFileManager::GetCurrentDirectory(void)
{
  BSTR Result = 0;
  OLECHECK(GetDefaultInterface()->GetCurrentDirectory((BSTR*)&Result));
  return Result;
}

BSTR __fastcall TFileManager::NPath(BSTR Path/*[in]*/)
{
  BSTR Result = 0;
  OLECHECK(GetDefaultInterface()->NPath(Path, (BSTR*)&Result));
  return Result;
}

BSTR __fastcall TFileManager::DPath(BSTR Path/*[in]*/)
{
  BSTR Result = 0;
  OLECHECK(GetDefaultInterface()->DPath(Path, (BSTR*)&Result));
  return Result;
}


};     // namespace Wsolib_tlb


// *********************************************************************//
// The Register function is invoked by the IDE when this module is 
// installed in a Package. It provides the list of Components (including
// OCXes) implemented by this module. The following implementation
// informs the IDE of the OCX proxy classes implemented here.
// *********************************************************************//
namespace Wsolib_ocx
{

void __fastcall PACKAGE Register()
{
  // [1]
  System::Classes::TComponentClass cls_ocx[] = {
                              __classid(Wsolib_tlb::TWindowSystemControl)
                           };
  System::Classes::RegisterComponents("ActiveX", cls_ocx,
                     sizeof(cls_ocx)/sizeof(cls_ocx[0])-1);
  // [108]
  System::Classes::TComponentClass cls_svr[] = {
                              __classid(Wsolib_tlb::TWindowSystemObject), 
                              __classid(Wsolib_tlb::TVersion), 
                              __classid(Wsolib_tlb::TControl), 
                              __classid(Wsolib_tlb::TFrame), 
                              __classid(Wsolib_tlb::TForm), 
                              __classid(Wsolib_tlb::TCollection), 
                              __classid(Wsolib_tlb::TStringCollection), 
                              __classid(Wsolib_tlb::TImageList), 
                              __classid(Wsolib_tlb::TPen), 
                              __classid(Wsolib_tlb::TBrush), 
                              __classid(Wsolib_tlb::TFont), 
                              __classid(Wsolib_tlb::TAction), 
                              __classid(Wsolib_tlb::TListControlItem), 
                              __classid(Wsolib_tlb::TListBox), 
                              __classid(Wsolib_tlb::TComboBox), 
                              __classid(Wsolib_tlb::TEdit), 
                              __classid(Wsolib_tlb::TButton), 
                              __classid(Wsolib_tlb::TCheckBox), 
                              __classid(Wsolib_tlb::TRadioButton), 
                              __classid(Wsolib_tlb::TStatusItem), 
                              __classid(Wsolib_tlb::TStatusBar), 
                              __classid(Wsolib_tlb::TProgressBar), 
                              __classid(Wsolib_tlb::TScrollBar), 
                              __classid(Wsolib_tlb::TTab), 
                              __classid(Wsolib_tlb::TTabControl), 
                              __classid(Wsolib_tlb::TPageControl), 
                              __classid(Wsolib_tlb::TToolBar), 
                              __classid(Wsolib_tlb::TMenuBar), 
                              __classid(Wsolib_tlb::TReBarBand), 
                              __classid(Wsolib_tlb::TReBar), 
                              __classid(Wsolib_tlb::THyperLink), 
                              __classid(Wsolib_tlb::TPager), 
                              __classid(Wsolib_tlb::TCOMConnectionPoint), 
                              __classid(Wsolib_tlb::TCOMEvents), 
                              __classid(Wsolib_tlb::TActiveXControl), 
                              __classid(Wsolib_tlb::THeaderItem), 
                              __classid(Wsolib_tlb::THeader), 
                              __classid(Wsolib_tlb::TListSubItem), 
                              __classid(Wsolib_tlb::TListItem), 
                              __classid(Wsolib_tlb::TListViewColumns), 
                              __classid(Wsolib_tlb::TWorkArea), 
                              __classid(Wsolib_tlb::TWorkAreas), 
                              __classid(Wsolib_tlb::TListViewGroup), 
                              __classid(Wsolib_tlb::TListViewGroups), 
                              __classid(Wsolib_tlb::TListView), 
                              __classid(Wsolib_tlb::TTreeItem), 
                              __classid(Wsolib_tlb::TTreeView), 
                              __classid(Wsolib_tlb::TParagraph), 
                              __classid(Wsolib_tlb::TRichEdit), 
                              __classid(Wsolib_tlb::TUpDown), 
                              __classid(Wsolib_tlb::TTrackBar), 
                              __classid(Wsolib_tlb::THotKey), 
                              __classid(Wsolib_tlb::TAnimate), 
                              __classid(Wsolib_tlb::TIPAddress), 
                              __classid(Wsolib_tlb::TDateTime), 
                              __classid(Wsolib_tlb::TDateTimePicker), 
                              __classid(Wsolib_tlb::TCalendar), 
                              __classid(Wsolib_tlb::TSplitter), 
                              __classid(Wsolib_tlb::TSplitPanel), 
                              __classid(Wsolib_tlb::TPolygonGraphic), 
                              __classid(Wsolib_tlb::TImageGraphic), 
                              __classid(Wsolib_tlb::TLineGraphic), 
                              __classid(Wsolib_tlb::TPrintDialogBase), 
                              __classid(Wsolib_tlb::TPrintDialog), 
                              __classid(Wsolib_tlb::TPageSetupDialog), 
                              __classid(Wsolib_tlb::TFindReplaceDialog), 
                              __classid(Wsolib_tlb::TFontDialog), 
                              __classid(Wsolib_tlb::TColorDialog), 
                              __classid(Wsolib_tlb::TFileOpenSaveDialog), 
                              __classid(Wsolib_tlb::TSelectFolderDialog), 
                              __classid(Wsolib_tlb::TTimer), 
                              __classid(Wsolib_tlb::TResult), 
                              __classid(Wsolib_tlb::TTrayIcon), 
                              __classid(Wsolib_tlb::TRegions), 
                              __classid(Wsolib_tlb::TRegion), 
                              __classid(Wsolib_tlb::TScreen), 
                              __classid(Wsolib_tlb::THint), 
                              __classid(Wsolib_tlb::TEventHandler), 
                              __classid(Wsolib_tlb::TWindowSystemObjectExtensions), 
                              __classid(Wsolib_tlb::TPrintInfo), 
                              __classid(Wsolib_tlb::TStdDispatch), 
                              __classid(Wsolib_tlb::TBalloonTip), 
                              __classid(Wsolib_tlb::TWindow), 
                              __classid(Wsolib_tlb::TClipboard), 
                              __classid(Wsolib_tlb::TTaskBar), 
                              __classid(Wsolib_tlb::TResourceUsageGraph), 
                              __classid(Wsolib_tlb::TProperty), 
                              __classid(Wsolib_tlb::TPropertyGrid), 
                              __classid(Wsolib_tlb::TConsole), 
                              __classid(Wsolib_tlb::TDocking), 
                              __classid(Wsolib_tlb::TGraphicElement), 
                              __classid(Wsolib_tlb::TBeginDockContext), 
                              __classid(Wsolib_tlb::TDockControlCreateContext), 
                              __classid(Wsolib_tlb::TUndockContext), 
                              __classid(Wsolib_tlb::TColor), 
                              __classid(Wsolib_tlb::TLayering), 
                              __classid(Wsolib_tlb::TMessageDialog), 
                              __classid(Wsolib_tlb::TTaskDialog), 
                              __classid(Wsolib_tlb::TIcon), 
                              __classid(Wsolib_tlb::TRect), 
                              __classid(Wsolib_tlb::TIconBuilder), 
                              __classid(Wsolib_tlb::TDesignReference), 
                              __classid(Wsolib_tlb::TDesign), 
                              __classid(Wsolib_tlb::TExecutor), 
                              __classid(Wsolib_tlb::TControlExtendedProperties), 
                              __classid(Wsolib_tlb::TError), 
                              __classid(Wsolib_tlb::TPropertyInformation), 
                              __classid(Wsolib_tlb::TFileManager)
                           };
  System::Classes::RegisterComponents("Servers", cls_svr,
                     sizeof(cls_svr)/sizeof(cls_svr[0])-1);
}

};     // namespace Wsolib_ocx
